/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:25:52 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (long) (-627));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Pipe pipe0 = new Pipe(3084L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)10;
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = 3196L;
      Pipe pipe0 = new Pipe(3196L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      Buffer buffer1 = buffer0.writeUtf8(":6N");
      buffer1.readByteArray();
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(3154L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString(0L);
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.require((-72057594037927936L));
      Buffer buffer1 = buffer0.buffer();
      ByteString byteString0 = hashingSource0.hash();
      buffer1.write(byteString0);
      // Undeclared exception!
      try { 
        buffer1.writeAll(hashingSource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("&gZD");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.indexOf(byteString0, 100000L);
      buffer1.readAll(buffer0);
      buffer0.writeDecimalLong(0L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Pipe pipe0 = new Pipe(2136L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("endIndex > length(", 2147221407, 2147221407);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2147221407 > 18
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.outputStream();
      realBufferedSink0.buffer.sha512();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeIntLe((-2145015274));
      Charset.defaultCharset();
      buffer0.readIntLe();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte) (-1);
      buffer0.toString();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString(".outputStream()", 5, (-2712), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2712 < 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-32), (long) (byte) (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-32 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(687);
      buffer0.writableSegment(1334);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((byte) (-110));
      buffer1.writeLongLe(2214L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1000000000L);
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (-734L));
      buffer0.readInt();
      Integer integer0 = new Integer(862075233);
      buffer2.sha1();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1000000000L);
      buffer1.write((Source) buffer0, (-739L));
      buffer0.readInt();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(862075233);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 33623961
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      long long0 = 2930L;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.indexOf((byte)21, (long) (byte)21);
      buffer0.segmentSizes();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.outputStream();
      buffer1.readByteString();
      buffer1.clear();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      buffer1.request(9988L);
      // Undeclared exception!
      try { 
        buffer0.snapshot(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999971L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(999999971L);
      pipe0.sourceClosed = true;
      buffer1.write((Source) buffer0, (-751L));
      buffer1.readHexadecimalUnsignedLong();
      try { 
        buffer0.require(999999971L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.buffer();
      String string0 = "size > Integer.MAX_VALUE: ";
      int int0 = 1007;
      int int1 = 240;
      // Undeclared exception!
      try { 
        Charset.forName("size > Integer.MAX_VALUE: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // size > Integer.MAX_VALUE: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Pipe pipe0 = new Pipe(3209L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(3209L);
      byte[] byteArray0 = new byte[0];
      buffer2.read(byteArray0);
      buffer0.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-751L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -751
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.md5(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(295488L);
      byte[] byteArray0 = new byte[0];
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.read(byteArray0, 255, 1782);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=255 byteCount=1782
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      try { 
        buffer1.skip(3698L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.buffer.writeDecimalLong((-432L));
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSink0.buffer.equals(buffer2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(16L);
      buffer0.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(20L);
      buffer_UnsafeCursor0.buffer.inputStream();
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.offset = 20L;
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      Segment segment0 = buffer0.head;
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.require((-72057594037927936L));
      Buffer buffer1 = buffer0.buffer();
      buffer1.writeAll(hashingSource0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((Source) null, 1000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      try { 
        buffer0.write((Source) hashingSource0, 238144L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(2458L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.buffer();
      buffer1.sha256();
      buffer0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      // Undeclared exception!
      try { 
        buffer0.readByteString(71776119061217280L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=71776119061217280
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2803L);
      buffer1.readByte();
      buffer1.readByte();
      buffer0.readHexadecimalUnsignedLong();
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.read(buffer_UnsafeCursor0.buffer, 6L);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((byte)0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writableSegment((byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer1.equals(buffer1);
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("abqiN6", (-2079), 1118);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2079
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      String string0 = null;
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString((String) null, (-193), (int) (byte)0, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeDecimalLong((-2071L));
      Integer integer0 = new Integer(240);
      Object object0 = new Object();
      Charset.defaultCharset();
      buffer0.snapshot();
      Buffer buffer2 = new Buffer();
      realBufferedSink0.buffer();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      SegmentPool.byteCount = 71776119061217280L;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readString((long) 299, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=299
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Pipe pipe0 = new Pipe(3206L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8(":6Nbk");
      buffer1.indexOf((byte) (-81), 3206L);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1717986918);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 66666666
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1244L);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0);
      buffer0.readUtf8Line();
      Buffer buffer1 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      HashingSource.sha1(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)1);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.buffer();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=00\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.hashCode();
      realBufferedSource0.buffer.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.snapshot((-4492));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-4492
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals(1L, byteString0, (int) (byte)0, 391);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals(115264L, byteString0, (int) (byte) (-1), (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      pipe0.sinkClosed = false;
      pipe0.sinkClosed = false;
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.read(buffer_UnsafeCursor0.buffer, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer0 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[19];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("string == null", 1824, 1824, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1824 > 14
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      int int0 = (-2824);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("D4", (-2824), 84, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -2824
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pipe pipe0 = new Pipe(3206L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha512();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.inputStream();
      buffer0.indexOfElement(byteString0, (long) (byte)13);
      buffer0.writeShort(231);
      // Undeclared exception!
      try { 
        Charset.forName("size=%s offset=%s byteCount=%s");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // size=%s offset=%s byteCount=%s
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)3;
      byteArray0[3] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer0.hmacSha1(byteString1);
      Buffer buffer1 = buffer0.writeIntLe((-2835));
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(4L);
      MockFile mockFile0 = new MockFile("38:UF[a}j%", "38:UF[a}j%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) mockFileOutputStream0, 4L, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=4 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":6N", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeLong((byte) (-104));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockFileOutputStream0);
      Buffer buffer2 = new Buffer();
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0);
      byteString0.base64();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer0.readShortLe();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1000000000L);
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (-734L));
      buffer0.readInt();
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x63
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-91);
      Buffer buffer1 = buffer0.writeDecimalLong((byte) (-91));
      buffer0.sha512();
      buffer1.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) (byte) (-91));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-91
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, 25L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999978L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("{nc");
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.sha1(buffer0);
      int int0 = 1114112;
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      hashingSink0.hash();
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Pipe pipe0 = new Pipe(3193L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      Buffer buffer1 = buffer0.writeUtf8(":6N");
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      HashingSource.hmacSha1(buffer1, byteString0);
      byte[] byteArray1 = new byte[7];
      pipe0.sinkClosed = false;
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      Integer integer0 = new Integer((-1));
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(":6N", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeInt(1976);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233720368547758L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer0 = pipe0.buffer;
      realBufferedSink1.writeLong(92233720368547758L);
      realBufferedSink0.buffer.readAll(sink0);
      realBufferedSink0.buffer.writeDecimalLong(92233720368547758L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      try { 
        buffer1.write((Source) realBufferedSink0.buffer, 92233720368547758L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(668L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)0);
      buffer1.write((Source) buffer0, (long) (byte) (-81));
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      try { 
        buffer1.readUtf8LineStrict(100L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      HashingSource.sha256(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.base64();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      ByteString byteString1 = new ByteString((byte[]) null);
      ByteString byteString2 = byteString0.sha512();
      HashingSink.hmacSha512(hashingSink0, byteString2);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        byteString1.hex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      buffer0.request(9988L);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(buffer_UnsafeCursor0.buffer, byteString0);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeString("Y7ih2a)g?tLT", charset0);
      buffer1.readUtf8CodePoint();
      buffer_UnsafeCursor0.buffer.rangeEquals((long) (-1), byteString0, 64, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.writeHexadecimalUnsignedLong(1000000000L);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha1(byteString0);
      buffer0.readInt();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x63
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(3209L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0, 3209L);
      byteArray0[2] = (byte)0;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer0.toString();
      buffer0.indexOf((byte)0, 3209L);
      Segment segment0 = new Segment(byteArray0, (byte)0, 2, false, false);
      segment0.limit = 2;
      SegmentPool.next = segment0;
      pipe0.sourceClosed = false;
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      options0.toArray((Object[]) byteStringArray0);
      buffer0.select(options0);
      Integer integer0 = new Integer(2);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(3372);
      buffer2.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000015L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readByteArray();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      Segment segment0 = buffer0.writableSegment(306);
      SegmentPool.next = segment0;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(306);
      HashingSource hashingSource1 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      hashingSource1.hash();
      buffer_UnsafeCursor0.resizeBuffer(306);
      hashingSink0.toString();
      hashingSink0.hash();
      HashingSink.sha512(hashingSink0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byteCount > Integer.MAX_VALUE: ");
      long long0 = 295488L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(295488L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      HashingSink.sha512(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.start = 2248;
      buffer_UnsafeCursor0.resizeBuffer(20L);
      buffer_UnsafeCursor0.buffer.inputStream();
      ByteString byteString0 = new ByteString((byte[]) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer_UnsafeCursor0.offset = 20L;
      buffer_UnsafeCursor0.buffer.readInt();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null, 113, 2147481500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1000000000L);
      long long0 = (-739L);
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (-739L));
      buffer0.readInt();
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      buffer2.readString((Charset) uS_ASCII0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      hashingSink0.hash();
      Segment segment0 = buffer0.writableSegment(53);
      segment0.unsharedCopy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+r");
      buffer0.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("{nc");
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      HashingSource.hmacSha1(buffer1, byteString0);
      HashingSource.md5(hashingSource0);
      buffer0.indexOf(byteString0);
      HashingSink.sha512(buffer1);
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)84;
      buffer1.write(byteArray0);
      buffer1.readUtf8Line(2L);
      buffer0.read(buffer1, 3420L);
      buffer1.exhausted();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-39);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte)0);
      buffer1.readUtf8((long) (byte)0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      realBufferedSink0.buffer.request(0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      inflaterSource0.refill();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      buffer0.indexOf((byte) (-1), 2930L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte) (-1));
      buffer0.readUtf8CodePoint();
      Charset.defaultCharset();
      Buffer buffer2 = new Buffer();
      buffer1.readUnsafe();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233720368547758L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      ByteString[] byteStringArray0 = new ByteString[6];
      Options.of(byteStringArray0);
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(3206L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      HashingSource.md5(buffer0);
      buffer0.indexOf(byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      hashingSink0.hash();
      byteString0.sha512();
      HashingSink.hmacSha512(hashingSink0, byteString1);
      ByteString byteString2 = hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer.writeDecimalLong((-432L));
      Buffer buffer2 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.writeUtf8CodePoint((byte) (-54));
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffca)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Pipe pipe0 = new Pipe((byte)53);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)84;
      Buffer buffer1 = buffer0.write(byteArray0);
      Buffer buffer2 = buffer0.writeUtf8("");
      buffer0.toString();
      buffer1.indexOf((byte) (-49), 109L);
      buffer2.inputStream();
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.writeString("[hex=e95435643554]", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      byteString0.base64();
      buffer0.writeUtf8CodePoint(65280);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        Charset.forName("1B2M2Y8AsgTpgAmY7PhCfg==");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 1B2M2Y8AsgTpgAmY7PhCfg==
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233720368547760L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.writeDecimalLong(92233720368547760L);
      realBufferedSink0.buffer.readAll(pipe_PipeSink0);
      realBufferedSink0.buffer.writeDecimalLong(92233720368547760L);
      realBufferedSink0.toString();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("buffer(okio.Pipe$PipeSink@8)");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5%j/?~zA}O");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.writableSegment(2147472757);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999971L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8(":6N");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      HashingSource.hmacSha1(buffer0, byteString0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x,");
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((byte)71);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer2.readInt();
      MockFile mockFile0 = new MockFile(":6N", "data == null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      buffer1.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(747L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(747L);
      buffer1.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer1.rangeEquals((-1430L), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Pipe pipe0 = new Pipe(3193L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      Buffer buffer1 = buffer0.writeUtf8(":6NN");
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(1935L);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer2.readInt();
      buffer1.readDecimalLong();
      hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      HashingSink.sha256(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(buffer2);
      hashingSink0.timeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2361L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOfElement(byteString0);
      buffer0.inputStream();
      buffer1.indexOfElement(byteString0, 2950L);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999971L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8(":6N");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      HashingSource.hmacSha1(buffer0, byteString0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x,");
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((byte)71);
      ByteString byteString2 = new ByteString(byteArray0);
      buffer2.readInt();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      buffer2.indexOfElement(byteString1);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      buffer0.timeout();
      buffer0.sha256();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(4L);
      MockFile mockFile0 = new MockFile("38:UF[a}j%", "-39gRYI?A");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-6L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      buffer0.readUtf8CodePoint();
      Buffer buffer1 = new Buffer();
      HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      hashingSource0.hash();
      try { 
        buffer0.readUtf8LineStrict(5L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=5 content=0000000000000000000000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Pipe pipe0 = new Pipe(3209L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      buffer0.writeUtf8CodePoint(56319);
      buffer0.readUtf8CodePoint();
      int int0 = ObjectStreamConstants.baseWireHandle;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.require(918383119L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.sha512();
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.writeUtf8CodePoint((byte) (-93));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.inputStream();
      buffer0.completeSegmentByteCount();
      buffer0.indexOf((byte) (-93));
      realBufferedSink0.toString();
      buffer1.skip((byte) (-93));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\r");
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer_UnsafeCursor0.buffer, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pipe pipe0 = new Pipe(3206L);
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.flush();
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(2);
      hashingSource0.hash();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      byteString0.sha256();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      buffer1.indexOf(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(3206L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      ByteString byteString0 = buffer0.sha1();
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      buffer0.indexOf(byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      pipe0.sourceClosed = true;
      hashingSink0.flush();
      ByteString byteString2 = hashingSink0.hash();
      hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(741L);
      ByteString byteString3 = new ByteString((byte[]) null);
      byteString0.sha512();
      HashingSink.hmacSha512(hashingSink0, byteString2);
      hashingSink0.hash();
      buffer_UnsafeCursor0.resizeBuffer(233L);
      buffer0.readShortLe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      hashingSink0.hash();
      hashingSource0.hash();
      buffer_UnsafeCursor0.buffer.exhausted();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(3203L);
      boolean boolean0 = pipe0.sourceClosed;
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0, 3203L);
      byteArray0[2] = (byte)0;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer0.toString();
      buffer0.indexOf((byte)0, 3203L);
      buffer1.inputStream();
      buffer1.writeShortLe(10);
      buffer0.readUtf8LineStrict();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.outputStream();
      ByteString byteString1 = new ByteString(byteArray0);
      realBufferedSink0.buffer.hashCode();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", "OLQL>DXbDkrqz]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"OLQL>DXbDkrqz]\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(3203L);
      Buffer buffer0 = pipe0.buffer;
      String string0 = ":6N";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)53;
      Buffer buffer1 = buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.writeString(":6N", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = 3196L;
      Pipe pipe0 = new Pipe(3196L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      buffer0.writeUtf8(":6N");
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = pipe0.buffer;
      buffer0.readByte();
      buffer0.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, (-200L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      byteString0.base64();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65280);
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer0.writeDecimalLong(10000000000000000L);
      // Undeclared exception!
      try { 
        buffer0.readByteString((-2364L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=17 offset=0 byteCount=-2364
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeDecimalLong((-9223372036854775789L));
      buffer1.writeUtf8("y^oz");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      HashingSource.sha1(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)1);
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = buffer1.writeLong((byte)1);
      buffer2.writeShort((byte)1);
      buffer2.readInt();
      // Undeclared exception!
      try { 
        Charset.forName("1>!MOy$Fi[/X%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 1>!MOy$Fi[/X%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      byteString0.base64();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(20L);
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.indexOf((byte)27, 1351L);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HashingSource.md5(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.readLongLe();
      buffer0.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(33L);
      buffer1.writeLongLe(16L);
      buffer0.hashCode();
      int int0 = 192;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 192, 192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      int int0 = 65280;
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "beginIndex < 0: ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.equals(buffer1);
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      hashingSink0.flush();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = buffer0.readByteArray();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      buffer0.writeDecimalLong(1999L);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.base64();
      hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = buffer0.writeString("bn!mY", charset0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer2.readHexadecimalUnsignedLong();
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.toString();
      buffer1.indexOf((byte) (-58), 922337L);
      buffer1.readByte();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000015L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = buffer0.readByteArray();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      ByteString byteString0 = hashingSink0.hash();
      hashingSink0.close();
      Segment segment0 = buffer0.writableSegment(306);
      SegmentPool.next = segment0;
      HashingSink.hmacSha256(buffer0, byteString0);
      Buffer buffer1 = buffer0.write(byteArray0);
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)34, (long) 306, (long) (byte)34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=306 toIndex=34
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      buffer0.readByteArray();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(buffer1, byteString0);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.writeString("{&{CR", charset0);
      buffer1.readUtf8CodePoint();
      buffer1.rangeEquals((long) (byte)0, (ByteString) null, 884, (-2563));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2803L);
      buffer1.readByte();
      buffer0.readHexadecimalUnsignedLong();
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "source exhausted prematurely");
      Buffer buffer1 = pipe0.buffer;
      buffer0.segmentSizes();
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233720368547751L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(991807L);
      buffer0.sha512();
      buffer1.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer0.readByteString((-1594L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1594
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pipe pipe0 = new Pipe(3206L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(92233L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)8;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        buffer2.write(byteArray0, 2166, 2013);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=2166 byteCount=2013
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals((-2385L), byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        buffer0.readFrom(inputStream0, 10L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(3154L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      buffer0.writeUtf8(":");
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = new Buffer();
      buffer0.readByte();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      byteString0.hex();
      byteString0.base64();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(20L);
      InputStream inputStream0 = buffer0.inputStream();
      ByteString byteString1 = new ByteString((byte[]) null);
      hashingSource0.hash();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, 62);
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) bufferedInputStream0, (long) 62);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(3154L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      buffer0.writeUtf8(":6N");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = new Buffer();
      buffer0.readByte();
      buffer0.readShort();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = buffer0.readByteArray();
      byteArray0[0] = (byte)34;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      hashingSink0.hash();
      buffer0.write(byteArray1);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeString("bn!mY", charset0);
      buffer1.indexOf(byteString0, 8L);
      buffer1.readUtf8CodePoint();
      buffer0.sha1();
      // Undeclared exception!
      try { 
        buffer1.read(byteArray1, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=34 byteCount=34
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Pipe pipe0 = new Pipe(3154L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      Buffer buffer1 = buffer0.writeUtf8(":6N");
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = new Buffer();
      buffer0.readByte();
      buffer0.readHexadecimalUnsignedLong();
      buffer2.writeLongLe((byte)58);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer2.readLongLe();
      realBufferedSink0.emit();
      Segment segment0 = buffer2.head;
      buffer1.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233720368547751L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer0 = realBufferedSink1.buffer.writeDecimalLong(1000000027L);
      buffer0.readIntLe();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233720368547758L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      pipe0.sinkClosed = true;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.writeLong(999999998L);
      Buffer buffer0 = realBufferedSink2.buffer.writeDecimalLong(999999998L);
      Buffer buffer1 = buffer0.clone();
      buffer1.readIntLe();
      Integer integer0 = new Integer((-3379));
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.writeString("bn!mY", charset0);
      buffer0.readUtf8CodePoint();
      realBufferedSink0.buffer.rangeEquals(92233720368547758L, (ByteString) null, (-2147483644), 5);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000015L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = buffer0.readByteArray();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      ByteString byteString0 = hashingSink0.hash();
      Segment segment0 = buffer0.writableSegment(306);
      SegmentPool.next = segment0;
      HashingSink.hmacSha256(buffer0, byteString0);
      Buffer buffer1 = buffer0.write(byteArray0);
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.rangeEquals((long) (byte)0, byteString0, 884, (int) (byte)0);
      buffer1.md5();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 1000000000L;
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("{nc");
      byte[] byteArray0 = new byte[1];
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      HashingSink.hmacSha512(buffer1, byteString0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(1114111);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[4] = byteString0;
      byteString1.lastIndexOf(byteArray0);
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      byteString0.indexOf(byteString1, 1114111);
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer0.readUtf8CodePoint();
      Buffer buffer1 = new Buffer();
      HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Pipe pipe0 = new Pipe(3206L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8(":6N:~");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(buffer_UnsafeCursor1.data);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      realBufferedSink0.writeByte(2);
      realBufferedSink1.toString();
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.writeDecimalLong(5);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer1.readUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor2.buffer;
      hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.resizeBuffer(3206L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "beginIndex < 0: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(1114111);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      try { 
        realBufferedSource0.readByteString(1982L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233720368547758L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HashingSink.sha512(realBufferedSink0);
      // Undeclared exception!
      try { 
        sink0.write((Buffer) null, 2037L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Pipe pipe0 = new Pipe(65280L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(65280L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=65280 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        buffer1.readFrom(inputStream0, (-922L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -922
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.sha256();
      Buffer buffer3 = buffer1.writeUtf8CodePoint((-2145015274));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      OutputStream outputStream0 = realBufferedSink1.outputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      realBufferedSink1.buffer.writeTo(outputStream0);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      buffer3.size();
      Buffer buffer4 = realBufferedSink1.buffer;
      // Undeclared exception!
      try { 
        buffer4.snapshot(65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=65
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Pipe pipe0 = new Pipe(3203L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      buffer0.write(byteArray0);
      Buffer buffer1 = buffer0.writeUtf8(":6N");
      int int0 = ObjectStreamConstants.baseWireHandle;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer1.writeTo((OutputStream) pipedOutputStream0, (long) 6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("{nc");
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink.hmacSha512(buffer1, byteString0);
      ByteString[] byteStringArray0 = new ByteString[14];
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      boolean boolean0 = pipe0.sourceClosed;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      Buffer buffer2 = new Buffer();
      buffer2.md5();
      realBufferedSink0.buffer.readUtf8Line();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{nc");
      Locale locale0 = Locale.CHINA;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", (Object[]) byteStringArray0);
      buffer1.writeTo((OutputStream) printStream0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(20L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      hashingSource0.hash();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer_UnsafeCursor0.offset = 20L;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 57);
      buffer0.readFrom((InputStream) bufferedInputStream0, 0L);
      // Undeclared exception!
      try { 
        Charset.forName("v2#v,NY_8 bU");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // v2#v,NY_8 bU
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Segment segment0 = new Segment();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Integer integer0 = new Integer(360);
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(3);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 11, 360);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000015L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = buffer0.readByteArray();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.writableSegment(306);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(1152L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = pipe0.sourceClosed;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      buffer0.writableSegment(99);
      Segment segment0 = buffer0.head;
      buffer0.readAll(hashingSink0);
      buffer0.writeDecimalLong(92233720L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      realBufferedSink0.toString();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("7,V7U>9H");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999998L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      pipe0.sinkClosed = false;
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(999999998L);
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-751L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=-751
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      HashingSource.sha1(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)1);
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = buffer1.writeLong((byte)1);
      buffer2.inputStream();
      buffer0.writeShortLe((byte)1);
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      long long0 = new Integer((byte)1);
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer2.readShort();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer0.indexOf((byte)127);
      buffer3.readUnsafe();
      buffer1.hashCode();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Pipe pipe0 = new Pipe(3206L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[22];
      byteArray0[3] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      ByteString byteString0 = buffer0.sha1();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource.md5(buffer0);
      buffer0.indexOf(byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(741L);
      ByteString byteString2 = new ByteString((byte[]) null);
      byteString0.sha512();
      HashingSink.hmacSha512(hashingSink0, byteString1);
      ByteString byteString3 = hashingSink0.hash();
      byteString3.indexOf(byteString0, (-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      long long0 = 233L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((byte) (-81));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-81 > size=741
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000010L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("9v]sm Xf\"=NQk;^");
      byte[] byteArray0 = new byte[1];
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      byteString0.toString();
      Charset.defaultCharset();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink1.writeString("[hex=00]", charset0);
      HashingSink.sha1(realBufferedSink0);
      buffer1.indexOfElement(byteString0, (long) (byte)13);
      HashingSource.hmacSha256(realBufferedSink0.buffer, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      byteString0.toString();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.utf8();
      byteString0.base64();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(20L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZB\"q&3l.DR~dxj;L`3");
      ByteString byteString1 = new ByteString((byte[]) null);
      hashingSource0.hash();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer_UnsafeCursor0.offset = 20L;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Pipe pipe0 = new Pipe(3203L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      Buffer buffer1 = buffer0.write(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write(buffer0, 1L);
      buffer1.size();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      byte[] byteArray1 = buffer0.readByteArray();
      ByteString byteString0 = new ByteString(byteArray1);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      Buffer buffer2 = new Buffer();
      buffer1.md5();
      buffer1.readUtf8Line();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      int int0 = 99;
      Segment segment0 = buffer0.writableSegment(99);
      Segment segment1 = new Segment();
      segment0.unsharedCopy();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOf(byteString0);
      Buffer buffer2 = buffer1.clone();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HashingSink hashingSink1 = HashingSink.sha1(buffer2);
      realBufferedSource0.buffer.writeDecimalLong((-922337203685477580L));
      hashingSink1.hash();
      buffer0.hmacSha1(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer2.snapshot();
      buffer_UnsafeCursor0.next();
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5%j/?~zA}O");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString0 = buffer2.sha256();
      Buffer buffer3 = buffer1.writeUtf8CodePoint((-2145015274));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer3.indexOf(byteString0, (long) 1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-2145015274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -2145015274
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999978L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8("{nc");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q&");
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer0.readByte();
      buffer_UnsafeCursor0.buffer.require(0L);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      realBufferedSource0.readUtf8LineStrict();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = 1000000L;
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      realBufferedSource0.buffer.snapshot();
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-73);
      byteArray0[2] = (byte)65;
      buffer0.readByte();
      buffer_UnsafeCursor0.buffer.readFully(realBufferedSource0.buffer, 3L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString[] byteStringArray0 = new ByteString[8];
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((byte)0, (long) (byte) (-73), (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-73 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Pipe pipe0 = new Pipe(3209L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0, 3209L);
      byteArray0[2] = (byte)0;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer0.toString();
      buffer0.indexOf((byte)0, 3209L);
      Segment segment0 = new Segment(byteArray0, (byte)0, 2, false, false);
      SegmentPool.next = segment0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipe0.sourceClosed = false;
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      ByteString[] byteStringArray1 = new ByteString[2];
      byteStringArray1[0] = byteString0;
      byteStringArray1[1] = byteString0;
      Options options0 = Options.of(byteStringArray1);
      buffer1.select(options0);
      Integer integer0 = new Integer((byte)0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", "gSFv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"gSFv\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      HashingSink.sha1(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(1114112);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteString0.base64();
      bufferedSink0.writeInt(1076);
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[4] = byteString0;
      byteString0.sha256();
      byteStringArray0[6] = byteString0;
      realBufferedSink0.buffer.indexOf(byteString0);
      hashingSink0.hash();
      pipe0.sourceClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readByteString((long) 1076);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Pipe pipe0 = new Pipe(3209L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(3209L);
      byte[] byteArray0 = new byte[0];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer0.readHexadecimalUnsignedLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = pipe0.sourceClosed;
      Buffer buffer3 = buffer2.writeDecimalLong(10000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      buffer1.write(byteArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233720368547758L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer.sha256();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(pipe_PipeSink0);
      long long0 = (-616L);
      realBufferedSink1.writeLong((-616L));
      realBufferedSink1.buffer.writeDecimalLong(280375465082880L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      // Undeclared exception!
      try { 
        realBufferedSink2.buffer.readByteArray((-1942L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1942
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("9jr-[wBm@}5d");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer1.skip((-1));
      buffer_UnsafeCursor0.buffer.indexOf((byte)35, 9L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer.readLongLe();
      buffer_UnsafeCursor0.buffer.readIntLe();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("}V&6", 48, (-2800));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2800 < 48
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)75;
      buffer_UnsafeCursor0.buffer.readLongLe();
      // Undeclared exception!
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Buffer buffer0 = new Buffer();
      buffer0.timeout();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Pipe pipe0 = new Pipe(3201L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink1.writeLong(9223372036854775807L);
      Buffer buffer0 = realBufferedSink0.buffer.writeDecimalLong(1000000000000L);
      buffer0.clone();
      realBufferedSink0.toString();
      realBufferedSink1.buffer.readIntLe();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink2);
      pipe_PipeSink0.close();
      Buffer buffer1 = pipe0.buffer;
      try { 
        realBufferedSink0.buffer.skip(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink.sha512(buffer0);
      buffer0.writableSegment(99);
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      HashingSource.md5(buffer0);
      Integer integer0 = new Integer(360);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.head = segment1;
      realBufferedSource0.buffer.indexOf((byte)48);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha1(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000015L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Ioo\"\"");
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink2 = HashingSink.hmacSha256(hashingSink1, byteString0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Ioo\"\"");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink2);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(476);
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8CodePoint(7);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      ((RealBufferedSink) bufferedSink1).buffer.indexOfElement(byteString0);
      HashingSink hashingSink3 = HashingSink.sha1(bufferedSink0);
      ByteString byteString1 = hashingSink3.hash();
      HashingSink hashingSink4 = HashingSink.hmacSha512(hashingSink2, byteString1);
      ((RealBufferedSink) bufferedSink0).buffer.inputStream();
      hashingSink4.hash();
      HashingSource hashingSource0 = HashingSource.md5(((RealBufferedSink) bufferedSink1).buffer);
      hashingSource0.hash();
      ((RealBufferedSink) bufferedSink1).buffer.segmentSizes();
      ((RealBufferedSink) bufferedSink1).buffer.readShortLe();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000015L);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Ioo\"\"");
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink2 = HashingSink.hmacSha256(hashingSink1, byteString0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Ioo\"\"");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink2);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(476);
      BufferedSink bufferedSink1 = realBufferedSink0.writeUtf8CodePoint(7);
      bufferedSink1.writeIntLe((-2439));
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.sha256();
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readByte();
      buffer1.indexOf(byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      hashingSink2.hash();
      ((RealBufferedSink) bufferedSink0).buffer.indexOf((byte) (-8), 1000000015L, 1000000015L);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.utf8();
      byteString0.base64();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.writeUtf8("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("x='");
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = buffer1.clone();
      HashingSink.sha1(buffer1);
      hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.snapshot();
      buffer_UnsafeCursor0.next();
      realBufferedSource0.buffer.writableSegment(3);
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      hashingSource0.hash();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer2.outputStream();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.toString();
      buffer1.writeUtf8CodePoint((-2145015274));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer_UnsafeCursor0.resizeBuffer(98880L);
      realBufferedSink0.buffer.inputStream();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer_UnsafeCursor0.buffer.segmentSizes();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      buffer_UnsafeCursor0.buffer.outputStream();
      long long0 = buffer_UnsafeCursor0.offset;
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readUtf8LineStrict((-466L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -466
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("x='");
      byte[] byteArray0 = new byte[8];
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.sha256();
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.indexOf(byteString0);
      Buffer buffer3 = buffer2.clone();
      HashingSink.sha1(buffer1);
      Buffer buffer4 = realBufferedSource0.buffer.writeDecimalLong((-1L));
      ByteString byteString2 = buffer0.hmacSha1(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.snapshot();
      buffer_UnsafeCursor0.next();
      buffer4.writableSegment(3);
      HashingSource.md5(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer3.indexOf(byteString2, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000010L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      ByteString byteString1 = new ByteString(byteArray0);
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Integer integer0 = new Integer((-1));
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      HashingSink.sha256(buffer1);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      hashingSource0.hash();
      buffer_UnsafeCursor0.buffer.clone();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = hashingSource0.hash();
      byteString0.utf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(20L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~");
      ByteString byteString1 = hashingSource0.hash();
      hashingSource0.hash();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteString byteString2 = buffer0.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString3 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict((-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer();
      ByteString byteString0 = buffer2.sha256();
      buffer1.writeUtf8CodePoint((-2145015274));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      OutputStream outputStream0 = realBufferedSink1.outputStream();
      Buffer buffer3 = buffer2.writeTo(outputStream0, (long) 1);
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.readUnsafe();
      buffer4.hmacSha512(byteString0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      HashingSource.hmacSha256(buffer_UnsafeCursor0.buffer, byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer4.readFrom((InputStream) pipedInputStream0, 0L);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer3.select(options0);
      buffer_UnsafeCursor0.resizeBuffer(3374L);
      buffer3.inputStream();
      HashingSource.hmacSha256(buffer4, byteString0);
      ByteString byteString1 = new ByteString((byte[]) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer5 = realBufferedSource0.buffer;
      buffer5.hmacSha1(byteString0);
      buffer3.emitCompleteSegments();
      Options options1 = Options.of(byteStringArray0);
      buffer5.select(options1);
      buffer_UnsafeCursor0.seek((-1));
      buffer5.indexOf(byteString0, 4082L);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer();
      ByteString byteString0 = buffer2.sha256();
      buffer1.writeUtf8CodePoint((-2145015274));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      OutputStream outputStream0 = realBufferedSink1.outputStream();
      Buffer buffer3 = buffer2.writeTo(outputStream0, (long) 1);
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.hmacSha512(byteString0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      HashingSource.hmacSha256(buffer_UnsafeCursor0.buffer, byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer5 = realBufferedSink1.buffer.writeTo(outputStream0);
      buffer4.readFrom((InputStream) pipedInputStream0, 0L);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer3);
      // Undeclared exception!
      try { 
        buffer5.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.toString();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.sha256();
      buffer2.sha256();
      Buffer buffer3 = buffer0.writeDecimalLong(9999999999999976L);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readByteString((long) (-2145015274));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=16 offset=0 byteCount=-2145015274
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.utf8();
      byteString0.base64();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.writeUtf8("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      buffer1.readByte();
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((byte) (-17));
      Buffer buffer2 = buffer1.writeShort((-3873));
      buffer2.indexOfElement(byteString0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.base64Url();
      Buffer buffer3 = realBufferedSink0.buffer.clone();
      realBufferedSink0.write((Source) buffer3, 4L);
      HashingSink.sha1(bufferedSink0);
      buffer1.readUnsafe();
      buffer2.writeDecimalLong(576L);
      buffer1.writeUtf8("1B2M2Y8AsgTpgAmY7PhCfg==");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readString(33344L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=20 offset=0 byteCount=33344
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000015L);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.readByteArray();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      int int0 = 306;
      buffer0.writableSegment(306);
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.rangeEquals((long) (byte)0, byteString0, 306, (int) (byte)0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.sha512();
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.indexOfElement(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      HashingSink.sha256(buffer0);
      buffer0.rangeEquals((long) (byte)0, byteString0, (int) (byte)0, (int) (byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }
}
