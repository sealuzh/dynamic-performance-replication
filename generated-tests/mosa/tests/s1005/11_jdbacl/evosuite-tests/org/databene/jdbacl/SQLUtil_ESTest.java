/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:33:59 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.store.raw.RawStore;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName("rename1:1: tokens : ( t__61 | t__62 | t__63 | t__64 | t__65 | t__66 | t__67 | t__68 | t__69 | t__70 | t__71 | t__72 | t__73 | t__74 | t__75 | t__76 | t__77 | t__78 | t__79 | t__80 | t__81 | t__82 | t__83 | t__84 | t__85 | t__86 | t__87 | t__88 | t__89 | t__90 | t__91 | t__92 | t__93 | t__94 | t__95 | t__96 | t__97 | t__98 | t__99 | t__100 | t__101 | t__102 | t__103 | t__104 | t__105 | t__106 | t__107 | t__108 | t__109 | t__110 | t__111 | t__112 | t__113 | t__114 | t__115 | t__116 | t__117 | t__118 | t__119 | t__120 | t__121 | t__122 | t__123 | t__124 | t__125 | t__126 | t__127 | t__128 | t__129 | t__130 | t__131 | t__132 | t__133 | t__134 | t__135 | t__136 | t__137 | or | and | xor | eq | bangeq | ltgt | gt | ge | lt | le | is | not | null | in | between | plus | sub | star | slash | percent | barbar | rowid | number | varchar2 | nvarchar2 | byte | char | date | timestamp | before | primary | default | identifier | int | comment | ws | string | quoted_name );");
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("TIMEZONE_MINUTE");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("upda");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "upda");
      SQLUtil.addOptionalCondition("- 0", stringBuilder0);
      assertEquals("upda or - 0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter mateilized ie");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter mateilized ie");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RawStoreFactory.LOG_ENCRYPT_ALGORITHM_VERSION;
      SQLUtil.removeComments("log_encrypt_algorithm_version");
      SQLUtil.renderValue("log_encrypt_algorithm_version");
      String string1 = SQLUtil.substituteMarkers("log_encrypt_algorithm_version", "log_encrypt_algorithm_version", "log_encrypt_algorithm_version");
      assertEquals("'log_encrypt_algorithm_version'", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.renderValue("table null");
      assertEquals("'table null'", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("execute", stringArray0, "execute", "execute", stringArray0);
      assertEquals("execute as execute on ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.removeComments("%vCsoN|k");
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin("N)pYq=8ueZB9X=<71.|", stringArray0, "%vCsoN|k", ",~8WPE9Zfe?vzT7!", stringArray0);
      assertEquals("left join %vCsoN|k as ,~8WPE9Zfe?vzT7! on N)pYq=8ueZB9X=<71.|.null = ,~8WPE9Zfe?vzT7!.null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Rxecute*>*eftj&'j~y4/{");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Rxecute*>*eftj&'j~y4/{";
      stringArray0[1] = "Rxecute*>*eftj&'j~y4/{";
      String string0 = SQLUtil.leftJoin("Rxecute*>*eftj&'j~y4/{", stringArray0, "Rxecute*>*eftj&'j~y4/{", "Rxecute*>*eftj&'j~y4/{", stringArray0);
      assertEquals("left join Rxecute*>*eftj&'j~y4/{ as Rxecute*>*eftj&'j~y4/{ on Rxecute*>*eftj&'j~y4/{.Rxecute*>*eftj&'j~y4/{ = Rxecute*>*eftj&'j~y4/{.Rxecute*>*eftj&'j~y4/{ and Rxecute*>*eftj&'j~y4/{.Rxecute*>*eftj&'j~y4/{ = Rxecute*>*eftj&'j~y4/{.Rxecute*>*eftj&'j~y4/{", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "<=[RiN~_sc*U4Y6f#";
      stringArray0[2] = "";
      String string0 = SQLUtil.join("", "<=[RiN~_sc*U4Y6f#", stringArray0, "<=[RiN~_sc*U4Y6f#", "<=[RiN~_sc*U4Y6f#", stringArray0);
      assertEquals("<=[RiN~_sc*U4Y6f# as <=[RiN~_sc*U4Y6f# on <=[RiN~_sc*U4Y6f#.null = <=[RiN~_sc*U4Y6f#.null and <=[RiN~_sc*U4Y6f#.<=[RiN~_sc*U4Y6f# = <=[RiN~_sc*U4Y6f#.<=[RiN~_sc*U4Y6f# and <=[RiN~_sc*U4Y6f#. = <=[RiN~_sc*U4Y6f#.", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "z7?^x_");
      SQLUtil.addRequiredCondition("z7?^x_", stringBuilder0);
      assertEquals("z7?^x_ and z7?^x_", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSTEM_SCHEMA_UUID;
      StringBuilder stringBuilder0 = new StringBuilder(4847);
      SQLUtil.addRequiredCondition("8000000d-00d0-fd77-3ed8-000a0a0b1900", stringBuilder0);
      assertEquals("8000000d-00d0-fd77-3ed8-000a0a0b1900", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = FBConnectionProperties.USER_NAME_PROPERTY;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("XSDF8.S", stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder(1840);
      System.setCurrentTimeMillis((-2079L));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isProcedureCall("###RowLocationToUpdate");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("'NCHAR2'", true, defaultDBTable0, "'NCHAR2'");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 'NCHAR2' CHECK 'NCHAR2'", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML(",7k|g#7{;,\"k[c~DGx");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",7k|g#7{;,\"k[c~DGx";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(,7k|g#7{;,\"k[c~DGx)");
      Integer integer0 = RawTransaction.ABORT;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "( ", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"( \" ", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(,7k|g#7{;,\"k[c~DGx)", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("LOCK_TABLE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LOCK_TABLE", defaultDBTable0, (-405), "select");
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("LOCK_TABLE : SELECT", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.removeComments("[V_%Uq4\"LC>T ^6");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("O0U'}tnhi-=({", defaultDBTable1, 2147483645, "drop tableb(z!-39c]e#=)__m$@]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"z!-39c]e#=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute*>*eftj&'j~y4/{");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "table null";
      stringArray0[1] = "rxecute";
      stringArray0[2] = "table null";
      String string1 = SQLUtil.renderColumnListWithTableName("rxecute", stringArray0);
      assertEquals("rxecute.table null, rxecute.rxecute, rxecute.table null", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(table null, rxecute, table null)", string2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "IsW=gCfO=>9m2#";
      SQLUtil.isDML("IsW=gCfO=>9m2#");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]gK_hSB9HT4YV", defaultDBTable0, (-358315954), "]gK_hSB9HT4YV");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      Integer integer1 = RawTransaction.ABORT;
      defaultDBColumn0.setFractionDigits(integer1);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("]GK_HSB9HT4YV(0,1)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("I0\"0'e", false);
      assertEquals("I0 \"0'e\"", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IsW=gCfO=>9m2#";
      stringArray0[1] = "IsW=gCfO=>9m2#";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("IsW=gCfO=>9m2#", defaultDBTable0, (-802), "z_=tqX");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("mvr", defaultDBTable0, 0, "drop tablecurrent_value bigint");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn1.setSize(integer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z_=tqX");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isDML("11U;iAsYcM%I@`+J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("pb6`bk6_~aVP1g`v`", false, "left", "left");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK left", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("'MNCHR2'", true, defaultDBTable0, "'MNCHR2'");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 'MNCHR2' CHECK 'MNCHR2'", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBCheckConstraint0);
      assertEquals("null.'MNCHR2'", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("hsqldb.catalogs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      String string0 = LanguageConnectionContext.CONTEXT_ID;
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("gQ_f`=5y7J -M!&H");
      Object[] objectArray1 = SQLUtil.parseColumnTypeAndSize("J/J");
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("Pzo<VlA3@/]{i");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Pzo<VlA3@/]{i";
      SQLUtil.renderColumnNames(stringArray0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Boolean boolean1 = SQLUtil.mutatesStructure("Pzo<VlA3@/]{i");
      assertTrue(boolean1.equals((Object)boolean0));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      boolean boolean2 = new Boolean("(, Pzo<VlA3@/]{i)");
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, Pzo<VlA3@/]{i)", string1);
      
      boolean boolean3 = SQLUtil.isQuery("select into");
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("PO<");
      SQLUtil.ownerDotComponent(dBCatalog0);
      String string0 = "CURRENT_VALUE BIGINT";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CURRENT_VALUE BIGINT");
      Integer integer0 = RawTransaction.ABORT;
      NameSpec nameSpec0 = NameSpec.NEVER;
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "PO<";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PO<", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("=hVT;,9KtcT@#kODz.", true);
      assertEquals("= hVT ;, 9KtcT @ # kODz.", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize("Rxecut*>*eftj&'j~y/{", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("E)7V8;ES4(&?QFm+J", false);
      assertEquals("E) 7V8 ; ES4 (& ? QFm + J", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.isDML("Pzo<VlA3@/]{i");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Pzo<VlA3@/]{i";
      SQLUtil.renderColumnNames(stringArray0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      Integer integer0 = RawTransaction.ABORT;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "setSavepoint()", true, stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, Pzo<VlA3@/]{i)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.removeComments("ISO8859_2");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("`g@eRKR\"Nm;;z_OB", false, "`g@eRKR\"Nm;;z_OB", "truncate");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.isDML("Pzo<VlA3@/]{i");
      String[] stringArray0 = new String[15];
      stringArray0[1] = "Pzo<VlA3@/]{i";
      String string0 = RawStore.TEST_REENCRYPT_CRASH_BEFORE_RECOVERY_FINAL_CLEANUP;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "setSavepoint()", true, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("setSavepoint()");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isDML("Pzo<VlA3@/]{i");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND Pzo<VlA3@/]{i = 'Pzo<VlA3@/]{i' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.h2.util.IOUtils", false);
      assertEquals("org.h2.util.IOUtils", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("deletepzo<vla3@/]{i");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("gQ_f`=5y7J -M!&H", true);
      assertEquals("gQ_f ` = 5y7J - M ! & H", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      Integer integer0 = RawTransaction.COMMIT;
      StringBuilder stringBuilder0 = new StringBuilder("drop index");
      Character character0 = new Character('R');
      SQLUtil.substituteMarkers("alter tableqtib8')o%", "alter tableqtib8')o%", character0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1846409673), "alter tableqtib8')o%");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'R'", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pzo<VlA3@/]{i");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Pzo<VlA3@/]{i");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Pzo<VlA3@/]{i";
      stringArray1[1] = "";
      stringArray1[2] = "( ";
      stringArray1[3] = "()";
      stringArray1[4] = "( ";
      stringArray1[5] = null;
      stringArray1[6] = "( ";
      stringArray1[7] = "Pzo<VlA3@/]{i";
      stringArray1[8] = "= Qn:6)G1N,D";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", stringArray1, "", "Pzo<VlA3@/]{i", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("|");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execoff:", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "execoff:";
      stringArray0[1] = "execoff:";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (execoff:, execoff:) REFERENCES execoff:(execoff:, execoff:)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("*>*EFtJ&'J~y4/{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*>*EFtJ&'J~y4/{");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*>*EFtJ&'J~y4/{";
      stringArray0[1] = "*>*EFtJ&'J~y4/{";
      stringArray0[2] = "*>*EFtJ&'J~y4/{";
      stringArray0[3] = "*>*EFtJ&'J~y4/{";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "*>*EFtJ&'J~y4/{", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("*>*EFtJ&'J~y4/{");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '*>*EFtJ&'J~y4/{' has no foreign key with the columns (*>*EFtJ&'J~y4/{, *>*EFtJ&'J~y4/{, *>*EFtJ&'J~y4/{, *>*EFtJ&'J~y4/{)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("*>*EFtJ&'J~y4/{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*>*EFtJ&'J~y4/{");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      Integer integer0 = new Integer((-306844374));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*>*EFtJ&'J~y4/{", defaultDBTable0, (DBDataType) null, integer0, (Integer) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Boolean boolean0 = Boolean.valueOf("B)ttX,)q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("'MNCHR2'", true, defaultDBTable0, "'MNCHR2'");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder(42);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 42);
      StringBuilder stringBuilder2 = stringBuilder1.append((-73958521));
      StringBuilder stringBuilder3 = stringBuilder2.append(true);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder3);
      assertEquals("42.0-73958521trueCONSTRAINT 'MNCHR2' ", stringBuilder3.toString());
      assertEquals("42.0-73958521trueCONSTRAINT 'MNCHR2' ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001gZhQKaCQDj?0g ");
      Integer integer0 = new Integer((-1624));
      Integer integer1 = new Integer(3);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lzy-[-J2K", defaultDBTable0, (DBDataType) null, integer1, integer2);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("lzy-[-J2K", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Boolean.valueOf("lzy-[-J2K");
      SQLUtil.isProcedureCall("lzy-[-J2K");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("<", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("oPXm", (DBSchema) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter mateilized ie";
      stringArray0[1] = "<";
      stringArray0[2] = "oPXm";
      stringArray0[3] = "iM04Ka'[Z8";
      stringArray0[4] = "alter mateilized ie";
      stringArray0[5] = "iM04Ka'[Z8";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = "alter mateilized ie";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("lV");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("iM04Ka'[Z8", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("lV or iM04Ka'[Z8", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = FBConnectionProperties.DATABASE_PROPERTY;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'MNCHR2'";
      stringArray0[1] = "'MNCHR2'";
      stringArray0[2] = "'MNCHR2'";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "'MNCHR2'", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("'MNCHR2'", true, defaultDBTable0, "'MNCHR2'");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("'MNCHR2'", "CONSTRAINT 'MNCHR2' CHECK 'MNCHR2'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      assertFalse(nameSpec1.equals((Object)nameSpec0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-927), "l");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("l");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("L{+X?\n!", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.setDefaultValue("B*6x");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("L{+X?\n! L(2) DEFAULT B*6x NULL", string0);
      
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("L(2)", string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("--hide--", false);
      assertEquals("-- hide --", string0);
  }
}
