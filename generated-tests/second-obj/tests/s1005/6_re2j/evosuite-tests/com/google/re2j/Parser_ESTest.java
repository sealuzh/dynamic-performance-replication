/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:27:12 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        Parser.parse(")( v75jm)-[R", (-283));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Parser.parse("(?S/", 3101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Parser.parse("}", (-383));
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1013, (-383));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        Parser.parse("+#,D(d;sHaFp(]ubf7", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "?~EY*LN0;6kuO";
      int int0 = (-816);
      try { 
        Parser.parse("?~EY*LN0;6kuO", (-816));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        Parser.parse("(J", 5204);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(J`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        Parser.parse("(?P<iRG-3T9{> V", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<iRG-3T9{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 724;
      Parser.parse("C", 724);
      int int1 = 32;
      Regexp[] regexpArray0 = null;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-212);
      Regexp regexp0 = Parser.parse("_^", (-212));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      regexpArray0[5] = regexp2;
      regexp2.subs = regexpArray0;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-212), 8273);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -212
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1389);
      try { 
        Parser.parse("n?<)", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 80;
      Regexp regexp0 = Parser.parse("{", 80);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "(i{X";
      int int0 = 148;
      try { 
        Parser.parse("(i{X", 148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(i{X`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pBa", 2260);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P]{}^$", (-559));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 724;
      String string0 = "[p::]";
      String string1 = "7[";
      try { 
        Parser.parse("7[", 724);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 724;
      String string0 = "[p::]";
      String string1 = "7[";
      int int1 = 40;
      try { 
        Parser.parse("7[", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1785;
      try { 
        Parser.parse("[:-", 1785);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        Parser.parse("+nwe{9y`z%pX46(]", 3556);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[2] = regexp1;
      regexp1.subs = regexpArray0;
      String string0 = "\"|";
      Regexp regexp2 = Parser.parse("\"|", 1242);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      int int0 = 473;
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Parser parser0 = new Parser("$n3+@", 1785);
      assertNotNull(parser0);
      
      Regexp regexp4 = Parser.parse("\"|", 1785);
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      
      int int1 = 3129;
      // Undeclared exception!
      try { 
        Parser.subarray(regexp1.subs, 1242, 3129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1242
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-296);
      String string0 = "(^|?P<";
      try { 
        Parser.parse("(^|?P<", (-296));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-1212);
      try { 
        Parser.parse("((", (-2204));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `((`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "RS|";
      int int0 = 980;
      Regexp regexp0 = Parser.parse("RS|", 980);
      assertNotNull(regexp0);
      
      regexp0.cap = 980;
      regexp0.reinit();
      regexpArray0[0] = regexp0;
      int int1 = 91;
      String string1 = regexp0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 91, (-1922));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "e'|;)IWT}S2";
      int int0 = 1825;
      try { 
        Parser.parse("e'|;)IWT}S2", 1825);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      try { 
        Parser.parse("(.", 120656);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-671);
      Regexp regexp0 = Parser.parse("P", (-671));
      assertNotNull(regexp0);
      
      String string0 = "q'gv;:S$t";
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        Parser.parse("*=5[htNm'", (-1480));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 125);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.flags = 125;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2456, 58);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp0);
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp4);
      assertNotNull(regexp5);
      
      Regexp regexp6 = Parser.parse("D", 1785);
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp2);
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "\\pB\\a";
      Regexp regexp0 = Parser.parse("[::]", 13144);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp[] regexpArray1 = new Regexp[2];
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, 13144, 13144);
      assertNotNull(regexpArray2);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray1, regexpArray2);
      assertNotSame(regexpArray2, regexpArray1);
      assertNotSame(regexpArray2, regexpArray0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "$\\2";
      int int0 = (-1243);
      Regexp regexp0 = Parser.parse("$\u0002", (-1243));
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 65;
      Regexp regexp0 = Parser.parse("p.", 65);
      assertNotNull(regexp0);
      
      int int1 = 1875;
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertFalse(int1 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "s|'n@`?)_*q|YG[\"&";
      int int0 = 256;
      try { 
        Parser.parse("s|'n@`?)_*q|YG[\"&", 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-296);
      try { 
        Parser.parse(".H*)8O", 2089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-1324);
      String string0 = "[:";
      try { 
        Parser.parse("[:", 329);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "$\\2";
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int0 = 3;
      Regexp regexp0 = Parser.parse("$\u0002", 3608);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      int int1 = 4293;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-2064);
      Regexp regexp0 = Parser.parse("\u0007", 1431);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("-]", 105);
      assertNotNull(parser0);
      
      Parser parser1 = new Parser("AP2L\u0004btY_MflA(; J", 105);
      assertNotNull(parser1);
      assertFalse(parser1.equals((Object)parser0));
      
      try { 
        Parser.parse("*", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-296);
      String string0 = "(^(?P<";
      try { 
        Parser.parse("(^(?P<", (-296));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "Rl{,)9eo*R<^;uyhn$";
      try { 
        Parser.parse("Rl{,)9eo*R<^;uyhn$", (-295));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      try { 
        Parser.parse("(?S/", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?S`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("(?s:.)", 2412);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp regexp0 = Parser.parse("a0/e|kE!!!", (-1665));
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals("com.google.re2j.Parser$Stack");
      assertFalse(boolean0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.min = 2836;
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = new Regexp(regexp0);
      assertNotNull(regexp4);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      
      Parser parser0 = new Parser("a0/e|kE!!!", (-1665));
      assertNotNull(parser0);
      
      try { 
        Parser.parse("8(qw$Pmc7fx))Q", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-1212);
      Regexp regexp0 = Parser.parse("[:git:]", 0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[1] = regexp0;
      int int1 = 1124;
      try { 
        Parser.parse(".+*?()|[]{}^$", 1124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp regexp0 = Parser.parse("5<ske!%", 815);
      assertNotNull(regexp0);
      
      int int0 = 750;
      Regexp regexp1 = Parser.parse("f`++q<eUj.AT", 750);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string0 = "regexp/syntax: internal error";
      Regexp regexp2 = Parser.parse("f`++q<eUj.AT", 102);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      
      try { 
        Parser.parse("f`++q<eUj.AT", 6977);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `++`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "stack underflow";
      int int0 = 7141;
      Parser parser0 = new Parser("stack underflow", 7141);
      assertNotNull(parser0);
      
      int int1 = 4510;
      Regexp regexp0 = Parser.parse("stack underflow", 4510);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("A", (-275));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("stack underflow", 3);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      try { 
        Parser.parse("aF(`^p", 7141);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `aF(`^p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 2359;
      String string0 = "+@/D]A!t:CAjYj_;";
      Regexp regexp0 = Parser.parse("x{", 1581);
      assertNotNull(regexp0);
      
      int int1 = 855;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string1 = "'J.l5]";
      Regexp regexp2 = Parser.parse(string1, int0);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      
      String string2 = "\\P2";
      int int2 = 85;
      Parser parser0 = new Parser(string2, int2);
      assertNotNull(parser0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 44;
      int int1 = 875;
      Regexp regexp1 = Parser.parse("xI", 875);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("xI", 44);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      String string0 = "Bamum";
      Regexp regexp3 = Parser.parse(string0, int0);
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertFalse(int0 == int1);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      String string1 = "~p";
      int int2 = 594;
      Regexp regexp4 = Parser.parse(string1, int2);
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = Parser.parse(string1, int1);
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      
      String string2 = "(?P<(?m(?P<";
      int int3 = 36;
      Regexp regexp6 = Parser.parse(string1, int3);
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp4));
      
      Parser parser0 = new Parser(string2, int3);
      assertNotNull(parser0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "[\\x00-\\x>{10FFFF}]";
      int int0 = 128;
      Regexp regexp0 = Parser.parse("[x00-x>{10FFFF}]", 128);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x>{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      int int0 = (-2692);
      try { 
        Parser.parse("(Tp,Q[", (-2692));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "com.google.re2j.Parser";
      try { 
        Parser.parse("(?i:", (-2447));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "Y+z|&.PS:,/>^yua&IU";
      try { 
        Parser.parse("(?-s", 3804);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-296);
      String string0 = "(?m(?P<";
      try { 
        Parser.parse("(?m(?P<", (-296));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?m(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:Y)", (-1435));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-1136), (-1435));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x0FFFF}", 3);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("HU_.|^N]H2n]U9v)8", 3);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      regexp0.flags = 3;
      Regexp regexp3 = Parser.parse("|", 48);
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      int int0 = 4;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Vo\"+1|v>;>8", 1013);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      
      int int0 = 393;
      regexp2.reinit();
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = null;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 3151, 112);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Parser parser0 = new Parser("(?(?P<", (-2204));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("-", 225);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("(?(?P<", 7287);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("m=N<W{1w?", 523);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("m=N<W{1w?", 28);
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "\\a";
      Regexp regexp0 = Parser.parse("a", 545);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 93, (-1808));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("|%", (-1615));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("B", (-1615));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("B", 18);
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp1));
      
      Parser parser0 = new Parser("B", 43020);
      assertNotNull(parser0);
      
      Regexp regexp4 = Parser.parse("B", 81);
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp regexp0 = Parser.parse("0\"}&2TcZKXc=$3b?", (-1365));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("(?i:0\"\\}&2TcZKXc=\\$3b\\?\\x7f)", string0);
      
      Parser parser0 = new Parser("0\"}&2TcZKXc=$3b?", (-1365));
      assertNotNull(parser0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string1 = regexp1.toString();
      assertNotNull(string1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("(?i:0\"\\}&2TcZKXc=\\$3b\\?\\x7f)", string1);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      Regexp regexp2 = Parser.parse("wnU/]x4']\n", 1);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-212);
      Regexp regexp0 = Parser.parse("\r", (-212));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-212), 8273);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -212
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "(?X";
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("x", 270);
      assertNotNull(parser0);
      
      int int0 = (-1880);
      Regexp regexp1 = Parser.parse("x", (-1880));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Parser parser1 = new Parser(string0, int0);
      assertNotNull(parser1);
      assertFalse(parser1.equals((Object)parser0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0004", 9);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexp1.reinit();
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string0 = "$JpiQ<J{";
      int int0 = 110;
      Regexp regexp2 = Parser.parse(string0, int0);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp[] regexpArray0 = null;
      int int1 = 42647;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "\\7]{}^$";
      Regexp regexp0 = Parser.parse("\u0007]{}^$", (-2303));
      assertNotNull(regexp0);
      
      String string1 = "%?EIz_tERS6";
      int int0 = 40;
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "[p::]";
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string1 = "uO3!W!Y {{7?k^=_";
      boolean boolean0 = regexp0.equals("uO3!W!Y {{7?k^=_");
      assertFalse(boolean0);
      
      int int0 = 1773;
      Regexp regexp1 = Parser.parse("[p::]", 128528);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      int int1 = 2346;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = regexp1.equals((Object) null);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 0;
      String string0 = "j4E?s+0I@<OegqNJ/";
      try { 
        Parser.parse(".+*?()|[]{}^$", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]{}^$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "`b";
      int int0 = 1013;
      Regexp regexp0 = Parser.parse("`b", 1013);
      assertNotNull(regexp0);
      
      String string1 = "A|~)H~G|";
      try { 
        Parser.parse("A|~)H~G|", 1013);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.cap = (-1148);
      regexp0.flags = (-1148);
      String string0 = "[::]";
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertNotNull(regexp1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Regexp regexp2 = Parser.parse("[::]", 134);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      try { 
        Parser.parse("|IebU?4o|*", (-1148));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("^", string0);
      
      Regexp regexp1 = Parser.parse("h24eN\"AjMk|N|Z", 36);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      int int0 = 34;
      Regexp regexp0 = Parser.parse("\twBux{5mnPWU:#DV", 85);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 98, 34);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 3785;
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals("pBa");
      assertFalse(boolean0);
      
      String string0 = regexp0.toString();
      assertNotNull(string0);
      assertEquals("LEFT_PAREN", string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("z", 3785);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("pBa", (-1380));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp5 = new Regexp(regexp_Op1);
      assertNotNull(regexp5);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      
      Regexp regexp6 = Parser.parse(string0, int0);
      assertNotNull(regexp6);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      
      Regexp regexp7 = new Regexp(regexp1);
      assertNotNull(regexp7);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp6));
      assertTrue(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", 101);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = null;
      int int0 = 65;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 65, 8231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = (-164);
      String string0 = "\\d";
      Regexp regexp0 = Parser.parse("d", (-164));
      assertNotNull(regexp0);
      
      String string1 = regexp0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d", string1);
      
      Regexp[] regexpArray0 = new Regexp[16];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 5938, 46);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = (-2462);
      Regexp regexp0 = Parser.parse(":]", (-2462));
      assertNotNull(regexp0);
      
      String string0 = "9";
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int int1 = 700;
      Regexp regexp2 = Parser.parse("g@3x3p4\"", 700);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[6];
      String string1 = regexp1.toString();
      assertNotNull(string1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(":\\]", string1);
      
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      regexpArray0[5] = regexp1;
      int int2 = 236;
      String string2 = "";
      regexp0.name = string2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2462
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      try { 
        Parser.parse("[:x{208}-x{2029}x{202f}x{205f}y{3000}](?i:])", 1061);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `}-x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "[:x00-\\x10FFFF}]";
      int int0 = 128;
      Regexp regexp0 = Parser.parse("[:x00-x10FFFF}]", 128);
      assertNotNull(regexp0);
      
      String string1 = regexp0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0-x\\}]", string1);
      
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotNull(regexp1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(regexp1.equals((Object)regexp0));
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `0-\\x10`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "AP2L\\4btY_MflA(; J";
      Regexp regexp0 = Parser.parse("\u0007", 256);
      assertNotNull(regexp0);
      
      String string1 = "C/";
      int int0 = 92;
      Parser parser0 = new Parser(string1, int0);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 9734;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Parser parser0 = new Parser("::", 64);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("\b", (-1088));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("Tibetan", 2213);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("::", 27);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("::", (-1088));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("\u0000", 2);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("\u0000", (-3387));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      regexpArray0[2] = regexp2;
      regexp2.max = 2;
      Regexp regexp3 = Parser.parse("\u0000", 45);
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      
      regexpArray0[3] = regexp3;
      int[] intArray0 = new int[8];
      intArray0[0] = 45;
      intArray0[1] = 45;
      intArray0[2] = (-3387);
      intArray0[3] = 45;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = (-3387);
      regexp3.runes = intArray0;
      Regexp regexp4 = new Regexp(regexp0);
      assertNotNull(regexp4);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      
      regexpArray0[4] = regexp4;
      regexp2.subs = regexpArray0;
      regexp1.flags = 63;
      regexp4.name = "\u0000";
      regexp1.max = 2;
      regexp4.max = 13;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 98, 92);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Regexp regexp0 = Parser.parse("1]", 432);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 1785;
      Regexp regexp0 = Parser.parse("\u0001H", 1785);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      regexp0.op = regexp_Op0;
      regexp0.cap = int0;
      int int1 = 46;
      String string0 = "!!#";
      Regexp regexp1 = Parser.parse(string0, int1);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string1 = "\\p";
      int int2 = 63;
      Regexp regexp2 = Parser.parse(string1, int2);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp[] regexpArray0 = null;
      int int3 = 125;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int3, int3);
      assertNotNull(regexpArray1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "[^grap]";
      Regexp regexp0 = Parser.parse("[^grap]", 64313);
      assertNotNull(regexp0);
      
      String string1 = "";
      int int0 = (-1261);
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 64313, (-1261));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 64313;
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Parser.parse("com.google.re25.Parser$Stack", 64313);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      
      try { 
        Parser.parse("/DR<%0EZtBk![d}!u5", 65856);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[d}!u5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[V]+8UcI?R,T9{3>v", (-3787));
      assertNotNull(regexp0);
      
      regexp0.cap = 63;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pZ]", 977);
      assertNotNull(regexp0);
      
      regexp0.min = (-1615);
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.name = ":]";
      regexp1.reinit();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      
      int int0 = 123;
      Regexp regexp4 = null;
      try {
        regexp4 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = (-308);
      Regexp regexp0 = Parser.parse("pZ]", (-308));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("pZ]", (-118));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("pZ]", 110);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 128);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Parser parser0 = new Parser("[^x00-x{10FFFF}]", 4540);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("[^x00-x{10FFFF}]", 4540);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      
      regexpArray0[2] = regexp3;
      int int0 = (-2638);
      Regexp regexp4 = Parser.parse("Q'2", (-2638));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertNotNull(regexp5);
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op0);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp4));
      assertTrue(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp1));
      
      regexpArray0[5] = regexp6;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "7XZ";
      Parser parser0 = new Parser("7XZ", 58);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("7XZ", 41);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("J:YQj{6", (-308));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("J:YQj{6", (-308));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      String string1 = "invalid nested repetition operator";
      Regexp regexp3 = Parser.parse("J:YQj{6", (-308));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      String string2 = "T";
      int int0 = 32;
      Parser parser1 = new Parser("7XZ", 32);
      assertNotNull(parser1);
      assertFalse(parser1.equals((Object)parser0));
      
      Regexp regexp4 = Parser.parse("(?P<(?-m:$)(?i:3)(?i:B)?(?i:x7f)", 3);
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = Parser.parse("Pp2", 65);
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      
      int int1 = (-766);
      Regexp regexp6 = Parser.parse(string0, int1);
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      
      int int2 = 86;
      Regexp regexp7 = Parser.parse(string2, int0);
      assertNotNull(regexp7);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp0));
      
      Regexp regexp8 = Parser.parse(string1, int2);
      assertNotNull(regexp8);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp4);
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Regexp regexp9 = new Regexp(regexp2);
      assertNotNull(regexp9);
      assertTrue(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp4));
      assertTrue(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp7));
      assertTrue(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp8));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp7));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp6));
      
      Regexp regexp10 = new Regexp(regexp9);
      assertNotNull(regexp10);
      assertTrue(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp4));
      assertTrue(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp7));
      assertTrue(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp10.equals((Object)regexp6));
      assertTrue(regexp10.equals((Object)regexp9));
      assertTrue(regexp10.equals((Object)regexp2));
      assertTrue(regexp10.equals((Object)regexp3));
      assertFalse(regexp10.equals((Object)regexp8));
      assertFalse(regexp10.equals((Object)regexp4));
      assertTrue(regexp10.equals((Object)regexp1));
      assertFalse(regexp10.equals((Object)regexp7));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp8));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp9));
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp7));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp6));
      
      Regexp regexp11 = new Regexp(regexp4);
      assertNotNull(regexp11);
      assertFalse(regexp11.equals((Object)regexp10));
      assertFalse(regexp11.equals((Object)regexp3));
      assertFalse(regexp11.equals((Object)regexp2));
      assertFalse(regexp11.equals((Object)regexp8));
      assertFalse(regexp11.equals((Object)regexp1));
      assertFalse(regexp11.equals((Object)regexp5));
      assertFalse(regexp11.equals((Object)regexp6));
      assertFalse(regexp11.equals((Object)regexp7));
      assertFalse(regexp11.equals((Object)regexp9));
      assertFalse(regexp11.equals((Object)regexp0));
      assertTrue(regexp11.equals((Object)regexp4));
      assertFalse(regexp4.equals((Object)regexp6));
      assertFalse(regexp4.equals((Object)regexp9));
      assertFalse(regexp4.equals((Object)regexp10));
      assertFalse(regexp4.equals((Object)regexp8));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp7));
      assertFalse(regexp4.equals((Object)regexp3));
      
      String string3 = "2,HD.}9Oh!";
      int int3 = (-254);
      Regexp regexp12 = Parser.parse(string3, int3);
      assertNotNull(regexp12);
      assertNotSame(regexp12, regexp7);
      assertNotSame(regexp12, regexp8);
      assertNotSame(regexp12, regexp9);
      assertNotSame(regexp12, regexp4);
      assertNotSame(regexp12, regexp10);
      assertNotSame(regexp12, regexp6);
      assertNotSame(regexp12, regexp0);
      assertNotSame(regexp12, regexp1);
      assertNotSame(regexp12, regexp11);
      assertNotSame(regexp12, regexp5);
      assertNotSame(regexp12, regexp3);
      assertNotSame(regexp12, regexp2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(regexp12.equals((Object)regexp7));
      assertFalse(regexp12.equals((Object)regexp8));
      assertFalse(regexp12.equals((Object)regexp9));
      assertFalse(regexp12.equals((Object)regexp4));
      assertFalse(regexp12.equals((Object)regexp10));
      assertFalse(regexp12.equals((Object)regexp6));
      assertFalse(regexp12.equals((Object)regexp0));
      assertFalse(regexp12.equals((Object)regexp1));
      assertFalse(regexp12.equals((Object)regexp11));
      assertFalse(regexp12.equals((Object)regexp5));
      assertFalse(regexp12.equals((Object)regexp3));
      assertFalse(regexp12.equals((Object)regexp2));
      
      Regexp[] regexpArray0 = null;
      int int4 = 63;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "FV7Y/3Pci\\f";
      int int0 = 8613;
      Regexp regexp0 = Parser.parse("FV7Y/3Pci\f", 8613);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("FV7Y/3Pci\f", 8613);
      assertNotNull(parser0);
      
      String string1 = "l";
      Regexp regexp1 = Parser.parse("l", 8613);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("FV7Y/3Pci\f", 2530);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      int int1 = (-453);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-453));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = "\\6";
      int int0 = 100;
      String string1 = "(?P<";
      Regexp regexp0 = Parser.parse("\u0006", 1181);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String string0 = "ci]fdfwsX;Ao:'q\\Q";
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[5] = regexp0;
      Regexp regexp2 = Parser.parse("ci]fdfwsX;Ao:'qQ", 124);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = null;
      try {
        regexp3 = new Regexp(regexpArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "dR[Ys)4q\\v>2os1/";
      int int0 = 92;
      try { 
        Parser.parse("dR[Ys)4qv>2os1/", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Ys)4qv>2os1/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Regexp regexp0 = Parser.parse("RB{7,9eo*R<^;uyhn$", (-295));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = (-295);
      regexp0.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 10, 10);
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String string0 = "\\5|";
      Regexp regexp0 = Parser.parse("\u0005|", (-552));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string1 = "]";
      int int0 = 45;
      Regexp regexp2 = Parser.parse(string1, int0);
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      int int1 = 3286;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp2.equals(object0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(boolean0);
      
      regexp2.flags = int1;
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      int int2 = 2073;
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PLJ%8^$", (-559));
      assertNotNull(regexp0);
      
      regexp0.cap = 473;
      Regexp regexp1 = Parser.parse("PLJ%8^$", (-559));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertNotNull(regexp3);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp4;
      regexpArray0[3] = regexp4;
      regexpArray0[4] = regexp4;
      regexpArray0[5] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-559), 120250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -559
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("RB{7,eo*R<^;uyhn$", 3);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("RB{7,eo*R<^;uyhn$", 253);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Parser parser0 = new Parser("[:x{202f}x{205f}y{3000}](?i:])", 132);
      assertNotNull(parser0);
      
      Regexp regexp3 = Parser.parse("+zHwxFBKp`{'", (-1005));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      int int0 = 53;
      String string0 = ":@2[-L";
      try { 
        Parser.parse(":@2[-L", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-L`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      boolean boolean1 = regexp1.equals(object2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      
      try { 
        Parser.parse("n@2l[-L", 43600);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-L`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = "!:\\x{208}-\\x{2029}\\x{^02f}\\x{205f}\\ya3000}](?i:\\])";
      int int0 = 1061;
      try { 
        Parser.parse("!:x{208}-x{2029}x{^02f}x{205f}ya3000}](?i:])", 1061);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid repeat count: `{2029}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      int int0 = 433;
      try { 
        Parser.parse("!:x{208}-x{2029}Jx{202f}x{205f}y{3000}](?i:])", 433);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid repeat count: `{2029}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 3057;
      Regexp regexp0 = Parser.parse("(?-s)", 3057);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("(?-s)", 3057);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string0 = "(?(?";
      try { 
        Parser.parse("(?(?", 3057);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
