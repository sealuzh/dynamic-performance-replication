/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:28:27 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "2uiV6G*t";
      int int0 = 1543;
      HttpHeaders.parseSeconds("2uiV6G*t", 1543);
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((Headers) null).when(response0).headers();
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      HttpHeaders.skipWhitespace("", 0);
      HttpHeaders.parseSeconds("", 70);
      // Undeclared exception!
      try { 
        Headers.of((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // namesAndValues == null
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("Cannot buffer entire body for content length: ", 48);
      int int1 = HttpHeaders.skipUntil("'\"Nd3>/m(", 48, "Response{protocol=");
      assertTrue(int1 == int0);
      assertEquals(48, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("}D/l_", 0);
      int int1 = HttpHeaders.parseSeconds("}D/l_", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "uc[jqV0";
      stringArray0[1] = "uc[jqV0";
      Headers.of(stringArray0);
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "Vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">\"t,";
      stringArray0[1] = ">\"t,";
      Headers headers0 = Headers.of(stringArray0);
      headers0.toString();
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, ">\"t,");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("s`#60;|&W$_", 0, "7</S=)W%?%%KAtEgD+");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Vary";
      stringArray0[1] = "Vary";
      stringArray0[2] = "Vary";
      stringArray0[3] = "uc[jqV0";
      stringArray0[4] = "ow0YW.`u";
      stringArray0[5] = "uc[jqV0";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      Headers headers2 = HttpHeaders.varyHeaders(headers0, headers1);
      assertEquals(2, headers2.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("3", (-258));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Response{protocol=";
      stringArray0[1] = "";
      stringArray0[2] = "Vary";
      stringArray0[3] = "uc[jqV0";
      Headers headers0 = Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      Headers.of(stringArray0);
      HttpHeaders.parseSeconds("6", 65533);
      HttpHeaders.skipUntil("", 6, "uc[jqV0");
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "6");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "protocol == null";
      stringArray0[1] = "protocol == null";
      stringArray0[2] = "protocol == null";
      stringArray0[3] = "protocol == null";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "protocol == null");
      HttpHeaders.contentLength(headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl.parse("protocol == null");
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(2, headers0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Content-Length";
      stringArray0[1] = "R7S9}}RR|}";
      stringArray0[2] = "expected leading [0-9] or '-' character but was 0x";
      stringArray0[3] = "Vary";
      stringArray0[4] = " for ";
      stringArray0[5] = "qbr(#|bkv%";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "`:);oc5e7gP");
      HttpHeaders.contentLength(headers0);
      HttpUrl.parse("Vary");
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil("H.:cfA/7\"-w", (-1625), "data");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpHeaders.skipWhitespace("<|+K0W:z^/s", 2);
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.hasVaryAll(headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!?mPe^X*8(!A";
      stringArray0[1] = ", tDZRag=";
      Headers headers0 = Headers.of(stringArray0);
      headers0.toString();
      headers0.toMultimap();
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "!?mPe^X*8(!A");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dX<sZxXK)Pp6xZ<";
      stringArray0[1] = ", realm=";
      Headers headers0 = Headers.of(stringArray0);
      headers0.getDate("s>");
      Headers headers1 = Headers.of(stringArray0);
      headers0.names();
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
      
      headers0.toString();
      headers0.names();
      HttpHeaders.receiveHeaders((CookieJar) null, (HttpUrl) null, headers0);
      headers0.names();
      System.setCurrentTimeMillis((-609L));
      HttpHeaders.varyHeaders(headers0, headers0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "dX<sZxXK)Pp6xZ<");
      assertEquals(0, list0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseSeconds("a'Ivzro:L\"6*", Integer.MAX_VALUE);
      Set<String> set0 = HttpHeaders.varyFields(headers1);
      assertEquals(0, set0.size());
      
      int int0 = HttpHeaders.parseSeconds("xXH>,", Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, int0);
  }
}
