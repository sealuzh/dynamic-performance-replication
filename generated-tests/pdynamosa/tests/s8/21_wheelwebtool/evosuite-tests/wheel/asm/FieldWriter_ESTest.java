/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 17:29:34 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-49));
      classWriter0.index = (-1195);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1195), "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "8H`1", "8H`1", "value ", "8H`1");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-69));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "java/lang/Class", "KCI_+Y[_^ cgo", (String) null, (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1665);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "RuntimeVisibleAnnotations", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1371);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 4, "", "} GZleb", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@559e958c
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(768);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "JSR/RET are not supported with computeFrames opton", "3^26,P3(.[}n8e=\"CB", "3^26,P3(.[}n8e=\"CB", "");
      ByteVector byteVector0 = new ByteVector(1);
      Attribute attribute0 = new Attribute("JSR/RET are not supported with computeFrames opton");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-49));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "java/lang/Class", "KCI_+Y[_^ cgo", (String) null, (Object) null);
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(768);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "JSR/RET are not supported with computeFrames opton", "3^26,P3(.[}n8e=\"CB", "3^26,P3(.[}n8e=\"CB", "");
      fieldWriter0.visitAnnotation("\"m| ", true);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-57));
      classWriter0.version = (-57);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1195), "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-57));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1195), "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(768);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 768, "mqS", "D=Y-#Y?\"L", "", "");
      Attribute attribute0 = new Attribute("mqS");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-57));
      classWriter0.version = (-57);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1195), "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-49));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "java/lang/Class", "KCI_+Y[_^ cgo", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(768);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "JSR/RET are not supported with computeFrames opton", "3^26,P3(.[}n8e=\"CB", "3^26,P3(.[}n8e=\"CB", "");
      fieldWriter0.visitAnnotation("\"m| ", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-49));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "java/lang/Class", "KCI_+Y[_^ cgo", (String) null, (Object) null);
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-57));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1195), "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null", "The wildcard list must not be null");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-412), "The wildcard list must not be null", "8z)n|S^)ct^EM", (String) null, (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1371);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Zic", "Zic", "Zic", "Zic");
      fieldWriter0.visitEnd();
  }
}
