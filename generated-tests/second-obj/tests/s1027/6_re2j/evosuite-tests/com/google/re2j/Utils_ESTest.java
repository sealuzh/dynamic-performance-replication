/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:17:58 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(690);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utils.isWordRune(5);
      // Undeclared exception!
      try { 
        Utils.subarray((int[]) null, 5, 917);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Utils.subarray(byteArray0, 4, 4);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utils.isWordRune(80);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 80, (byte)0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-2684));
      assertEquals(0, int0);
      
      boolean boolean0 = Utils.isalnum(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-2674));
      assertEquals(0, int0);
      
      boolean boolean0 = Utils.isalnum(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = Utils.unhex(998);
      assertEquals((-1), int0);
      
      int int1 = Utils.emptyOpContext((-1), 998);
      assertEquals(37, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune(5);
      boolean boolean1 = Utils.isalnum(5);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune(5);
      boolean boolean1 = Utils.isalnum(5);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = Utils.indexOf(byteArray0, byteArray0, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = Utils.emptyOpContext((-810), (-810));
      assertEquals(47, int0);
      
      byte[] byteArray0 = new byte[2];
      int int1 = Utils.indexOf(byteArray0, byteArray0, (byte)0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1506;
      // Undeclared exception!
      try { 
        Utils.subarray((byte[]) null, 1506, 12304);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)11;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(16);
      StringBuilder stringBuilder1 = stringBuilder0.append((-2047.7));
      Utils.escapeRune(stringBuilder1, 16);
      assertEquals("-2047.7\\x10", stringBuilder1.toString());
      assertEquals("-2047.7\\x10", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = Utils.unhex(65);
      assertEquals(10, int0);
      
      boolean boolean0 = Utils.isalnum(5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utils.isalnum(3836);
      int[] intArray0 = Utils.EMPTY_INTS;
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, (byte)11);
      assertEquals("\\x0b", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = Utils.runeToString(829);
      assertEquals("\u033D", string0);
      
      int int0 = Utils.emptyOpContext(102, 829);
      assertEquals(16, int0);
      
      boolean boolean0 = Utils.isalnum(102);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = Utils.isalnum((-2750));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-2750));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(65);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune(95);
      assertTrue(boolean0);
      
      String string0 = Utils.runeToString(1772);
      assertEquals("\u06EC", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Hex_Digit");
      stringBuilder0.append(2042);
      Utils.escapeRune(stringBuilder0, 10);
      assertEquals("Hex_Digit2042\\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utils.escapeRune((StringBuilder) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utils.isWordRune(57);
      int int0 = Utils.EMPTY_END_TEXT;
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[0];
      Utils.subarray(intArray0, 1518, 1518);
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 1518);
      assertEquals("\\x{5ee}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = Utils.EMPTY_WORD_BOUNDARY;
      String string0 = Utils.runeToString(16);
      assertEquals("\u0010", string0);
      
      int int1 = Utils.emptyOpContext(127, 16);
      assertEquals(32, int1);
      
      int int2 = Utils.emptyOpContext(16, 10);
      assertEquals(34, int2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = Utils.emptyOpContext(10, 1120);
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-41);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-41));
      assertEquals(5, int0);
      
      int int1 = Utils.unhex((byte)0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-6);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)27;
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)0;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-41));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = Utils.unhex(97);
      assertEquals(10, int0);
      
      String string0 = Utils.runeToString(97);
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utils.isalnum(11768);
      Utils.stringToRunes("3m}");
      StringBuilder stringBuilder0 = new StringBuilder("3m}");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      Utils.escapeRune(stringBuilder1, 9);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder2 = new StringBuilder(9);
      Utils.escapeRune(stringBuilder1, 11768);
      assertEquals("}m3\\t\u2DF8", stringBuilder1.toString());
      
      boolean boolean0 = Utils.isWordRune(64726);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-41);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-41));
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utils.runeToString((-810));
      int int0 = Utils.EMPTY_WORD_BOUNDARY;
      int[] intArray0 = Utils.EMPTY_INTS;
      StringBuilder stringBuilder0 = new StringBuilder("\uFCD6");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuffer stringBuffer0 = new StringBuffer(127);
      Utils.escapeRune(stringBuilder1, 63);
      int int1 = Utils.EMPTY_END_LINE;
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utils.isalnum(11775);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      StringBuilder stringBuilder0 = new StringBuilder((byte)0);
      Utils.escapeRune(stringBuilder0, 13);
      Utils.escapeRune(stringBuilder0, 57);
      int int0 = Utils.EMPTY_END_TEXT;
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 57);
      int int1 = Utils.EMPTY_WORD_BOUNDARY;
      stringBuilder0.append((double) 16);
      stringBuilder0.codePoints();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2143, (Object) stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2143
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = Utils.unhex(48);
      assertEquals(0, int0);
      
      boolean boolean0 = Utils.isalnum(48);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      Utils.escapeRune(stringBuilder0, 12);
      assertEquals("\\f", stringBuilder0.toString());
  }
}
