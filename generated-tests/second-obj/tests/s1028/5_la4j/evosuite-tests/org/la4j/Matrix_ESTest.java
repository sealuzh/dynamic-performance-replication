/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:40:16 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 4;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [4..0][4..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      cCSMatrix0.max();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.updateRow(0, (VectorFunction) null);
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer((-1537));
      cCSMatrix0.toMatrixMarket();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.toString();
      cCSMatrix0.fold(matrixAccumulator0);
      cCSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-1537), (-1537));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(441, 441);
      matrix0.minInRow(441);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1112;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1112;
      doubleArray0[1] = (double) 1112;
      doubleArray0[2] = (double) 1112;
      doubleArray0[3] = (double) 1112;
      doubleArray0[4] = (double) 1112;
      doubleArray0[5] = (double) 1112;
      doubleArray0[6] = (double) 1112;
      doubleArray0[7] = (double) 1112;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(1112, 1112, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1112
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 3048;
      doubleArray0[1] = (double) 3022;
      doubleArray0[2] = (double) 3048;
      doubleArray0[3] = (double) 3022;
      doubleArray0[4] = (double) 3022;
      doubleArray0[5] = (double) 3048;
      int[] intArray0 = new int[3];
      int int0 = (-2937);
      intArray0[0] = (-2937);
      intArray0[2] = 3022;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3048, 3048, 3022, doubleArray0, intArray0, intArray0);
      int int1 = 32;
      // Undeclared exception!
      try { 
        cCSMatrix0.shuffle();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2101.3245177631898);
      columnMajorSparseMatrix0.iteratorOfColumn(7);
      double[][] doubleArray0 = new double[0][3];
      Matrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformColumn(0, vectorFunction0);
      columnMajorSparseMatrix0.insert(matrix0, 7, 0, 0, (-822), 0, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformColumn(8, vectorFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2300, 8);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, 2840, (-1908874352), 10, (-4174), 6, (-4174));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 6x-4174
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "";
      SparseMatrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1428, 0.0, (Random) null);
      int int0 = 1849;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.transformColumn(1849, vectorFunction0);
      int int1 = 10;
      ColumnMajorSparseMatrix.zero(int1, int0);
      Matrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        Matrix.identity((-2099));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 6;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 62);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      mockRandom0.nextGaussian();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) denseMatrix0, 8, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 8 rows and 6 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      int int0 = 6;
      sparseMatrix0.minInRow(6);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(6, 161);
      int int1 = 16;
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, 16, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 16 rows and 0 cols at 0, 0 from a 6x161 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      Matrix matrix0 = sparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      
      matrix0.hashCode();
      assertTrue(sparseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      sparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, (double)161, (double)0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldRows(vectorAccumulator0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      denseMatrix0.mkString(numberFormat0, "Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.", (String) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-4155.586779998488));
      Matrix matrix0 = denseMatrix0.blankOfRows(10);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      matrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        matrix0.updateAt(7, 409, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 409
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      MockRandom mockRandom0 = new MockRandom(332L);
      Locale.forLanguageTag("%%MatrixMarket");
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      NumberFormat.getNumberInstance();
      denseMatrix0.mkString(numberFormat0);
      SparseVector sparseVector0 = SparseVector.zero(5149);
      Vector.unit(4);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(0, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 5149. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix.zero(0, 161);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      sparseMatrix0.mkString(numberFormat0);
      SparseVector.zero(0);
      Vector vector0 = Vector.unit(0);
      sparseMatrix0.setRow(2, vector0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 1726;
      CRSMatrix cRSMatrix0 = new CRSMatrix(803, 1726);
      int int1 = (-1431655764);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfRows((-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1431655764x1726
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      NumberFormat.getNumberInstance();
      SparseVector.zero(0);
      Vector.unit(0);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiplyByItsTranspose();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transform(matrixFunction0);
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric((-1225), 1179.11, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1225x-1225
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0.0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(32);
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0.8512212121892466);
      Integer integer1 = new Integer(8);
      Double double1 = new Double(0.8512212121892466);
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 10);
      ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow(10, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      int int1 = 441;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 441);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.subtract(369.83784410494485);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapRows(32, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Matrix.zero(0, 0);
      int int0 = 3355;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(5, 3355, (double) 3355, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      int int1 = (-1047);
      rowMajorSparseMatrix0.blankOfColumns(2);
      // Undeclared exception!
      try { 
        Matrix.constant((-1047), (-1047), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 7);
      columnMajorSparseMatrix0.iteratorOfColumn(0);
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[1] = doubleArray0;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      columnMajorSparseMatrix0.toCSV(numberFormat0);
      columnMajorSparseMatrix0.rank();
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix((-436), 119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -436x119
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2538L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(3, 1, 1.573302702437476E-10, (Random) mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom(0);
      int[] intArray0 = new int[0];
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      cRSMatrix0.diagonalProduct();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        Matrix.unit(631, (-1435));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 161;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-915));
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      basic2DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      sparseMatrix0.mkString((NumberFormat) decimalFormat0);
      sparseMatrix0.hashCode();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-5189.1);
      sparseMatrix0.setAll(1810.928425);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      matrix0.subtract(1.0);
      int int0 = 32;
      int int1 = 255;
      int int2 = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = 369.83784410494485;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1.0;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(255, 1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 4;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-237.520912);
      Matrix matrix0 = Matrix.from1DArray(4, 4, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.subtract((-237.520912));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double[] doubleArray0 = new double[2];
      SparseVector.fromArray(doubleArray0);
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      Double double0 = new Double(15.660157631219585);
      Object object0 = new Object();
      basic2DMatrix0.product();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(32, 0);
      denseMatrix0.infinityNorm();
      NumberFormat.getNumberInstance();
      SparseVector.zero(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("org.la4j.vector.sparse.CompressedVector");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3471;
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 7);
      columnMajorSparseMatrix0.iteratorOfColumn(0);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      columnMajorSparseMatrix0.removeFirstColumn();
      MatrixVectorOperation<Double> matrixVectorOperation0 = (MatrixVectorOperation<Double>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      DenseVector denseVector0 = DenseVector.random(1845, mockRandom0);
      // Undeclared exception!
      try { 
        denseVector0.to((VectorFactory<Vector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SparseMatrix.zero(161, 0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(161);
      int int0 = 3;
      ColumnMajorSparseMatrix.zero(3, 161);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 161;
      doubleArray1[1] = (double) 2202L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 2202L;
      doubleArray2[1] = (double) 7;
      doubleArray2[2] = (double) 161;
      doubleArray2[3] = (double) 0;
      doubleArray0[1] = doubleArray2;
      Matrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      Matrix matrix0 = columnMajorSparseMatrix0.removeFirstColumn();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      matrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        SparseVector.zero((-1240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1240
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeColumn((-2366));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 31;
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = Matrix.identity(2);
      int int1 = (-99);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateColumn((-99), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-99' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("       ");
      int int0 = (-1225);
      int int1 = 160;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(160);
      Integer integer0 = new Integer((-1225));
      Double double0 = new Double(160);
      denseMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric((-1225), 2072.149616993, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1225x-1225
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 62);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 6, (Random) mockRandom0);
      mockRandom0.nextGaussian();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix0.shuffle();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 62;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 62;
      doubleArray0[5] = (double) 62;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 6 rows and 62 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 161;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, 161, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 161 rows and 5 cols at 0, 0 in a 161x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 62);
      Matrix.identity(6);
      denseMatrix0.mkString("0G  7v]j", "s<Z#^6QKQ");
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-769);
      // Undeclared exception!
      try { 
        Basic2DMatrix.random((-769), 62, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 2;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(2, 2);
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow(2, (double) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1484.38;
      doubleArray1[1] = (-54.1979400004124);
      doubleArray1[2] = 1047.0377882636892;
      doubleArray1[3] = 856.0541699;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat("`U0QCZI");
      basic2DMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      basic2DMatrix0.foldColumn(2, vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("       ");
      columnMajorSparseMatrix0.getRow((-13));
      int int0 = 0;
      columnMajorSparseMatrix0.minInRow(32);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(32, 0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) denseMatrix0, 101, (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 101x-13
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(49, 0);
      ColumnMajorSparseMatrix.randomSymmetric(766, 0.0, (Random) null);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix1.rank();
      basic2DMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
          sparseMatrix0.getRow(161);
          sparseMatrix0.minInRow(0);
          OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
          ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1000, Double.POSITIVE_INFINITY);
          ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.randomSymmetric(1913, 0.0, (Random) null);
          OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
          sparseMatrix0.toDenseMatrix();
          // Undeclared exception!
          try { 
            SparseMatrix.block(columnMajorSparseMatrix1, columnMajorSparseMatrix0, columnMajorSparseMatrix1, columnMajorSparseMatrix0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Sides of blocks are incompatible!
             //
             verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 161;
      // Undeclared exception!
      try { 
        SparseMatrix.zero(161, (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 161x-7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(2);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 27);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, (-1912384603), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1912384603x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 10;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.zero(3471, 119, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3471);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.updateColumn(10, vectorFunction0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (Double) 0.0);
      Integer integer1 = new Integer(10);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      hashMap1.put((Integer) null, (Double) 10.0);
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap1, 3471);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix.diagonal(32, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(8);
      Integer integer0 = new Integer(8);
      matrix0.toColumnMajorSparseMatrix();
      Double double0 = new Double(32);
      hashMap0.put(integer0, double0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.updateColumn((-2073432486), vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 32891.41302488682;
      doubleArray0[1] = 815.5;
      doubleArray0[2] = 1.0;
      double double0 = (-935.3084097121);
      doubleArray0[3] = (-935.3084097121);
      doubleArray0[4] = 0.9995241096786591;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        matrix0.multiply((Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 5 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.setColumn(0, (double) 0);
      int int1 = 0;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0, "B['c#AQ?`Y#9n(Vak", "0Ns)AH2sABO`:S+}");
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 3471;
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 119);
      columnMajorSparseMatrix0.iteratorOfColumn(0);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix matrix0 = Matrix.from2DArray(doubleArray1);
      matrix0.columnMajorIterator();
      ((CCSMatrix) columnMajorSparseMatrix0).blankOfShape(4, 0);
      columnMajorSparseMatrix0.removeFirstColumn();
      matrix0.infinityNorm();
      columnMajorSparseMatrix0.rank();
      int int1 = (-436);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix((-436), 119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -436x119
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      cCSMatrix0.max();
      cCSMatrix0.updateRow(0, (VectorFunction) null);
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer((-1537));
      cCSMatrix0.toMatrixMarket();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.fold(matrixAccumulator0);
      cCSMatrix0.toRowVector();
      RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n0 0 0\n");
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(928);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 928
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 1);
      columnMajorSparseMatrix0.multiplyByItsTranspose();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.transform(matrixFunction0);
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        DenseMatrix.zero(1, (-1982292620));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 3022;
      int int1 = 3662;
      int int2 = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3662;
      doubleArray0[1] = (double) (-2937);
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix0 = new CCSMatrix(3662, 3022, 1, doubleArray0, intArray0, intArray0);
      int int3 = (-1297);
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft((-1297), 985);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1297][0..985].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3044;
      doubleArray0[1] = (double) 3044;
      doubleArray0[2] = (double) 3044;
      doubleArray0[3] = (double) 3022;
      doubleArray0[4] = (double) 3022;
      doubleArray0[5] = (double) 3044;
      int[] intArray0 = new int[3];
      intArray0[0] = (-2937);
      intArray0[1] = 3022;
      intArray0[2] = 3022;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3044, 3044, 3022, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(32, 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3021
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix.fromCSV("       ");
      ColumnMajorSparseMatrix.fromCSV("       ");
      NumberFormat.getIntegerInstance();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = NumberFormat.FRACTION_FIELD;
      double[][] doubleArray0 = new double[1][7];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      basic2DMatrix0.removeLastColumn();
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      Integer integer0 = new Integer((-915));
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[1];
      SparseVector.fromArray(doubleArray0);
      sparseMatrix0.hashCode();
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      // Undeclared exception!
      try { 
        sparseMatrix0.setColumn((-915), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -915
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2937);
      intArray0[2] = 3022;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 3022);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3022);
      cCSMatrix1.equals((Matrix) cCSMatrix0, 1.0);
      MatrixMatrixOperation<RowMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<RowMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      // Undeclared exception!
      try { 
        cCSMatrix1.apply(matrixMatrixOperation0, (Matrix) cCSMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(161, 2879.17195347119);
      cCSMatrix0.max();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      int int0 = (-1095);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateRow((-1095), (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1095' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 35;
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 35;
      doubleArray0[3] = (double) 35;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(35, 35);
      cCSMatrix0.max();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateRow(35, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '35' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 20;
      NumberFormat.getNumberInstance();
      MockRandom mockRandom0 = new MockRandom(332L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(20, mockRandom0);
      DenseMatrix.zero(216, 5149);
      denseMatrix0.shuffle();
      NumberFormat.getNumberInstance();
      mockRandom0.longs();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      denseMatrix0.copyOfShape(0, 962);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 161;
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(161, 0);
      cCSMatrix0.getRow(161);
      cCSMatrix0.minInRow(0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.zero(0, 161);
      basic2DMatrix0.minInColumn(32);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix.zero(0, 32);
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix(0, 844, (-2404));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2404.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.getRow(161);
      cCSMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      denseMatrix0.multiply(1131.3958782934);
      Integer integer0 = new Integer(0);
      Double double0 = new Double(1443.74601284107);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(0);
      Double double1 = new Double(0.0);
      Integer integer1 = new Integer((-128));
      Double double2 = new Double(0.0);
      hashMap0.put(integer1, double2);
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 62);
      denseMatrix0.multiply((double) 6);
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(523);
      Double double1 = new Double((-828.44));
      Integer integer1 = new Integer(1);
      Double.valueOf((double) 6);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 447);
      Double double0 = new Double(0.0);
      Double double1 = new Double(2800.1);
      Double.isFinite(0.0);
      RowMajorSparseMatrix.zero(447, 0);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-22.34);
      doubleArray1[1] = 1979.5297884;
      doubleArray1[2] = 1979.5297884;
      doubleArray1[3] = (double) 399;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      basic2DMatrix0.rotate();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.update(matrixFunction0);
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, 0.0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("No rows or columns selected.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        SparseMatrix.zero(Integer.MAX_VALUE, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-2847), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1510;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1510, 0.0);
      cCSMatrix0.max();
      VectorFunction vectorFunction0 = null;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      int int1 = 1447;
      // Undeclared exception!
      try { 
        cCSMatrix0.updateRow(1447, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(137, 0);
      sparseMatrix0.getRow(137);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 137);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      sparseMatrix0.max();
      Integer integer0 = new Integer(137);
      // Undeclared exception!
      try { 
        sparseMatrix0.add((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 137x0 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 62);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(62, 62);
      rowMajorSparseMatrix0.manhattanNorm();
      rowMajorSparseMatrix0.equals((Matrix) denseMatrix0, (double) 6);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(62, 6);
      cRSMatrix0.rotate();
      rowMajorSparseMatrix0.swapRows(62, 62);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(255, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 0.0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2101.3245177631898);
      int int0 = 16;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 16, 32);
      DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      String string0 = matrix0.mkString(numberFormat0);
      Matrix matrix1 = matrix0.blank();
      rowMajorSparseMatrix0.equals(matrix1, 2101.3245177631898);
      CCSMatrix.fromMatrixMarket(string0);
      MatrixMatrixOperation<RowMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<RowMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      matrix1.apply(matrixMatrixOperation0, (Matrix) cCSMatrix0);
      rowMajorSparseMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 3022;
      intArray0[2] = 3022;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 3022);
      Matrix matrix0 = cCSMatrix0.blank();
      matrix0.equals((Matrix) cCSMatrix0, 1.0);
      MatrixMatrixOperation<RowMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<RowMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.apply(matrixMatrixOperation0, (Matrix) cCSMatrix0);
      rowMajorSparseMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      Integer integer0 = new Integer(0);
      NumberFormat.getIntegerInstance();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) (-915);
      doubleArray0[2] = (double) 161;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      SparseVector.fromArray(doubleArray0);
      denseMatrix0.rotate();
      sparseMatrix0.hashCode();
      double[][] doubleArray1 = new double[1][0];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      denseMatrix0.rank();
      basic2DMatrix0.iteratorOfColumn((-1112));
      basic2DMatrix0.kroneckerProduct(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("       ");
      columnMajorSparseMatrix0.getRow((-13));
      int int0 = 0;
      columnMajorSparseMatrix0.minInRow(32);
      DenseMatrix.zero(32, 0);
      Matrix matrix0 = columnMajorSparseMatrix0.divide(101);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      ParsePosition parsePosition0 = new ParsePosition(32);
      numberFormat0.parseObject("       ", parsePosition0);
      matrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        SparseVector.zero((-989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -989
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3044;
      doubleArray0[1] = (double) 3044;
      doubleArray0[2] = (double) 3044;
      doubleArray0[3] = (double) 3022;
      doubleArray0[4] = (double) 3022;
      doubleArray0[5] = (double) 3044;
      int[] intArray0 = new int[3];
      intArray0[0] = (-2937);
      intArray0[1] = 3022;
      intArray0[2] = 3022;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3044, 3044, 3022, doubleArray0, intArray0, intArray0);
      int int0 = 32;
      int int1 = 1000;
      cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.diagonal((-2249), (-2759.2744409289694));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 3048;
      int int1 = 3022;
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 3048;
      doubleArray0[1] = (double) 3022;
      doubleArray0[2] = (double) 3048;
      doubleArray0[3] = (double) 3022;
      doubleArray0[4] = (double) 3022;
      doubleArray0[5] = (double) 3048;
      int[] intArray0 = new int[3];
      intArray0[0] = (-2937);
      intArray0[2] = 3022;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3048, 3048, 3022, doubleArray0, intArray0, intArray0);
      double double0 = 3107.053735890799;
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-2937));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2937.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 7);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Vector vector0 = Vector.unit(7);
      Vector vector1 = vector0.add((double) 2202L);
      DenseVector denseVector0 = vector1.toDenseVector();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector1 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector1);
      columnMajorSparseMatrix0.multiply(matrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(8, (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      DenseMatrix.zero(0, 161);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      sparseMatrix0.max();
      Integer integer0 = new Integer((-915));
      NumberFormat.getIntegerInstance();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow(0, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0.0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2101.3245177631898);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 16, 32);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      matrix0.mkString(numberFormat0);
      matrix1.max();
      Integer integer0 = new Integer(16);
      NumberFormat.getIntegerInstance();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 32;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix1.insertRow(16, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2. Should be: 32.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 10;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 7);
      Matrix.from1DArray(4, 2920, doubleArray0);
      columnMajorSparseMatrix0.iterator();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(8, 10.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1109.209;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2667.6120308493078);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1109.209;
      doubleArray2[3] = 1109.209;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      sparseMatrix0.toString();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random((-2154), (-1042), 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 32;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 13, 32);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      rowMajorSparseMatrix0.removeLastRow();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.getNegativeSuffix();
      matrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(13, 0.0, (Random) mockRandom0);
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 13;
      intArray0[3] = 32;
      intArray0[0] = 13;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(13, 0.0, (Random) mockRandom0);
      int[] intArray0 = new int[6];
      intArray0[0] = 13;
      intArray0[4] = 13;
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      intArray0[2] = 13;
      intArray0[0] = 13;
      denseMatrix0.select(intArray0, intArray0);
      denseMatrix0.sliceBottomRight(13, 13);
      Matrix.unit(32, 0);
      // Undeclared exception!
      try { 
        Matrix.random(32, (-2082408384), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 3048;
      int int1 = 3022;
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 3048;
      doubleArray0[1] = (double) 3022;
      doubleArray0[2] = (double) 3048;
      doubleArray0[3] = (double) 3022;
      doubleArray0[4] = (double) 3022;
      doubleArray0[5] = (double) 3048;
      int[] intArray0 = new int[3];
      intArray0[0] = (-2937);
      intArray0[2] = 3022;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3048, 3048, 3022, doubleArray0, intArray0, intArray0);
      double double0 = 3107.053735890799;
      // Undeclared exception!
      try { 
        cCSMatrix0.removeFirstRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 48;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 48;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 7;
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(48, 7);
      columnMajorSparseMatrix0.iteratorOfColumn(0);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int1 = 32;
      int int2 = (-34);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.sliceTopLeft(0, (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][0..-34].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.product();
      // Undeclared exception!
      try { 
        Matrix.fromCSV("Card+nazi}y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 29.109667303870978);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      double[] doubleArray0 = new double[3];
      SparseVector.fromArray(doubleArray0);
      columnMajorSparseMatrix0.hashCode();
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      Double double0 = new Double(29.109667303870978);
      columnMajorSparseMatrix0.equals((Object) linearAlgebra_SolverFactory0);
      Basic2DMatrix.zero(32, 32);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) columnMajorSparseMatrix0, (-852), 32, 32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -852, 32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 17;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 7);
      columnMajorSparseMatrix0.iteratorOfColumn(0);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix matrix0 = Matrix.from2DArray(doubleArray1);
      Matrix matrix1 = columnMajorSparseMatrix0.removeFirstColumn();
      matrix0.infinityNorm();
      NumberFormat.getNumberInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(2);
      basic2DMatrix0.max();
      Integer integer0 = new Integer(5);
      NumberFormat.getIntegerInstance();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 337;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = (double) 2202L;
      doubleArray2[3] = (double) 2202L;
      doubleArray2[4] = (double) 5;
      doubleArray2[5] = 1.0;
      SparseVector sparseVector0 = SparseVector.zero(17, 7);
      // Undeclared exception!
      try { 
        matrix1.insertRow((-1908874352), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 3048;
      int int1 = 3022;
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 3048;
      doubleArray0[1] = (double) 3022;
      doubleArray0[2] = (double) 3048;
      doubleArray0[3] = (double) 3022;
      doubleArray0[4] = (double) 3022;
      doubleArray0[5] = (double) 3048;
      int[] intArray0 = new int[3];
      intArray0[0] = 3022;
      intArray0[2] = 3022;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3048, 3048, 3022, doubleArray0, intArray0, intArray0);
      double double0 = 3107.053735890799;
      // Undeclared exception!
      cCSMatrix0.power(3022);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2202L);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 7);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(0, 32891.41302488682);
      Matrix matrix0 = basic2DMatrix0.power(145);
      Matrix matrix1 = columnMajorSparseMatrix0.shuffle();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix1.forEach(consumer0);
      columnMajorSparseMatrix0.toMatrixMarket();
      Matrix.constant(0, 0, 0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(basic2DMatrix0, matrix1, columnMajorSparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      Integer integer0 = new Integer((-915));
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      SparseVector.fromArray(doubleArray0);
      sparseMatrix0.hashCode();
      double[][] doubleArray1 = new double[15][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      Matrix matrix0 = sparseMatrix0.removeFirstRow();
      Matrix matrix1 = Matrix.block(matrix0, matrix0, sparseMatrix0, sparseMatrix0);
      Double double0 = new Double(0);
      Double.sum((-915), 0);
      matrix0.equals((Object) double0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Locale.forLanguageTag("No");
      matrix1.setRow(17, (double) 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceTopLeft((-915), 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-915][0..37].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[7];
      NumberFormat.getIntegerInstance();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      int int0 = NumberFormat.FRACTION_FIELD;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[12];
      doubleArray2[0] = 2024.4356;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      Matrix matrix0 = basic2DMatrix0.insertRow(0, sparseVector0);
      basic2DMatrix0.rank();
      basic2DMatrix0.trace();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformRow(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("3fY]@DF>\tF");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      denseMatrix0.foldColumn(8, vectorAccumulator0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      denseMatrix0.is(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("v~a");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 161;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 7);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) null, 895, 1808, 7, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 895, 1808
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = 15.660157631219585;
      ColumnMajorSparseMatrix.diagonal(32, 32);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 32;
      doubleArray1[1] = 1917.6020121731;
      doubleArray0[0] = doubleArray1;
      SparseMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      int int0 = 16;
      RowMajorSparseMatrix.zero(32, 16, 32);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformRow((-1994091957), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1994091957' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(328L);
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(7, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      NumberFormat.getIntegerInstance();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 38;
      SparseVector.fromArray(doubleArray0);
      int int0 = NumberFormat.FRACTION_FIELD;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 15.660157631219585);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2101.3245177631898);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 16, 32);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      String string0 = matrix0.mkString(numberFormat0);
      Matrix matrix2 = matrix0.blank();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix1.equals(matrix2, 2101.3245177631898);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      matrix1.equals((Matrix) columnMajorSparseMatrix0, (-3089.9));
      CCSMatrix.fromMatrixMarket(string0);
      int int0 = 124;
      CCSMatrix.diagonal(int0, int0);
      MatrixMatrixOperation<RowMajorSparseMatrix> matrixMatrixOperation0 = null;
      matrix0.apply(matrixMatrixOperation0, (Matrix) denseMatrix0);
      rowMajorSparseMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("       ");
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("       ");
      int int0 = (-13);
      NumberFormat.getIntegerInstance();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-993.92239394292);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1L);
      doubleArray1[1] = (double) (-1L);
      SparseVector.fromArray(doubleArray1);
      columnMajorSparseMatrix0.hashCode();
      double[][] doubleArray2 = new double[4][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray2);
      Matrix matrix0 = columnMajorSparseMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, matrix0, columnMajorSparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CCSMatrix.zero(1923, 1923);
      Matrix.unit(1923, 1923);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 15.660157631219585);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2101.3245177631898);
      int int0 = 16;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 16, 32);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      String string0 = columnMajorSparseMatrix0.mkString(numberFormat0);
      columnMajorSparseMatrix0.blank();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      columnMajorSparseMatrix0.equals(matrix1, (double) 32);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      matrix0.equals((Matrix) columnMajorSparseMatrix0, (double) 32);
      CCSMatrix.fromMatrixMarket(string0);
      int int1 = (-2454);
      CCSMatrix.diagonal(int1, int0);
      MatrixMatrixOperation<RowMajorSparseMatrix> matrixMatrixOperation0 = null;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = matrix1.apply(matrixMatrixOperation0, (Matrix) columnMajorSparseMatrix0);
      cCSMatrix0.toColumnVector();
      rowMajorSparseMatrix1.min();
      int int2 = 0;
      cCSMatrix0.insert((Matrix) rowMajorSparseMatrix0, int2, int2);
      String string1 = "Q\"I9KBs5bm";
      Matrix.fromMatrixMarket(string1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(22, 32, 32);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MatrixOperation<Matrix> matrixOperation0 = inPlaceCopyMatrixToMatrix0.partiallyApply(columnMajorSparseMatrix0);
      matrix0.apply(matrixOperation0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.diagonal(22, (-52.0));
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, columnMajorSparseMatrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 3;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2202L);
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(3, (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-2255);
      // Undeclared exception!
      try { 
        Matrix.diagonal((-2255), (-2255));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      NumberFormat.getNumberInstance();
      MockRandom mockRandom0 = new MockRandom(332L);
      Locale locale0 = Locale.forLanguageTag("%%MatrixMarket");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(216, 5149);
      NumberFormat.getNumberInstance();
      denseMatrix0.mkString(numberFormat0);
      SparseVector.zero(5149);
      denseMatrix0.kroneckerProduct(denseMatrix1);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      denseMatrix1.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 32;
      double double0 = 0.0;
      int int1 = 13;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 13, 32);
      DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      rowMajorSparseMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("Cannot have negative destination position: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      NumberFormat.getIntegerInstance();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      int int0 = NumberFormat.FRACTION_FIELD;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      basic2DMatrix0.rank();
      // Undeclared exception!
      try { 
        basic2DMatrix0.setColumn(1, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(161, 0);
      cCSMatrix0.getRow(161);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transformRow(153, (VectorFunction) null);
      DenseMatrix.zero(0, 161);
      Integer integer0 = new Integer(0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      cCSMatrix1.toMatrixMarket();
      Integer integer1 = new Integer(0);
      cCSMatrix0.toRowVector();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.identity(0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      cRSMatrix1.setAll(1853.3878);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      NumberFormat.getNumberInstance();
      MockRandom mockRandom0 = new MockRandom();
      Locale locale0 = Locale.forLanguageTag("%%MatrixMarket");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(216, 5149);
      NumberFormat.getNumberInstance();
      denseMatrix0.mkString(numberFormat0);
      SparseVector sparseVector0 = SparseVector.zero(5149);
      Vector.unit(4);
      denseMatrix1.setRow(0, (Vector) sparseVector0);
      denseMatrix0.kroneckerProduct(denseMatrix1);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      denseMatrix1.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "7   ";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("7   ");
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInRow(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.minInRow(0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      Integer integer0 = new Integer((-915));
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-915);
      SparseVector.fromArray(doubleArray0);
      sparseMatrix0.hashCode();
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      Matrix matrix0 = sparseMatrix0.removeFirstRow();
      Matrix matrix1 = Matrix.block(matrix0, matrix0, sparseMatrix0, sparseMatrix0);
      matrix1.rank();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 15.660157631219585);
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.multiply(2101.3245177631898);
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.zero(32, 16, 32);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      basic2DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = 2101.3245177631898;
      SparseVector.fromArray(doubleArray0);
      columnMajorSparseMatrix0.hashCode();
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(doubleArray1);
      cCSMatrix0.removeFirstRow();
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix(doubleArray1);
      basic2DMatrix2.rank();
      cCSMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      inPlaceCopyMatrixToMatrix0.partiallyApply(denseMatrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(8);
      Integer integer0 = new Integer(8);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = matrix0.toColumnMajorSparseMatrix();
      Double double0 = new Double(32);
      SparseVector.fromMap(hashMap0, 437);
      columnMajorSparseMatrix1.toRowVector();
      columnMajorSparseMatrix0.toDenseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-1997));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 0);
      sparseMatrix0.getRow(161);
      sparseMatrix0.transformRow(153, (VectorFunction) null);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      sparseMatrix0.toCSV();
      sparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom((-308L));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.updateRow(161, vectorFunction0);
      denseMatrix0.blankOfRows(161);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 7);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(7, 161);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      sparseMatrix0.insert((Matrix) sparseMatrix0, 7, 7);
      int int0 = 14;
      sparseMatrix0.swapRows(7, 14);
      DecimalFormat decimalFormat1 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom(7);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 0.9995241096786591);
      cRSMatrix0.diagonalProduct();
      // Undeclared exception!
      try { 
        denseMatrix0.sliceBottomRight(14, 1527);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [14..7][1527..161].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(161, 161);
      sparseMatrix0.getRow(161);
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 161);
      int int1 = 0;
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, 0, 161);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 161 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 32;
      double double0 = 0.0;
      int int1 = 13;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      NumberFormat.getPercentInstance();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blank();
      // Undeclared exception!
      try { 
        denseMatrix0.hadamardProduct(cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 32x32 does not equal to 4x4.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 32;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(32, 32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      basic2DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(13, 0.0, (Random) mockRandom0);
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[4] = 32;
      intArray0[2] = 13;
      intArray0[3] = 32;
      intArray0[0] = 13;
      // Undeclared exception!
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = new CRSMatrix(32, 32, 13);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cRSMatrix0.removeLastRow();
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(13, 32, 32);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(13, 0.0, (Random) mockRandom0);
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[4] = 32;
      intArray0[2] = 13;
      intArray0[5] = 32;
      intArray0[0] = 13;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.subtract((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 13x13 does not equal to 32x32.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 29.109667303870978);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      double[] doubleArray0 = new double[3];
      SparseVector.fromArray(doubleArray0);
      columnMajorSparseMatrix0.hashCode();
      double[][] doubleArray1 = new double[2][9];
      columnMajorSparseMatrix0.equals((Object) null);
      doubleArray1[0] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      columnMajorSparseMatrix0.removeFirstRow();
      Double double0 = new Double(2101.3245177631898);
      Object object0 = new Object();
      columnMajorSparseMatrix0.equals(object0);
      Double double1 = new Double(29.109667303870978);
      Matrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(71, 71, 71);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(13, 0.0, (Random) mockRandom0);
      int[] intArray0 = new int[6];
      intArray0[0] = 71;
      intArray0[4] = 71;
      intArray0[4] = 13;
      intArray0[0] = 13;
      matrix0.diagonalProduct();
      Matrix matrix1 = Matrix.unit(71, 0);
      matrix1.product();
      columnMajorSparseMatrix0.removeFirstRow();
      int int0 = (-2021161079);
      columnMajorSparseMatrix0.swapColumns(37, (-2021161079));
      Locale locale0 = Locale.PRC;
      int int1 = (-1982292597);
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int1);
      double double0 = (-2897.722);
      cCSMatrix0.setColumn(int1, double0);
      int int2 = (-1891);
      columnMajorSparseMatrix0.minInColumn(int2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 15.660157631219585);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2101.3245177631898);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      denseMatrix0.max();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getPositiveSuffix();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2101.3245177631898;
      SparseVector.fromArray(doubleArray0);
      columnMajorSparseMatrix0.hashCode();
      Basic2DMatrix.zero(32, 32);
      columnMajorSparseMatrix0.removeFirstRow();
      Double double0 = new Double(2101.3245177631898);
      Object object0 = new Object();
      Matrix matrix1 = Matrix.identity(32);
      matrix0.equals((Object) matrix1);
      denseMatrix0.product();
      matrix0.removeFirstRow();
      denseMatrix0.swapColumns(16, 0);
      int int0 = 660;
      columnMajorSparseMatrix0.sliceBottomRight(0, 660);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn(int0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(32, 15.660157631219585);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2101.3245177631898);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      denseMatrix0.max();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      denseMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      decimalFormat0.getPositiveSuffix();
      double[] doubleArray0 = new double[2];
      SparseVector.fromArray(doubleArray0);
      matrix0.hashCode();
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(32, 32);
      CCSMatrix cCSMatrix0 = new CCSMatrix(32, 32);
      Double double0 = new Double(15.660157631219585);
      Object object0 = new Object();
      matrix0.equals(object0);
      // Undeclared exception!
      basic2DMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1109.209;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2667.6120308493078);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1109.209;
      doubleArray2[3] = 1109.209;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      Matrix matrix0 = Matrix.unit(6, 6);
      sparseMatrix0.add((-754.8910495764));
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 2454;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2454, 2454);
      Matrix matrix0 = sparseMatrix0.transpose();
      matrix0.iteratorOfRow(2454);
      sparseMatrix0.spliterator();
      // Undeclared exception!
      matrix0.sum();
  }
}
