/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:59:20 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.setClassIndex("");
      String[] stringArray0 = new String[2];
      findWithCapabilities0.listOptions();
      stringArray0[0] = "";
      stringArray0[1] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertTrue(vector1.equals((Object)vector0));
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("PU,n2[,Bto");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Copy with last attribute set to \"first\": ";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "(|IsPFbu3";
      stringArray0[3] = "\tThe Capabilities handler to base the dataset on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler. Additional parameters for\n\thandler can be passed on after the '--'.";
      stringArray0[4] = "-superclass";
      stringArray0[5] = "-date-atts";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-binary-class";
      stringArray0[1] = "\tSecond set: ";
      stringArray0[2] = "\tThe number of numeric attributes in a rel. attribute (default 0).";
      stringArray0[3] = "\tThe number of numeric attributes in a rel. attribute (default 0).";
      stringArray0[4] = "+CrKM\"3l-[5S-";
      stringArray0[5] = "ZLRykRJ";
      stringArray0[6] = "^v@>E>t!qg-bU";
      stringArray0[7] = "+vsb7SKCc1eCO6P6{+q";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "-binary-class";
      stringArray0[3] = "-date-class";
      stringArray0[4] = "\tMust handle numeric attributes.";
      stringArray0[5] = "\tComma-separated list of packages to search in.";
      stringArray0[6] = "*_rnXj\"~*jOkG";
      stringArray0[7] = "";
      stringArray0[8] = "K";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("-1");
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.disable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("PU,n2[,Bto");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tSuperclass to look for in the packages.\n";
      stringArray0[1] = " classes that matched the criteria:\n";
      stringArray0[2] = "qt*B|I6`}`";
      stringArray0[3] = "MM:6f";
      stringArray0[4] = "-not-unary-class";
      stringArray0[5] = "5f?,IgL/{)9qh";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6_1x&ny44[kD4Lb;n");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "BgY&JLc+<<aOjo";
      stringArray0[1] = "";
      stringArray0[2] = "generic";
      stringArray0[3] = "(ApBv";
      stringArray0[4] = "K'V(.)6VVZ";
      stringArray0[5] = "-numeric-atts";
      stringArray0[6] = "OM]`adu$r*nLw%bCQ";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-binary-atts";
      stringArray0[1] = "4@_ HUL4Nr<";
      stringArray0[2] = ",q:NwY(8^?1_8ZU&";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-not-binary-atts";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(".[V-Q");
      findWithCapabilities0.getOptions();
      assertEquals(".[V-Q", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "header has been modified\n";
      findWithCapabilities0.getOptions();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "M(~IT\"fE";
      stringArray0[1] = "-no-class";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-unary-class";
      stringArray0[1] = "-unary-class";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-W";
      stringArray0[1] = "-W";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-superclass";
      stringArray0[1] = "-superclass";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.find();
      capabilities0.setOwner(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "</pre>\n\n";
      stringArray0[1] = "-unary-atts";
      stringArray0[2] = "  - # Date: ";
      stringArray0[3] = "@1R5E?nk";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";v 8L/_S~ZCu%'@R\"a";
      stringArray0[1] = "-not-no-class";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "qSb[ : k(XRS~";
      stringArray0[4] = "j&.$lAk";
      stringArray0[5] = "I7`bX_-";
      stringArray0[6] = "ubY";
      stringArray0[7] = ".7B>=2 !lL+Mr``]dY";
      FindWithCapabilities.main(stringArray0);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3w,e2d uX<-a^Yn mWU";
      stringArray0[1] = "k";
      stringArray0[2] = "e,yvC<v#jInd\":8{s";
      stringArray0[3] = "not-date-atts";
      stringArray0[4] = "Incompatible value for relation-valued attribute.\n";
      stringArray0[5] = "' is not a CapabilitiesHandler!";
      stringArray0[6] = "-not-string-class";
      stringArray0[7] = "n=D](obZ2w^2\"t<Y#";
      stringArray0[8] = "ism9m:'!^T~#1]_j";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[0];
      FindWithCapabilities.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "inv(";
      stringArray0[1] = "blNczv~*[";
      stringArray0[2] = "-not-string-atts";
      stringArray0[3] = "aO~'4h&M*sH-XU";
      stringArray0[4] = ":f)YVU#lD0o~_.w1`";
      stringArray0[5] = ")BF5}o";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertFalse(capabilities_Capability1.equals((Object)capabilities_Capability0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.getHandler();
      assertNull(capabilitiesHandler0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-numeric-class";
      stringArray0[2] = "Revision: ";
      stringArray0[3] = "Normalized array (doubles): ";
      stringArray0[4] = "Binary class";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qSb[ : k(XRS~";
      stringArray0[1] = "8_j7sI.up\"ZKZ";
      stringArray0[2] = "string-class";
      stringArray0[3] = "-not-nominal-class";
      stringArray0[4] = "-P <order>";
      stringArray0[5] = "";
      stringArray0[6] = "-;.5vP#?|QF2";
      stringArray0[7] = "B#c':J8AHRp:Oy4e";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "relational-atts";
      stringArray0[1] = "8_j7sI.up\"ZKZ";
      stringArray0[2] = "-unary-atts";
      stringArray0[3] = "-not-relational-atts";
      stringArray0[4] = "X=U?~jPq3 x%zV#3U";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-superclass";
      stringArray0[2] = "-superclass";
      stringArray0[3] = "-superclass";
      stringArray0[4] = "-superclass";
      stringArray0[5] = "-superclass";
      stringArray0[6] = "-superclass";
      stringArray0[7] = "-superclass";
      stringArray0[8] = "(|IsPFbu3";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      findWithCapabilities1.listOptions();
      String string0 = findWithCapabilities1.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.listOptions();
      vector0.addAll((Collection<? extends String>) findWithCapabilities0.m_Matches);
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.getCapabilities();
      Random.setNextRandom((-103));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")^kh4+NPz@h";
      stringArray0[1] = "!<uut/0C:H<!z";
      stringArray0[2] = "U`A.0";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      stringArray0[3] = "-not-date-class";
      stringArray0[4] = "OM]`adu$r*nLw%bCQ";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-1";
      stringArray0[1] = "|%dL68-";
      stringArray0[2] = "-not-missing-att-values";
      stringArray0[3] = "not-date-atts";
      stringArray0[4] = "";
      stringArray0[5] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-nominal-atts";
      stringArray0[1] = "8_j7sI.up\"ZKZ";
      stringArray0[2] = "2uv-\"<X)yi6PxE";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[3] = "DAU<w1\"M3@I:V*2;";
      stringArray0[4] = "fh\"~jqJ5Jv/;k2";
      stringArray0[5] = "/packageListWithVersion.txt";
      stringArray0[6] = "OM]`adu$r*nLw%bCQ";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-only-multiinstance";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[1] = "-1";
      stringArray0[2] = "zwY";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-not-numeric-atts";
      stringArray0[1] = "A symbolic attribute cannot be regular";
      stringArray0[2] = "user.dir";
      stringArray0[3] = "-1";
      stringArray0[4] = "`sugJHTAA(:@I +_7";
      stringArray0[5] = "'";
      stringArray0[6] = "-1";
      stringArray0[7] = "can't find";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WB";
      stringArray0[1] = "Copy with class value set to first value: ";
      stringArray0[2] = "}WE]4x,Ob";
      stringArray0[3] = "-string-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
