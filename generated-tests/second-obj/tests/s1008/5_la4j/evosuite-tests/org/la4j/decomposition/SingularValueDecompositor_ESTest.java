/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:23:26 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2, 6, 541);
      ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(3, 3);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        SparseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.non(advancedMatrixPredicate0);
      sparseMatrix0.toRowVector();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        SparseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 8;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2, 8, (-52.0));
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      MockRandom mockRandom0 = new MockRandom(8);
      DenseMatrix denseMatrix1 = DenseMatrix.randomSymmetric(8, mockRandom0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(denseMatrix1);
      singularValueDecompositor0.decompose();
      MockRandom mockRandom1 = new MockRandom();
      SingularValueDecompositor singularValueDecompositor2 = new SingularValueDecompositor(denseMatrix1);
      DenseMatrix.randomSymmetric(12, mockRandom0);
      // Undeclared exception!
      try { 
        DenseMatrix.unit(12, (-1081));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 0.0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.non(advancedMatrixPredicate0);
      sparseMatrix0.toRowVector();
      MockRandom mockRandom0 = new MockRandom(2);
      DenseMatrix denseMatrix0 = DenseMatrix.random(2, 1, mockRandom0);
      Matrix matrix0 = denseMatrix0.blankOfColumns(0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor1.decompose();
      singularValueDecompositor1.decompose();
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 8;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2, 8, 3.972054645195636E-15);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      Random.setNextRandom(876);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-1), 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 16, 1813.262);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(denseMatrix0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = 1813.262;
      doubleArray0[3] = (double) 16;
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      singularValueDecompositor1.applicableTo(basic2DMatrix0);
      SingularValueDecompositor singularValueDecompositor2 = new SingularValueDecompositor(cRSMatrix0);
      singularValueDecompositor2.applicableTo(cRSMatrix0);
      ooPlaceMatricesAddition0.partiallyApply(denseMatrix0);
      ooPlaceMatricesAddition0.apply((DenseMatrix) basic2DMatrix1, (DenseMatrix) basic2DMatrix0);
      SingularValueDecompositor singularValueDecompositor3 = new SingularValueDecompositor(basic2DMatrix1);
      singularValueDecompositor2.decompose();
      Random.setNextRandom(16);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 16;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(16, 6, 3.897373409986485E-10);
      ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      MockRandom mockRandom0 = new MockRandom(16);
      MockRandom mockRandom1 = new MockRandom(16);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random((-2044), (-2044), (double) 16, (java.util.Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(6, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      SparseMatrix.identity(6);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) null, rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(16, 16, 1813.262);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      int int0 = 0;
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)DenseMatrix.constant(0, 16, 0);
      ooPlaceMatricesAddition0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      Basic2DMatrix basic2DMatrix2 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply(denseMatrix0, (DenseMatrix) basic2DMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(basic2DMatrix2);
      ColumnMajorSparseMatrix.fromCSV("");
      singularValueDecompositor0.decompose();
      MockRandom mockRandom0 = new MockRandom();
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(basic2DMatrix1);
      // Undeclared exception!
      DenseMatrix.randomSymmetric(1570, mockRandom0);
  }
}
