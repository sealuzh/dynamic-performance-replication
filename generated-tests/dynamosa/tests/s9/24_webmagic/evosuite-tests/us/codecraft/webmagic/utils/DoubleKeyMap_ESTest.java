/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:58:15 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Map<HashMap<Integer, String>, Map<String, HashMap<Integer, String>>>> hashMap0 = new HashMap<Integer, Map<HashMap<Integer, String>, Map<String, HashMap<Integer, String>>>>();
      DoubleKeyMap<Integer, HashMap<Integer, String>, Map<String, HashMap<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, String>, Map<String, HashMap<Integer, String>>>(hashMap0);
      Integer integer0 = new Integer((-345));
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<String, HashMap<Integer, String>> hashMap2 = new HashMap<String, HashMap<Integer, String>>();
      doubleKeyMap0.put(integer0, hashMap1, (Map<String, HashMap<Integer, String>>) hashMap2);
      Map<HashMap<Integer, String>, Map<String, HashMap<Integer, String>>> map0 = doubleKeyMap0.remove(integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      HashMap<String, HashMap<Integer, String>> hashMap0 = new HashMap<String, HashMap<Integer, String>>();
      doubleKeyMap0.put((Object) hashMap0, "j", (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.put((Object) hashMap0, "j", (Object) hashMap0);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<Integer, Map<String, HashMap<Integer, String>>>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<Integer, Map<String, HashMap<Integer, String>>>>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      Map<Integer, Map<String, HashMap<Integer, String>>> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, String>, Integer, Map<String, HashMap<Integer, String>>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, String>, Integer, Map<String, HashMap<Integer, String>>>(hashMap0, class0);
      Map<Integer, Map<String, HashMap<Integer, String>>> map1 = doubleKeyMap1.get(hashMap1);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Map<String, HashMap<Integer, String>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, HashMap<Integer, String>>, Object, Object>();
      Map<String, Map<Map<String, HashMap<Integer, String>>, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Map<String, HashMap<Integer, String>>, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Map<String, HashMap<Integer, String>>, Integer>(map0);
      Integer integer0 = doubleKeyMap1.remove("", (Map<String, HashMap<Integer, String>>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<String, HashMap<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<String, HashMap<Integer, String>>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(map0, class0);
      String string0 = doubleKeyMap2.remove("", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, HashMap<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, String>, Object>(class0);
      Integer integer0 = new Integer((-89));
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(class0);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, Integer>();
      Map<String, HashMap<Integer, String>> map0 = doubleKeyMap0.newMap();
      HashMap<String, Map<Integer, Map<String, HashMap<Integer, String>>>> hashMap0 = new HashMap<String, Map<Integer, Map<String, HashMap<Integer, String>>>>();
      DoubleKeyMap<String, Integer, Map<String, HashMap<Integer, String>>> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Map<String, HashMap<Integer, String>>>(hashMap0);
      Map<String, HashMap<Integer, String>> map1 = doubleKeyMap1.put("", (Integer) null, map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      Object object0 = new Object();
      HashMap<String, HashMap<Integer, String>> hashMap1 = new HashMap<String, HashMap<Integer, String>>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(object0, "?D8zr", (Object) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Integer>(map0);
      Integer integer1 = doubleKeyMap1.get(integer0, (Object) doubleKeyMap0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(class0);
      String string0 = doubleKeyMap0.get((Integer) null, "[!9rQf%L");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Map<String, HashMap<Integer, String>>, Map<String, HashMap<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Map<String, HashMap<Integer, String>>, Map<String, HashMap<Integer, String>>>();
      Map<Map<String, HashMap<Integer, String>>, Map<String, HashMap<Integer, String>>> map0 = doubleKeyMap0.get((Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(class0);
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      Map<Object, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Map<String, String>, Object>> hashMap0 = new HashMap<Object, Map<Map<String, String>, Object>>();
      DoubleKeyMap<Object, Map<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, Object>(hashMap0);
      DoubleKeyMap<Map<String, String>, String, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Map<String, String>, String, HashMap<Object, Object>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Map<String, String>) hashMap1, (Object) doubleKeyMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>((Map<Integer, Map<Object, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<HashMap<String, String>, String>> hashMap0 = new HashMap<Object, Map<HashMap<String, String>, String>>();
      HashMap<String, Map<String, Integer>> hashMap1 = new HashMap<String, Map<String, Integer>>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(hashMap1);
      Map<Integer, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>(map0, class0);
      Integer integer0 = new Integer((-89));
      doubleKeyMap1.put(integer0, "", (Object) hashMap0);
      doubleKeyMap1.remove(integer0, "ezNVC+N");
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, HashMap<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, String>, Object>(class0);
      HashMap<Object, Map<HashMap<String, String>, String>> hashMap0 = new HashMap<Object, Map<HashMap<String, String>, String>>();
      DoubleKeyMap<Object, HashMap<String, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, String>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, hashMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Integer, Map<String, HashMap<Integer, String>>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, HashMap<Integer, String>>, String>();
      Map<Integer, Map<Map<Object, Object>, HashMap<Integer, Object>>> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer(3);
      DoubleKeyMap<Integer, Map<Object, Object>, HashMap<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, Map<Object, Object>, HashMap<Integer, Object>>(map0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(map0);
      doubleKeyMap1.put(integer0, (Map<Object, Object>) hashMap0, (HashMap<Integer, Object>) null);
      HashMap<Integer, Object> hashMap1 = doubleKeyMap1.get(integer0, (Map<Object, Object>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, HashMap<Integer, String>> hashMap0 = new HashMap<String, HashMap<Integer, String>>();
      HashMap<Map<Integer, String>, Map<Map<String, HashMap<Integer, String>>, String>> hashMap1 = new HashMap<Map<Integer, String>, Map<Map<String, HashMap<Integer, String>>, String>>();
      DoubleKeyMap<Map<Integer, String>, Map<String, HashMap<Integer, String>>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Map<String, HashMap<Integer, String>>, String>(hashMap1);
      doubleKeyMap0.put((Map<Integer, String>) null, (Map<String, HashMap<Integer, String>>) hashMap0, "EVb83']n;DE,R8V?>");
      doubleKeyMap0.remove((Map<Integer, String>) null, (Map<String, HashMap<Integer, String>>) hashMap0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      HashMap<Object, Map<HashMap<String, String>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<String, String>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, Integer>(hashMap0, class0);
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }
}
