/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:17:00 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Member;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = (-2510);
      sequenceInputStream0.read();
      sequenceInputStream0.mark((-2510));
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      charArray0[2] = 'e';
      charArray0[3] = 'H';
      charArray0[4] = ']';
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readConst(126, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      classReader0.getSuperName();
      char[] charArray1 = new char[4];
      charArray1[0] = 'H';
      charArray1[1] = 'e';
      charArray1[2] = 'H';
      charArray1[3] = '^';
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 76);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      ClassWriter classWriter0 = new ClassWriter((-1487));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 7);
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      classReader0.getItem(1);
      classReader0.readUnsignedShort(183);
      classReader0.readShort(4);
      // Undeclared exception!
      try { 
        classReader0.readInt(65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      classReader0.getSuperName();
      classReader0.getClassName();
      classReader0.getSuperName();
      classReader0.getAccess();
      classReader0.getSuperName();
      classReader0.getAccess();
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.toByteArray();
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader1.accept((ClassVisitor) classWriter0, 4);
      // Undeclared exception!
      try { 
        classReader0.readUnsignedShort((-1125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      ClassWriter classWriter0 = new ClassWriter((-1487));
      classWriter0.newDouble(0.75);
      int int0 = (-3446);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 197, (-3446));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64077
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[11];
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7214
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '!';
      ClassReader classReader1 = new ClassReader(classReader0.b);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classReader0.getInterfaces();
      ClassReader classReader2 = new ClassReader("wheel.asm.Label");
      classReader2.getClassName();
      int int0 = Member.DECLARED;
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      classReader0.copyPool(classWriter0);
      // Undeclared exception!
      try { 
        classReader1.readByte((-556));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -556
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      ClassWriter classWriter0 = new ClassWriter((-1487));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      int int0 = 18;
      classReader0.accept((ClassVisitor) classWriter0, 18);
      classReader0.getSuperName();
      classReader0.readConst(985, charArray0);
      classReader0.readLong(int0);
      String string0 = classReader0.getClassName();
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      ClassReader classReader1 = new ClassReader(sequenceInputStream0);
      classReader1.getSuperName();
      classReader1.getAccess();
      int int1 = (-3661);
      classReader1.accept((ClassVisitor) classAdapter0, int1);
      int int2 = 1567;
      ClassWriter classWriter1 = new ClassWriter(classReader0, int2);
      classReader1.copyPool(classWriter0);
      ClassReader classReader2 = new ClassReader(string0);
      classReader1.readConst(classReader2.SKIP_CODE, charArray0);
      classReader2.readUTF8(int0, charArray0);
      int int3 = 67;
      classReader2.readUnsignedShort(int3);
      classReader0.getInterfaces();
      classReader0.getItem(int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      ClassWriter classWriter0 = new ClassWriter((-1487));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 2);
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getSuperName();
      classReader0.getClassName();
      classReader0.getSuperName();
      classReader0.getAccess();
      classReader0.getSuperName();
      int int0 = classReader0.getAccess();
      int int1 = 268435456;
      int int2 = 30647;
      ClassWriter classWriter0 = new ClassWriter(30647);
      classReader0.accept((ClassVisitor) classWriter0, 902);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      ClassWriter classWriter1 = new ClassWriter(int0);
      int int3 = 162;
      classReader0.accept((ClassVisitor) classWriter1, int3);
      classReader0.readShort(classWriter1.COMPUTE_MAXS);
      ClassWriter classWriter2 = new ClassWriter(classReader0, int1);
      byte[] byteArray0 = null;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      int int4 = 30657;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int4);
      ClassReader classReader1 = new ClassReader(pipedInputStream0);
      classReader1.readShort(classWriter2.COMPUTE_MAXS);
      ClassWriter classWriter3 = new ClassWriter(classReader0, classReader0.header);
      int int5 = 1889;
      ClassWriter classWriter4 = new ClassWriter(int5);
      ClassWriter classWriter5 = new ClassWriter(classReader0, int2);
      classReader1.copyPool(classWriter2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[11];
      charArray0[0] = 'K';
      int int0 = (-1487);
      ClassWriter classWriter0 = new ClassWriter((-1487));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 8);
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[11];
      charArray0[0] = 'K';
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 10);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[11];
      int int0 = 162;
      ClassWriter classWriter0 = new ClassWriter(162);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 174);
      classReader0.accept((ClassVisitor) classWriter1, 2);
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readConst(179, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classReader0.accept((ClassVisitor) classWriter0, 182);
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      // Undeclared exception!
      try { 
        classReader1.readConst(3, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      // Undeclared exception!
      try { 
        classReader1.readConst(728, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      ClassWriter classWriter0 = new ClassWriter((-1487));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      int int0 = 8;
      classReader0.accept((ClassVisitor) classWriter0, 8);
      classReader0.getSuperName();
      classReader0.readConst(985, charArray0);
      classReader0.readLong(int0);
      classReader0.getClassName();
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      ClassReader classReader1 = new ClassReader(sequenceInputStream0);
      classReader1.getSuperName();
      classReader1.getAccess();
      int int1 = (-3661);
      classReader1.accept((ClassVisitor) classAdapter0, int1);
      int int2 = 1567;
      ClassWriter classWriter1 = new ClassWriter(classReader0, int2);
      classReader1.copyPool(classWriter0);
      ClassWriter classWriter2 = new ClassWriter(classReader1, int0);
      ClassWriter classWriter3 = new ClassWriter(classWriter0.COMPUTE_MAXS);
      classReader0.getInterfaces();
      classReader1.copyPool(classWriter3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(656);
      classReader0.copyPool(classWriter0);
      charArray0[0] = 'h';
      classReader0.getSuperName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      classReader0.getClassName();
      classReader0.readConst(2, charArray0);
      classReader0.getSuperName();
      classReader0.getAccess();
      classReader0.getSuperName();
      classReader0.getAccess();
      ClassWriter classWriter1 = new ClassWriter(4);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader1.accept((ClassVisitor) classWriter1, 91);
      ClassWriter classWriter2 = new ClassWriter(classReader0, 21);
      classReader0.copyPool(classWriter0);
      ClassWriter classWriter3 = new ClassWriter(927);
      classReader0.getInterfaces();
      ClassReader classReader2 = new ClassReader(classReader1.b, 2, 1);
      classReader1.copyPool(classWriter2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getSuperName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      classReader0.getClassName();
      classReader0.getSuperName();
      classReader0.getSuperName();
      classReader0.getAccess();
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader1.accept((ClassVisitor) classWriter0, 91);
      ClassReader classReader2 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'C';
      charArray0[2] = ':';
      charArray0[3] = '@';
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, (-1312));
      ClassReader classReader3 = new ClassReader(classReader2.b);
      classReader3.getSuperName();
      classReader2.readConst(8, charArray0);
      String string0 = "*3^";
      ClassReader classReader4 = new ClassReader(string0);
      classReader4.getSuperName();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      int int0 = 162;
      ClassWriter classWriter0 = new ClassWriter(162);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 174);
      classReader0.getClassName();
      classReader0.getSuperName();
      classReader0.getAccess();
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b, 4223, 1159);
      classReader1.getAccess();
      ClassWriter classWriter2 = null;
      try {
        classWriter2 = new ClassWriter(classReader1, 162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
