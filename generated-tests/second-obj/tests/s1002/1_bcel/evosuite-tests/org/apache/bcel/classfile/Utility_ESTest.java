/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:44:57 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Member;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.isJavaIdentifierPart('*');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("+YKYT\"m.&\"1k~ma", "+YKYT\"m.&\"1k~ma", ">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +YKYT\"m.&\"1k~ma
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.typeOfSignature("SimpleElementValue class does not know how to stringify type ");
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SimpleElementValue class does not know how to stringify type ");
      assertEquals((byte)9, byte0);
      
      Object object0 = new Object();
      String string0 = Utility.replace("double", "Xm.lbAO&Nw ", "Dwbfr<(QWys?in_");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.getSignature("getfield");
      try { 
        Utility.typeOfMethodSignature("Lgetfield;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Lgetfield;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2d", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
      
      String string1 = Utility.format(1, (byte)0, true, '\'');
      assertEquals("1", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-56);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("4c c8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4c c8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.decode(",3", false);
      try { 
        Utility.methodSignatureReturnType("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\'');
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(186);
      assertEquals("private static final synchronized transient", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.compactClassName("Illegally nested brackets:");
      assertEquals("Illegally nested brackets:", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.classOrInterface(12);
      String string1 = Utility.compactClassName("class");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("class", "class", true);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.compactClassName("r#'\"FT/\"T~.b", "", true);
      Utility.format(0, 0, true, 'J');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.getSignature("char");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "char";
      objectArray0[1] = (Object) "char";
      objectArray0[2] = (Object) "char";
      objectArray0[3] = (Object) "C";
      objectArray0[4] = (Object) "C";
      objectArray0[5] = (Object) "C";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "char";
      objectArray0[8] = (Object) "char";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("LrkAa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LrkAa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('l');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(70, (-1717));
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[2] = (byte)14;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Utility.typeOfSignature("if_icmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      Utility.classOrInterface((byte) (-74));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("interface", "new", "interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      String string0 = Utility.fillup(")1-$,mbI", 7, true, '3');
      assertEquals(")1-$,mbI", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "O^xA^";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O^xA^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O^xA^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = File.pathSeparator;
      Object object0 = new Object();
      Utility.compactClassName(":");
      Utility.convertString(":");
      MockPrintStream mockPrintStream0 = new MockPrintStream("9;>kj@.");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ":");
      Utility.printArray(printStream0, (Object[]) null);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "((";
      objectArray0[1] = (Object) "short";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{((, short, null}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.compactClassName(", max_locals = ", ", max_locals = ", false);
      Utility.getSignature(", max_locals = ");
      try { 
        Utility.typeOfMethodSignature(", max_locals = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , max_locals = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("PjEnO#S8&Xw:6\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("PjEnO#S8&Xw:6\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PjEnO#S8&Xw:6\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.convertString("bipush\t\t0");
      Utility.compactClassName("bipush\t\t0", false);
      String string1 = Utility.printArray((Object[]) null, false);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.typeOfSignature("SimpleElementValue class does not know how to stringify type ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SimpleElementValue class does not know how to stringify type ");
      Utility.compactClassName("SimpleElementValue class does not know how to stringify type ");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.convertString("(");
      Utility.compactClassName("(");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "invokedynamic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("%N_1b{&j.8", (String[]) null);
      assertEquals("()L%N_1b{&j/8;", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("()L%N_1b{&j/8;");
      String string1 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-46);
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      String string3 = Utility.methodSignatureToString("()L%N_1b{&j/8;", "<clinit>", "F");
      assertEquals("F %N_1b{&j.8 <clinit>()", string3);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string4 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("nop", string4);
      
      int int0 = Utility.setBit(248, (byte)0);
      assertEquals(249, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = File.separator;
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.getSignature("/");
      assertEquals("L/;", string1);
      
      String string2 = Utility.methodSignatureReturnType("L/;");
      assertEquals(".", string2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Utility.convertString("q'");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("java.class.path");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit((byte)98, (byte)98);
      Utility.convertString("L;raoc(nkM_\"2#*v/");
      Utility.typeOfSignature("Illegal type: ");
      try { 
        Utility.methodSignatureArgumentTypes("checkcast", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)81;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$d4$92Q", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("getstatic", false);
      Utility.convertString("getstatic");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getstatic");
      try { 
        Utility.methodSignatureReturnType("dsub", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dsub'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), 1255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%vN%Tyw!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %vN%Tyw!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4096, 184);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("isub", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `isub'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "tableswitch";
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SimpleElementValue class does not know how to stringify type ");
      assertEquals((byte)9, byte0);
      
      Utility.signatureToString("SimpleElementValue class does not know how to stringify type ", true);
      String string0 = Utility.convertString("goto_w");
      assertEquals("goto_w", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.clearBit(128, 128);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.compactClassName("kt", true);
      assertEquals("kt", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "kt";
      stringArray0[1] = "kt";
      stringArray0[2] = "kt";
      String string1 = Utility.methodTypeToSignature("kt", stringArray0);
      assertEquals("(Lkt;Lkt;Lkt;)Lkt;", string1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.classOrInterface(71);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (-1313), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.accessToString(182, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("private protected final transient", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private protected final transient'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("dstre");
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("<illegal opcode>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.clearBit(1872, (-2682));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[3] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString((byte)20);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.format((byte)26, 123, true, 'H');
      assertEquals("26HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "lrem";
      stringArray0[1] = ")\t";
      stringArray0[2] = "lrem";
      stringArray0[3] = "lrem";
      Utility.methodTypeToSignature("lrem", stringArray0);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = File.separator;
      Utility.setBit(1145, (byte) (-77));
      ConstantPool constantPool0 = null;
      Utility.getSignature(" ag");
      int int0 = 201;
      try { 
        Utility.typeOfMethodSignature("(descriptor_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (descriptor_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-671), 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.accessToString((-331), true);
      assertEquals("public protected final transient abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.convertString("Fq'YN");
      assertEquals("Fq\\'YN", string1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "I@F^<G";
      Utility.methodSignatureReturnType("I@F^<G");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-127);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("lshr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Utility.convertString("Invalid signat#re: `");
      assertEquals("Invalid signat#re: `", string0);
      
      String string1 = Utility.getSignature("D-)}EC);S@S h");
      assertEquals("LD-)}EC);S@S;", string1);
      
      String string2 = Utility.signatureToString("Invalid signat#re: `", false);
      assertEquals("int", string2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BW;8<B'9");
      assertEquals((byte)8, byte0);
      
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2036), (-1877));
      assertEquals("0:    nop\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.getSignature("");
      Utility.getSignature("freturn");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2999, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("getstatic", false);
      Utility.convertString("getstatic");
      Utility.compactClassName("\tE\t%");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile(", ");
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 116
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readFloat();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, (int) (byte)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("getstatic", false);
      String string0 = Constants.ILLEGAL_OPCODE;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)103, (byte)101, (byte)116, (byte)115, (byte)116, (byte)97, (byte)116, (byte)105, (byte)99}, byteArray0);
      assertEquals("ineg", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("\nAnnotation(s):\n");
      short short0 = Constants.ACC_VOLATILE;
      int int0 = Pattern.UNICODE_CASE;
      try { 
        Utility.methodSignatureReturnType("(C?8(g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(C?8(g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SimpleElementValue class does not know how to stringify type ");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)9;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1214), 185);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.typeOfSignature("BW;8<B'9");
      int int0 = Pattern.UNICODE_CASE;
      String string0 = File.separator;
      try { 
        Utility.methodSignatureReturnType("u'0*p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `u'0*p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, 373);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y&WYJc$G|rp#>C|GX?");
      mockPrintWriter0.append((CharSequence) "y&WYJc$G|rp#>C|GX?");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y&WYJc$G|rp#>C|GX?";
      stringArray0[1] = "$xq,y_US5C]";
      stringArray0[2] = "y&WYJc$G|rp#>C|GX?";
      stringArray0[3] = "$xq,y_US5C]";
      stringArray0[4] = "y&WYJc$G|rp#>C|GX?";
      stringArray0[5] = "$xq,y_US5C]";
      stringArray0[6] = "$xq,y_US5C]";
      stringArray0[7] = "[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("$xq,y_US5C]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.methodTypeToSignature("VI,8b6Sx+ &o\u0006", (String[]) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 114, 114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) byteArray0;
      objectArray0[5] = (Object) "CE7'5[\"EqCrk";
      objectArray0[6] = (Object) "CE7'5[\"EqCrk";
      objectArray0[7] = (Object) byteArray0;
      Utility.printArray(objectArray0, false);
      String string0 = Utility.methodSignatureReturnType("[B@2f192503, [B@2f192503, null, java.lang.Object@5292d81d, [B@2f192503, CE7'5[\"EqCrk, CE7'5[\"EqCrk, [B@2f192503", false);
      assertEquals("byte[]", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)39;
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("4c 59 27 27 00", string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.classOrInterface((byte)0);
      try { 
        Utility.methodSignatureArgumentTypes("(anonymous)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anonymous)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Pattern.DOTALL;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dup", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "areturn");
      byteArray0[0] = (byte)16;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-97);
      byteArray0[6] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1332, (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = Member.PUBLIC;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPool constantPool0 = null;
      byte byte0 = (byte) (-88);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.compactClassName("#[K@W(,&6?E(b026");
      Utility.typeOfSignature("Illegal type: ");
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte)114;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)114;
      Utility.equals(byteArray0, byteArray1);
      byteArray1[7] = (byte)90;
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = "Invalid StackMa frame_tIpe";
      String string1 = ", high = ";
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte byte0 = (byte) (-112);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte) (-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "#[K@W(,&6?E(b026";
      Utility.compactClassName("#[K@W(,&6?E(b026");
      String string1 = "Illegal type: ";
      try { 
        Utility.typeOfSignature("#[K@W(,&6?E(b026");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #[K@W(,&6?E(b026
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.convertString("$h*kw)k/$");
      int int0 = Pattern.COMMENTS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.decode("$h*kw)k/$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.convertString("$h*kw)k/$");
      int int0 = Pattern.COMMENTS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.decode("0Q$%:", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "short";
      Utility.compactClassName("((");
      try { 
        Utility.typeOfSignature("((");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ((
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("<init>");
      try { 
        Utility.methodSignatureReturnType("L<init>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)95;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$f6E$a8$ca$H_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $f6E$a8$ca$H_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      short short0 = Constants.ISTORE_2;
      Utility.setBit((byte)51, (short)61);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-70);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (int) (byte)51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "(";
      String string1 = "short";
      Utility.compactClassName("(");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = (byte)18;
      int int0 = Member.DECLARED;
      Utility.classOrInterface(59);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[0] = (byte)61;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.format(159, (-1847), true, '`');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (-2420));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[2] = (byte)66;
      byte byte0 = (byte)119;
      byteArray0[3] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      int int0 = (-494);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("astore\t\t%227", "astore\t\t%227");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"astore\t\t%227\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte byte0 = (byte)73;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[3] = (byte)73;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q-9h^~.W.T", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q-9h^~.W.T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)110;
      byteArray0[0] = (byte)110;
      byteArray0[2] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fdiv", string0);
      
      String string1 = Utility.methodSignatureReturnType("F<Y'+\"&l<#SZez", true);
      assertEquals("float", string1);
      
      String string2 = Utility.compactClassName("ri\u0005}O`\"v~/sk", false);
      assertEquals("ri\u0005}O`\"v~.sk", string2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "#[K@W(,&6?E(b026";
      Utility.compactClassName("#[K@W(,&6?E(b026");
      try { 
        Utility.typeOfSignature("@V:XrK5%%.~34mn)`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @V:XrK5%%.~34mn)`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 143, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte byte0 = (byte)98;
      byte byte1 = (byte) (-125);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.searchOpcode("fastore");
      Utility.setBit((byte)81, (byte)98);
      Object object0 = new Object();
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.signatureToString("FRi$", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("HCn", "FRi$", "FRi$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HCn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (-3143));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-95);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N\"~>!p");
      Utility.setBit((byte) (-95), (-336));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 544, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.compactClassName("Invalid signature: `");
      Utility.getSignature("void");
      short short0 = Constants.ILOAD_0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (-238));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-118);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-125);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)12;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (int) (byte) (-125));
      assertEquals("0:    lxor\n1:    sipush\t\t-32000\n4:    sipush\t\t3072\n", string0);
      
      String string1 = Utility.getSignature("0:    lxor\n1:    sipush\t\t-32000\n4:    sipush\t\t3072\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.searchOpcode("PjEnO#S8&Xw:6\"");
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("invokespecial");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("PjEnO#S8&Xw:6\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PjEnO#S8&Xw:6\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[2] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("L;raoc(nkM_\"2#*v/", false);
      int int0 = Pattern.DOTALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("java.lang.");
      Integer integer0 = new Integer(32);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.lang.", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)71;
      byte byte0 = (byte)57;
      byteArray0[2] = (byte)57;
      ConstantInteger constantInteger0 = new ConstantInteger(75);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantInteger0);
      Utility.setBit((byte)57, (byte)57);
      Utility.codeToString(byteArray0, constantPool0, (-1252), (-809));
      try { 
        Utility.typeOfSignature("sa'.L_th");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sa'.L_th
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.setBit(165, (-643));
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantPool constantPool0 = null;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.compactClassName("#[K@W(,&6?E(b026");
      Utility.convertString("#[K@W(,&6?E(b026");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.getSignature("void");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-124);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)98;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)47;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-124), (int) (byte)55);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("X#aO.YadB4D", (String) null, "invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X#aO.YadB4D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("Code");
      String string0 = "Clid";
      Utility.signatureToString("Clid");
      short short0 = Constants.FSTORE;
      ConstantClass constantClass0 = new ConstantClass(1625);
      constantClass0.toString();
      constantClass0.copy();
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1625, 1625);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)59;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-527), (int) (byte) (-83));
      try { 
        Utility.methodSignatureReturnType("0:    nop\n1:    nop\n2:    istore_0\n3:    nop\n4:    nop\n5:    nop\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    nop
         // 2:    istore_0
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "qqz/1}ogz0XHx%";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qqz/1}ogz0XHx%");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qqz/1}ogz0XHx%");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)76;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.markSupported();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byteSequence1.readByte();
      Utility.codeToString(byteArray1, (ConstantPool) null, (-715), 154);
      String string1 = "/_ e`ciEnw.A";
      // Undeclared exception!
      try { 
        Utility.signatureToString("/_ e`ciEnw.A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/_ e`ciEnw.A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)77;
      byteArray0[4] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte) (-110));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("L;raoc(nkM_\"2#*v/", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L;raoc(nkM_\"2#*v/");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string1 = Utility.convertString("ddiv");
      assertTrue(string1.equals((Object)string0));
      
      Utility.compactClassName("ddiv", true);
      Utility.printArray((Object[]) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)118;
      ConstantPool constantPool0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1306, 55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[4] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("qz");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte) (-85), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.convertString("$h*kw)k/$");
      int int0 = Pattern.COMMENTS;
      String string0 = "Rimpde2";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("L4tsatiF;V");
      mockFileOutputStream0.write(20);
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.write(4);
      mockFileOutputStream0.close();
      mockFileOutputStream0.getChannel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("$h*kw)k/$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $h*kw)k/$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)41;
      byteArray0[4] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte) (-110));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)44, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<init>";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("<init>");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)46);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<init>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<init>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.compactClassName("#[K@W(,&6?E(b026");
      Utility.convertString("#[K@W(,&6?E(b026");
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)22;
      byteArray0[3] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("#[K@W(,&6?E(b026");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 256, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0);
      // Undeclared exception!
      try { 
        Signature.translate("W4QH68)3`/8gm.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: W4QH68)3`/8gm. read W
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "PC[";
      Utility.convertString("PC[");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)4;
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-56);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), 2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-70);
      byteArray0[0] = (byte)106;
      byteArray0[7] = (byte) (-70);
      byteArray0[3] = (byte)106;
      byteArray0[19] = (byte) (-70);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid signature: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byteArray0[5] = (byte) (-120);
      boolean boolean3 = true;
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1125), 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-73);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 891, (int) (byte) (-71));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rO]'6i(.3");
      assertNotNull(mockFileOutputStream0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-68));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    newarray\t\t<<illegal type>>\n", string1);
      
      MockFile mockFile0 = new MockFile("<illegal type>", "<illegal type>");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/<illegal type>/<illegal type>", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("<illegal type>", mockFile0.getName());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/<illegal type>", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      Integer integer0 = new Integer((byte) (-68));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-68), (int)integer0);
      
      try { 
        Utility.typeOfSignature("0:    newarray\t\t<<illegal type>>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    newarray\t\t<<illegal type>>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)33, (byte) (-84), (byte)71, (byte)100}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)33, (byte) (-84), (byte)71, (byte)100}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lor", string0);
      
      try { 
        Utility.methodSignatureReturnType("getfield", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `getfield'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte) (-52), (byte)48}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-52), (byte) (-52), (byte)48}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)83;
      String string0 = Utility.getSignature("Z1Ws5o");
      assertNotNull(string0);
      assertEquals("LZ1Ws5o;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      assertNotNull(constantMethodHandle0);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(4179, constantMethodHandle0.getReferenceIndex());
      assertEquals(16, constantMethodHandle0.getReferenceKind());
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("nop", string1);
      
      String string2 = Utility.signatureToString("Z1Ws5o");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("boolean", string2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid signature: `");
      assertNotNull(string0);
      assertEquals("LInvalid;", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid signature: `");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid signature: `");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.compactClassName("LInvalid;", false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("LInvalid;", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-74);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-74);
      String string2 = Utility.encode(byteArray0, false);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)43, (byte) (-57), (byte) (-74), (byte) (-74), (byte) (-57), (byte) (-74)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$A$x$c7$b6$b6$c7$b6", string2);
      
      String string3 = Utility.convertString("/");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/", string3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2219, (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short short0 = Constants.LDC_QUICK;
      assertEquals((short)203, short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)80, (byte)83, (byte) (-5), (byte) (-5), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)80, (byte)83, (byte) (-5), (byte) (-5), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)80, (byte)83, (byte) (-5), (byte) (-5), (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = (byte)93;
      boolean boolean0 = Utility.isSet((byte)93, (byte)93);
      assertFalse(boolean0);
      
      String string0 = "Sye$^+w}7tPmFt\\.E3";
      boolean boolean1 = false;
      byte[] byteArray0 = Utility.decode("Sye$^+w}7tPmFt.E3", false);
      assertNotNull(byteArray0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<init>", string1);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (-2009));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      int int0 = Utility.setBit(3277, 183);
      assertEquals(8391885, int0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-827), 255);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)125}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    lushr\n", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)12, (byte)100, (byte)124, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.convertString("Knt6Ad^BqF d@[$Q2I,");
      assertNotNull(string0);
      assertEquals("Knt6Ad^BqF d@[$Q2I,", string0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte) (-5), (byte)12, (byte)100, (byte)124, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short) (-1268), short0);
      
      int int0 = Utility.setBit(8, 91);
      assertEquals(134217736, int0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 91);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)12, (byte)100, (byte)124, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4:    nop\n", string1);
      
      try { 
        Utility.typeOfSignature("6T1yd;8}+5b;rzq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6T1yd;8}+5b;rzq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte) (-107));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.compactClassName("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      String string1 = Utility.convertString("#[K@W(,&6?E(b026");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#[K@W(,&6?E(b026", string1);
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.getSignature("void");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("V", string2);
      
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("nop", string3);
      
      String string4 = Utility.methodSignatureReturnType("V", false);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("void", string4);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "#[K@W(,&6?E(b026";
      stringArray0[1] = "#[K@W(,&6?E(b026";
      stringArray0[2] = "#[K@W(,&6?E(b026";
      stringArray0[3] = "#[K@W(,&6?E(b026";
      stringArray0[4] = "x6J*T!Qf2jFc\"";
      stringArray0[5] = "x6J*T!Qf2jFc\"";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("x6J*T!Qf2jFc\"", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[K@W(,&6?E(b026
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "#[K@W(,&6?E(b026";
      String string1 = Utility.compactClassName("#[K@W(,&6?E(b026");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#[K@W(,&6?E(b026", string1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(222, 201);
      assertEquals(734, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.printArray((Object[]) null, false);
      assertNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("Gt6HETL#J", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gt6HETL#J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, 1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("1:    nop\n", string0);
      
      MockFile mockFile0 = new MockFile(".2 *hAwuO,rBLxsN/");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(".2 *hAwuO,rBLxsN", mockFile0.getName());
      assertEquals(".2 *hAwuO,rBLxsN", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      
      int int1 = Pattern.UNIX_LINES;
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      try { 
        Utility.typeOfSignature("1:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-55)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-55)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = Utility.searchOpcode("PjEnO#S8&Xw:6\"");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("0n10koW3f%cib?4{L{x");
      assertNotNull(string0);
      assertEquals("L0n10koW3f%cib?4{L{x;", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("fadd", string1);
      
      String string2 = Utility.convertString("n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("n", string2);
      
      String string3 = Utility.printArray((Object[]) null, false);
      assertNull(string3);
      
      try { 
        Utility.methodSignatureReturnType("PjEnO#S8&Xw:6\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PjEnO#S8&Xw:6\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[2] = (byte) (-25);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, (int) (byte)108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[0] = (byte) (-45);
      byte byte0 = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)0, (byte) (-92), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)0, (byte) (-92), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = "H1ym+'@'n,";
      try { 
        Utility.typeOfSignature("H1ym+'@'n,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H1ym+'@'n,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.compactClassName("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("nop", string2);
      
      String string3 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<clinit>", string3);
      
      int int0 = Utility.clearBit(103, (byte) (-86));
      assertEquals(103, int0);
      
      String string4 = "471o";
      try { 
        Utility.typeOfSignature("471o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 471o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "Ue=@Y%}";
      try { 
        Utility.typeOfSignature("Ue=@Y%}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ue=@Y%}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BW;-8<B'9");
      assertEquals((byte)8, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)8);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    iconst_5\n1:    nop\n2:    nop\n", string0);
      
      String string1 = Utility.methodSignatureReturnType("BW;-8<B'9", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = Utility.setBit(2832, 2832);
      assertEquals(68368, int0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (-4077));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p9A[cJq!W6pUwb%5t#h");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("getstatic", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)101, (byte)116, (byte)115, (byte)116, (byte)97, (byte)116, (byte)105, (byte)99}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "getstatic", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("");
      assertNotNull(string0);
      assertEquals("L;", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)22;
      int int0 = Utility.setBit((byte)98, (byte)98);
      assertEquals(102, int0);
      
      String string1 = Utility.convertString("L;");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("L;", string1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)22, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = Utility.convertString("\nAnnotation(s):\n");
      assertNotNull(string0);
      assertEquals("\\nAnnotation(s):\\n", string0);
      
      short short0 = Constants.LDC_QUICK;
      assertEquals((short)203, short0);
      
      String string1 = Utility.getSignature("\nAnnotation(s):\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LAnnotation(s):;", string1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(237, (-1619176615));
      assertEquals(33554669, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)32, byte0);
      
      String string2 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<init>", string2);
      
      char char0 = byteSequence0.readChar();
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals('\u0000', char0);
      
      byte byte1 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("lload_2", string3);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q8WKKD*1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q8WKKD*1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((byte)84);
      assertNotNull(integer0);
      assertEquals(84, (int)integer0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("'^6r. L@piw7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '^6r. L@piw7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte) (-70);
      byteArray1[3] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray1[5] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)39, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)39, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      int int0 = 2674;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2674, (int) (byte)39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte byte0 = (byte) (-118);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-62);
      byteArray0[1] = (byte) (-118);
      byteArray0[3] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-118), (byte)0, (byte) (-125), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      long long0 = byteSequence0.skip(133L);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-118), (byte)0, (byte) (-125), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(9L, long0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 987, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)30;
      short short0 = Constants.FSTORE;
      assertEquals((short)56, short0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)30);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(30, constantClass0.getNameIndex());
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)67, (byte)14}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)67, (byte)14}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((byte)67, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3526, 237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = null;
      String string0 = Utility.methodTypeToSignature("w", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Lw;", string0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)70;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-394), 173);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)5, (byte)70}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    iconst_2\n1:    fstore_3\n", string1);
      
      int int1 = Utility.setBit(16, 2793);
      assertFalse(int1 == int0);
      assertEquals(528, int1);
      
      String string2 = ", high = ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString(", high = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, high = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = Utility.setBit(165, (-643));
      assertEquals(536871077, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-63), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-63), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byte byte0 = byteSequence1.readByte();
      assertArrayEquals(new byte[] {(byte)73, (byte) (-63), (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals((byte)73, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (-995));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-124), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), (int) (byte)91);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-124), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    dup_x2\n1:    iinc\t\t%0\t0\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      try { 
        Utility.methodSignatureReturnType("0:    dup_x2\n1:    iinc\t\t%0\t0\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dup_x2
         // 1:    iinc\t\t%0\t0
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature("9/Y;hkrD ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9/Y;hkrD 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      long long0 = byteSequence1.skip((byte) (-62));
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid signature: `");
      assertNotNull(string0);
      assertEquals("LInvalid;", string0);
      
      String string1 = Utility.compactClassName("LInvalid;");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("LInvalid;", string1);
      
      String string2 = Utility.getSignature("void");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("V", string2);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("TVE8G", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TVE8G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Utility.compactClassName("#[K@W(,&6?fE(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?fE(b026", string0);
      
      String string1 = Utility.compactClassName("#[K@W(,&6?fE(b026");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#[K@W(,&6?fE(b026", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      try { 
        Utility.typeOfSignature(".zip");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .zip
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      try { 
        Utility.typeOfSignature("<init>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <init>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "strictfp");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = Utility.signatureToString("Dont call getValueFloat() on a non FLOAT ElementValue", true);
      assertNotNull(string0);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)99, (byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      try { 
        Utility.typeOfSignature("+MJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.mark(1217);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertNotNull(constantFloat0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.3538435E-6F), constantFloat0.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      
      long long0 = byteSequence0.skip((byte) (-75));
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-75), 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46517. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid type: ", false);
      assertNotNull(mockFileOutputStream0);
      
      int int0 = Utility.setBit(111, 45);
      assertEquals(8303, int0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1880), 47);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature("*3owvWH2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3owvWH2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("c4S(W<");
      assertNotNull(string0);
      assertEquals("c4S(W<", string0);
      
      String string1 = "Nq;ZEm\"F";
      try { 
        Utility.methodSignatureReturnType("Nq;ZEm\"F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nq;ZEm\"F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("Aks*H@A", (String[]) null);
      assertNotNull(string0);
      assertEquals("()LAks*H@A;", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("()LAks*H@A;");
      assertNotNull(mockPrintWriter0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      try { 
        Utility.typeOfSignature("RbP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RbP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-55);
      try { 
        Utility.typeOfSignature("E&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-69);
      byteArray1[2] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 9, (int) (byte) (-125));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = File.separator;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/", string1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      int int0 = 188;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 188);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)37}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    fload_3\n", string2);
      
      int int1 = Utility.setBit((byte)37, 41);
      assertFalse(int1 == int0);
      assertEquals(549, int1);
      
      try { 
        Utility.typeOfMethodSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = Utility.decode("qqP/1ogz0XHx%", false);
      assertNotNull(byteArray0);
      
      String string0 = "\t";
      String string1 = Utility.replace("qqP/1ogz0XHx%", "qqP/1ogz0XHx%", "\t");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\t", string1);
      
      byte byte0 = (byte) (-67);
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = 143;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 143, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-63), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-63), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byte byte0 = byteSequence1.readByte();
      assertArrayEquals(new byte[] {(byte)88, (byte) (-63), (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals((byte)88, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (-995));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("qqP/1ogz0XHx%", false);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)113, byte0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("lrem", string0);
      
      String string1 = Utility.compactClassName("V,yP6|rHy$E0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("V,yP6|rHy$E0", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)122;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)122, (byte)122);
      assertNotNull(constantNameAndType0);
      assertEquals(122, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(122, constantNameAndType0.getNameIndex());
      
      ConstantLong constantLong0 = new ConstantLong(2210L);
      assertNotNull(constantLong0);
      assertEquals(2210L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertNotNull(constantLong1);
      assertEquals(2210L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(2210L, constantLong1.getBytes());
      assertTrue(constantLong1.equals((Object)constantLong0));
      
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(6, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 221, 221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Utility.convertString("bY");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bY", string1);
      
      byte byte0 = Utility.typeOfSignature("LjB#Aa05b5?v");
      assertEquals((byte)14, byte0);
      
      short short0 = Constants.ISHR;
      assertEquals((short)122, short0);
      
      int int0 = Utility.setBit(448, 448);
      assertEquals(449, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "public";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "public");
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("L\"JuzHuf)Aqld@", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L\"JuzHuf)Aqld@", string1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L\"JuzHuf)Aqld@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("L\"JuzHuf)Aqld@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L\"JuzHuf)Aqld@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Utility.compactClassName("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      
      byte[] byteArray0 = new byte[4];
      try { 
        Utility.typeOfSignature("Y'Y'`dWjqII@tMvOqnm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y'Y'`dWjqII@tMvOqnm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      boolean boolean0 = Utility.isSet(32, 32);
      assertFalse(boolean0);
      
      String string1 = Utility.methodTypeToSignature("L<illegal;V", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()LL<illegal;V;", string1);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()LL<illegal;V;");
      assertNotNull(stringArray0);
      
      int int0 = Utility.setBit((byte) (-32), (-3116));
      assertEquals((-32), int0);
      
      String string2 = "Tu>)#gx!Et";
      String string3 = Utility.methodTypeToSignature("()LL<illegal;V;", stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("()L()LL<illegal;V;;", string3);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature("java.class.path");
      assertNotNull(string0);
      assertEquals("Ljava/class/path;", string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = Utility.setBit((byte)98, (byte)98);
      assertEquals(102, int0);
      
      String string1 = Utility.convertString("L;raoc(nkM_\"2#*v/");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L;raoc(nkM_\\\"2#*v/", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "'^6r. L@piw7";
      try { 
        Utility.typeOfSignature("5L27S+W$`<Z)r01PY`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5L27S+W$`<Z)r01PY`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (-1439838200));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(74, (-1717));
      assertEquals(74, int0);
      
      byte byte0 = Utility.typeOfSignature("Ja? $K");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-97);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.convertString("Invalid signat#re: `");
      assertNotNull(string0);
      assertEquals("Invalid signat#re: `", string0);
      
      String string1 = Utility.signatureToString("Invalid signat#re: `");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("int", string1);
      
      short short0 = Constants.FSTORE;
      assertEquals((short)56, short0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[4] = (byte) (-115);
      byteArray0[7] = (byte)33;
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-92);
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)33, (int) (byte)33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      short short0 = Constants.NOP;
      assertEquals((short)0, short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fload_1", true);
      assertNotNull(mockFileOutputStream0);
      
      int int0 = Utility.setBit((-1995), (-1304));
      assertEquals((-1739), int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1944), 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-70);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lruturn");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("/]CyY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /]CyY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-61);
      byteArray1[2] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)0, (byte) (-61), (byte)0}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)0, (byte) (-61), (byte)0}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[2] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 42, (int) (byte) (-61));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.getSignature("RuntimeVisibleAnnotations");
      assertNotNull(string0);
      assertEquals("LRuntimeVisibleAnnotations;", string0);
      
      try { 
        Utility.methodSignatureReturnType("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("7;wgFQA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7;wgFQA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "\nAnnotation(s):\n";
      String string1 = Utility.convertString("\nAnnotation(s):\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\nAnnotation(s):\\n", string1);
      
      short short0 = Constants.DMUL;
      assertEquals((short)107, short0);
      
      byte byte0 = (byte)9;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, (int) (byte)9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-124);
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte) (-124);
      byteArray1[6] = (byte) (-124);
      byteArray1[8] = (byte) (-124);
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = Utility.methodTypeToSignature("%N6_1b{&.8", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L%N6_1b{&/8;", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("()L%N6_1b{&/8;");
      assertNotNull(mockPrintWriter0);
      
      String string1 = Utility.methodTypeToSignature("From\tTo\tHandler\tType\n", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()LFrom;", string1);
      
      int int0 = Utility.setBit(184, 196);
      assertEquals(184, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-32);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, 1796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)63;
      byteArray0[1] = (byte)63;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte)63;
      byteArray1[4] = (byte)103;
      byteArray1[5] = (byte)63;
      byteArray1[6] = (byte)63;
      byteArray1[7] = (byte)63;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)63, (byte)63);
      assertNotNull(constantFieldref0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(63, constantFieldref0.getNameAndTypeIndex());
      assertEquals(63, constantFieldref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("WO6z{#Ck@QL?C");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "WO6z{#Ck@QL?C");
      assertNotNull(printStream0);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream1, printStream0);
      assertSame(printStream0, mockPrintStream1);
      assertNotSame(printStream0, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      assertNotNull(dataOutputStream0);
      assertFalse(mockPrintStream0.equals((Object)printStream0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      
      constantPool1.dump(dataOutputStream0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream1, printStream0);
      assertSame(printStream0, mockPrintStream1);
      assertNotSame(printStream0, mockPrintStream0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(mockPrintStream0.equals((Object)printStream0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 122, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      Method method0 = new Method();
      assertNotNull(method0);
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isProtected());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isEnum());
      assertFalse(method0.isStrictfp());
      assertEquals(0, method0.getSignatureIndex());
      assertFalse(method0.isFinal());
      assertFalse(method0.isPrivate());
      assertFalse(method0.isVolatile());
      assertFalse(method0.isTransient());
      assertFalse(method0.isInterface());
      assertFalse(method0.isPublic());
      assertEquals(0, method0.getModifiers());
      assertEquals(0, method0.getNameIndex());
      assertFalse(method0.isSynchronized());
      assertEquals(0, method0.getAccessFlags());
      assertFalse(method0.isStatic());
      assertFalse(method0.isAbstract());
      assertFalse(method0.isNative());
      assertFalse(method0.isAnnotation());
      
      byte[] byteArray0 = Utility.decode("G\"@lcU6z-l", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)34, (byte)64, (byte)108, (byte)99, (byte)85, (byte)54, (byte)122, (byte)45, (byte)108}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)71, (byte)34, (byte)64, (byte)108, (byte)99, (byte)85, (byte)54, (byte)122, (byte)45, (byte)108}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)71, (byte)34, (byte)64, (byte)108, (byte)99, (byte)85, (byte)54, (byte)122, (byte)45, (byte)108}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)18210, short0);
      
      int int0 = Utility.setBit(114, (short)18210);
      assertEquals(118, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 118, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = Utility.setBit(165, (-643));
      assertEquals(536871077, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)85;
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)85, (byte)0, (byte)76, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte)85, (byte)0, (byte)76, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("[t{Jra@wUE~av&mGop]");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(78, (-4332));
      assertEquals(1048654, int0);
      
      String string0 = "GcO?..KoG";
      try { 
        Utility.typeOfSignature("GcO?..KoG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GcO?..KoG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean1 = byteSequence0.readBoolean();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte) (-84);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-84), (byte) (-61), (byte) (-84)}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.signatureToString("J");
      assertNotNull(string0);
      assertEquals("long", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)20;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-110), (byte)20}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "$h*kw)k/$";
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("!Kge'<J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kge'<J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.convertString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      byte[] byteArray0 = null;
      String string1 = Utility.classOrInterface(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      
      try { 
        Utility.methodSignatureReturnType("Xrv8/L&uV+XVs2nb^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xrv8/L&uV+XVs2nb^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
      
      ConstantPool constantPool0 = null;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      int int2 = 90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8Ot yTD2iO&\"");
      assertEquals((byte)6, byte0);
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      byte byte1 = Constants.CONSTANT_Class;
      assertFalse(byte1 == byte0);
      assertEquals((byte)7, byte1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("F8Ot yTD2iO&\"", false);
      assertNotNull(string0);
      assertEquals("float", string0);
      
      String string1 = Utility.getSignature(")");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L);", string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "29!)o2,~XM~p";
      try { 
        Utility.typeOfSignature("29!)o2,~XM~p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 29!)o2,~XM~p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) null;
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      objectArray0[2] = (Object) null;
      byte byte0 = (byte) (-89);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-89);
      byteArray0[0] = (byte)84;
      byteArray1[2] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)50}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)50}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("goto\t\t#50", string0);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)98, (byte)53, (byte)22, (byte)22, (byte)0, (byte)98, (byte)31, (byte)22}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)98, (byte)53, (byte)22, (byte)22, (byte)0, (byte)98, (byte)31, (byte)22}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("fadd", string1);
      
      MockFile mockFile0 = new MockFile("fadd");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("fadd", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("fadd", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)98, (byte)53, (byte)22, (byte)22, (byte)0, (byte)98, (byte)31, (byte)22}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("saload", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "saload";
      stringArray0[1] = "saload";
      String string3 = Utility.methodTypeToSignature("fadd", stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("(Lsaload;Lsaload;)Lfadd;", string3);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q~/h");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-12);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte)9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantPool constantPool0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byte byte0 = (byte) (-11);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-11), (byte)74, (byte)20, (byte)0, (byte)50}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-11), (byte)74, (byte)20, (byte)0, (byte)50}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte1 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)112, (byte) (-11), (byte)74, (byte)20, (byte)0, (byte)50}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byte1 == byte0);
      assertEquals((byte)112, byte1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-11), (byte)74, (byte)20, (byte)0, (byte)50}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-848), (int) (byte) (-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("ifnull", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      
      String string0 = Utility.convertString("java.lang.");
      assertNotNull(string0);
      assertEquals("java.lang.", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('e');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = Utility.setBit(836, (byte)74);
      assertFalse(int1 == int0);
      assertEquals(1860, int1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-78), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature("i`b'C.#C<<TEF:M#B");
      assertNotNull(string0);
      assertEquals("Li`b'C/#C<<TEF:M#B;", string0);
      
      try { 
        Utility.methodSignatureReturnType("Li`b'C/#C<<TEF:M#B;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Li`b'C/#C<<TEF:M#B;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)53, (byte)65, (byte)53}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)53, (byte)65, (byte)53}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)53, byte0);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)53, (byte)65, (byte)53}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("lstore_2", string1);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("Xp-#HE=PrdHX=AGkXr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xp-#HE=PrdHX=AGkXr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.convertString("Code");
      assertNotNull(string0);
      assertEquals("Code", string0);
      
      String string1 = Utility.signatureToString("Clid");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("char", string1);
      
      short short0 = Constants.FSTORE;
      assertEquals((short)56, short0);
      
      ConstantClass constantClass0 = new ConstantClass(1625);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1625, constantClass0.getNameIndex());
      
      String string2 = constantClass0.toString();
      assertNotNull(string2);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1625, constantClass0.getNameIndex());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("CONSTANT_Class[7](name_index = 1625)", string2);
      
      ConstantClass constantClass1 = (ConstantClass)constantClass0.copy();
      assertNotNull(constantClass1);
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1625, constantClass0.getNameIndex());
      assertEquals(1625, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertTrue(constantClass1.equals((Object)constantClass0));
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1703, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)31;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)53;
      byteArray1[6] = (byte)31;
      byteArray1[7] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)26, (byte)31, (byte)0, (byte)16, (byte)53, (byte)53, (byte)31, (byte)16}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)26, (byte)31, (byte)0, (byte)16, (byte)53, (byte)53, (byte)31, (byte)16}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((byte)26, byte0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)26, (byte)31, (byte)0, (byte)16, (byte)53, (byte)53, (byte)31, (byte)16}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("lload_1", string1);
      
      MockFile mockFile0 = new MockFile("double");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("double", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("double", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)26, (byte)31, (byte)0, (byte)16, (byte)53, (byte)53, (byte)31, (byte)16}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("nop", string2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-87);
      byteArray0[6] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      String string1 = Utility.replace("<illegal type>", "<illegal type>", "<illegal type>");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-68), byte0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(2, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("newarray\t\t<<illegal type>>", string2);
      
      MockFile mockFile0 = new MockFile("<illegal type>");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("<illegal type>", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("<illegal type>", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal type>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal type>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.compactClassName("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      String string2 = "bY";
      String string3 = Utility.convertString("bY");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("bY", string3);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-86), byte0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("#[K@W(,&6?E(b026");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit((-840), (byte) (-86));
      assertEquals((-840), int0);
      
      try { 
        Utility.typeOfSignature("OE~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OE~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-87);
      byteArray0[6] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    ret\t\t%0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 173;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeinterface");
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      ConstantPool constantPool0 = null;
      String string1 = "\nAnnotation(s):\n";
      String string2 = Utility.convertString("0d9+t(]$]Q");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0d9+t(]$]Q", string2);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)0, short0);
      
      try { 
        Utility.typeOfSignature("WMm/8LUn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WMm/8LUn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.methodTypeToSignature("%N6_1b{&.8", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L%N6_1b{&/8;", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("()L%N6_1b{&/8;");
      assertNotNull(mockPrintWriter0);
      
      String string1 = Utility.methodTypeToSignature("From\tTo\tHanler\tType\n", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()LFrom;", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)38, (byte)18, (byte)18, (byte)38, (byte)38, (byte)97}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      char char0 = byteSequence0.readChar();
      assertArrayEquals(new byte[] {(byte)38, (byte)18, (byte)18, (byte)38, (byte)38, (byte)97}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals('\u2612', char0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)38, (byte)18, (byte)18, (byte)38, (byte)38, (byte)97}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((byte)18, byte0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)38, (byte)18, (byte)18, (byte)38, (byte)38, (byte)97}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dload_0", string2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte byte0 = (byte) (-64);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?=C)*ao~[^5J)3SU-SK";
      stringArray0[3] = "?=C)*ao~[^5J)3SU-SK";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y QOiY,w>&?&6E}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y QOiY,w>&?&6E}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      int int0 = Utility.setBit(16, 16);
      assertEquals(65552, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte) (-107);
      byteArray1[4] = (byte) (-107);
      byteArray1[0] = (byte)24;
      byteArray1[6] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 4569, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = Utility.setBit((byte)25, (-1074));
      assertEquals(16409, int0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)25;
      byteArray1[2] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 510, (-599));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.compactClassName("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      String string1 = File.separator;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("/", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      String string2 = Utility.convertString("/");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/", string2);
      
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(34, (int)integer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.lang.");
      assertNotNull(mockFileOutputStream0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte) (-41);
      byteArray1[6] = (byte)77;
      byteArray1[7] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1075, (int) (byte)24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)23;
      byteArray0[1] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-50), (int) (byte)23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      byte byte0 = Utility.typeOfSignature("ZKGHw#-}");
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = Utility.isSet(711, (byte)97);
      assertTrue(boolean0);
      
      String string0 = Utility.format((-475), (-1121), false, 'O');
      assertNotNull(string0);
      assertEquals("-475", string0);
      
      String string1 = Utility.signatureToString("ZKGHw#-}", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("boolean", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "-475";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) fileSystemHandling1;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[4] = object2;
      objectArray0[6] = (Object) fileSystemHandling0;
      objectArray0[7] = (Object) "ZKGHw#-}";
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.getSignature("<init>");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L<init>;", string1);
      
      try { 
        Utility.methodSignatureReturnType("eF^ph{)MYdND");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MYdND'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)83;
      byteArray0[3] = (byte) (-112);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byteArray0;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("DQp&1*Mo[:M8UG");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 165, 1304);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Utility.getSignature("?+f?Q");
      assertNotNull(string0);
      assertEquals("L?+f?Q;", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)83, (byte)83, (byte)27}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-5), (byte)83, (byte)83, (byte)27}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-5), byte0);
      
      byte byte1 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-5), (byte)83, (byte)83, (byte)27}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(byte1 == byte0);
      assertEquals((byte)83, byte1);
      
      byte byte2 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-5), (byte)83, (byte)83, (byte)27}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertEquals((byte)83, byte2);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)83, (byte)83, (byte)27}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("iload_1", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)83, (byte)83, (byte)27}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$fbSS$h", string2);
      
      try { 
        Utility.methodSignatureReturnType("ldiv", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldiv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)26;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("A6JVZk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A6JVZk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byte byte0 = Utility.typeOfSignature("The wildcard list must not be null");
      assertEquals((byte)14, byte0);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 544, (int) (byte) (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = (byte)38;
      String string0 = Utility.compactClassName("&>,/-fg");
      assertNotNull(string0);
      assertEquals("&>,.-fg", string0);
      
      String string1 = Utility.compactClassName("!=)B!w,tU");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!=)B!w,tU", string1);
      
      String string2 = Utility.getSignature("DP@`7u7");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LDP@`7u7;", string2);
      
      byte byte1 = (byte) (-124);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      short short0 = Utility.searchOpcode("invokedynamic");
      assertEquals((short)186, short0);
      
      int int0 = Utility.setBit(255, (-264));
      assertEquals(16777471, int0);
      
      try { 
        Utility.typeOfSignature("!=)B!w,tU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =)B!w,tU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      String string0 = Utility.compactClassName("multianewarray");
      assertNotNull(string0);
      assertEquals("multianewarray", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-65), byte0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((-1), int0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), (int) (byte) (-65));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    athrow\n", string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString("E``%fcZ8}or+ZmE", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E``%fcZ8}or+ZmE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)127;
      byteArray0[6] = (byte)127;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[4] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      short short0 = Constants.LDC_QUICK;
      assertEquals((short)203, short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Utility.setBit((byte) (-5), (byte) (-5));
      assertEquals((-5), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-5);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-5), (int) (byte) (-5));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-5)}, byteArray0);
      assertEquals("0:    areturn\n1:    <illegal opcode>\n", string0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('B');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      try { 
        Utility.typeOfSignature("0:    areturn\n1:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    areturn
         // 1:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-90);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-90), (-11));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jsr_w");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-122), (byte)38}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = "Knt6Ad^BqF d@[$Q2I,";
      String string1 = Utility.convertString("jsr_w");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("jsr_w", string1);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-122), (byte)38}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short) (-10362), short0);
      
      int int0 = Utility.setBit(169, 177);
      assertEquals(131241, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, 466);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      short short0 = Constants.LDC_QUICK;
      assertEquals((short)203, short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)1, (byte)103, (byte) (-79), (byte)14, (byte)103, (byte)67}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-59), (byte)1, (byte)103, (byte) (-79), (byte)14, (byte)103, (byte)67}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-59), byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 243, 237);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = "-3'";
      try { 
        Utility.typeOfSignature("-3'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      short short0 = Utility.searchOpcode("6Xf{94");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$8c", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (int) (byte) (-116));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0:    f2l\n", string2);
      
      String string3 = Utility.compactClassName("org.apache.bcel.classfile.ClassFormatException", false);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.bcel.classfile.ClassFormatException", string3);
      
      String string4 = Utility.classOrInterface((byte) (-116));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("interface", string4);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte byte0 = (byte) (-86);
      byte byte1 = (byte) (-1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[4] = (byte) (-106);
      byte byte2 = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      short short0 = Constants.LDC_QUICK;
      assertEquals((short)203, short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(192, 235);
      assertEquals(2240, int0);
      
      byte byte0 = (byte) (-69);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wta:3SI:MMK UOA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wta:3SI:MMK UOA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte) (-57);
      byteArray1[4] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118), (byte) (-57), (byte)29, (byte)0}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118), (byte) (-57), (byte)29, (byte)0}, byteArray1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118), (byte) (-57), (byte)29, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l\"w&X+R EM");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      bufferedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118), (byte) (-57), (byte)29, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean0);
      
      constantPool0.dump(dataOutputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118), (byte) (-57), (byte)29, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 132, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = Utility.compactClassName("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      String string1 = Utility.convertString("#[K@W(,&6?E(b026");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#[K@W(,&6?E(b026", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Constants.DMUL;
      assertEquals((short)107, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-50);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)110, 1655);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-73);
      ConstantPool constantPool0 = null;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-73)}, byteArray0);
      assertEquals("$9d$b7", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (-2024));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)17, (byte)17}, byteArray0);
      assertEquals("0:    if_icmpeq\t\t#4369\n", string0);
      
      String string1 = Utility.compactClassName("i2", "i2", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      int int0 = Utility.setBit((-1619146741), (byte) (-58));
      assertEquals((-1619146677), int0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      long long0 = byteSequence0.skip((-1619146741));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0L, long0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-1619146677), 165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-672), 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      int int1 = Utility.setBit(32, 157);
      assertFalse(int1 == int0);
      assertEquals(536870944, int1);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), 898);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string0);
      
      MockFile mockFile0 = new MockFile("SV");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("SV", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("SV", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      
      int int2 = Pattern.UNIX_LINES;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      try { 
        Utility.typeOfSignature("NBmt4ip@c?D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NBmt4ip@c?D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "et]tatic";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "et]tatic");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = "void";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "et]tatic";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "et]tatic";
      stringArray0[5] = "et]tatic";
      stringArray0[6] = "et]tatic";
      stringArray0[7] = "et]tatic";
      stringArray0[8] = "et]tatic";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "mrw;.)!EP?E";
      byte[] byteArray0 = new byte[23];
      byte byte0 = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-60);
      byteArray1[4] = (byte) (-88);
      byteArray1[4] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)77, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      int int0 = Utility.setBit((-1619146741), (byte) (-58));
      assertEquals((-1619146677), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-1));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)107, (byte) (-91), (byte) (-1), (byte) (-58), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    dmul\n1:    if_acmpeq\t\t#-57\n4:    impdep2\n5:    nop\n6:    impdep2\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)107, (byte) (-91), (byte) (-1), (byte) (-58), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Constants.ILLEGAL_TYPE;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<illegal type>", string2);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)107, (byte) (-91), (byte) (-1), (byte) (-58), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)107, byte0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-58);
      byteArray1[5] = (byte) (-58);
      byteArray1[6] = (byte) (-91);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)107, (byte) (-91), (byte) (-1), (byte) (-58), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-58), (byte)54, (byte) (-1), (byte) (-58), (byte) (-58), (byte) (-91)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      int int1 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)107, (byte) (-91), (byte) (-1), (byte) (-58), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int1 == int0);
      assertEquals(165, int1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)54, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid");
      assertEquals((byte)10, byte0);
      
      String string0 = Pattern.quote("b");
      assertNotNull(string0);
      assertEquals("\\Qb\\E", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)22, (byte)79, (byte)10, (byte)31, (byte)31, (byte)31, (byte)31, (byte)31}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte1 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)22, (byte)79, (byte)10, (byte)31, (byte)31, (byte)31, (byte)31, (byte)31}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byte1 == byte0);
      assertEquals((byte)22, byte1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)22, (byte)79, (byte)10, (byte)31, (byte)31, (byte)31, (byte)31, (byte)31}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("iastore", string2);
      
      MockFile mockFile0 = new MockFile("impdep2", "Invalid type: ");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/impdep2/Invalid type: ", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("Invalid type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/impdep2", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)22, (byte)79, (byte)10, (byte)31, (byte)31, (byte)31, (byte)31, (byte)31}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("lconst_1", string3);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = Utility.format((byte)98, 64, false, 'h');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh98", string4);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      short short0 = Utility.searchOpcode("Illeg?l tp: ");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit((-639), (short) (-1));
      assertEquals((-639), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-639), 237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2l
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "9^q[~!f[P7>I7mYe";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9^q[~!f[P7>I7mYe";
      stringArray0[1] = "9^q[~!f[P7>I7mYe";
      stringArray0[2] = "9^q[~!f[P7>I7mYe";
      stringArray0[3] = "(\u0002#@1u0^tT>oD(";
      stringArray0[4] = "9^q[~!f[P7>I7mYe";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("9^q[~!f[P7>I7mYe", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[~!f[P7>I7mYe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = Utility.setBit((-2190), (-2190));
      assertEquals((-2190), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      int int1 = Pattern.MULTILINE;
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      byteSequence0.mark((-2190));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int2 = byteSequence1.read();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      byteSequence1.close();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte)0}, byteArray0);
      assertEquals("$A$c1$A", string0);
      
      byte[] byteArray1 = Utility.decode("$A$c1$A", false);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int3 = Pattern.UNICODE_CHARACTER_CLASS;
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(256, int3);
      
      String string1 = Utility.methodTypeToSignature("$A$c1$A", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()L$A$c1$A;", string1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)96, (byte)0, (byte)0}, byteArray0);
      assertEquals("$60$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$60$A$A", false);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)96, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("eW},T=Ay");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      int int1 = Utility.setBit((byte) (-102), 32);
      assertFalse(int1 == int0);
      assertEquals((-101), int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, 2447);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "BW;-8<B'9";
      byte byte0 = Utility.typeOfSignature("BW;-8<B'9");
      assertEquals((byte)8, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (int) (byte) (-110));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      int int0 = Utility.setBit((-1619146760), (byte) (-104));
      assertEquals((-1619146760), int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", high = ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 72);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-104), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    dcmpg\n1:    dcmpg\n2:    impdep2\n3:    impdep2\n", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("fLji_)a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fLji_)a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte) (-100);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-100));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-100), constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-100), constantInteger0.getBytes());
      assertEquals((-100), constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = constantPool0.toString();
      assertNotNull(string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 178, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)30}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 165, 1304);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      short short0 = Utility.searchOpcode("E/A.o3>^HGDq6rC");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit((short) (-1), (short) (-1));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.getSignature("Invalid signat#re: `");
      assertNotNull(string0);
      assertEquals("LInvalid;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean0);
      
      int int1 = Utility.setBit((-2675), (-1));
      assertFalse(int1 == int0);
      assertEquals((-2675), int1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-79), byte0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1473), 2369);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertEquals("0:    return\n", string0);
      
      try { 
        Utility.methodSignatureReturnType("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type annotation can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[2] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte) (-92)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte) (-92)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lreturn
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
      
      String string0 = Utility.convertString("a");
      assertNotNull(string0);
      assertEquals("a", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte) (-100);
      Constant[] constantArray0 = new Constant[1];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 35;
      int int1 = Utility.setBit((byte) (-100), 35);
      assertFalse(int1 == int0);
      assertEquals((-100), int1);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-100);
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte) (-100);
      byte byte0 = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-100);
      byteArray1[6] = (byte) (-101);
      byteArray1[7] = (byte) (-100);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = constantPool0.toString();
      assertNotNull(string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-100), (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifge\t\t#156
         // 3:    ifge\t\t#159
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      short short0 = Utility.searchOpcode("ifeq");
      assertEquals((short)153, short0);
      
      String string0 = Utility.classOrInterface(7);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.fillup("ifeq", (short)153, false, 'P');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPifeq", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-102);
      byte byte0 = (byte) (-34);
      byteArray0[3] = (byte) (-51);
      byte byte1 = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 148, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)16;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((-1665.3793F));
      assertNotNull(constantFloat0);
      assertEquals((-1665.3793F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertNotNull(constantFloat1);
      assertEquals((-1665.3793F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-1665.3793F), constantFloat1.getBytes(), 0.01F);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      
      constantArray0[0] = (Constant) constantFloat1;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantFloat1.accept(emptyVisitor0);
      assertNotSame(constantFloat0, constantFloat1);
      assertNotSame(constantFloat1, constantFloat0);
      assertEquals((-1665.3793F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals((-1665.3793F), constantFloat1.getBytes(), 0.01F);
      assertTrue(constantFloat0.equals((Object)constantFloat1));
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 180, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48735. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)84;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-96);
      byteArray1[3] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-96), 159);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifeq\t\t#-24576
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "BW;8<B'9";
      ConstantPool constantPool0 = null;
      int int0 = 256;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 21, (int) (byte)60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = Utility.convertString("#[K@W(,&6?E(b026");
      assertNotNull(string0);
      assertEquals("#[K@W(,&6?E(b026", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-76)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      assertNotNull(constantDouble0);
      assertEquals(1.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-76)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-76)}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("sastore", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('}');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short short0 = Utility.searchOpcode("sastore");
      assertEquals((short)86, short0);
      
      String string2 = Utility.replace("L", "float", "#[K@W(,&6?E(b026");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L", string2);
      
      short short1 = Utility.searchOpcode("long");
      assertFalse(short1 == short0);
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "&/iZ[lcGzNnqGkaiN)";
      try { 
        Utility.typeOfSignature("&/iZ[lcGzNnqGkaiN)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &/iZ[lcGzNnqGkaiN)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte) (-83)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte) (-83)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte)21;
      byteArray1[5] = (byte) (-92);
      String string0 = Utility.getSignature("? extends ");
      assertNotNull(string0);
      assertEquals("L?;", string0);
      
      String string1 = Utility.methodSignatureReturnType("T7pGov(,Lsr_01;:M/");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7pGov(,Lsr_01", string1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Utility.convertString("Invalid signat#re: `");
      assertNotNull(string0);
      assertEquals("Invalid signat#re: `", string0);
      
      String string1 = Utility.methodSignatureReturnType("Invalid signat#re: `");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("int", string1);
      
      short short0 = Constants.FSTORE;
      assertEquals((short)56, short0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[2] = (byte) (-115);
      byteArray0[7] = (byte)61;
      byteArray0[7] = (byte) (-66);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 64, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = Utility.convertString("\nAnnotation(s):\n");
      assertNotNull(string0);
      assertEquals("\\nAnnotation(s):\\n", string0);
      
      short short0 = Constants.LDC_QUICK;
      assertEquals((short)203, short0);
      
      short short1 = Constants.DMUL;
      assertFalse(short1 == short0);
      assertEquals((short)107, short1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte) (-118);
      byteArray1[4] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118), (byte)0, (byte)29, (byte)0}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118), (byte)0, (byte)29, (byte)0}, byteArray1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118), (byte)0, (byte)29, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 132, (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-11);
      byteArray0[1] = (byte) (-71);
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wET5N%~N*9(oedq");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      boolean boolean3 = byteSequence2.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte)0}, byteArray0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(0, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte)0}, byteArray0);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals((byte)0, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, (int) (byte) (-11));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-63);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)72, (byte) (-63), (byte)0, (byte)14, (byte)13}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = ObjectStreamConstants.SC_BLOCK_DATA;
      assertEquals((byte)8, byte0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte) (-93), (byte)72, (byte) (-63), (byte)0, (byte)14, (byte)13}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short) (-23736), short0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)72, (byte) (-63), (byte)0, (byte)14, (byte)13}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byteSequence1.close();
      assertArrayEquals(new byte[] {(byte) (-93), (byte)72, (byte) (-63), (byte)0, (byte)14, (byte)13}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, 826);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte byte0 = (byte)18;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[6] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)18;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[6] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.mark((byte)18);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[16];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertNotNull(constantFloat0);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(4.0612865E-28F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(16, constantPool0.getLength());
      
      ConstantFloat constantFloat1 = (ConstantFloat)constantFloat0.clone();
      assertNotNull(constantFloat1);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertNotSame(constantFloat1, constantFloat0);
      assertNotSame(constantFloat0, constantFloat1);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(4.0612865E-28F, constantFloat1.getBytes(), 0.01F);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(4.0612865E-28F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      
      long long0 = byteSequence0.skip((-109L));
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, (-2541));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4608. Constant pool size is: 16
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)17;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[5] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (-1291));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = Utility.convertString("CONS;&TANT_Fieldref");
      assertNotNull(string0);
      assertEquals("CONS;&TANT_Fieldref", string0);
      
      String string1 = Utility.methodSignatureReturnType("CONS;&TANT_Fieldref");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("char", string1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      short short0 = Constants.FSTORE;
      assertEquals((short)56, short0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[0] = (byte) (-124);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte) (-120);
      byteArray0[5] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte) (-86);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte) (-86), (byte) (-124), (byte) (-86), (byte) (-86), (byte)0, (byte) (-86), (byte) (-86)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte) (-86), (byte) (-124), (byte) (-86), (byte) (-86), (byte)0, (byte) (-86), (byte) (-86)}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = 559;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iinc\t\t%0\t-86
         // 3:    iinc\t\t%170\t-86
         // 6:    nop
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-114);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-114), (byte) (-114));
      assertNotNull(constantNameAndType0);
      assertEquals((-114), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-114), constantNameAndType0.getSignatureIndex());
      
      ConstantLong constantLong0 = new ConstantLong(2247L);
      assertNotNull(constantLong0);
      assertEquals(2247L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertNotNull(constantLong1);
      assertEquals(2247L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(2247L, constantLong1.getBytes());
      assertTrue(constantLong1.equals((Object)constantLong0));
      
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(6, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 221, 221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BW;8<B'9");
      assertEquals((byte)8, byte0);
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-71);
      byteArray0[24] = (byte)8;
      byteArray0[26] = (byte)19;
      byteArray0[5] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.mark(174);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertNotNull(constantFloat0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1.7256825E-27F, constantFloat0.getBytes(), 0.01F);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat1 = new ConstantFloat((byte)8);
      assertNotNull(constantFloat1);
      assertEquals(8.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertFalse(constantFloat1.equals((Object)constantFloat0));
      
      ConstantFloat constantFloat2 = (ConstantFloat)constantFloat1.clone();
      assertNotNull(constantFloat2);
      assertNotSame(constantFloat1, constantFloat2);
      assertNotSame(constantFloat1, constantFloat0);
      assertNotSame(constantFloat2, constantFloat0);
      assertNotSame(constantFloat2, constantFloat1);
      assertEquals(8.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(8.0F, constantFloat2.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat2.getTag());
      assertFalse(constantFloat1.equals((Object)constantFloat0));
      assertTrue(constantFloat2.equals((Object)constantFloat1));
      assertFalse(constantFloat2.equals((Object)constantFloat0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      long long0 = byteSequence1.skip((byte)19);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(19, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(19L, long0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 103, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2233. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("y&WYJc$G|rp#>C|GX?");
      assertNotNull(string0);
      assertEquals("y&WYJc$G|rp#>C|GX?", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)112;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)46, (byte)112}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.replace("anewarray", "y&WYJc$G|rp#>C|GX?", "y&WYJc\\$G|rp#>C|GX?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("anewarray", string1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y&WYJc$G|rp#>C|GX?");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = Pattern.quote("y&WYJc$G|rp#>C|GX?");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\Qy&WYJc$G|rp#>C|GX?\\E", string2);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-41);
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)123;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 46, 51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[6] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)18;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[6] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantDouble constantDouble0 = new ConstantDouble((-793.2506457));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-793.2506457), constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(7, constantPool0.getLength());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("ldc\t\t-793.2506457 (0)", string0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('b');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      String string1 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertEquals(7, constantPool0.getLength());
      assertEquals(2, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ldc\t\t-793.2506457", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-75), (byte)18, (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("12 00 b5 12 00 00 b5 00 00", string2);
      
      String string3 = Utility.convertString("areturn");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("areturn", string3);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"fKZiQ2IE2WwrA:^ CH");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-64), (byte) (-64)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-64), (byte) (-64)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-64), (byte) (-64)}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      boolean boolean2 = byteSequence2.markSupported();
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-64), (byte) (-64)}, byteArray0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertEquals(0, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence3);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-64), (byte) (-64)}, byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      
      byte byte0 = byteSequence3.readByte();
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-64), (byte) (-64)}, byteArray0);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence0);
      assertEquals(1, byteSequence3.getIndex());
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertEquals((byte) (-95), byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 150, 154);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte byte0 = (byte) (-128);
      String string0 = "H_#T8*jBY5";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("H_#T8*jBY5", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H_#T8*jBY5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("%N_1b{&j.8", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L%N_1b{&j/8;", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-46);
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<clinit>", string2);
      
      String string3 = Utility.methodSignatureToString("()L%N_1b{&j/8;", "<clinit>", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%N_1b{&j.8 <clinit>()", string3);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-46), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-46), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-46), (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      // Undeclared exception!
      try { 
        byteSequence1.readFully(byteArray0, 1024, 140);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"fKZiQ2IE2WwrA:^ CH");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-94), (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-94), (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-94), (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      boolean boolean2 = byteSequence2.markSupported();
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-94), (byte) (-94)}, byteArray0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(0, byteSequence2.getIndex());
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence3);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-94), (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      
      byte byte0 = byteSequence3.readByte();
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-94), (byte) (-94)}, byteArray0);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence0);
      assertEquals(1, byteSequence3.getIndex());
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertEquals((byte) (-95), byte0);
      
      int int1 = 154;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 150, 154);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
