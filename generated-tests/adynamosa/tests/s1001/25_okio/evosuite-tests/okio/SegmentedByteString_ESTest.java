/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 22:19:04 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      Buffer buffer1 = buffer0.writeUtf8("I");
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",ODeflaterSink(");
      segmentedByteString0.startsWith((ByteString) segmentedByteString0);
      segmentedByteString0.hashCode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.write(mockPrintStream0);
      segmentedByteString0.internalArray();
      buffer1.size = (-944L);
      segmentedByteString0.write(buffer0);
      buffer1.indexOf((ByteString) segmentedByteString0);
      buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-1), (-3936));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      Buffer buffer1 = buffer0.writeUtf8("I");
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.size = 2842L;
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("not attached to a buffer");
      segmentedByteString0.startsWith((ByteString) segmentedByteString0);
      segmentedByteString0.hashCode();
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hmacSha1(segmentedByteString0);
      segmentedByteString0.write(mockPrintStream0);
      segmentedByteString0.internalArray();
      segmentedByteString0.write(buffer0);
      buffer0.indexOf((ByteString) segmentedByteString0);
      // Undeclared exception!
      segmentedByteString0.substring(int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      buffer0.writeByte((-636));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = buffer0.snapshot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.hashCode();
      byteString0.hmacSha1(byteString0);
      byteString0.getByte(0);
      byteString0.hmacSha1(byteString0);
      byteString0.sha1();
      // Undeclared exception!
      try { 
        Charset.forName("z@2@QCJ+t,");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // z@2@QCJ+t,
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.encodeUtf8("okio.SegmentedByteString");
      segmentedByteString0.write(buffer0);
      ByteString byteString1 = segmentedByteString0.toAsciiUppercase();
      boolean boolean0 = segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      segmentedByteString0.sha256();
      ByteString byteString2 = buffer0.snapshot();
      byteString1.lastIndexOf(byteString0, 2);
      segmentedByteString0.hashCode();
      ByteBuffer.allocate(2);
      segmentedByteString0.hmacSha1(byteString2);
      byte byte0 = segmentedByteString0.getByte(1);
      assertEquals((byte)107, byte0);
      
      segmentedByteString0.sha256();
      byte[] byteArray0 = new byte[12];
      boolean boolean1 = byteString2.endsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      segmentedByteString0.hashCode();
      segmentedByteString0.utf8();
      String string0 = byteString2.utf8;
      segmentedByteString0.base64Url();
      byteString2.rangeEquals(31, byteArray0, (-5980), (-923));
      String string1 = byteString2.hex();
      assertEquals(26, byteString2.size());
      assertEquals("6f6b696f2e5365676d656e74656442797465537472696e676f6b", string1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[7];
      byteString0.endsWith(byteArray0);
      ByteString.codePointIndexToCharIndex("okio.SegmentedByteString", 26);
      byteString0.sha1();
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.SegmentedByteString");
      mockPrintStream0.print((double) 24);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer3, 24);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null, 8192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      byteString0.write(buffer0);
      segmentedByteString0.startsWith(byteString0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = buffer0.snapshot();
      segmentedByteString0.hashCode();
      segmentedByteString0.indexOf(byteString2, 2);
      segmentedByteString0.hmacSha1(byteString2);
      segmentedByteString0.getByte(1);
      segmentedByteString0.sha256();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      byteString2.endsWith(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)107;
      segmentedByteString0.endsWith(byteArray1);
      // Undeclared exception!
      try { 
        byteString2.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.startsWith(byteString0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = buffer0.snapshot();
      segmentedByteString0.hashCode();
      segmentedByteString0.indexOf(byteString2, 2);
      segmentedByteString0.hmacSha1(byteString2);
      segmentedByteString0.getByte(1);
      segmentedByteString0.sha256();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      byteString2.endsWith(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)107;
      byteString2.rangeEquals(1, byteArray1, 0, (int) (byte)107);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1), (-1638));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.startsWith(byteString0);
      segmentedByteString0.hmacSha1(byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)112;
      segmentedByteString0.rangeEquals(0, byteArray0, 0, (int) (byte) (-109));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      segmentedByteString0.startsWith(byteArray0);
      segmentedByteString0.getByte(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("s.limit == s.pos");
      segmentedByteString0.write(mockPrintStream0);
      segmentedByteString0.base64Url();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(538);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.hmacSha256(byteString0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      buffer0.write(byteArray0, (int) (byte)1, 2);
      SegmentedByteString segmentedByteString1 = (SegmentedByteString)buffer0.snapshot();
      segmentedByteString0.hashCode();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      segmentedByteString0.hmacSha1(segmentedByteString1);
      segmentedByteString0.getByte(1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)107;
      segmentedByteString1.rangeEquals(1, byteArray2, 0, (int) (byte)107);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      segmentedByteString1.write(buffer0);
      segmentedByteString1.toAsciiUppercase();
      segmentedByteString1.endsWith((ByteString) segmentedByteString0);
      ByteString byteString2 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString1.substring(9, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeUtf8("okio.SegmentedByteString");
      buffer0.sha512();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      segmentedByteString0.hmacSha256(byteString0);
      SegmentedByteString segmentedByteString1 = (SegmentedByteString)buffer0.snapshot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString.codePointIndexToCharIndex("okio.SegmentedByteString", 2);
      segmentedByteString0.base64();
      segmentedByteString0.getByte(1);
      segmentedByteString0.toAsciiLowercase();
      ByteString.encodeUtf8("Cj$>{;m!upy_rk*)Ia");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      segmentedByteString1.write(buffer0);
      segmentedByteString1.toAsciiLowercase();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      segmentedByteString1.indexOf(byteArray0, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(2, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.write(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)88;
      byteString0.lastIndexOf(byteArray0, (int) (byte) (-13));
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.hmacSha256(byteString0);
      ByteString byteString2 = buffer0.snapshot();
      ByteString.decodeBase64("K.7&6Ps`^N");
      segmentedByteString0.hashCode();
      ByteString.encodeUtf8("okio.SegmentedByteString");
      segmentedByteString0.toAsciiUppercase();
      byteString2.endsWith((ByteString) segmentedByteString0);
      ByteString byteString3 = ByteString.EMPTY;
      ByteString.decodeBase64("K.7&6Ps`^N");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)98;
      segmentedByteString0.endsWith(byteArray1);
      byteString2.hashCode();
      // Undeclared exception!
      try { 
        byteString2.getByte(248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=26 offset=248 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiUppercase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.hmacSha256(byteString0);
      ByteString.decodeBase64("K.7&6Ps`^N");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      segmentedByteString0.hashCode();
      segmentedByteString0.getByte(1);
      segmentedByteString0.endsWith(byteString1);
      ByteString byteString2 = ByteString.EMPTY;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 20);
      segmentedByteString1.hashCode();
      segmentedByteString0.write(buffer1);
      segmentedByteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        segmentedByteString1.rangeEquals(7, (byte[]) null, 73, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      buffer0.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 11);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.startsWith(byteArray0);
      segmentedByteString0.startsWith((ByteString) segmentedByteString0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("X");
      mockPrintStream0.write(byteArray0, 11, 1377);
      Locale locale0 = Locale.ENGLISH;
      locale0.getExtensionKeys();
      locale0.getDisplayName();
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "maxBufferSize < 1: ", objectArray0);
      segmentedByteString0.write(printStream0);
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString0.utf8();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 11);
      ByteString.encodeUtf8("okio.Segmen");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byteString0.indexOf(byteArray0, 767);
      Buffer buffer2 = realBufferedSource0.buffer;
      segmentedByteString1.write(buffer0);
      segmentedByteString1.toAsciiUppercase();
      segmentedByteString1.endsWith(byteString0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString.decodeBase64("maxBufferSize < 1: ");
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer0, 24);
      segmentedByteString1.hashCode();
      segmentedByteString2.write(realBufferedSource0.buffer);
      segmentedByteString1.toAsciiLowercase();
      // Undeclared exception!
      try { 
        segmentedByteString1.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiUppercase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.hmacSha256(byteString0);
      ByteString byteString2 = buffer0.snapshot();
      ByteString.decodeBase64("K.7&6Ps`^N");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K.7&6Ps`^N");
      segmentedByteString0.hashCode();
      ByteString.encodeUtf8("okio.SegmentedByteString");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byteString2.hashCode = 2;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteString2.write(byteArrayOutputStream0);
      ByteString byteString3 = ByteString.EMPTY;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.write(buffer0);
      ByteString byteString1 = segmentedByteString0.toAsciiUppercase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString2 = ByteString.EMPTY;
      segmentedByteString0.hmacSha256(byteString0);
      SegmentedByteString segmentedByteString1 = (SegmentedByteString)buffer0.snapshot();
      ByteString.decodeBase64("K.7&6Ps`^N");
      segmentedByteString0.hashCode();
      ByteString.encodeUtf8("okio.SegmentedByteString");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      segmentedByteString1.hashCode = 2;
      segmentedByteString0.write(buffer1);
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString1.endsWith(byteString1);
      ByteString byteString3 = ByteString.EMPTY;
      ByteString.decodeBase64("K.7&6Ps`^N");
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer0, 1);
      segmentedByteString1.hashCode();
      segmentedByteString1.write(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        segmentedByteString1.getByte(248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=26 offset=248 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      buffer0.toString();
      int int0 = 11;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 11);
      ByteString byteString0 = segmentedByteString0.sha1();
      ByteString.encodeUtf8("[text=okio.SegmentedByteString]");
      segmentedByteString0.write(buffer1);
      segmentedByteString0.toAsciiUppercase();
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.hmacSha256(byteString0);
      buffer0.snapshot();
      ByteString.decodeBase64("h<c*X>OQ}5KK91");
      segmentedByteString0.hashCode();
      ByteString byteString2 = ByteString.EMPTY;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 11);
      // Undeclared exception!
      try { 
        segmentedByteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiUppercase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.hmacSha256(byteString0);
      ByteString byteString2 = buffer0.snapshot();
      ByteString.decodeBase64("K.7&6Ps`^N");
      segmentedByteString0.hashCode();
      segmentedByteString0.getByte(1);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toAsciiLowercase();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      segmentedByteString0.sha1();
      segmentedByteString0.hashCode();
      byteString2.getByte(1);
      byteString2.toAsciiLowercase();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteString2.toAsciiLowercase();
      byte byte0 = byteString2.getByte(1);
      assertEquals(26L, buffer0.completeSegmentByteCount());
      assertEquals((byte)107, byte0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.write(buffer0);
      ByteString byteString1 = segmentedByteString0.toAsciiUppercase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString2 = ByteString.EMPTY;
      segmentedByteString0.hmacSha256(byteString0);
      ByteString byteString3 = buffer0.snapshot();
      ByteString.decodeBase64("K.7&6Ps`^N");
      segmentedByteString0.hashCode();
      ByteString.encodeUtf8("okio.SegmentedByteString");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      segmentedByteString0.write(buffer1);
      segmentedByteString0.toAsciiUppercase();
      byteString3.endsWith(byteString1);
      ByteString byteString4 = ByteString.EMPTY;
      ByteString.decodeBase64("K.7&6Ps`^N");
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      byteString3.hashCode();
      // Undeclared exception!
      try { 
        byteString3.getByte(248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=26 offset=248 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiUppercase();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      segmentedByteString1.hashCode();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-40);
      segmentedByteString1.rangeEquals(4245, byteArray0, (int) (byte)0, 2);
      segmentedByteString1.internalArray();
      assertEquals(26L, buffer1.completeSegmentByteCount());
      assertEquals(26L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      buffer0.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 11);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.startsWith(byteArray0);
      segmentedByteString0.startsWith((ByteString) segmentedByteString0);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      segmentedByteString0.equals(byteString0);
      segmentedByteString0.hashCode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      segmentedByteString0.getByte(1);
      segmentedByteString0.lastIndexOf(byteArray0, 11);
      segmentedByteString0.write(buffer1);
      segmentedByteString0.hashCode();
      segmentedByteString0.rangeEquals(11, byteArray0, 1, 1922);
      String string0 = segmentedByteString0.base64Url();
      assertEquals(35L, buffer0.completeSegmentByteCount());
      assertEquals("b2tpby5TZWdtZW4=", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Rg^");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.md5();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)16;
      segmentedByteString0.base64();
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)97;
      segmentedByteString0.indexOf(byteArray0, 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(2, (-3216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString.encodeUtf8("K.7&6Ps`^N");
      ByteString.decodeBase64("K.7&6Ps`^N");
      byte[] byteArray0 = new byte[0];
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      int int0 = segmentedByteString0.lastIndexOf(byteArray0, 2655);
      assertEquals(1, segmentedByteString0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString.decodeBase64("K.7&6Ps`^N");
      segmentedByteString0.hashCode();
      segmentedByteString0.getByte(1);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(23, byteArray0, 2, (-2655));
      assertEquals(26L, buffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      segmentedByteString0.toString();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 2);
      segmentedByteString1.equals(segmentedByteString0);
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = 1707;
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=2 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.{7&6Ps`^N");
      byteString0.hmacSha512(segmentedByteString0);
      boolean boolean0 = segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      ByteString byteString1 = ByteString.EMPTY;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.SegmentedByteString");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(locale0, "okio.SegmentedByteString", objectArray0);
      segmentedByteString0.write(mockPrintStream0);
      ByteString byteString2 = ByteString.EMPTY;
      segmentedByteString0.utf8();
      String string0 = segmentedByteString0.utf8;
      segmentedByteString0.base64Url();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      boolean boolean1 = segmentedByteString0.rangeEquals(2, byteArray0, 31, (-80));
      assertEquals(2, segmentedByteString0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 2);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer0, 11);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-16);
      segmentedByteString2.startsWith(byteArray0);
      segmentedByteString2.rangeEquals(2, (ByteString) segmentedByteString0, 111, 7);
      segmentedByteString1.toAsciiLowercase();
      segmentedByteString2.toString();
      Object object0 = new Object();
      segmentedByteString1.equals(object0);
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        segmentedByteString2.getByte(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=11 offset=12 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 11);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      segmentedByteString0.substring(11, 11);
      segmentedByteString0.lastIndexOf(byteArray0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, (-961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=24 offset=0 byteCount=-961
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Rg^");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.readByte();
      int int0 = 2;
      buffer1.md5();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      ByteString byteString1 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((int) (byte)82, (int) (byte)82);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(2)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      int int0 = 11;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 11);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.startsWith(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      ByteString byteString0 = new ByteString(byteArray0);
      segmentedByteString0.equals(byteString0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.size();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 11);
      try { 
        buffer1.readUtf8LineStrict(3453L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=24 content=6f6b696f2e5365676d656e74656442797465537472696e67\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 11);
      byte[] byteArray0 = new byte[0];
      segmentedByteString0.startsWith(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString.encodeUtf8("QaT<ePz");
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.lastIndexOf(byteArray0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, (-961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=24 offset=0 byteCount=-961
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      buffer0.readByte();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.hmacSha512(segmentedByteString0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = ByteString.EMPTY;
      segmentedByteString0.hashCode();
      byte byte0 = segmentedByteString0.getByte(1);
      assertEquals(2, segmentedByteString0.size());
      assertEquals((byte)105, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 11);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.startsWith(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.endsWith(byteString0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = ByteString.EMPTY;
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=11 offset=11 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      byteString0.hmacSha512(segmentedByteString0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = ByteString.EMPTY;
      segmentedByteString0.hashCode();
      byte byte0 = segmentedByteString0.getByte(1);
      assertEquals((byte)107, byte0);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Rg^");
      buffer1.md5();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals("Rg", byteArrayOutputStream0.toString());
      
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.sha1();
      segmentedByteString0.sha1();
      segmentedByteString0.base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-96);
      boolean boolean0 = segmentedByteString0.rangeEquals(2, byteArray0, 117, (int) (byte) (-16));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.rangeEquals(2, byteString0, (-145), (-2020));
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">)i??nj m");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteString0;
      segmentedByteString0.equals(objectArray0[0]);
      ByteString byteString1 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = segmentedByteString0.toByteArray();
      byte[] byteArray1 = segmentedByteString0.internalArray();
      assertEquals(26L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)111, (byte)107}, byteArray1);
      
      int int0 = segmentedByteString0.lastIndexOf(byteArray0, 1571);
      assertEquals(26L, buffer0.completeSegmentByteCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 11);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      segmentedByteString0.startsWith(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Locale locale0 = Locale.GERMAN;
      segmentedByteString0.equals(byteString0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, (byte)86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=24 offset=0 byteCount=86
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.S-gmented<yteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString.decodeBase64("*d+zA");
      segmentedByteString0.rangeEquals(53, (ByteString) null, 2, 53);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.S-gmented<yteString");
      Locale locale0 = Locale.GERMAN;
      segmentedByteString0.equals("imI>*AX$~]'");
      segmentedByteString0.sha256();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.toByteArray();
      segmentedByteString0.internalArray();
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      byteString0.hmacSha512(segmentedByteString0);
      boolean boolean0 = segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      assertTrue(boolean0);
      
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = ByteString.EMPTY;
      segmentedByteString0.hashCode();
      byte byte0 = segmentedByteString0.getByte(1);
      assertEquals((byte)107, byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/25_okio");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.rangeEquals(2, (ByteString) segmentedByteString0, (-145), (-2020));
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">)i??nj m");
      buffer0.readByteString(0L);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) segmentedByteString0;
      segmentedByteString0.equals(objectArray0[0]);
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.toByteArray();
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertEquals(26L, buffer0.size());
      assertArrayEquals(new byte[] {(byte)111, (byte)107}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      byteString0.hmacSha512(segmentedByteString0);
      boolean boolean0 = segmentedByteString0.rangeEquals(2, byteString0, (-145), (-2020));
      assertTrue(boolean0);
      
      ByteString byteString1 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      segmentedByteString0.internalArray();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 6);
      segmentedByteString1.internalArray();
      byte[] byteArray0 = segmentedByteString0.toByteArray();
      assertArrayEquals(new byte[] {(byte)111, (byte)107}, byteArray0);
      
      segmentedByteString0.hmacSha1(byteString0);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = segmentedByteString0.hmacSha256(segmentedByteString0);
      segmentedByteString0.rangeEquals(2247, byteString0, (-32), (-32));
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer1);
      segmentedByteString0.toAsciiLowercase();
      String string0 = segmentedByteString0.toString();
      assertEquals(26L, buffer0.size());
      assertEquals("[text=ok]", string0);
      
      segmentedByteString0.hashCode();
      assertEquals(26L, buffer0.completeSegmentByteCount());
      assertEquals(2, segmentedByteString0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)23;
      segmentedByteString0.lastIndexOf(byteArray0, 830);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((byte)23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=23 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      buffer0.readByte();
      buffer1.md5();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      segmentedByteString1.equals((Object) null);
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      segmentedByteString0.toByteArray();
      segmentedByteString0.internalArray();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(74);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">)i??nj m");
      Locale locale0 = Locale.ENGLISH;
      locale0.getExtensionKeys();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ">)i??nj m";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "[text=ok]", objectArray0);
      segmentedByteString0.write(printStream0);
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString0.utf8();
      String string0 = segmentedByteString0.base64Url();
      assertEquals("b2s=", string0);
      
      segmentedByteString0.indexOf(byteArray0, 2);
      segmentedByteString0.rangeEquals(4155, byteString0, (-3673), 52);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      segmentedByteString0.rangeEquals(2, byteString0, (-145), (-2020));
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">)i??nj m");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteString0;
      objectArray0[1] = (Object) byteString0;
      objectArray0[2] = (Object) segmentedByteString0;
      objectArray0[3] = (Object) "K.7&6Ps`^N";
      PrintStream printStream0 = mockPrintStream0.format(locale0, ">)i??nj m", objectArray0);
      segmentedByteString0.write(printStream0);
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.utf8();
      segmentedByteString0.base64Url();
      byte[] byteArray0 = new byte[0];
      segmentedByteString0.indexOf(byteArray0, (-108));
      assertEquals(26L, buffer0.completeSegmentByteCount());
      assertEquals(26L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Rg^");
      buffer1.readByte();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      boolean boolean0 = segmentedByteString0.equals(buffer1);
      assertFalse(boolean0);
      
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray0 = segmentedByteString0.toByteArray();
      segmentedByteString0.rangeEquals(1282, byteArray0, 1684, (-26));
      assertArrayEquals(new byte[] {(byte)103, (byte)94}, byteArray0);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Q?<w{tOZE*=v)* g\">]");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      segmentedByteString0.asByteBuffer();
      int int0 = 51;
      segmentedByteString0.substring(1, 2);
      // Undeclared exception!
      try { 
        Charset.forName("Q?<w{tOZE*=v)* g\">]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Q?<w{tOZE*=v)* g\">]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "okio.SegmentedByteString";
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      segmentedByteString0.startsWith(byteArray0);
      int int0 = 1067;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.rangeEquals(407, byteArray0, 240, (int) (byte)86);
      SegmentedByteString segmentedByteString2 = null;
      try {
        segmentedByteString2 = new SegmentedByteString(buffer0, 240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=24 offset=0 byteCount=240
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      int int0 = 2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      ByteString.encodeUtf8("");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Rg^");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Rg^");
      buffer1.readByte();
      buffer1.md5();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      boolean boolean0 = segmentedByteString0.equals(buffer1);
      assertFalse(boolean0);
      
      ByteString byteString0 = ByteString.EMPTY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      segmentedByteString0.toByteArray();
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertEquals(2, segmentedByteString0.size());
      assertArrayEquals(new byte[] {(byte)103, (byte)94}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Rg^");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.hmacSha256(segmentedByteString0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream1);
      assertEquals(2, byteArrayOutputStream1.size());
      
      segmentedByteString0.toByteArray();
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertArrayEquals(new byte[] {(byte)82, (byte)103}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      byteString0.hmacSha512(segmentedByteString0);
      segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      ByteString byteString1 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        Charset.forName("okio.SegmentedByteString");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // okio.SegmentedByteString
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.toAsciiUppercase();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream1);
      assertEquals(2, byteArrayOutputStream1.size());
      
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.md5();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Rg^");
      ByteString byteString0 = ByteString.encodeUtf8("");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-97);
      segmentedByteString0.indexOf(byteArray0);
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1), (-827));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-1 byteCount=-827
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Rg^");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = segmentedByteString0.hmacSha256(segmentedByteString0);
      segmentedByteString0.rangeEquals(2247, byteString0, (-32), (-32));
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer1);
      segmentedByteString0.toAsciiLowercase();
      String string0 = segmentedByteString0.base64();
      assertEquals(5L, buffer0.completeSegmentByteCount());
      assertEquals("Umc=", string0);
      
      String string1 = segmentedByteString0.base64Url();
      assertEquals(5L, buffer0.size());
      assertEquals("Umc=", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.write(buffer0);
      buffer1.rangeEquals((-19L), (ByteString) segmentedByteString0, 2, 0);
      buffer1.readInt();
      buffer0.readUnsafe();
      segmentedByteString0.substring(0);
      segmentedByteString0.hex();
      segmentedByteString0.utf8();
      String string0 = segmentedByteString0.hex();
      assertEquals(22L, buffer1.size());
      assertEquals("6f6b", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "okio.SegmentedByteString";
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      int int0 = (-32);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      segmentedByteString0.startsWith(byteArray0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, 1067);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=24 offset=0 byteCount=1067
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.encodeUtf8("K.7&6Ps`^N");
      byteString0.hmacSha512(segmentedByteString0);
      segmentedByteString0.rangeEquals(2, byteString0, (-145), (-2020));
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.toString();
      segmentedByteString0.hashCode();
      assertFalse(buffer0.exhausted());
      assertEquals(26L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)1);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer1);
      segmentedByteString1.toAsciiLowercase();
      segmentedByteString0.substring(0);
      assertEquals(26L, buffer1.size());
      assertEquals(26L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "okio.SegmentedByteString";
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      buffer1.readUnsafe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)28;
      byte byte0 = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      segmentedByteString0.startsWith(byteArray0);
      int int0 = 108;
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((-4061));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-4061 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte) (-103);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString.of(byteBuffer0);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.sha256();
      assertEquals(26L, buffer0.size());
      assertEquals(26L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer1);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.substring(2);
      assertEquals(26L, buffer1.completeSegmentByteCount());
      assertEquals(26L, buffer0.size());
      
      int int0 = segmentedByteString0.size();
      assertEquals(26L, buffer1.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "okio.SegmentedByteString";
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)28;
      byte byte0 = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      segmentedByteString0.startsWith(byteArray0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer0, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=24 offset=0 byteCount=108
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      segmentedByteString0.write(buffer2);
      segmentedByteString0.toAsciiLowercase();
      assertEquals(26L, buffer1.size());
      assertEquals(26L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer1);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      ByteString byteString1 = segmentedByteString0.toAsciiUppercase();
      assertEquals(26L, buffer0.completeSegmentByteCount());
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      buffer0.writeUtf8("okiooSegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      Object object0 = new Object();
      boolean boolean0 = segmentedByteString0.equals(object0);
      assertEquals(26L, buffer0.completeSegmentByteCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream1);
      ByteString byteString0 = ByteString.EMPTY;
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=2 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.utf8();
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      String string0 = segmentedByteString0.utf8();
      assertEquals(26L, buffer0.size());
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      assertEquals(26L, buffer0.completeSegmentByteCount());
      assertEquals(26L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      segmentedByteString0.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((int) (byte)93, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.sha256();
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8(">)Yk(>Bi0?)i $DcQui");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(buffer0);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(0, byteString0, 0, (-2020));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      int int1 = 13;
      int int2 = (-1428);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-51);
      segmentedByteString0.rangeEquals((-1675), byteArray0, 57, 57);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int1 = 712;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)93;
      // Undeclared exception!
      try { 
        segmentedByteString0.startsWith(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.indexOf((byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals((int) (byte)1, (ByteString) null, 0, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "out == null");
      ByteString.encodeUtf8("out == null");
      // Undeclared exception!
      try { 
        segmentedByteString0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int1 = 712;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)61;
      byteArray0[1] = (byte) (-49);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, (int) (byte) (-49));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.indexOf((byte)1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString.encodeUtf8("out == null");
      // Undeclared exception!
      try { 
        segmentedByteString0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(2764L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(pipe_PipeSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray1, (int) (byte)24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(31, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/25_okio");
      String string0 = "okio.SegmentedByteString";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "okio.SegmentedByteString");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.DeflaterSink");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        segmentedByteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.size();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.DeflaterS>ink");
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(552);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-8);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, (int) (byte) (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      realBufferedSource1.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-49);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      segmentedByteString0.utf8 = "#^wv9e[p//= +b";
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(51, byteString0, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString0.rangeEquals((-1), byteString0, 98, (-1));
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.DeflaterSink");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      segmentedByteString0.write(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString1.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.DeflaterSink");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      byteStringArray0[2] = (ByteString) segmentedByteString0;
      byteStringArray0[3] = (ByteString) segmentedByteString0;
      byteStringArray0[4] = (ByteString) segmentedByteString0;
      byteStringArray0[5] = (ByteString) segmentedByteString0;
      byteStringArray0[6] = (ByteString) segmentedByteString0;
      byteStringArray0[7] = (ByteString) segmentedByteString0;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString0 = options0.get(0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.DeflaterSink");
      buffer_UnsafeCursor0.seek(0);
      segmentedByteString0.write(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      int int0 = 1504;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.rangeEquals((-1), (ByteString) null, (-1), (-1));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.readUtf8Line();
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(4761, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.readAll(buffer0);
      buffer1.indexOf((byte) (-1), (long) 0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      segmentedByteString0.hashCode();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-40);
      segmentedByteString0.rangeEquals((int) (byte) (-1), byteArray0, (-3036), (int) (byte)0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1), 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 0);
      // Undeclared exception!
      try { 
        segmentedByteString1.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArrayOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      segmentedByteString0.write(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      segmentedByteString0.write(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      int int0 = 0;
      byte byte0 = (byte) (-1);
      buffer1.indexOf((byte) (-1), (long) 0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      realBufferedSource1.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-49);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      segmentedByteString0.utf8 = "#^wv9e[p//= +b";
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(0, byteString0, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = null;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = 100;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArrayOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      segmentedByteString0.write(byteArrayOutputStream0);
      int int1 = 101;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 31;
      SegmentedByteString segmentedByteString0 = null;
      try {
        segmentedByteString0 = new SegmentedByteString((Buffer) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
