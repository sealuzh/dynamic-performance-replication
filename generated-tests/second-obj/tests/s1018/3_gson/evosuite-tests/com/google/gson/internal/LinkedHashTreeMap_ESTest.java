/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:43:07 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedHashTreeMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedHashTreeMap_ESTest extends LinkedHashTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Object>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedHashTreeMap0.entrySet();
      assertNotNull(set0);
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.iterator();
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.toArray((Object[]) linkedHashTreeMap_NodeArray0);
      linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap0);
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap0.put("key == null", "key == null");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>(comparator0);
      Integer integer0 = new Integer((-1176));
      linkedHashTreeMap0.put(integer0, "c(#Yf^)K~EZ\"dq2");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      int int0 = linkedHashTreeMap_EntrySet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      linkedHashTreeMap0.isEmpty();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal((LinkedHashTreeMap.Node<String, Integer>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>(comparator0);
      Object object0 = new Object();
      linkedHashTreeMap0.size();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(" is not Comparable", linkedHashTreeMap1);
      linkedHashTreeMap0.findByEntry(abstractMap_SimpleImmutableEntry0);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Integer>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node0, 14, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.next;
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      assertNotNull(linkedHashTreeMap_Node3);
      
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      Object object0 = linkedHashTreeMap_Node4.getKey();
      assertNull(object0);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node1);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = linkedHashTreeMap1.removeInternalByKey(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap1.size());
      assertNull(linkedHashTreeMap_Node2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.remove((Object) linkedHashTreeMap1);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove((Object) null);
      LinkedHashTreeMap.AvlIterator<Object, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap_AvlIterator0.next();
      assertNull(linkedHashTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      linkedHashTreeMap0.entrySet();
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      String string0 = "";
      linkedHashTreeMap0.containsValue("");
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", (-1420), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap2.findByObject(linkedHashTreeMap1);
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      LinkedHashTreeMap.AvlBuilder<Object, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, String>();
      linkedHashTreeMap_AvlIterator0.next();
      linkedHashTreeMap_AvlBuilder0.reset(2);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Integer, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      Integer integer0 = Integer.getInteger("", 14);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Integer>(linkedHashTreeMap_Node1, integer0, 14, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      assertNotSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node1);
      assertFalse(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node1));
      assertNotSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(904).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "key == null", 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap_Node1);
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet0.add("w.zMjc");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-848)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("key == null", true);
      linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node0.last();
      String string0 = null;
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.put((String) null, "key == null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(904).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      Object object0 = new Object();
      linkedHashTreeMap0.remove(object0);
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 4);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      linkedHashTreeMap0.put("NMf<}Y.", "");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>(comparator1);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)linkedHashTreeMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node0.setValue((Object) null);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_AvlBuilder0.root();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_AvlBuilder0.root();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node3, false);
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 3);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node1;
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      linkedHashTreeMap0.keySet();
      // Undeclared exception!
      linkedHashTreeMap0.remove((Object) linkedHashTreeMap_Node2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      boolean boolean0 = linkedHashTreeMap_KeySet0.contains("");
      assertFalse(boolean0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet1);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet1.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashTreeMap_KeySet0);
      assertNotNull(linkedList0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      assertEquals(1, linkedList0.size());
      
      try { 
        Integer.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      boolean boolean0 = linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap_AvlBuilder0);
      assertFalse(boolean0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet1);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet1.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashTreeMap_KeySet1);
      assertNotNull(linkedList0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet1.size());
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedHashTreeMap_KeySet1.removeAll(linkedList0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_KeySet1.size());
      assertEquals(1, linkedList0.size());
      
      try { 
        Integer.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(904, 1, 1).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node2);
      assertFalse(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("NMf<v|}Y.", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string1 = linkedHashTreeMap0.put("NMf<}Y.", "oZ:G\"a`0t7w");
      assertNull(string1);
      assertEquals(2, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node2;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      assertEquals((-1), linkedHashTreeMap0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals((-1), linkedHashTreeMap0.size());
      assertEquals((-1), linkedHashTreeMap_KeySet0.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet0.add((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      boolean boolean0 = linkedHashTreeMap_Node2.equals(linkedHashTreeMap0);
      assertFalse(boolean0);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1420), 7).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      boolean boolean0 = linkedHashTreeMap_Node0.equals("");
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = "";
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node0);
      assertNull(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap1.size());
      
      String string1 = linkedHashTreeMap0.put("", "");
      assertNull(string1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string2 = linkedHashTreeMap0.put("", (String) null);
      assertNull(string2);
      assertEquals(2, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(2, linkedHashTreeMap0.size());
      assertEquals(2, linkedHashTreeMap_KeySet0.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.set((-939), linkedHashTreeMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -939, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Integer, Object>> comparator2 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator1);
      assertNotNull(comparator2);
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0;
      Comparator<Map.Entry<String, Integer>> comparator3 = Map.Entry.comparingByKey();
      assertNotNull(comparator3);
      
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      String string0 = linkedHashTreeMap0.put("", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node2);
      
      String string1 = linkedHashTreeMap0.put("", "?V^j.A/]7<[%l");
      assertNull(string1);
      assertEquals(2, linkedHashTreeMap0.size());
      
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator4);
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node3 = linkedHashTreeMap1.removeInternalByKey("");
      assertNull(linkedHashTreeMap_Node3);
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node2);
      assertFalse(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      assertNotNull(comparator2);
      
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>(comparator3);
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap1.header;
      assertNotNull(linkedHashTreeMap_Node3);
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      assertNotNull(linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node4, linkedHashTreeMap_Node3);
      assertEquals(0, linkedHashTreeMap1.size());
      
      String string0 = linkedHashTreeMap0.put("", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Object, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node0, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_AvlIterator0.next();
      assertNotNull(linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.put((Object) null, " is not Comparable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Object, Object>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedHashTreeMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int int0 = Integer.remainderUnsigned((-3705), 957);
      assertEquals(226, int0);
      
      LinkedHashTreeMap.Node<Object, Object>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<Object, Object>[]) linkedHashTreeMap_NodeArray0);
      assertNotNull(linkedHashTreeMap_NodeArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0;
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      boolean boolean0 = linkedHashTreeMap0.containsKey("");
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, String>[]) linkedHashTreeMap_NodeArray0);
      assertNotNull(linkedHashTreeMap_NodeArray1);
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      boolean boolean1 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      assertNotNull(comparator2);
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      String string0 = linkedHashTreeMap0.put("", "2LUpr");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, String>[]) linkedHashTreeMap0.table);
      assertNotNull(linkedHashTreeMap_NodeArray0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.next;
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_AvlBuilder0.root();
      assertNotNull(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node3);
      
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, false);
      assertEquals((-1), linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Integer, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_AvlBuilder0.reset(12);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.putIfAbsent(linkedHashTreeMap_AvlBuilder0, linkedHashTreeMap_AvlBuilder0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$AvlBuilder is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      Integer integer0 = new Integer((-3280));
      assertEquals((-3280), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("key == null", true);
      assertNotNull(linkedHashTreeMap_Node0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node0.last();
      assertNotNull(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap_Node2.getKey();
      assertEquals("key == null", string0);
      assertNotNull(string0);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      Set<Object> set0 = linkedHashTreeMap1.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("*rxxd:f3R7qXk|b^", true);
      assertNotNull(linkedHashTreeMap_Node0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      Integer integer0 = linkedHashTreeMap0.remove((Object) linkedHashTreeMap_Node0);
      assertNull(integer0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 10);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(1, linkedHashTreeMap0.size());
      
      Iterator<Map.Entry<String, Integer>> iterator0 = (Iterator<Map.Entry<String, Integer>>)linkedHashTreeMap_EntrySet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      Stream<Map.Entry<String, Integer>> stream0 = (Stream<Map.Entry<String, Integer>>)linkedHashTreeMap_EntrySet0.parallelStream();
      assertNotNull(stream0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap1.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet1);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_KeySet1.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      String string0 = linkedHashTreeMap0.put("rQj[", "rQj[");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, String>[]) linkedHashTreeMap0.table);
      assertNotNull(linkedHashTreeMap_NodeArray1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      Stream<String> stream0 = linkedHashTreeMap_KeySet0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet0.add("}HB~N5sX{9");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>((Comparator<? super Object>) null);
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      Set<Object> set0 = linkedHashTreeMap1.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Object> set1 = linkedHashTreeMap1.keySet();
      assertNotNull(set1);
      assertSame(set1, set0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      Integer integer0 = new Integer(2212);
      assertEquals(2212, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.sum((-837), 2212);
      assertEquals(1375, int0);
      
      String string0 = linkedHashTreeMap0.put("", "#|\"MG.iLqzT{)9");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", 1, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.size = 1375;
      assertEquals(1375, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node2);
      assertFalse(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      
      String string1 = linkedHashTreeMap0.put("", "78");
      assertNull(string1);
      assertEquals(1376, linkedHashTreeMap0.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap1.removeInternalByKey("");
      assertNull(linkedHashTreeMap_Node3);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      assertNotNull(linkedHashTreeMap2);
      assertFalse(linkedHashTreeMap2.equals((Object)linkedHashTreeMap0));
      assertEquals(0, linkedHashTreeMap2.size());
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap3);
      assertFalse(linkedHashTreeMap3.equals((Object)linkedHashTreeMap0));
      assertTrue(linkedHashTreeMap3.equals((Object)linkedHashTreeMap2));
      assertEquals(0, linkedHashTreeMap3.size());
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap4 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap4);
      assertTrue(linkedHashTreeMap4.equals((Object)linkedHashTreeMap2));
      assertFalse(linkedHashTreeMap4.equals((Object)linkedHashTreeMap0));
      assertTrue(linkedHashTreeMap4.equals((Object)linkedHashTreeMap3));
      assertEquals(0, linkedHashTreeMap4.size());
      
      Integer integer1 = Integer.getInteger("m!)\"QW&FZFZjBgV9");
      assertNull(integer1);
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap3.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertFalse(linkedHashTreeMap3.equals((Object)linkedHashTreeMap0));
      assertTrue(linkedHashTreeMap3.equals((Object)linkedHashTreeMap2));
      assertTrue(linkedHashTreeMap3.equals((Object)linkedHashTreeMap4));
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      assertEquals(0, linkedHashTreeMap3.size());
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = new Integer(1376);
      assertEquals(1376, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertEquals(1376, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("78", integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer4));
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      boolean boolean0 = linkedHashTreeMap_KeySet0.remove(abstractMap_SimpleImmutableEntry1);
      assertFalse(boolean0);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertNotSame(linkedHashTreeMap3, linkedHashTreeMap0);
      assertNotSame(linkedHashTreeMap3, linkedHashTreeMap2);
      assertNotSame(linkedHashTreeMap3, linkedHashTreeMap4);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer4));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(linkedHashTreeMap3.equals((Object)linkedHashTreeMap0));
      assertTrue(linkedHashTreeMap3.equals((Object)linkedHashTreeMap2));
      assertTrue(linkedHashTreeMap3.equals((Object)linkedHashTreeMap4));
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      assertEquals(0, linkedHashTreeMap3.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node2);
      assertFalse(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.toString();
      assertEquals("{=null}", string0);
      assertNotNull(string0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, String>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      linkedHashTreeMap1.size = 2;
      assertEquals(2, linkedHashTreeMap1.size());
      
      String string1 = linkedHashTreeMap0.get("{=null}");
      assertNull(string1);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.AvlBuilder<Integer, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, String>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.add((LinkedHashTreeMap.Node<Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Integer integer0 = new Integer(3084);
      assertEquals(3084, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("D2oD(9A> +bQwf|", integer0);
      assertEquals(3084, (int)integer1);
      assertNotNull(integer1);
      
      int int0 = Integer.sum(2476, (-2527));
      assertEquals((-51), int0);
      
      Object object0 = linkedHashTreeMap_Node0.setValue(integer1);
      assertNull(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      
      boolean boolean0 = linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node0);
      assertTrue(boolean0);
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node0);
      assertNull(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Integer integer0 = new Integer(3084);
      assertEquals(3084, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("D2oD(9A> +bQwf|", integer0);
      assertEquals(3084, (int)integer1);
      assertNotNull(integer1);
      
      int int0 = Integer.sum(2476, 12);
      assertEquals(2488, int0);
      
      Object object0 = linkedHashTreeMap_Node0.setValue(integer1);
      assertNull(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(3084);
      assertEquals(3084, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = Integer.getInteger("D2oD(9A> +bQwf|", integer2);
      assertEquals(3084, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      boolean boolean0 = linkedHashTreeMap_Node0.equals(linkedHashTreeMap_Node1);
      assertFalse(boolean0);
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node0);
      assertNull(linkedHashTreeMap_Node2);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, String>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      String string0 = linkedHashTreeMap1.put(integer1, "D2oD(9A> +bQwf|");
      assertNull(string0);
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertEquals(1, linkedHashTreeMap1.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>(comparator0);
      assertNotNull(linkedHashTreeMap2);
      assertEquals(0, linkedHashTreeMap2.size());
      
      Integer integer4 = Integer.valueOf((-2527));
      assertEquals((-2527), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap2.removeInternalByKey(integer4);
      assertNull(linkedHashTreeMap_Node3);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertEquals(0, linkedHashTreeMap2.size());
      
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Integer>();
      assertNotNull(linkedHashTreeMap3);
      assertEquals(0, linkedHashTreeMap3.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap3.removeInternal((LinkedHashTreeMap.Node<Object, Integer>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Integer integer0 = new Integer(20);
      assertEquals(20, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Object object0 = linkedHashTreeMap0.put("", abstractMap_SimpleImmutableEntry0);
      assertNull(object0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      boolean boolean0 = linkedHashTreeMap0.containsKey(linkedHashTreeMap1);
      assertFalse(boolean0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = linkedHashTreeMap0.removeInternalByKey("");
      assertNull(linkedHashTreeMap_Node0);
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      linkedHashTreeMap0.putAll(hashMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      boolean boolean0 = linkedHashTreeMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<Integer, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 6);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, String>();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node0.last();
      assertNotNull(linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node4, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node4, linkedHashTreeMap_Node3);
      
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node0.last();
      assertNotNull(linkedHashTreeMap_Node5);
      assertSame(linkedHashTreeMap_Node5, linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node5, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node5, linkedHashTreeMap_Node4);
      
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node3.last();
      assertNotNull(linkedHashTreeMap_Node6);
      assertSame(linkedHashTreeMap_Node6, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node6, linkedHashTreeMap_Node5);
      assertSame(linkedHashTreeMap_Node6, linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node6, linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node5);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node6);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node1);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node4);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node6);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node5);
      
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node6;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      int int0 = linkedHashTreeMap_KeySet0.size();
      assertEquals(0, int0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet1);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_KeySet1.size());
      
      boolean boolean1 = linkedHashTreeMap_KeySet1.remove(linkedHashTreeMap_KeySet0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), linkedHashTreeMap0.size());
      assertEquals((-1), linkedHashTreeMap_KeySet0.size());
      assertEquals((-1), linkedHashTreeMap_KeySet1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_AvlBuilder0.root();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Integer>> comparator1 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      // Undeclared exception!
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_AvlBuilder0.root();
      assertNotNull(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 7);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      assertNotNull(linkedHashTreeMap_Node0);
      
      boolean boolean0 = linkedHashTreeMap0.containsValue(linkedHashTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_Node0, "", 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node1);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      String string0 = "";
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      
      boolean boolean1 = linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node0);
      assertNull(linkedHashTreeMap_Node2);
      assertEquals(0, linkedHashTreeMap0.size());
      assertEquals(0, linkedHashTreeMap1.size());
      
      String string1 = linkedHashTreeMap0.put("a_wqh0)Wlr5rV+?o", "");
      assertNull(string1);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string2 = linkedHashTreeMap0.put("FsS", "");
      assertNull(string2);
      assertEquals(2, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        linkedList0.set((-1), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 5);
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Integer>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap0.find("*rxxd:f3R7qXk|b^", true);
      assertNotNull(linkedHashTreeMap_Node2);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      assertNotNull(linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node3);
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node2);
      assertEquals(1, linkedHashTreeMap0.size());
      
      Integer integer0 = new Integer((-554));
      assertEquals((-554), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("*rxxd:f3R7qXk|b^", integer0);
      assertEquals((-554), (int)integer1);
      assertNotNull(integer1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node4);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>(linkedHashTreeMap_Node4, "*rxxd:f3R7qXk|b^", (-554), linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      assertNotNull(linkedHashTreeMap_Node5);
      
      boolean boolean0 = linkedHashTreeMap_Node5.equals(linkedHashTreeMap_Node4);
      assertFalse(boolean0);
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node5);
      assertNull(linkedHashTreeMap_Node6);
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, String>();
      assertNotNull(linkedHashTreeMap2);
      assertEquals(0, linkedHashTreeMap2.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>(comparator0);
      assertNotNull(linkedHashTreeMap3);
      assertEquals(0, linkedHashTreeMap3.size());
      
      Integer integer2 = Integer.valueOf((-554));
      assertEquals((-554), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node7 = linkedHashTreeMap3.removeInternalByKey(object0);
      assertNull(linkedHashTreeMap_Node7);
      assertEquals(0, linkedHashTreeMap3.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap.AvlIterator<Object, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, String>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      Integer integer3 = new Integer((-2158));
      assertEquals((-2158), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = Integer.getInteger("*rxxd:f3R7qXk|b^", (-554));
      assertEquals((-554), (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet0.add(integer3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      linkedHashTreeMap_Node0.value = "]#K}cP6{qsJ1a";
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Integer, Integer>> comparator2 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator1);
      assertNotNull(comparator2);
      
      boolean boolean0 = linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      assertFalse(boolean0);
      
      linkedHashTreeMap_Node1.prev = linkedHashTreeMap_Node0;
      linkedHashTreeMap_Node0.next = linkedHashTreeMap_Node1;
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<Object, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, String>(linkedHashTreeMap_Node0, (Object) null, (-1429), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      assertNotNull(linkedHashTreeMap_Node2);
      
      LinkedHashTreeMap.AvlIterator<String, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Integer>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      assertNotNull(linkedHashTreeMap_AvlIterator1);
      
      LinkedHashTreeMap.AvlIterator<String, Object> linkedHashTreeMap_AvlIterator2 = new LinkedHashTreeMap.AvlIterator<String, Object>();
      assertNotNull(linkedHashTreeMap_AvlIterator2);
      
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_AvlIterator2.next();
      assertNull(linkedHashTreeMap_Node3);
      
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)linkedHashTreeMap0.entrySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet1);
      assertTrue(linkedHashTreeMap_KeySet1.equals((Object)linkedHashTreeMap_KeySet0));
      assertEquals(0, linkedHashTreeMap_KeySet1.size());
      assertEquals(0, linkedHashTreeMap0.size());
      
      Stream<String> stream0 = linkedHashTreeMap_KeySet0.parallelStream();
      assertNotNull(stream0);
      assertNotSame(linkedHashTreeMap_KeySet0, linkedHashTreeMap_KeySet1);
      assertTrue(linkedHashTreeMap_KeySet0.equals((Object)linkedHashTreeMap_KeySet1));
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      assertEquals(0, linkedHashTreeMap0.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add("]#K}cP6{qsJ1a");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("*rxxd:f3R7qXk|b^", true);
      assertNotNull(linkedHashTreeMap_Node0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      Integer integer0 = linkedHashTreeMap0.remove((Object) linkedHashTreeMap_Node0);
      assertNull(integer0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 4);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(1, linkedHashTreeMap0.size());
      
      Iterator<Map.Entry<String, Integer>> iterator0 = (Iterator<Map.Entry<String, Integer>>)linkedHashTreeMap_EntrySet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      Stream<Map.Entry<String, Integer>> stream0 = (Stream<Map.Entry<String, Integer>>)linkedHashTreeMap_EntrySet0.parallelStream();
      assertNotNull(stream0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      Integer integer1 = new Integer(168);
      assertEquals(168, (int)integer1);
      assertNotNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("*rxxd:f3R7qXk|b^", integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap2);
      assertEquals(0, linkedHashTreeMap2.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      boolean boolean1 = linkedHashTreeMap_KeySet0.removeAll(linkedHashTreeMap_EntrySet0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      Stream<String> stream1 = linkedHashTreeMap_KeySet0.parallelStream();
      assertNotNull(stream1);
      assertEquals(0, linkedHashTreeMap1.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      Comparator<Object> comparator0 = null;
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap1.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet1);
      assertTrue(linkedHashTreeMap_KeySet1.equals((Object)linkedHashTreeMap_KeySet0));
      assertEquals(0, linkedHashTreeMap_KeySet1.size());
      assertEquals(0, linkedHashTreeMap1.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = "*r\\xxd:f3R7qXk|b^";
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = linkedHashTreeMap0.find("*rxxd:f3R7qXk|b^", true);
      assertNotNull(linkedHashTreeMap_Node0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      Integer integer0 = linkedHashTreeMap0.remove((Object) linkedHashTreeMap_Node0);
      assertNull(integer0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap.Node<String, Integer>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, Integer>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 4);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node0;
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node0;
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = linkedHashTreeMap0.put("*rxxd:f3R7qXk|b^", integer1);
      assertNull(integer2);
      assertEquals(2, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node0;
      Iterator<Map.Entry<String, Integer>> iterator0 = (Iterator<Map.Entry<String, Integer>>)linkedHashTreeMap_EntrySet0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, linkedHashTreeMap0.size());
      assertEquals(2, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("*rxxd:f3R7qXk|b^", integer3);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer3.equals((Object)integer1));
      
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(2, linkedHashTreeMap0.size());
      assertEquals(2, linkedHashTreeMap_EntrySet0.size());
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap2);
      assertEquals(0, linkedHashTreeMap2.size());
      
      linkedHashTreeMap0.clear();
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string1 = linkedHashTreeMap2.toString();
      assertEquals("{}", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, linkedHashTreeMap2.size());
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, Object>();
      assertNotNull(linkedHashTreeMap3);
      assertEquals(0, linkedHashTreeMap3.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap3.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet1);
      assertEquals(0, linkedHashTreeMap3.size());
      assertEquals(0, linkedHashTreeMap_EntrySet1.size());
      
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      assertNotNull(linkedHashTreeMap4);
      assertTrue(linkedHashTreeMap4.equals((Object)linkedHashTreeMap3));
      assertEquals(0, linkedHashTreeMap4.size());
      
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("*rxxd:f3R7qXk|b^").when(biFunction0).apply(anyInt() , any());
      Object object0 = linkedHashTreeMap4.compute((Integer) null, biFunction0);
      assertNull(object0);
      assertNotSame(linkedHashTreeMap4, linkedHashTreeMap3);
      assertTrue(linkedHashTreeMap4.equals((Object)linkedHashTreeMap3));
      assertEquals(0, linkedHashTreeMap4.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      assertEquals(0, linkedHashTreeMap1.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet0.add("*rxxd:f3R7qXk|b^");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node0));
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      assertNotSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node0.equals((Object)linkedHashTreeMap_Node2));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      assertNotNull(linkedHashTreeMap_Node3);
      assertNotSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0);
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node0));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_AvlBuilder0.root();
      assertNotNull(linkedHashTreeMap_Node4);
      assertNotSame(linkedHashTreeMap_Node4, linkedHashTreeMap_Node3);
      assertTrue(linkedHashTreeMap_Node4.equals((Object)linkedHashTreeMap_Node3));
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node5);
      assertTrue(linkedHashTreeMap_Node5.equals((Object)linkedHashTreeMap_Node1));
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      assertNotSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node0.equals((Object)linkedHashTreeMap_Node2));
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      linkedHashTreeMap_AvlBuilder0.reset(1525);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      assertNotSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node3);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.AvlIterator<String, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, String>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
      assertNotSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node1.equals((Object)linkedHashTreeMap_Node2));
      assertEquals((-1), linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>((Comparator<? super Integer>) null);
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      Integer integer0 = new Integer(1525);
      assertEquals(1525, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(",GU#7", integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>((Comparator<? super Object>) null);
      assertNotNull(linkedHashTreeMap2);
      assertEquals(0, linkedHashTreeMap2.size());
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap3 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      assertNotNull(linkedHashTreeMap3);
      assertEquals(0, linkedHashTreeMap3.size());
      
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap4 = new LinkedHashTreeMap<String, Integer>((Comparator<? super String>) null);
      assertNotNull(linkedHashTreeMap4);
      assertEquals(0, linkedHashTreeMap4.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap3.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(0, linkedHashTreeMap3.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      Iterator<Integer> iterator0 = linkedHashTreeMap_KeySet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedHashTreeMap3.size());
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, Object>((Comparator<? super Object>) null);
      assertNotNull(linkedHashTreeMap5);
      assertFalse(linkedHashTreeMap5.equals((Object)linkedHashTreeMap0));
      assertEquals(0, linkedHashTreeMap5.size());
      
      linkedHashTreeMap5.removeInternal(linkedHashTreeMap_Node2, true);
      assertNotSame(linkedHashTreeMap5, linkedHashTreeMap0);
      assertNotSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      assertTrue(linkedHashTreeMap5.equals((Object)linkedHashTreeMap0));
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node1));
      assertEquals((-1), linkedHashTreeMap5.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertEquals(0, linkedHashTreeMap1.size());
      
      int int0 = linkedHashTreeMap_EntrySet0.size();
      assertEquals(0, int0);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap6 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      assertNotNull(linkedHashTreeMap6);
      assertEquals(0, linkedHashTreeMap6.size());
      
      Set<Integer> set0 = linkedHashTreeMap6.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap6.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_AvlBuilder0.root();
      assertNotNull(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      assertSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node3);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node4);
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      String string0 = linkedHashTreeMap0.put("", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string1 = linkedHashTreeMap0.put("", "");
      assertNull(string1);
      assertEquals(2, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(2, linkedHashTreeMap0.size());
      assertEquals(2, linkedHashTreeMap_EntrySet0.size());
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      assertEquals(2, linkedHashTreeMap0.size());
      assertEquals(2, linkedHashTreeMap_EntrySet0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap1);
      assertFalse(linkedHashTreeMap1.equals((Object)linkedHashTreeMap0));
      assertEquals(0, linkedHashTreeMap1.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>(comparator1);
      assertNotNull(linkedHashTreeMap2);
      assertFalse(linkedHashTreeMap2.equals((Object)linkedHashTreeMap0));
      assertTrue(linkedHashTreeMap2.equals((Object)linkedHashTreeMap1));
      assertEquals(0, linkedHashTreeMap2.size());
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string2 = linkedHashTreeMap0.merge("", "V", biFunction0);
      assertNull(string2);
      assertNotSame(linkedHashTreeMap0, linkedHashTreeMap2);
      assertNotSame(linkedHashTreeMap0, linkedHashTreeMap1);
      assertFalse(linkedHashTreeMap0.equals((Object)linkedHashTreeMap2));
      assertFalse(linkedHashTreeMap0.equals((Object)linkedHashTreeMap1));
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertFalse(linkedHashTreeMap0.equals((Object)linkedHashTreeMap2));
      assertFalse(linkedHashTreeMap0.equals((Object)linkedHashTreeMap1));
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      assertEquals(1, linkedHashTreeMap0.size());
      
      Iterator<Object> iterator0 = linkedHashTreeMap_KeySet0.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedHashTreeMap0, linkedHashTreeMap2);
      assertNotSame(linkedHashTreeMap0, linkedHashTreeMap1);
      assertFalse(linkedHashTreeMap0.equals((Object)linkedHashTreeMap2));
      assertFalse(linkedHashTreeMap0.equals((Object)linkedHashTreeMap1));
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1420), 30).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node2;
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node0;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, String>(linkedHashTreeMap_NodeArray0[0], "9", 0, linkedHashTreeMap_NodeArray0[0], linkedHashTreeMap_Node2);
      assertNotNull(linkedHashTreeMap_Node3);
      assertFalse(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node1));
      
      LinkedHashTreeMap.Node<String, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, String>();
      assertNotNull(linkedHashTreeMap_Node4);
      assertFalse(linkedHashTreeMap_Node4.equals((Object)linkedHashTreeMap_Node3));
      assertTrue(linkedHashTreeMap_Node4.equals((Object)linkedHashTreeMap_Node1));
      
      String string0 = linkedHashTreeMap0.put("NMf<v|}Y.", "NMf<v|}Y.");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap0.size());
      
      String string1 = linkedHashTreeMap0.put("", "+");
      assertNull(string1);
      assertEquals(2, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node0));
      
      linkedHashTreeMap_Node1.next = linkedHashTreeMap_Node2;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      assertNotSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node0.equals((Object)linkedHashTreeMap_Node2));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node3);
      assertTrue(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node0));
      assertTrue(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node2));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_AvlBuilder0.root();
      assertNotNull(linkedHashTreeMap_Node4);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node5);
      assertTrue(linkedHashTreeMap_Node5.equals((Object)linkedHashTreeMap_Node1));
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      assertNotSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertNotSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node3);
      assertTrue(linkedHashTreeMap_Node0.equals((Object)linkedHashTreeMap_Node3));
      assertTrue(linkedHashTreeMap_Node0.equals((Object)linkedHashTreeMap_Node2));
      
      linkedHashTreeMap_Node1.height = (-4422);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , any());
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node2;
      Object object0 = linkedHashTreeMap0.compute(linkedHashTreeMap_Node4, biFunction0);
      assertNull(object0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.size = (-4422);
      assertEquals((-4422), linkedHashTreeMap0.size());
      
      // Undeclared exception!
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_AvlBuilder0.reset(2826);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node2);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Integer>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap0.find("", true);
      assertNotNull(linkedHashTreeMap_Node3);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      assertNotNull(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap1.size());
      
      String string0 = linkedHashTreeMap1.put("", "");
      assertNull(string0);
      assertEquals(1, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet0);
      assertEquals(1, linkedHashTreeMap1.size());
      assertEquals(1, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Integer>(linkedHashTreeMap_Node3, "", 297, linkedHashTreeMap_Node3, linkedHashTreeMap_Node3);
      assertNotNull(linkedHashTreeMap_Node4);
      assertEquals(1, linkedHashTreeMap0.size());
      
      linkedHashTreeMap_Node4.prev = linkedHashTreeMap_Node3;
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      assertNotNull(linkedHashTreeMap_KeySet1);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(1, linkedHashTreeMap_KeySet1.size());
      
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>(comparator0);
      assertNotNull(linkedHashTreeMap2);
      assertFalse(linkedHashTreeMap2.equals((Object)linkedHashTreeMap1));
      assertEquals(0, linkedHashTreeMap2.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>(comparator1);
      assertNotNull(linkedHashTreeMap3);
      assertEquals(0, linkedHashTreeMap3.size());
      
      linkedHashTreeMap3.removeInternal(linkedHashTreeMap_Node0, false);
      assertEquals((-1), linkedHashTreeMap3.size());
      
      LinkedHashTreeMap.AvlIterator<Object, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Integer>();
      assertNotNull(linkedHashTreeMap_AvlIterator0);
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Integer, String>(comparator2);
      assertNotNull(linkedHashTreeMap4);
      assertEquals(0, linkedHashTreeMap4.size());
      
      Set<Integer> set0 = linkedHashTreeMap4.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap4.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertNotNull(linkedHashTreeMap_EntrySet0);
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      assertEquals(1, linkedHashTreeMap0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node4);
      assertFalse(boolean0);
      assertEquals(1, linkedHashTreeMap_EntrySet0.size());
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<Object, Object> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, Object>();
      assertNotNull(linkedHashTreeMap_AvlBuilder0);
      
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node0);
      
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node1);
      
      linkedHashTreeMap_AvlBuilder0.reset(297);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node0));
      
      linkedHashTreeMap_Node1.next = linkedHashTreeMap_Node2;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node2);
      assertNotSame(linkedHashTreeMap_Node2, linkedHashTreeMap_Node0);
      assertTrue(linkedHashTreeMap_Node2.equals((Object)linkedHashTreeMap_Node0));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>();
      assertNotNull(linkedHashTreeMap_Node3);
      assertTrue(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node2));
      assertTrue(linkedHashTreeMap_Node3.equals((Object)linkedHashTreeMap_Node0));
      
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_AvlBuilder0.root();
      assertNotNull(linkedHashTreeMap_Node4);
      
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      assertNotSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node3);
      assertNotSame(linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      assertTrue(linkedHashTreeMap_Node0.equals((Object)linkedHashTreeMap_Node3));
      assertTrue(linkedHashTreeMap_Node0.equals((Object)linkedHashTreeMap_Node2));
      
      linkedHashTreeMap_Node1.height = (-4422);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      assertNotNull(linkedHashTreeMap0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
      assertEquals((-1), linkedHashTreeMap0.size());
  }
}
