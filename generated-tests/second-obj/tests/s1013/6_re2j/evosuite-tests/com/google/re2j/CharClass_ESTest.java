/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:29:18 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass1, charClass2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 3725;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendFoldedRange(3725, 3725);
      assertArrayEquals(new int[] {0, 0, 3725, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2477);
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendRange((-2477), (-2477));
      assertArrayEquals(new int[] {0, (-2477)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 602);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass1.cleanClass();
      assertArrayEquals(new int[] {1, 1114111, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(1697, 1697);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.toString();
      charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      charClass0.appendNegatedClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral((-19848), (-19848));
      int[][] intArray0 = new int[0][3];
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass1, charClass2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][0];
      charClass0.appendTableWithSign(intArray0, 1114111);
      CharClass charClass1 = charClass0.appendLiteral(1114111, 1114111);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = 91;
      int[][] intArray1 = new int[9][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 2674);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-2477);
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-666);
      intArray0[0] = 3391;
      charClass0.appendNegatedClass(intArray0);
      charClass0.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(128541, 128541);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(1190, 1190);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(128541, 128541);
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[5];
      intArray1[0] = 128541;
      intArray1[1] = 128541;
      intArray1[2] = 128541;
      intArray1[3] = 128541;
      intArray1[4] = 128541;
      intArray0[0] = intArray1;
      charClass0.appendTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 3725;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-401));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 468;
      intArray0[1] = 1949;
      intArray0[2] = (-619);
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      charClass0.appendTableWithSign(intArray1, (-619));
      charClass0.appendNegatedClass(intArray1[0]);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      charClass1.toString();
      int[] intArray0 = charClass0.toArray();
      charClass0.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 1114111);
      charClass1.appendTableWithSign(intArray0, (-780));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendFoldedRange((-2), 65);
      charClass0.toArray();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 92;
      intArray0[1] = (-2085);
      intArray0[2] = 1;
      intArray0[3] = (-1704);
      int[][] intArray1 = new int[5][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      charClass0.appendTableWithSign(intArray1, (-1704));
      charClass0.toArray();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral((-4203), (-4203));
      int[] intArray0 = new int[3];
      intArray0[0] = (-4203);
      intArray0[1] = (-4203);
      intArray0[2] = (-4203);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, (-4203));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 3725;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.toString();
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      int int0 = 1;
      intArray0[2] = 1;
      int[][] intArray1 = new int[5][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-1704));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 3725;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      charClass0.negateClass();
      charClass1.appendTableWithSign(intArray1, 3725);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(65, 0);
      CharClass charClass1 = charClass0.negateClass();
      charClass1.cleanClass();
      charClass1.appendLiteral(233, 233);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-2), 66639);
      charClass1.negateClass();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(2137, 2228260);
      int[] intArray0 = new int[9];
      intArray0[0] = 2137;
      intArray0[1] = 2228260;
      intArray0[2] = 2137;
      intArray0[4] = 2137;
      intArray0[5] = 2228260;
      intArray0[6] = 2228260;
      intArray0[7] = 2228260;
      intArray0[8] = 17;
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 1114112;
      intArray0[2] = 1114112;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(1114112, 1114112);
      charClass0.toString();
      int[][] intArray1 = new int[0][4];
      charClass1.appendTable(intArray1);
      int[][] intArray2 = new int[1][1];
      intArray2[0] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray2);
      charClass2.negateClass();
  }
}
