/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:14:48 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearDeadline();
      asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.clearDeadline();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      AsyncTimeout.head = asyncTimeout0;
      Sink sink0 = null;
      asyncTimeout0.sink((Sink) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(1780L, timeUnit0);
      asyncTimeout0.timedOut();
      asyncTimeout0.throwIfReached();
      asyncTimeout1.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.sink((Sink) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(1780L, timeUnit0);
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException("omio.AsyncTimeout");
      mockIOException0.getStackTrace();
      mockIOException0.getMessage();
      MockIOException mockIOException1 = (MockIOException)asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout1.enter();
      asyncTimeout0.throwIfReached();
      // Undeclared exception!
      try { 
        asyncTimeout1.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      asyncTimeout0.deadlineNanoTime(346L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RHp0+;wt.i;");
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      asyncTimeout0.source(realBufferedSource0);
      asyncTimeout0.exit();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      long long0 = (-1467L);
      asyncTimeout0.deadlineNanoTime((-1467L));
      asyncTimeout0.exit(false);
      asyncTimeout0.timedOut();
      asyncTimeout0.exit();
      AsyncTimeout.head.timedOut();
      AsyncTimeout.head.timedOut();
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      AsyncTimeout.head.enter();
      AsyncTimeout.head.newTimeoutException((IOException) null);
      asyncTimeout0.exit((IOException) null);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1467L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1467
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.sink((Sink) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(1780L, timeUnit0);
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException("omio.AsyncTimeout");
      mockIOException0.getStackTrace();
      mockIOException0.getMessage();
      MockIOException mockIOException1 = (MockIOException)asyncTimeout0.exit((IOException) mockIOException0);
      MockIOException mockIOException2 = new MockIOException();
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout1.throwIfReached();
      asyncTimeout0.enter();
      mockIOException0.getLocalizedMessage();
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
