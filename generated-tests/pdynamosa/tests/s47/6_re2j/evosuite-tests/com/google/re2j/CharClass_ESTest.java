/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:42:09 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-952);
      CharClass charClass0 = new CharClass(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray1.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 8);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      // Undeclared exception!
      try { 
        charClass2.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 4031;
      intArray0[0] = 4031;
      int int1 = 1242;
      intArray0[1] = 1242;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 4031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 309;
      intArray0[1] = 309;
      intArray0[2] = 693;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-803), (-1643));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass5 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass6 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      int[][] intArray2 = new int[5][9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      CharClass charClass7 = charClass2.appendNegatedTable(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass8 = charClass7.appendClassWithSign(intArray0, 327);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass9 = charClass7.appendClassWithSign(intArray0, 327);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass10 = charClass5.appendTableWithSign(intArray2, (-1643));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass11 = charClass10.appendRange((-803), (-2935));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass0);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass4);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass11);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass12 = charClass7.appendClass(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass0);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass12);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass13 = charClass12.appendNegatedTable(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass13);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass9);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass13);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass0);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass10);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass13);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass14 = charClass0.appendTable(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass13);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass14);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass15 = charClass0.cleanClass();
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass10);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass15);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
      
      CharClass charClass16 = charClass1.appendTableWithSign(intArray2, 4);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass15);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass16);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass16, charClass7);
      assertSame(charClass16, charClass0);
      assertSame(charClass16, charClass13);
      assertSame(charClass16, charClass9);
      assertSame(charClass16, charClass12);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass6);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass8);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass10);
      assertSame(charClass16, charClass1);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass16);
      assertArrayEquals(new int[] {309, 309, 693, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-934);
      intArray0[1] = 2881;
      intArray0[2] = 3774;
      intArray0[3] = 950;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-934), 2881, 3774, 950}, intArray0);
      
      int[][] intArray1 = new int[9][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2881;
      intArray2[1] = 2881;
      intArray2[2] = 2881;
      intArray2[3] = 1812;
      intArray2[4] = (-934);
      intArray2[5] = 3774;
      intArray2[6] = 3774;
      intArray1[7] = intArray2;
      intArray1[8] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-934), 2881, 3774, 950}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-934), 2881, 3774, 950}, intArray0);
      
      CharClass charClass4 = charClass3.appendLiteral(41, 950);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-934), 2881, 3774, 950}, intArray0);
      
      CharClass charClass5 = charClass4.negateClass();
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-934), 2881, 3774, 950}, intArray0);
      
      CharClass charClass6 = charClass5.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-934), 2881, 3774, 950}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, (-535));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10792;
      intArray0[1] = 0;
      intArray0[2] = 10792;
      intArray0[3] = 10792;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {10792, 0, 10792, 10792, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendFoldedRange(10792, 980);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, (-417));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {10792, 0, 10792, 10792, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass3.appendFoldedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {10792, 0, 10792, 10792, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 309;
      intArray0[1] = 327;
      intArray0[2] = 693;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {309, 327, 693, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-803), (-1643));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {309, 327, 693, 0}, intArray0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {309, 327, 693, 0}, intArray0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {309, 327, 693, 0}, intArray0);
      
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {309, 327, 693, 0}, intArray0);
      
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {309, 327, 693, 0}, intArray0);
      
      CharClass charClass6 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {309, 327, 693, 0}, intArray0);
      
      CharClass charClass7 = charClass1.appendTableWithSign(intArray1, 309);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {309, 327, 693, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-953);
      CharClass charClass0 = new CharClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(8, 0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(8, (-953));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass1.negateClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, 1575);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 862;
      intArray0[0] = 862;
      intArray0[1] = (-2);
      int int1 = 157;
      intArray0[2] = 157;
      intArray0[3] = 2148;
      intArray0[4] = 6067;
      int int2 = (-104);
      intArray0[5] = (-104);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {862, (-2), 157, 2148, 6067, (-104)}, intArray0);
      
      int[][] intArray1 = new int[1][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {862, (-2), 0, 1114111, 6067, (-104)}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {862, (-2), 0, 1114111, 6067, (-104)}, intArray0);
      
      // Undeclared exception!
      charClass2.appendFoldedRange(0, 862);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = (-2628);
      int int1 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange((-2628), 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[1][1];
      String string0 = charClass3.toString();
      assertEquals("[0x1-0x10ffff]", string0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      intArray1[0] = intArray0;
      int int2 = 671;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 671);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 9700;
      int int0 = (-446);
      intArray0[1] = (-446);
      CharGroup charGroup0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3806);
      intArray0[1] = 120488;
      intArray0[2] = 4802;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-3806), 120488, 4802}, intArray0);
      
      int[][] intArray1 = new int[3][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-3806), 120488, 4802}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      intArray0[0] = (-5438);
      intArray0[1] = 2146;
      intArray0[2] = 1556;
      intArray0[3] = 77;
      intArray0[4] = 971;
      String string0 = CharClass.charClassToString(intArray0, (-5438));
      assertEquals("[]", string0);
      assertEquals(5, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-5438), 2146, 1556, 77, 971}, intArray0);
      
      int[][] intArray1 = new int[0][5];
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1559);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2430;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1559), 0, 0, 0, 2430, 0}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1559), 0, 0, 0, 2430, 0}, intArray0);
      assertArrayEquals(new int[] {(-1559), 0, 0, 0, 2430, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-250);
      intArray0[1] = 0;
      intArray0[2] = (-2533);
      intArray0[3] = 8993;
      intArray0[4] = 0;
      intArray0[5] = 65594;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-250), 0, (-2533), 8993, 0, 65594}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-250);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 18;
      intArray0[1] = 6963;
      intArray0[2] = (-590);
      intArray0[3] = 66720;
      intArray0[4] = 0;
      intArray0[5] = 1615;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-869));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral((-869), (-869));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[7][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[1][7];
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      charClass1.appendFoldedRange((-2913), 2213);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      int[] intArray1 = new int[8];
      intArray1[0] = 93;
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      intArray1[1] = 66640;
      int int0 = 1278;
      CharClass charClass4 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 66640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-952);
      CharClass charClass0 = new CharClass(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray1.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      CharClass charClass1 = charClass0.appendLiteral(2612, 8);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      CharClass charClass3 = charClass2.appendLiteral((-952), (-952));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      CharClass charClass4 = charClass2.negateClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-952)}, intArray1);
      
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray1, (-952));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[8];
      int int0 = 10792;
      intArray1[0] = 10792;
      intArray1[1] = 0;
      intArray1[2] = 1197;
      intArray1[3] = 0;
      intArray1[4] = 629;
      intArray1[5] = 66640;
      intArray1[6] = 1133;
      int int1 = (-610);
      intArray1[7] = (-610);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-610);
      intArray2[1] = 0;
      intArray2[2] = 10792;
      intArray2[3] = 66640;
      intArray2[4] = 1197;
      intArray2[5] = 0;
      intArray2[6] = 1133;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-869));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral((-869), (-869));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[7][4];
      intArray1[0] = intArray0;
      int int0 = 104;
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 104);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass4.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 468;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 468);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][3];
      int[] intArray1 = new int[6];
      intArray1[0] = 196606;
      intArray1[1] = 65;
      intArray1[2] = (-461);
      intArray1[3] = (-3239);
      intArray1[4] = (-177);
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1407);
      intArray2[1] = (-3239);
      intArray2[2] = 65;
      intArray2[3] = 65;
      intArray2[4] = (-461);
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int int0 = 2799;
      intArray0[0] = 2799;
      int int1 = 91;
      intArray0[1] = 91;
      int int2 = (-803);
      intArray0[2] = (-803);
      intArray0[3] = 4744;
      CharClass charClass1 = charClass0.appendLiteral(93, 4744);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      intArray0[4] = 2070;
      int int3 = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-170);
      intArray0[1] = (-640);
      intArray0[2] = (-1421);
      intArray0[3] = (-494);
      intArray0[4] = (-387);
      intArray0[5] = 0;
      intArray0[6] = 210;
      intArray0[7] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-170), (-640), (-1421), (-494), (-387), 0, 210, 93}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1449, 227);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-170), (-640), (-1421), (-494), (-387), 0, 210, 93}, intArray0);
      
      String string0 = charClass1.toString();
      assertEquals("[0xffffff56-0xfffffd80 0xfffffa73-0xfffffe12 0xfffffe7d-0x0 0xd2-0x5d]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-170), (-640), (-1421), (-494), (-387), 0, 210, 93}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-577);
      intArray0[1] = 1114111;
      intArray0[2] = 66639;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-502);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 7620;
      intArray0[5] = (-952);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-502), 0, 0, 7620, (-952)}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, (-952));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-502), 0, 0, 7620, (-952)}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 7620, (-952), 7620, (-952)}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1, 7619, (-951), 1114111, 7620, (-952)}, intArray0);
      
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-502);
      intArray2[1] = 0;
      intArray2[2] = 7620;
      intArray2[3] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      charClass3.appendTableWithSign(intArray1, (-951));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = 0;
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(386, 2733);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendRange(386, 2);
      int[] intArray0 = new int[1];
      intArray0[0] = 386;
      // Undeclared exception!
      try { 
        charClass3.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(685, 685);
      charClass0.appendLiteral(0, (-3561));
      CharClass.charClassToString((int[]) null, (-431));
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 2147;
      intArray0[1] = 76;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 967;
      intArray0[5] = 4;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass2.appendLiteral(967, 2551);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 2551);
      int[][] intArray2 = new int[7][5];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      int[] intArray3 = new int[0];
      intArray2[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = 76;
      intArray4[1] = 76;
      intArray4[2] = 4;
      intArray4[3] = (-1655);
      intArray2[3] = intArray4;
      intArray2[4] = intArray0;
      int[] intArray5 = new int[2];
      intArray5[0] = 76;
      intArray5[1] = 4;
      intArray2[5] = intArray5;
      intArray2[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass4.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-502);
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[5][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[1] = 66640;
      CharClass charClass1 = charClass0.appendFoldedRange(66640, 66640);
      charClass1.toArray();
      int[] intArray1 = new int[4];
      intArray1[3] = 66640;
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange((-3269), (-3269));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = (-2546);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-2546));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[9][9];
      int[] intArray1 = new int[5];
      intArray1[0] = (-1090);
      intArray1[1] = (-1704);
      intArray1[2] = (-1100);
      intArray1[3] = 1660;
      intArray1[4] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = (-1090);
      intArray2[1] = 1660;
      intArray2[2] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = (-1100);
      intArray4[1] = (-1704);
      intArray4[2] = 1660;
      intArray4[3] = 0;
      intArray4[4] = 1660;
      intArray4[5] = (-1704);
      intArray4[6] = 1660;
      intArray4[7] = 1660;
      intArray4[8] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = (-1704);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = (-1100);
      intArray6[1] = (-1090);
      intArray6[2] = (-1090);
      intArray6[3] = 0;
      intArray6[4] = (-1090);
      intArray6[5] = 1660;
      intArray6[6] = (-1704);
      intArray6[7] = (-1100);
      intArray6[8] = (-1704);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      intArray7[0] = 0;
      intArray7[1] = 0;
      intArray7[2] = (-1100);
      intArray7[3] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      intArray8[0] = (-1642);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[9];
      intArray9[0] = 0;
      intArray9[1] = 0;
      intArray9[2] = 0;
      intArray9[3] = 0;
      intArray9[4] = 0;
      intArray9[5] = 1660;
      intArray9[6] = (-1704);
      intArray9[7] = 0;
      intArray9[8] = (-1100);
      intArray0[8] = intArray9;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 181;
      intArray0[3] = 2722;
      intArray0[4] = 0;
      intArray0[5] = 1835;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass0.appendRange(1835, 167);
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      charClass0.appendClassWithSign(intArray0, 167);
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      CharClass.charClassToString(intArray2, 0);
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {1, 180, 1836, 1114111, 1835, 167}, intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int int0 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[9][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-507);
      intArray0[1] = 465;
      intArray0[2] = 64;
      intArray0[3] = 823;
      intArray0[4] = 0;
      intArray0[5] = (-1040);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendLiteral(0, 823);
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 0);
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      CharClass charClass5 = charClass4.appendTableWithSign(intArray1, 66);
      charClass1.appendNegatedClass(intArray0);
      charClass5.appendFoldedRange((-1290), (-507));
      // Undeclared exception!
      charClass5.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      charClass0.negateClass();
      int int0 = (-2078);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-2078));
      charClass1.appendFoldedClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(65, 65);
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(685, 685);
      CharClass charClass2 = charClass1.appendRange(0, 0);
      charClass2.appendLiteral(423, (-3561));
      CharClass.charClassToString((int[]) null, (-431));
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-869));
      charClass1.negateClass();
      int[] intArray1 = charClass0.toArray();
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 64;
      intArray0[1] = 1843;
      intArray0[2] = (-3115);
      intArray0[3] = 322;
      intArray0[4] = 324;
      intArray0[5] = (-2180);
      intArray0[6] = 324;
      intArray0[7] = 32;
      intArray0[8] = 1114112;
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 1114112;
      intArray1[1] = 322;
      intArray1[2] = 322;
      intArray1[3] = 64;
      intArray1[4] = 64;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 309;
      intArray0[1] = 327;
      intArray0[2] = 693;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange((-803), (-1643));
      CharClass charClass2 = charClass0.negateClass();
      charClass0.negateClass();
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass2.negateClass();
      charClass0.appendFoldedClass(intArray0);
      int[][] intArray2 = new int[5][9];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      CharClass charClass4 = charClass2.appendNegatedTable(intArray2);
      charClass4.appendClassWithSign(intArray0, 327);
      charClass4.appendClassWithSign(intArray0, 327);
      CharClass charClass5 = charClass3.appendTableWithSign(intArray2, (-1643));
      charClass5.appendRange((-803), (-2935));
      CharClass charClass6 = charClass4.appendClass(intArray0);
      CharClass charClass7 = charClass6.appendNegatedTable(intArray2);
      charClass0.appendTable(intArray2);
      charClass0.cleanClass();
      CharClass charClass8 = charClass1.appendTableWithSign(intArray2, 4);
      assertSame(charClass8, charClass7);
  }
}
