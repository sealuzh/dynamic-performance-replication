/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:11:07 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.StringCodec;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringCodec_ESTest extends StringCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringCodec stringCodec0 = StringCodec.instance;
      Class<String> class0 = String.class;
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        stringCodec0.deserialze((DefaultJSONParser) null, (Type) null, (Object) mockMinguoDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      stringCodec0.write(jSONSerializer0, "");
      assertEquals(0, jSONSerializer0.getIndentCount());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringCodec stringCodec0 = new StringCodec();
      int int0 = stringCodec0.getFastMatchToken();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      JSONSerializer jSONSerializer0 = null;
      // Undeclared exception!
      try { 
        stringCodec0.write((JSONSerializer) null, (Object) null, (Object) stringCodec0, (Type) null, 345);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      StringCodec stringCodec0 = StringCodec.instance;
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeWriter) null);
      StringCodec.instance = stringCodec0;
      // Undeclared exception!
      try { 
        stringCodec0.write(jSONSerializer0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      StringCodec stringCodec0 = StringCodec.instance;
      Class<StringBuilder> class0 = StringBuilder.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ChronoLocalDate chronoLocalDate0 = stringCodec0.deserialze(defaultJSONParser0, (Type) class0, object0);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      StringCodec stringCodec0 = new StringCodec();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<StringBuffer> class0 = StringBuffer.class;
      ChronoLocalDate chronoLocalDate0 = stringCodec0.deserialze(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("8D}4fc.Mqi", parserConfig0);
      StringCodec stringCodec0 = StringCodec.instance;
      StringBuffer stringBuffer0 = new StringBuffer("~o Cqew?Iz7");
      JSONSerializer.write((Writer) jSONSerializer0.out, (Object) stringBuffer0);
      StringCodec stringCodec1 = StringCodec.instance;
      Class<StringBuilder> class0 = StringBuilder.class;
      ChronoField chronoField0 = ChronoField.AMPM_OF_DAY;
      jSONSerializer0.toString();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", hashMap0);
      hashMap0.put("fastjson.parser.autoTypeAccept", (Field) null);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("XKr1E<D7yaaVPx");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DefaultJSONParser defaultJSONParser3 = new DefaultJSONParser("\"java.lang.StringBuffer@0000000010\"", parserConfig0, 22);
      stringCodec1.deserialze(defaultJSONParser3, (Type) class0, (Object) hashMap0);
      ChronoField chronoField1 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      boolean boolean0 = jSONSerializer0.out.notWriteDefaultValue;
      ChronoField chronoField2 = ChronoField.MONTH_OF_YEAR;
      int int0 = stringCodec1.getFastMatchToken();
      assertEquals(4, int0);
      
      stringCodec0.write(jSONSerializer0, "fastjson.parser.deny");
      assertEquals(4, stringCodec0.getFastMatchToken());
  }
}
