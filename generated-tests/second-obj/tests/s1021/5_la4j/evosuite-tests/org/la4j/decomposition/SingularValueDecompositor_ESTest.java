/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:47:00 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      SparseMatrix.diagonal(2, 1.0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2, 3166);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3166, 2);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix1 = DenseMatrix.randomSymmetric(2, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix1);
      singularValueDecompositor0.decompose();
      Random.setNextRandom(4);
      Random.setNextRandom(2);
      Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparseMatrix.diagonal(14, 14);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2, 3, 3);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("r=-/AGD:V(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3.700086920958765E-24;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 3.700086920958765E-24;
      doubleArray2[1] = 3.700086920958765E-24;
      doubleArray2[2] = 447.98306713488034;
      doubleArray2[3] = 447.98306713488034;
      doubleArray2[5] = 1.0;
      doubleArray2[5] = 447.98306713488034;
      doubleArray2[6] = 6.027426130149766E-16;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double double0 = 411.98825271541193;
      SparseMatrix.diagonal(1, 411.98825271541193);
      int int0 = 3;
      DenseMatrix.zero(3, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 3, 1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        DenseMatrix.unit((-2528405), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, (-1.0));
      columnMajorSparseMatrix0.spliterator();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      singularValueDecompositor0.decompose();
      MockRandom mockRandom0 = new MockRandom(4);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric(4, (-1362.318778), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -21797.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 4.880456631598902E-23;
      doubleArray1[2] = (-22.63240285064251);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 100.0;
      doubleArray1[5] = (-22.63240285064251);
      doubleArray1[6] = 0.0;
      doubleArray0[1] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-4.73936974119864);
      doubleArray1[2] = (-22.63240285064251);
      doubleArray1[3] = 448.6764218949;
      doubleArray1[4] = 100.0;
      doubleArray1[5] = (-975.42912465815);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-4.73936974119864);
      doubleArray0[1] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 3.700086920958765E-24;
      doubleArray0[2] = 1.0;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      Random.setNextRandom((-332));
      Random.setNextRandom((-332));
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertNotSame(matrixArray1, matrixArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 100.0;
      doubleArray1[6] = 3.700086920958765E-24;
      doubleArray1[2] = (-4.73936974119864);
      doubleArray1[3] = 6.027426130149766E-16;
      doubleArray1[4] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 448.6764218949;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-4.73936974119864);
      doubleArray2[3] = 448.6764218949;
      doubleArray2[4] = 100.0;
      doubleArray2[5] = (-975.42912465815);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-4.73936974119864);
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor0.decompose();
      assertEquals(0.5714285714285714, sparseMatrix0.density(), 0.01);
      assertEquals(8, sparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 3.700086920958765E-24;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 6.027426130149766E-16;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 448.6764218949;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 448.6764218949;
      doubleArray2[4] = 100.0;
      doubleArray2[5] = (-975.42912465815);
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor0.decompose();
      assertEquals(0.7142857142857143, sparseMatrix0.density(), 0.01);
      assertEquals(10, sparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 3.700086920958765E-24;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 6.027426130149766E-16;
      int int0 = 528;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(528, 9, 9);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(528, 3);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix1 = DenseMatrix.randomSymmetric(3, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix1);
      singularValueDecompositor0.decompose();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 3.700086920958765E-24;
      doubleArray1[2] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 448.6764218949;
      doubleArray2[4] = 100.0;
      doubleArray2[5] = (-975.42912465815);
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom((-345));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 3.700086920958765E-24;
      doubleArray1[2] = 1.0;
      doubleArray1[2] = 6.027426130149766E-16;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 448.6764218949;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray1[1] = 448.6764218949;
      doubleArray2[4] = 100.0;
      doubleArray2[5] = (-973.5547479378556);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix1 = SparseMatrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix1);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor1.matrix = (Matrix) sparseMatrix0;
      singularValueDecompositor0.decompose();
      boolean boolean0 = singularValueDecompositor1.applicableTo(sparseMatrix0);
      assertTrue(boolean0);
  }
}
