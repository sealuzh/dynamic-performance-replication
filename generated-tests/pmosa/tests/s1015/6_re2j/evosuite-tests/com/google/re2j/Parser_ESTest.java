/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:01:17 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("(?(?P<", 1944);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      try { 
        Parser.parse("*+", 2608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Parser.parse("R]_7", 8630);
      Parser.parse("R]_7", 18);
      Regexp regexp0 = Parser.parse("invalid or unsupported Perl syntax", 18);
      Parser parser0 = new Parser("R]_7", 18);
      Parser.parse("aM}/c@", 8630);
      Parser.parse("invalid or unsupported Perl syntax", 1458);
      Regexp regexp1 = Parser.parse("<a{?", 0);
      Regexp regexp2 = Parser.parse("", 8630);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1114), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "?P<mN(?P<";
      int int0 = 116;
      try { 
        Parser.parse("?P<mN(?P<", 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":^", (-4019));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "{2}c";
      try { 
        Parser.parse("{2}c", (-2936));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `{2}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pp", 1412);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".", (-615));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Parser.parse("5(?P<(?<", 857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "M(";
      try { 
        Parser.parse("M(", 2625);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `M(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        Parser.parse("(P", (-4415));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 0;
      Parser.subarray(regexpArray0, 0, 0);
      String string0 = "G:32$";
      Parser parser0 = new Parser("G:32$", 0);
      Parser.parse("tqg", 0);
      Parser.parse("8y1l.#DV 6l4", 0);
      String string1 = "JZB*";
      Parser.parse("JZB*", 0);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Parser.parse("Z(?P<{?<", 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<{?<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("BzqWcrDq", 12);
      regexpArray0[0] = regexp0;
      String string0 = "\\p";
      int int0 = 0;
      Regexp regexp1 = Parser.parse("p", 0);
      regexpArray0[1] = regexp1;
      String string1 = "";
      int int1 = (-4262);
      Regexp regexp2 = Parser.parse(string1, int1);
      regexpArray0[2] = regexp2;
      int int2 = 0;
      Regexp regexp3 = Parser.parse(string1, int2);
      regexpArray0[3] = regexp3;
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("[", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", (-1432));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "(?";
      int int0 = 3190;
      Parser parser0 = new Parser("(?", 3190);
      int int1 = 937;
      Parser.parse("invalid character class range", 937);
      String string1 = "X2@g&j~R&cWfA4$";
      Parser.parse("X2@g&j~R&cWfA4$", 3190);
      int int2 = 0;
      try { 
        Parser.parse("(?", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Parser.parse("(?P<", (-4415));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^", (-1412));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("RARKPcy^Hvr%.DkkuOe", 0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("RARKPcy^Hvr%.DkkuOe", (-1130));
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[4] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp7;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp8 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp8;
      Regexp regexp9 = new Regexp(regexp6);
      regexpArray0[7] = regexp9;
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      Regexp regexp10 = new Regexp(regexp_Op2);
      regexpArray0[8] = regexp10;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1130), (-1385));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 4921;
      Parser parser0 = new Parser("tFrV/#N4A,q5-q", 4921);
      Parser.parse("DPvqU@;zEi4GaE", 2425);
      Parser.subarray((Regexp[]) null, 4921, 4921);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 0, 143);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p", (-4032));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Parser.parse("?", (-4415));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Parser parser0 = new Parser("}%GV1}Y9?5\"", 0);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("}%GV1}Y9?5\"", 0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("wW;&/RHAmu:%;krnEB*", 124);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      regexp2.subs = regexpArray0;
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      regexp1.flags = 124;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 124, (-248));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-2037);
      Parser parser0 = new Parser("A):OvWo/kK", (-2037));
      Regexp regexp0 = Parser.parse("stack underflow", (-2037));
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      int int1 = 53;
      try { 
        Parser.parse("A):OvWo/kK", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Parser.parse(")b}NF@>gY }", 2608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      Parser parser0 = new Parser("invalid character class", 0);
      Parser.parse("invalid character class", 0);
      Regexp regexp0 = Parser.parse("wRl3g8zS?o&#", 109);
      Parser.parse("invalid character class", 0);
      Regexp regexp1 = Parser.parse("", 0);
      String string0 = "Fy`H&*WBqGl\\XLlXN";
      Regexp regexp2 = Parser.parse("Fy`H&*WBqGlXLlXN", 0);
      String string1 = "";
      int int1 = 7079;
      Parser.parse(string1, int1);
      regexp1.equals(string0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp2;
      regexp2.name = string1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      int int2 = 1699;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 2425;
      try { 
        Parser.parse("[ilP{/5K8wDOa%X3", 2425);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[ilP{/5K8wDOa%X3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        Parser.parse("[", 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Parser.parse("[:-*/IOJB", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser.parse("Eg`{+cx!", (-1511));
      Parser parser0 = new Parser("Eg`{+cx!", (-1511));
      Regexp regexp0 = Parser.parse("Eg`{+cx!", (-1511));
      Parser.parse("Eg`{+cx!", (-1511));
      Regexp regexp1 = Parser.parse("Eg`{+cx!", (-1511));
      Parser.parse("Eg`{+cx!", (-1511));
      Regexp regexp2 = Parser.parse("Eg`{+cx!", (-1511));
      Regexp regexp3 = Parser.parse("Eg`{+cx!", (-1511));
      Parser.parse("Eg`{+cx!", 3);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-267), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        Parser.parse("(", 1941);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "(";
      try { 
        Parser.parse("(", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 5, 5);
      Parser parser0 = new Parser("P{", 5);
      Parser.parse("P{", (-668));
      String string0 = ":";
      Parser.parse(":", 7392);
      Parser.parse("X0%{/4q", 5);
      int int0 = 1594;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1594, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        Parser.parse("(?<", (-4415));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        Parser.parse(",dkbygJP:kY*[", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "2H(hF~G08";
      try { 
        Parser.parse("2H(hF~G08", 1432);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `2H(hF~G08`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Parser.parse("[", 1933);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-1432);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[1] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp4;
      Regexp regexp5 = Parser.parse("PXLlXN", (-1432));
      regexpArray0[3] = regexp5;
      int int1 = (-753);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = new Parser("EEm", 80);
      try { 
        Parser.parse(">A( \"1[", 66512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("b8|~9", 1925);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("b8|~9", 1925);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 1925, 1925);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d|mf", 52);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp regexp0 = Parser.parse(",|", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("W", 68);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 3;
      Regexp regexp0 = Parser.parse("regexp/syntax: internal error", 3);
      regexp0.max = 3;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("[:^alpha:]", (-2052));
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      int int1 = 8054;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8054, (-2112));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0004", (-1095));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^\u0004iy295", 2608);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0004iy5", 293);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0002*/OB", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 12;
      Regexp regexp0 = Parser.parse("b8|~9", 12);
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("b8|~9", (-1445));
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 12, 3449);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:a:]", 8);
      Regexp regexp1 = Parser.parse("[:a:]", 8);
      Parser parser0 = new Parser("[:a:]", 8);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8, 8608);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 1473);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse("G|W", 52);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser.parse("tFrV/# 4AUq5-q", 632);
      Parser parser0 = new Parser("|", 632);
      Regexp regexp0 = Parser.parse("|", 632);
      Regexp regexp1 = Parser.parse("tFrV/# 4AUq5-q", 632);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("b", 0);
      Regexp regexp1 = Parser.parse("[::]", 0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", (-523));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|8yFm:05'", 29);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "|";
      Parser parser0 = new Parser("C", (-4415));
      Regexp regexp0 = Parser.parse("PvqU@;zEi4GaE", (-4415));
      int int0 = 11688;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p:H--", (-2851));
      String string0 = "c5.-";
      int int0 = 1350;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "\\6C";
      Parser.parse("\u0006C", (-1432));
      String string1 = null;
      int int0 = 1337;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("i|OZ=5U7Wf]=}5L'_", 12784);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1712;
      Parser.parse("S", 1712);
      Parser parser0 = new Parser("S", 1712);
      Parser.parse("U%|", 1712);
      int int1 = 46;
      Parser.parse("Inscriptional_Parthian", 46);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 1712, 1712);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1712, (-3432));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-440);
      Parser parser0 = new Parser("'u*\"mx:!{3%~r", (-440));
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("'u*\"mx:!{3%~r", (-440));
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("'u*\"mx:!{3%~r", 221);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("'u*\"mx:!{3%~r", 221);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse("'u*\"mx:!{3%~r", (-1));
      regexpArray0[7] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-440), 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PC", 12272);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pS", (-1075));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|\"*6Y", (-2076));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser.parse("qL^{~2:JQV|", 5);
      Parser parser0 = new Parser("T><@qu`B", 5);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      String string0 = "$[&YmRu${m7e &H--";
      int int0 = 81;
      try { 
        Parser.parse("$[&YmRu${m7e &H--", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `H--`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "V>YUz4J\\7/!4";
      Parser.parse("V>YUz4J\u0007/!4", 72);
      int int0 = (-1334);
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Kiid]Z93uh", 80);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|5", (-455));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 5;
      Parser parser0 = new Parser("vNs8|h", 5);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      int int1 = (-1510);
      Regexp regexp1 = Parser.parse("`.'=hO*K1xh?h:", (-1510));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("vNs8|h", 36);
      regexpArray0[3] = regexp3;
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-596));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ol|']|3Qq", 900);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\n", (-5019));
      Regexp regexp1 = Parser.parse("\n", 124);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", (-927));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(McFq!xt2)<", 65);
      Parser parser0 = new Parser("[:+", 6770);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 112, 6770);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Parser.parse("]C", (-1412));
      Regexp regexp0 = Parser.parse("Cyrillic", (-1412));
      Parser parser0 = new Parser("fdt#_Z2fFW!I!D", (-1412));
      Regexp regexp1 = Parser.parse("\t", (-1412));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("T+$&{4dy;qu\u0004", 12784);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 1209);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("`~$-}6dxt}", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 112;
      Parser parser0 = new Parser("*.$H-\"ifsHcB`1@", 112);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = "A \\-@ke&$/tq?7<*m";
      int int1 = 101;
      Regexp regexp1 = Parser.parse("A -@ke&$/tq?7<*m", 101);
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.op = regexp_Op0;
      regexpArray0[1] = regexp2;
      regexp2.toString();
      Regexp regexp3 = Parser.parse("(?i:A -@KE&)$(?i:/T)(?i:Q)??(?i:x7f7)(?i:<)*?(?i:M)", 112);
      regexp2.equals(regexp3);
      int int2 = 887;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 101, 887);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Parser.parse("(?:", 737);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x0-x{10vFFFF}]", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 112;
      Parser parser0 = new Parser("*.$H-\"ifsHcB`1@", 112);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = "A \\-@ke&$/tq?7<*m";
      int int1 = 101;
      Regexp regexp1 = Parser.parse("A -@ke&$/tq?7<*m", 101);
      regexp1.op = regexp_Op0;
      regexpArray0[1] = regexp0;
      regexp0.toString();
      Regexp regexp2 = Parser.parse("(?s:.)", 112);
      regexp0.equals(regexp2);
      int int2 = 887;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 101, 887);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", (-1152));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser.parse("P\rn", 96);
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 54;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 54, 3889);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "[^\\00-\\Q010QFF]";
      int int0 = (-2812);
      Parser.parse("[^\u0000-Q010QFF]", (-2812));
      Parser parser0 = new Parser(string0, int0);
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("]BZ&", (-1525));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("(?-s:.)", (-3256));
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp2);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse("g<K}R<+[", (-1525));
      regexpArray0[7] = regexp7;
      Regexp regexp8 = Parser.parse("Pv", (-1525));
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-3256), 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Parser.parse("(?-n$)", 1788);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-n`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Parser.parse("(?-:$", 1788);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("R#LHz/", 584);
      regexp0.cap = 584;
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("!PA -B=]I1upN", 124);
      regexpArray0[2] = regexp2;
      regexp0.subs = regexpArray0;
      int int0 = 8612;
      regexp2.min = 8612;
      try { 
        Parser.parse("[t%6-~", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[t%6-~`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Parser.parse("@.U^st>;0?xQ=Apk2", (-2220));
      Parser parser0 = new Parser("@.U^st>;0?xQ=Apk2", 94);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("u-o_P0WN%5ZN'MHy!.h", 2090);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Parser.subarray(regexpArray0, 2552, 2552);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2220), 2552);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("G|W", (-971));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-b\u0002WVf", 1320);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_LINE;
      Regexp regexp3 = new Regexp(regexp_Op2);
      Regexp regexp4 = new Regexp(regexp_Op0);
      Regexp regexp5 = new Regexp(regexp4);
      Parser.parse("3", 712);
      try { 
        Parser.parse("k2b`F[^!,", 119180);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^!,`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", (-543));
      Regexp regexp1 = Parser.parse("(?-m:$)", 1395);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P,cMCZlx]\u0000>`!MR", 4425);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P\r", 76);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "5U[$w}h-";
      Parser parser0 = new Parser("5U[$w}h-", 3130);
      Regexp[] regexpArray0 = new Regexp[8];
      try { 
        Parser.parse("5U[$w}h-", (-595));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[$w}h-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\b", 65);
      String string0 = "=%l6@n'Z";
      Regexp regexp1 = Parser.parse("=%l6@n'Z", 65);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp1;
      int int0 = 8061;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8061, (-3126));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\rzhf:vj", 732);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse(";&I;IMJzjND/8T/\"y", (-1947));
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1252), (-1252));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "[:\\x00-\\x{1JFFFF}]";
      int int0 = (-175);
      Parser.parse("[:x00-x{1JFFFF}]", (-175));
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{1J`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser parser0 = new Parser("[^x00-x{10FFFF}]", 1760);
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 41);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Extender", 2639);
      Parser parser0 = new Parser("|&y_9gCdr", (-611));
      Parser.parse("|&y_9gCdr", (-2472));
      Parser.parse("NlgK4E_", 1193);
      Regexp regexp1 = Parser.parse("Extender", 593);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("P{{5}'C*J.M$7{\"", (-611));
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P\u0005n", (-2888));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", (-3115));
      Parser parser0 = new Parser("B", (-3115));
      Regexp regexp1 = Parser.parse("T\"? h+=t[", 120514);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", 11501);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 11501, 105);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Parser.parse("XuFU!`RXGW[-*qrOB", (-1947));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-*qrOB`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Parser.parse("ydnS[-:}F", 1484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-:}F`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser parser0 = new Parser("cwN~E8' I3", 120488);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("QfR/a|", (-2330));
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op2);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[4] = regexp6;
      Regexp regexp7 = Parser.parse("QfR/a|", 120488);
      regexpArray0[5] = regexp7;
      Regexp regexp8 = new Regexp(regexp6);
      regexpArray0[6] = regexp8;
      Regexp.Op regexp_Op3 = Regexp.Op.LEFT_PAREN;
      Regexp regexp9 = new Regexp(regexp_Op3);
      regexpArray0[7] = regexp9;
      Regexp regexp10 = Parser.parse(",c>k8xZ", 120488);
      regexpArray0[8] = regexp10;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2747), (-855));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", (-488));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp regexp0 = Parser.parse("W/q%v?Rw7!", 59);
      Regexp regexp1 = Parser.parse("[:x00-x{10FFFF}]", (-175));
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 59, (-175));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00L&x{10FFFF}", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", (-40));
      Regexp regexp1 = Parser.parse("+7pGw", 46);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Parser.parse("XuU!`RX[-*/OJB", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-*_/OJB`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Parser.parse("XuU!`RX[-*/OJB", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-*_/OJB`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\u0000-x{10FFF]", 152);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Parser.parse("6(?U", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?U`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Regexp regexp0 = Parser.parse("i|7c{DlQ1kj1B=|", 2633);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\u0000-x{10DFoF]", (-828));
      Regexp[] regexpArray0 = new Regexp[3];
      regexp0.cap = (-3733);
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1155, (-828));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{1FFFF}]", 1473);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Regexp regexp0 = Parser.parse("#MWaBJln2|#F/@AMaO$", 105);
      Regexp regexp1 = Parser.parse("10", 105);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":mb*lw|:9?J7}D9:]", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\u0001\bFFF]", 4153);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int0 = 36;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 65, 36);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Regexp regexp0 = Parser.parse("az\f5ZGA|E|0", 64285);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 64285, 64285);
      Regexp regexp1 = Parser.parse("4", 64285);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "$o h4\\3}}oQ\"T#i)";
      try { 
        Parser.parse("$o h4\u0003}}oQ\"T#i)", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Regexp regexp0 = Parser.parse("QyX", 236);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?)o?P<Yw!<", 2884);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = (-2348);
      Parser parser0 = new Parser("[:s", (-2348));
      Regexp regexp0 = Parser.parse("p{2Ps", (-275));
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      int int1 = 433;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p{2Ps", (-275));
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }
}
