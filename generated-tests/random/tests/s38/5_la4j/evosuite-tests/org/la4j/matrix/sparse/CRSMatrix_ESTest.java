/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 23:58:15 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(256);
      SparseMatrix.zero(1255, 1255);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.00390625, cRSMatrix1.density(), 0.01);
      assertEquals(256, cRSMatrix0.columns());
      assertEquals(4113, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1394;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1394);
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(1206, 1206, matrixFunction0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1206;
      doubleArray0[1] = (double) 1206;
      doubleArray0[2] = (double) 1206;
      doubleArray0[3] = (double) 1206;
      doubleArray0[4] = (double) 1206;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      ooPlaceVectorsSubtraction0.partiallyApply(sparseVector0);
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2778, 2778);
      int int0 = 8;
      int int1 = 3254;
      cRSMatrix0.copyOfShape(8, 3254);
      cRSMatrix0.max();
      int int2 = 8;
      cRSMatrix0.blankOfShape(2778, 8);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(48, 2778, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2600, 2600);
      cRSMatrix0.iteratorOfNonZeroRows();
      Matrix matrix0 = cRSMatrix0.blankOfShape(2600, 2600);
      assertEquals(2600, matrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2600, 1);
      assertEquals(2600, cRSMatrix1.rows());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertEquals(0, cRSMatrix2.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = (-3164.3672555);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-3164.3672555);
      doubleArray6[1] = (-3164.3672555);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.transpose();
      Integer integer0 = new Integer(2);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        CRSMatrix.zero(290, (-1759), 290);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 290x-1759
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.transpose();
      double double0 = new Integer(2);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        CRSMatrix.zero(290, (-1759), 290);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 290x-1759
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 945);
      CRSMatrix cRSMatrix1 = new CRSMatrix(13, 2044, 13);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(615, 615, 560);
      int[] intArray0 = new int[8];
      intArray0[0] = 560;
      intArray0[1] = 615;
      intArray0[2] = 615;
      intArray0[3] = 615;
      intArray0[4] = 615;
      intArray0[5] = 615;
      intArray0[6] = 560;
      intArray0[7] = 560;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '615' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(739, 739, 940);
      Matrix matrix0 = cRSMatrix0.copyOfColumns(14);
      assertEquals(739, matrix0.rows());
      assertEquals(14, matrix0.columns());
      
      Random.setNextRandom(4);
      double double0 = cRSMatrix0.maxInRow(4);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4.9E-324;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 4.9E-324;
      doubleArray2[1] = 4.9E-324;
      doubleArray2[2] = 4.9E-324;
      doubleArray2[3] = 4.9E-324;
      doubleArray2[4] = 4.9E-324;
      doubleArray2[5] = 4.9E-324;
      doubleArray2[6] = 2233.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 4.9E-324;
      doubleArray3[1] = 2233.0;
      doubleArray3[2] = 4.9E-324;
      doubleArray3[3] = 4.9E-324;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 4.9E-324;
      doubleArray4[1] = 4.9E-324;
      doubleArray4[2] = 4.9E-324;
      doubleArray4[3] = 4.9E-324;
      doubleArray4[4] = 2233.0;
      doubleArray4[5] = (-907.570954);
      doubleArray4[6] = 4.9E-324;
      doubleArray4[7] = 2233.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-92.15);
      doubleArray5[1] = 2233.0;
      doubleArray5[2] = 4.9E-324;
      doubleArray5[3] = (-907.570954);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (-92.15);
      doubleArray6[1] = 2233.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 4.9E-324;
      doubleArray7[1] = (-92.15);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = (-92.15);
      doubleArray8[1] = 2233.0;
      doubleArray8[2] = (-907.570954);
      doubleArray8[3] = 4.9E-324;
      doubleArray8[4] = 4.9E-324;
      doubleArray8[5] = 2233.0;
      doubleArray0[7] = doubleArray8;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.min();
      assertEquals((-92.15), double0, 0.01);
      assertEquals(4.9E-324, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-2626.9138237607945);
      doubleArray2[1] = 8.0;
      doubleArray2[2] = 703.3412319392;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-2626.9138237607945);
      doubleArray3[1] = 703.3412319392;
      doubleArray3[2] = (-966.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 703.3412319392;
      doubleArray4[1] = (-2626.9138237607945);
      doubleArray4[2] = 703.3412319392;
      doubleArray4[3] = 703.3412319392;
      doubleArray4[4] = 8.0;
      doubleArray4[5] = 1587.63;
      doubleArray4[6] = (-966.0);
      doubleArray4[7] = (-966.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 8.0;
      doubleArray5[1] = (-966.0);
      doubleArray5[2] = (-966.0);
      doubleArray5[3] = 703.3412319392;
      doubleArray5[4] = 1805.0;
      doubleArray5[5] = (-2093.10196612);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 703.3412319392;
      doubleArray6[1] = (-2093.10196612);
      doubleArray6[2] = 1805.0;
      doubleArray0[5] = doubleArray6;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1348, 1348);
      cRSMatrix0.setAll(-0.0);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2996, 2996);
      int int0 = 3488;
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(3488, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(3, 3, 1.0, (java.util.Random) mockRandom0);
      Matrix matrix0 = cRSMatrix0.blankOfShape(3, 89);
      assertEquals(89, matrix0.columns());
      assertEquals(3, matrix0.rows());
      
      cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(0.2, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1000);
      double double0 = cRSMatrix0.minInRow(32);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1000, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(17, (-1.0));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.transformColumn(3, vectorFunction0);
      Matrix.fromCSV("");
      cRSMatrix0.power(17);
      cRSMatrix0.diagonalProduct();
      cRSMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1805, 1805);
      boolean boolean0 = cRSMatrix0.nonZeroAt(10, 0);
      assertFalse(boolean0);
      assertEquals(1805, cRSMatrix0.cardinality());
      assertEquals(1805.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1357;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1357);
      int int1 = 1366;
      MockRandom mockRandom0 = new MockRandom(1658L);
      mockRandom0.nextBoolean();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1132);
      cRSMatrix0.toBinary();
      int[] intArray0 = new int[7];
      intArray0[0] = 1132;
      intArray0[1] = 1132;
      intArray0[2] = 1132;
      intArray0[3] = 1132;
      intArray0[4] = 1132;
      intArray0[5] = 1132;
      intArray0[6] = 1132;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.max();
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 2165.467766;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 2165.467766;
      doubleArray6[1] = 2165.467766;
      doubleArray6[2] = (-1391.07357);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 2165.467766;
      doubleArray6[6] = 2165.467766;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 2165.467766;
      doubleArray7[1] = (-1391.07357);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 2165.467766;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 2165.467766;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = (-1391.07357);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 2165.467766;
      doubleArray8[2] = (-1391.07357);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = (-1391.07357);
      doubleArray8[6] = 0.0;
      doubleArray8[7] = 0.0;
      doubleArray8[8] = (-1391.07357);
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(122, 1882);
      cRSMatrix0.nonZeroRowMajorIterator();
      int[] intArray0 = new int[9];
      intArray0[0] = 122;
      intArray0[1] = 1882;
      intArray0[2] = 122;
      intArray0[3] = 122;
      intArray0[4] = 1882;
      intArray0[5] = 122;
      intArray0[6] = 1882;
      intArray0[7] = 1882;
      intArray0[8] = 122;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '122' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 348;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(348, 348);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cRSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(9, 9, 9);
      int int1 = 2481;
      cRSMatrix0.rank();
      double double0 = (-3685.889);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(9, 2481, (-3685.889));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(25, 25);
      cRSMatrix0.nonZeroAt(3, 4728);
      assertEquals(25, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.getColumn(Integer.MAX_VALUE);
      double double0 = new Integer(2);
      cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 743;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(743, 743);
      int int1 = 17;
      int int2 = 5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 743;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 743;
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 743, 759);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 743 rows and 759 cols at 0, 0 in a 743x743 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 252, 3);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-336.1), 1025.737588, 1025.737588, (-979.0220093655149), (double)252).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(3, vectorFunction0);
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.random(252, 228, (double) 228, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(282, 65);
      Matrix matrix0 = cRSMatrix0.copyOfShape(65, 1028);
      assertEquals(65, matrix0.rows());
      assertEquals(282, cRSMatrix0.rows());
      assertEquals(1028, matrix0.columns());
      assertEquals(65, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, 244.43855);
      cRSMatrix0.toCSV();
      cRSMatrix0.copyOfShape(6, 6);
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(9, (double) 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 2304;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2304;
      doubleArray0[1] = (-76.53296273);
      doubleArray0[2] = (double) 2304;
      doubleArray0[3] = (double) 2304;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2304;
      doubleArray0[6] = (double) 2304;
      doubleArray0[7] = (double) 2304;
      doubleArray0[8] = (double) 2304;
      // Undeclared exception!
      CRSMatrix.from1DArray(2304, 2304, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll((-1.0));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2846.098999);
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (-1.0);
      Matrix.from1DArray(9, 9, doubleArray0);
      cRSMatrix0.setAll((-2846.098999));
      cRSMatrix0.rowMajorIterator();
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-1));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(17, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("7");
      cRSMatrix0.rowMajorIterator();
      assertEquals(7.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2871.606155529505);
      doubleArray1[1] = 1610.9974534;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = (-2759.54669);
      doubleArray1[4] = 703.3412319392;
      doubleArray1[5] = 147.0;
      doubleArray1[6] = (-1666.8452411015);
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = 520.58;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.max();
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1942;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1942, 1942);
      int int1 = 10;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cRSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 1086);
      cRSMatrix0.setAll((-1.0));
      cRSMatrix0.nonZeroIteratorOfRow(5);
      MockRandom mockRandom0 = new MockRandom((-2542L));
      mockRandom0.setSeed((-1562L));
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-3618), (-1.0), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3618x-3618
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.each((MatrixProcedure) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 252, 3);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(3, vectorFunction0);
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.random(252, 228, (double) 228, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1764;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1764);
      int int1 = 13;
      cRSMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(13, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(26);
      mockRandom0.nextDouble();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(26, 1.0, (java.util.Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-1557), 26, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1557' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 147;
      doubleArray0[1] = (double) 147;
      doubleArray0[2] = (double) 147;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 147;
      doubleArray0[5] = (double) 147;
      doubleArray0[6] = (double) 147;
      doubleArray0[7] = (double) 147;
      int[] intArray0 = new int[9];
      intArray0[0] = 147;
      intArray0[1] = 147;
      intArray0[2] = 147;
      intArray0[3] = 147;
      intArray0[4] = 147;
      intArray0[5] = 147;
      intArray0[6] = 147;
      intArray0[7] = 147;
      intArray0[8] = 147;
      CRSMatrix cRSMatrix0 = new CRSMatrix(147, 147, 147, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1375, 993, 131);
      cRSMatrix0.toBinary();
      cRSMatrix0.min();
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 203.792352;
      doubleArray1[1] = 100.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 100.0;
      doubleArray2[1] = 203.792352;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.multiplyByItsTranspose();
      int int0 = (-3087);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-3087));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3087
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 41;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(41);
      int[] intArray0 = new int[8];
      intArray0[0] = 41;
      intArray0[1] = 41;
      cRSMatrix0.toColumnVector();
      intArray0[2] = (-1953);
      intArray0[3] = 41;
      // Undeclared exception!
      try { 
        cRSMatrix0.kroneckerProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)78;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-2559.5673883071163);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 2, doubleArray0);
      CRSMatrix.diagonal(2, 2.0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      double double0 = cRSMatrix0.manhattanNorm();
      assertEquals(2.0, double0, 0.01);
      
      cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(2, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 324;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(324, 324);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      Matrix.fromCSV("");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.multiply(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 358;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(358, 358);
      int int1 = (-611);
      cRSMatrix0.copy();
      double double0 = (-258.25);
      // Undeclared exception!
      cRSMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, (-1), (double) (-1), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1683, 1683, (double) 1683, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 132.7743992;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 1.1102230246251565E-14;
      doubleArray1[4] = 15.7629;
      doubleArray1[5] = (-347.0);
      doubleArray1[6] = 266.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-347.0);
      doubleArray2[1] = 266.0;
      doubleArray2[2] = (-1238.24156712);
      doubleArray2[3] = 15.7629;
      doubleArray2[4] = (-347.0);
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 15.7629;
      doubleArray3[1] = (-1238.24156712);
      doubleArray3[2] = 2360.9549482429;
      doubleArray3[3] = 266.0;
      doubleArray3[4] = 132.7743992;
      doubleArray3[5] = (-1238.24156712);
      doubleArray3[6] = 1.1102230246251565E-14;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(10, 971, 12.179187911459);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, denseMatrix0, denseMatrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1995, 1995);
      int int0 = (-161);
      int int1 = 13;
      // Undeclared exception!
      try { 
        Matrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1996' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(290, 290);
      cRSMatrix0.nonZeroRowMajorIterator();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1676.652993573727);
      doubleArray0[1] = (double) 290;
      doubleArray0[2] = (double) 290;
      doubleArray0[3] = (double) 290;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(290, 290, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix.fromCSV("        ");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 33;
      doubleArray0[1] = (double) (-858);
      doubleArray0[2] = (double) (-858);
      doubleArray0[3] = (double) 33;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-858), 33, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -858x33
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1130;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1130, 1130);
      cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("[\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix.identity(945);
      SparseMatrix.zero(6, 945);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("lShD^l{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 32;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(32, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        Matrix.zero((-2621), (-2621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2621x-2621
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 10;
      CRSMatrix.identity(10);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("LEAST_SQUARES");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      Matrix.identity(1);
      cRSMatrix0.determinant();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix1.shuffle();
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(251, (-290.03461));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix2.eachInRow(3445, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      cRSMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 2536;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2536, 2536);
      cRSMatrix0.min();
      // Undeclared exception!
      cRSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 1348;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rotate();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1348, 986, 2890);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "org.la4j.matrix.sparse.CRSMatrix$3";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("org.la4j.matrix.sparse.CRSMatrix$3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2340.7744651495004);
      doubleArray0[1] = (double) 3419;
      doubleArray0[2] = (double) 3419;
      doubleArray0[3] = (double) 3419;
      int[] intArray0 = new int[6];
      intArray0[0] = 3419;
      intArray0[1] = 1315;
      intArray0[2] = 3419;
      intArray0[3] = 2803;
      intArray0[4] = 3419;
      intArray0[5] = 3419;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3419, 3419, 3419, doubleArray0, intArray0, intArray0);
      cRSMatrix0.getColumn((-1876));
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(1315);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1315
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 1, (double) 1, (java.util.Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(denseMatrix0, cRSMatrix0, denseMatrix0, cRSMatrix0);
      cRSMatrix0.sum();
      cRSMatrix1.nonZeroIteratorOfRow(1);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-966.0);
      doubleArray1[3] = 1898.54918947721;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 0.964;
      doubleArray1[6] = 109.785685401363;
      doubleArray1[7] = 0.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 109.785685401363;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 0;
      CRSMatrix.diagonal(0, 0);
  }
}
