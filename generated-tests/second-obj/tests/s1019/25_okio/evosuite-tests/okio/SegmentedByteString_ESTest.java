/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:56:39 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.nio.charset.Charset;
import java.util.LinkedList;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSource;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.equals("");
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString.encodeUtf8("");
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.equals("");
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.writeLong(0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.rangeEquals((-2154), (ByteString) segmentedByteString0, (-2154), 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = 1915;
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteString0, 1915);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      HashingSource.sha1(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSource.sha1(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)70;
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, 1749);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)70;
      MockFile mockFile0 = new MockFile("(>c`xY;P]W]E*&#dB", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      segmentedByteString0.write(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/]O^r5/A8Pqz8p");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("]O^r5/A8Pqz8p");
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        segmentedByteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.writeHexadecimalUnsignedLong(0);
      buffer0.segmentSizes();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      String string0 = segmentedByteString0.hex();
      assertEquals("30", string0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(0);
      buffer0.writeDecimalLong(0L);
      buffer0.segmentSizes();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      assertEquals(1, segmentedByteString0.size());
      
      segmentedByteString0.getByte(0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource.hmacSha1(buffer0, byteString0);
      buffer0.writeHexadecimalUnsignedLong((-13));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource.sha1(hashingSource0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.rangeEquals((int) (byte)2, byteArray0, (int) (byte)2, (int) (byte)2);
      int int1 = segmentedByteString0.hashCode();
      assertFalse(int1 == int0);
      
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)2, byteString0, (-13), (-1629));
      assertTrue(boolean0);
      
      segmentedByteString0.hmacSha256(byteString0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = buffer0.sha256();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%Frs188m:d");
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0);
      Buffer buffer2 = new Buffer();
      HashingSource.sha1(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer1.require((-1068L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.write(buffer0);
      byteString0.toAsciiUppercase();
      segmentedByteString0.rangeEquals(1, byteString0, 2, (-269));
      segmentedByteString0.sha256();
      segmentedByteString0.equals((Object) null);
      MockFile mockFile0 = new MockFile("%Frs188m:d", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      segmentedByteString0.write(mockPrintStream0);
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      buffer1.segmentSizes();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource.sha1(hashingSource0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byteString0.endsWith((ByteString) segmentedByteString0);
      segmentedByteString0.getByte(0);
      buffer1.readAndWriteUnsafe();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int2 = ObjectStreamConstants.baseWireHandle;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0);
      buffer0.segmentSizes();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      segmentedByteString0.startsWith(byteString0);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.write(buffer_UnsafeCursor0.buffer);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource.hmacSha1(buffer0, byteString0);
      buffer0.writeHexadecimalUnsignedLong(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource.sha1(hashingSource0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte) (-85), byteArray0, (int) (byte)2, (int) (byte)2);
      int int1 = segmentedByteString0.hashCode();
      assertFalse(int1 == int0);
      
      boolean boolean1 = segmentedByteString0.rangeEquals((int) (byte)2, byteString0, 0, (-1629));
      assertFalse(boolean1 == boolean0);
      
      segmentedByteString0.hmacSha256(byteString0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(31);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      buffer0.md5();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.substring(1);
      ByteString.decodeBase64(")");
      byte[] byteArray0 = segmentedByteString0.toByteArray();
      segmentedByteString0.hashCode();
      segmentedByteString0.rangeEquals(31, byteArray0, 1482, (-482));
      Buffer buffer1 = new Buffer();
      segmentedByteString0.write(buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeHexadecimalUnsignedLong(0);
      Buffer buffer1 = new Buffer();
      buffer1.readByteArray();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.endsWith(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      buffer0.writeHexadecimalUnsignedLong(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString1 = buffer0.snapshot();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString1.equals(byteString0);
      // Undeclared exception!
      try { 
        byteString1.substring(1, (-3768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.writeHexadecimalUnsignedLong(0);
      buffer0.segmentSizes();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.getByte(0);
      buffer0.readAndWriteUnsafe();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      segmentedByteString0.base64Url();
      ByteString byteString0 = realBufferedSource0.readByteString((long) 1);
      byteString0.toAsciiUppercase();
      byteString0.base64Url();
      segmentedByteString0.equals(byteString0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeHexadecimalUnsignedLong(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource.sha1(hashingSource0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.getByte(0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource.sha256(hashingSource0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      boolean boolean0 = segmentedByteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      String string0 = segmentedByteString0.base64Url();
      assertEquals("MA==", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeHexadecimalUnsignedLong(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      buffer0.segmentSizes();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource.sha1(hashingSource0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byteString0.endsWith((ByteString) segmentedByteString0);
      ByteString byteString1 = hashingSource0.hash();
      Buffer buffer1 = new Buffer();
      int int1 = ObjectStreamConstants.baseWireHandle;
      segmentedByteString0.rangeEquals(0, byteString1, 0, 1);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString2 = segmentedByteString0.hmacSha1(byteString0);
      assertNotSame(byteString0, byteString2);
  }
}
