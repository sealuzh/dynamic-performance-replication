/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 15:32:54 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer(2);
      Object object0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = doubleKeyMap0.remove((Object) null, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      HashMap<Object, Map<Integer, Map<Object, Integer>>> hashMap0 = new HashMap<Object, Map<Integer, Map<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Object, Integer>>(hashMap0, class0);
      Integer integer0 = new Integer((-4720));
      Map<Object, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Integer>>(class0);
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0);
      Map<Object, String> map1 = doubleKeyMap1.remove((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer1 = doubleKeyMap0.put((Object) null, (String) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.put(object0, object0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<HashMap<String, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Object, Object>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class0);
      Integer integer0 = doubleKeyMap2.get((Object) doubleKeyMap1, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Map<String, Object> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>();
      Map<Object, Map<Object, Integer>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) hashMap0, (Object) doubleKeyMap0, (String) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0, class0);
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, "AV1FzCM_6F5k)", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0, class0);
      Object object0 = new Object();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put(integer0, "us.codecraft.webmagic.utils.DoubleKeyMap", "u,]ZH$7 P<(;$)");
      String string0 = doubleKeyMap0.remove(integer0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put(integer0, "us.codecraft.webmagic.utils.DoubleKeyMap", "u,]ZH$7 P<(;$)");
      String string0 = doubleKeyMap0.put(integer0, "6E8zL\"", "v");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Integer, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, Map<Object, Integer>>();
      Map<String, Map<Map<Object, Integer>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Map<Object, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<String, Map<Object, Integer>, Object>(map0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = doubleKeyMap1.get((String) null, (Map<Object, Integer>) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>((Map<Object, Map<Object, Integer>>) null);
      DoubleKeyMap<HashMap<Object, Integer>, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Map<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap1.put(hashMap0, (Object) null, (Map<Object, Integer>) hashMap0);
      Map<Object, Integer> map0 = doubleKeyMap1.get(hashMap0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put(integer0, "6E8zL\"", "");
      String string0 = doubleKeyMap0.remove(integer0, "6E8zL\"");
      assertNotNull(string0);
      assertEquals("", string0);
  }
}
