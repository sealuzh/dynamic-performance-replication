/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:08:18 GMT 2018
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.functions.supportVector.RegSMO;
import weka.classifiers.functions.supportVector.SMOset;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.core.Instances;
import weka.core.TechnicalInformation;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegSMO_ESTest extends RegSMO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      regSMO0.listOptions();
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String[] stringArray0 = new String[0];
      regSMO0.setOptions(stringArray0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.wrapUp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.getRevision();
      assertEquals("8034", string0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.epsilonTipText();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      regSMO0.findOptimalPointOnLine((-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1));
      try { 
        regSMO0.examineExample((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.takeStep(33, (-19), (-19), 33, (-19));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      int int0 = regSMO0.takeStep(91, 91, 91, 91, 91);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.secondChoiceHeuristic(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.buildClassifier((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SVM not initialized in optimizer. Use RegOptimizer.setSVMReg()
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 0.0, 1, 1, 1, 0.0, 1, 1, 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      regSMO0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 0, 1499.887, 0, 0, 0, 0, 0, 1499.887, 6.098867894949212, 1520.6999999999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-1), (-1), 1.0E-5, 1.0E-5, (-1), (-1), (-1), 1.0E-5, (-2416.34272492), 1.0E-5, (-2416.34272492));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-1), 4.6, (-1), (-1), (-1), (-1), (-1), (-1), 4.6, 4.6, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      SMOset sMOset0 = new SMOset(59);
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(5, 59, 5, 501.0, 87, 0.0, 0.0, 462.4218238569371, 59, 87, 2534.1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      SMOset sMOset0 = new SMOset(59);
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 59, (-1224), 971.4517091362909, 1, 1.0, (-1224), 513.1047054251, 1, 59, 1609.7622029841514);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      int int0 = 271;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(271, 4.6, 271, 271, 271, 271, 271, 271, 4.6, 4.6, 271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 568.6001892166724, 1, 0.75, (-2), 3650.59726, 1, 0.75, 1.0E-10, 568.6001892166724, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 35;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(35, 544.94974, 3, 3, 35, (-400.406246), 35, 1730.2124303611, (-2.0), 3, 1730.2124303611);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(49, (-1244.180156659642), Double.POSITIVE_INFINITY, 1, 1, 0.0, (-1244.180156659642), 1, Double.POSITIVE_INFINITY, 1, (-1244.180156659642));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      String string0 = regSMO0.globalInfo();
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      assertNotNull(string0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(35, (-1.0), 35, 368.0, 2144236716, 0.0, 35, 35, (-1.0), 0.5, (-1324.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, (-1233.2388), 79.0, 2758.0, 1, 49.0, 49.0, 1.0, (-1862.80028), 1.0, 49.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      int int0 = 101;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(101, 0.0, 0.0, 101, 101, 0.0, 840.03640527, 0.0, (-1.0), 101, 840.03640527);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      RegSMO regSMO1 = new RegSMO();
      assertFalse(regSMO1.equals((Object)regSMO0));
      assertNotNull(regSMO1);
      assertEquals(1, regSMO1.getSeed());
      assertEquals(0.001, regSMO1.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO1.epsilonParameterTipText());
      assertEquals(0, regSMO1.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO1.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO1.epsilonTipText());
      assertEquals((-1), regSMO1.getCacheHits());
      assertFalse(regSMO1.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO1.seedTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 552.65320478644, (-2.344631393604817), 0.75, (-2), 0.0, (-1.0), 0.75, 1.0E-10, 552.65320478644, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      regSMO0.m_C = (double) 49;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1139, 1139, 1139, 0.0, 52, (-946.15713894), 0.0, (-2.1474836432589262E9), 1861.0, 1861.0, (-2.1474836432589262E9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(80, 5.5, 80, 1, 80, 2.0665899407770228E9, 2.99999999, 80, 80, 2.99999999, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_nEvals = 98;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(98, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      boolean boolean0 = regSMO0.m_bModelBuilt;
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 0.0, 0.0, 0.0, 1, (-1770.73495), 1, 1, 1.0E75, 918.1330828, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray0 = new double[14];
      regSMO0.m_alpha = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(3, 3, 0.1, 3, 3, 0.1, 3, 602.3, 0.1, 602.3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      TechnicalInformation technicalInformation0 = regSMO0.getTechnicalInformation();
      assertNotNull(technicalInformation0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(TechnicalInformation.Type.MISC, technicalInformation0.getType());
      assertFalse(technicalInformation0.hasAdditional());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1576, 0.0, 1576, 5309.28, (-1), 637, (-2041.709565517081), 627.39, (-638.4115816), 0.2139072012, 2578.401536809452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-1546), 275, 275, 275, (-1546), 0.25, 34.5, 1.0E-10, 3.0, 0.1, 1351.761749206006);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 0.0, (-1.0), (-1.0), 2475, (-3742.1434), 1, 1, 1177.590576, 2475, (-326.719249514273));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 0, (-183.6339996), 0, 0, 2.0, 2.0, (-183.6339996), 2.0, 2.0, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-143), (-143), 1.0E-8, 3.0, (-143), 694.99006202137, 2021.8998794136603, 1.0E-8, 3.000000003333333E-10, 3.000000003333333E-10, 99.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-1387), 59, 2428.0386482, 1.7976931348623157E308, 515, 1.7976931348623157E308, 59, 59, 1195.275986, 2428.0386482, 1.7976931348623157E308);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      double[] doubleArray0 = new double[5];
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      regSMO0.setEpsilon(4);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(4.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(4, 2.0, 4, 4, 4, 4, 4, 4, 2.0, 4, (-2.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      
      SMOset sMOset0 = new SMOset(1);
      assertNotNull(sMOset0);
      assertEquals(0, sMOset0.numElements());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1706, 1, 467.0, 4.5, 2492, 4.5, 467.0, 1832.33, 1706, 2492, 4.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.setOptions(stringArray0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      regSMO0.m_nInstances = 552;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[16];
      regSMO0.m_alphaStar = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_alpha = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 0.0, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[16];
      regSMO0.m_alpha = doubleArray0;
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(3, 9.999999999E-9, 3.0, 3, 3, 9.999999999E-9, 9.999999999E-9, 3, 3.0, 3, 9.999999999E-9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[28];
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(3, 9.999999999E-9, 3.0, 3, 3, 9.999999999E-9, 9.999999999E-9, 3, 9.999999999E-9, 3, 9.999999999E-9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 49;
      regSMO0.m_alpha = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      // Undeclared exception!
      try { 
        regSMO0.secondChoiceHeuristic(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray0 = new double[9];
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      boolean boolean0 = regSMO0.m_bModelBuilt;
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, (-2.0), (-3328.232448129861), 1, 1, (-3328.232448129861), (-3328.232448129861), 1, 1, 1, (-3328.232448129861));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray0 = new double[16];
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 0.9478779716964668, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[9];
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      int int0 = regSMO0.secondChoiceHeuristic(1);
      assertEquals((-1), int0);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[5];
      regSMO0.m_target = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.optimize();
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 1.0;
      regSMO0.m_target = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      double[] doubleArray1 = new double[28];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      regSMO0.m_alpha = doubleArray1;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1.0;
      regSMO0.m_target = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      double[] doubleArray0 = new double[5];
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      regSMO0.setEpsilon(4);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(4.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      
      boolean boolean0 = regSMO0.findOptimalPointOnLine(4, 4, 4, 4, 4, 4, 4, 4, 4, 4, (-2.0));
      assertFalse(boolean0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(4.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 1.0;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      int int0 = regSMO0.secondChoiceHeuristic((-335));
      assertEquals((-1), int0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray0 = new double[5];
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.setEpsilon(4);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(4.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(4, 4, (-1.0), 0.0, 4, (-2351.9053308202), (-2351.9053308202), (-1.0), (-2351.9053308202), 4, (-2351.9053308202));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double[] doubleArray0 = new double[16];
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      SMOset sMOset0 = new SMOset(59);
      assertNotNull(sMOset0);
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_supportVectors = sMOset0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, sMOset0.numElements());
      assertEquals(0, regSMO0.m_supportVectors.numElements());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      boolean boolean0 = regSMO0.findOptimalPointOnLine(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
      assertTrue(boolean0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      boolean boolean1 = regSMO0.findOptimalPointOnLine(1, 1, 1, 3.0, 1, 3.0, 59, 3.0, 59, 1, 1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
  }
}
