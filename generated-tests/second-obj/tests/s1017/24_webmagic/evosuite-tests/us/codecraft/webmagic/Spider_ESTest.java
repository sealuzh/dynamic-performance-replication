/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:30:47 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4g_o%]ye2w");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("4g_o%]ye2w");
      spider1.exitWhenComplete = true;
      spider1.setEmptySleepTime((-1832));
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("=VI}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.=VI}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider1.getPageCount();
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "yes";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("java.io.tmpdir");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      Spider spider2 = spider1.clearPipeline();
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b%MHy");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y^SGvF-uLgjjz", "Y^SGvF-uLgjjz");
      Spider spider2 = spider1.clearPipeline();
      spider2.checkIfRunning();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("get a candidate url {}", "Y^SGvF-uLgjjz");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.clearPipeline();
      // Undeclared exception!
      try { 
        spider4.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.pipeline(filePipeline0);
      spider2.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setSpawnUrl(true);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadPoolExecutor_DiscardPolicy0);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      Page page0 = Page.fail();
      Page.fail();
      Page page1 = page0.setRawText("V5");
      page1.setDownloadSuccess(false);
      spider0.stop();
      int int0 = spider3.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider1.setSpawnUrl(true);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadPoolExecutor_CallerRunsPolicy0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNull(list0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = spider1.downloader((Downloader) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider2.thread((ExecutorService) null, 40);
      MultiPagePipeline multiPagePipeline1 = new MultiPagePipeline();
      spider0.setUUID("ju9u");
      Spider spider3 = spider1.thread(1956);
      spider3.addPipeline(multiPagePipeline1);
      long long0 = spider2.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setUUID("Thread interrupted when sleep");
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      Spider.Status spider_Status0 = spider0.getStatus();
      int int0 = spider_Status0.getValue();
      assertEquals(0, int0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Thread interrupted when sleep";
      stringArray0[1] = "Thread interrupted when sleep";
      stringArray0[2] = "Thread interrupted when sleep";
      spider1.sleep(2);
      stringArray0[3] = "Thread interrupted when sleep";
      stringArray0[4] = "Thread interrupted when sleep";
      stringArray0[5] = "Thread interrupted when sleep";
      stringArray0[6] = "Thread interrupted when sleep";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      page0.setRawText("ju9u");
      spider1.extractAndAddRequests(page1, false);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "ju9u";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider.Status.fromValue((-1434));
      Spider.Status spider_Status0 = Spider.Status.Init;
      spider_Status0.getValue();
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QZaXlom/_K(gV`");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "QZaXlom/_K(gV`";
      Request request0 = new Request();
      MockFile mockFile0 = new MockFile("_cycle_tried_times");
      MockFile mockFile1 = new MockFile("QZaXlom/_K(gV`");
      spider1.isExitWhenComplete();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      Request request1 = request0.addHeader("QZaXlom/_K(gV`", "V*1n4-j,}Le}");
      assertEquals(0L, request1.getPriority());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("java.io.tmpdir");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      String[] stringArray0 = new String[9];
      stringArray0[7] = "java.io.tmpdir";
      stringArray0[1] = "java.io.tmpdir";
      stringArray0[2] = "java.io.tmpdir";
      stringArray0[3] = "java.io.tmpdir";
      spider1.scheduler((Scheduler) null);
      stringArray0[5] = "java.io.tmpdir";
      stringArray0[6] = "java.io.tmpdir";
      stringArray0[7] = "java.io.tmpdir";
      stringArray0[8] = "&2 0nXgpYq5POjd'6";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'Tj[NRv=fZ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setPipelines((List<Pipeline>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      spider0.downloader(phantomJSDownloader0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(31, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      MultiPagePipeline multiPagePipeline1 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("get a candidate url {}", "get a candidate url {}");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.clearPipeline();
      Page page0 = Page.fail();
      Page.fail();
      Page page1 = page0.setRawText("V5");
      page1.setDownloadSuccess(false);
      spider0.extractAndAddRequests(page1, false);
      Spider.Status.values();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider4.addPipeline(collectorPipeline0);
      spider4.setEmptySleepTime((-2244));
      spider3.getStatus();
      spider4.runAsync();
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpawnUrl(true);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      Page page0 = Page.fail();
      page0.setDownloadSuccess(false);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("get a candidate url {}", "get a candidate url {}");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadPoolExecutor_DiscardPolicy0);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider4 = spider2.setDownloader(phantomJSDownloader0);
      spider4.clearPipeline();
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      List<String> list0 = orSelector0.selectList("tX<^A?>Wp8@ONlldz}U");
      Json json0 = new Json(list0);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      spider2.setSpiderListeners((List<SpiderListener>) null);
      Spider.create(simplePageProcessor0);
      spider3.clearPipeline();
      spider2.stop();
      spider4.getSite();
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      spider0.scheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      Spider spider3 = spider2.setSpawnUrl(true);
      spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Page.fail();
      Page page0 = Page.fail();
      page0.setRawText("Stopped");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      spider3.executorService = (ExecutorService) scheduledThreadPoolExecutor0;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      Spider spider4 = spider2.startUrls(list0);
      spider3.getPageCount();
      // Undeclared exception!
      try { 
        spider4.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setUUID("Thread interrupted when sleep");
      spider0.scheduler(fileCacheQueueScheduler0);
      spider1.getThreadAlive();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Thread interrupted when sleep";
      stringArray0[1] = "Thread interrupted when sleep";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      Page page2 = page0.setRawText("");
      Page page3 = page1.setSkip(false);
      Page page4 = page3.setRawText("");
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      page2.setRawText(" stop fail!");
      page4.setDownloadSuccess(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider3 = spider1.pipeline(jsonFilePipeline0);
      spider2.stop();
      spider3.getThreadAlive();
      // Undeclared exception!
      try { 
        spider3.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      Page page2 = page1.setRawText("application/x-www-form-urlencoded");
      page0.setSkip(true);
      Page page3 = page2.setRawText("Thread interrupted when sleep");
      List<Request> list0 = page2.getTargetRequests();
      spider1.startRequest(list0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Page page4 = new Page();
      page4.setSkip(true);
      page0.setRawText("Z*mk'AMdv<C");
      Page page5 = new Page();
      spider1.getScheduler();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page3, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "Thread interrupted when sleep";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }
}
