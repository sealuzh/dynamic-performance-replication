/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:56:53 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.skip((byte)0);
      Timeout timeout0 = realBufferedSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString((long) (byte)0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(charset0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((-2105L), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2105
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer0.writeUtf8CodePoint(1);
      realBufferedSource0.read(buffer0, (long) 1);
      Charset.defaultCharset();
      realBufferedSource0.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      realBufferedSource0.readUtf8Line();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)43;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)43;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        realBufferedSource0.readUtf8LineStrict(13L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(2508L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      HashingSink hashingSink0 = HashingSink.sha256(pipe_PipeSink0);
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.indexOf((byte) (-75), 2508L, 2508L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSink0);
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotNull(hashingSink1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (-1103L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1103
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = buffer0.writeIntLe(2);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertNotNull(realBufferedSink2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=02000000\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      
      long long0 = realBufferedSource0.read(buffer0, (long) (byte)0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.sha1();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20L, buffer1.size());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)57, (byte) (-93), (byte) (-18), (byte)94, (byte)107, (byte)75, (byte)13, (byte)50}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(9, int0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      try { 
        realBufferedSource1.readByteArray((long) 9);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      
      ByteString byteString1 = byteString0.md5();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      Buffer buffer3 = realBufferedSink0.buffer.writeUtf8(".vx`+?mJZ");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(9L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotNull(buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      
      boolean boolean0 = realBufferedSink0.closed;
      assertFalse(boolean0);
      
      boolean boolean1 = realBufferedSource0.rangeEquals(6L, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      long long0 = realBufferedSource0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(2L, long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.md5();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(16, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(8257536);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotNull(bufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      boolean boolean0 = realBufferedSink0.closed;
      assertFalse(boolean0);
      
      boolean boolean1 = realBufferedSource0.rangeEquals(100000000L, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      
      long long0 = realBufferedSource1.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(gzipSource0);
      
      Timeout timeout0 = gzipSource0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(timeout0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      gzipSource0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      HashingSource hashingSource2 = HashingSource.md5(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertNotNull(hashingSource2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      
      ByteString byteString1 = hashingSource2.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(byteString1, byteString0);
      
      Buffer buffer3 = realBufferedSource0.buffer.writeLong((-2488L));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotNull(buffer3);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      
      int int0 = realBufferedSource0.readIntLe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertEquals((-1), int0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      
      long long0 = realBufferedSource0.indexOf((byte) (-126), 0L, (long) (byte)0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((-1L), byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte byte0 = (byte)32;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      byte byte0 = (byte) (-3);
      String string0 = buffer0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      
      byte byte1 = (byte) (-70);
      byte byte2 = (byte) (-2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      int int0 = 2033;
      ByteString byteString0 = null;
      boolean boolean0 = realBufferedSource0.rangeEquals(60L, (ByteString) null, 1308, (int) (byte) (-70));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-3295L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3295
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      
      int int1 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.read(realBufferedSink0.buffer, (-1895L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1895
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = realBufferedSource0.read(buffer0, (long) 1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, long0);
      assertSame(buffer0, buffer1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      String string0 = realBufferedSource0.readString((long) 1, charset0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("\u0001", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pipe pipe0 = new Pipe(1093L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      byte byte0 = (byte)0;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      BufferedSink bufferedSink0 = realBufferedSink1.writeShort((byte)31);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink0));
      assertNotNull(bufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, realBufferedSink1);
      
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink0));
      assertNotNull(hashingSink0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, realBufferedSink1);
      
      hashingSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, realBufferedSink1);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink0));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, realBufferedSink1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      String string0 = realBufferedSink0.buffer.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)bufferedSink0));
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, bufferedSink0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertNotNull(realBufferedSink0);
      
      try { 
        realBufferedSource0.skip(2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      long long0 = realBufferedSource0.indexOf((byte)45, (long) (byte)45);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)85, (-106L), (-851L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-106 toIndex=-851
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)57;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      boolean boolean1 = realBufferedSource0.rangeEquals(3612L, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      long long0 = realBufferedSource0.indexOfElement(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 2508L;
      Pipe pipe0 = new Pipe(2508L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      HashingSink hashingSink0 = HashingSink.sha256(pipe_PipeSink0);
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeUtf8(".v'`+?mJZ");
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(9L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSink0);
      
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotNull(gzipSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x2e
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(realBufferedSource0.buffer, byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      HashingSource hashingSource2 = HashingSource.sha1(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertNotNull(hashingSource2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      
      ByteString byteString1 = byteString0.md5();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)45;
      Buffer buffer2 = realBufferedSource1.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      Buffer buffer3 = buffer2.writeUtf8(".v'`+?mJZ");
      assertEquals(9L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(9L, buffer2.size());
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotNull(buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      long long0 = realBufferedSource1.readLongLe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(5363012186797471278L, long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      int int0 = realBufferedSource1.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0, (byte)0, (byte)45}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(1, int0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8("ax'DA");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer0);
      
      short short0 = realBufferedSource1.readShort();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals((short)24952, short0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = buffer0.writeIntLe(2794);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource1.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource2);
      
      String string0 = realBufferedSource1.readUtf8LineStrict(3150L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals("'DA\uFFFD", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Pipe pipe0 = new Pipe(4L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)65, 1786L, 390L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1786 toIndex=390
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSink0);
      assertNotSame(buffer0, buffer1);
      
      ByteString byteString0 = hashingSink0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(16, byteBuffer0.limit());
      assertTrue(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(16, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(16, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=16 cap=16]", byteBuffer0.toString());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteBuffer0);
      assertNotSame(buffer0, buffer1);
      
      realBufferedSource0.closed = true;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, 199L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(boolean0);
      assertNotSame(buffer0, buffer1);
      
      Pipe pipe0 = new Pipe(1345L);
      assertNotNull(pipe0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer2 = realBufferedSink1.buffer;
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      realBufferedSource1.closed = true;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      long long0 = realBufferedSource0.indexOf((byte) (-75), 1345L, 1374L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8LineStrict(3243L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(797);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = realBufferedSink1.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      String string0 = hashingSource0.toString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(string0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(hashingSource0, hashingSource1);
      
      ByteString byteString1 = hashingSource1.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      
      BufferedSink bufferedSink1 = bufferedSink0.writeUtf8CodePoint(703);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertNotNull(bufferedSink1);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, bufferedSink1);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertSame(bufferedSink1, bufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink1);
      assertSame(bufferedSink1, realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.indexOf(byteString1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(hashingSource0, hashingSource1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, bufferedSink1);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(14, byteString0.size());
      assertNotNull(byteString0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = realBufferedSource0.read(buffer0, (long) (byte)0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = realBufferedSource0.readString((long) (byte)0, charset0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("", string0);
      assertNotNull(string0);
      
      ByteString[] byteStringArray0 = new ByteString[14];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(14, options0.size());
      assertNotNull(options0);
      
      int int1 = realBufferedSource0.select(options0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(14, options0.size());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.toString());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflaterSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Inflater inflater0 = new Inflater(true);
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readAll(realBufferedSink0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.sha1();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      String string0 = buffer0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((byte) (-84));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-922337203685477580L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -922337203685477580
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = realBufferedSource0.readString((long) (byte)0, charset0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, options0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((-1), int0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSink0);
      assertNotSame(buffer0, buffer1);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Timeout timeout0 = realBufferedSink1.timeout();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(timeout0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink2);
      
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink2));
      assertNotNull(bufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertNotSame(bufferedSink0, realBufferedSink2);
      assertSame(bufferedSink0, realBufferedSink0);
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(bufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink0));
      assertNotNull(realBufferedSink3);
      
      BufferedSink bufferedSink1 = realBufferedSink0.writeHexadecimalUnsignedLong(2492);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertNotNull(bufferedSink1);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(bufferedSink1, bufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink3);
      assertNotSame(bufferedSink1, realBufferedSink2);
      assertNotSame(bufferedSink1, realBufferedSink1);
      
      Buffer buffer2 = realBufferedSink1.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      HashingSink hashingSink1 = HashingSink.sha1(buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotNull(hashingSink1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(hashingSink1, hashingSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      long long0 = realBufferedSource0.readAll(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertEquals(3L, long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      
      long long1 = realBufferedSource0.read(buffer1, 6L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(long1 == long0);
      assertEquals(3L, long1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      realBufferedSource0.skip(3L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = buffer0.writeIntLe(2);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertNotNull(realBufferedSink2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null, 10000000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(byteString0);
      assertNotSame(hashingSource0, hashingSource1);
      
      ByteString byteString1 = byteString0.md5();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals(16, byteString1.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8(">lPFgSDMD.e;4bf'q2");
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(18L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(boolean0);
      assertNotSame(buffer0, buffer1);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(">lPFgSDMD.e;4bf'q2", string0);
      assertNotNull(string0);
      assertNotSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        byteString1.getByte(93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = buffer0.writeIntLe(2);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readUtf8LineStrict((long) 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=02000000\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort(797);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      
      Timeout timeout0 = realBufferedSink0.timeout();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(timeout0);
      assertSame(realBufferedSink0, realBufferedSink1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      byte byte0 = (byte) (-78);
      ByteString byteString1 = new ByteString(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, options0.size());
      assertEquals(0, int0);
      
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[14];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      ByteString[] byteStringArray0 = new ByteString[14];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(14, options0.size());
      assertNotNull(options0);
      
      Buffer buffer1 = null;
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((long) 1, byteString0, 16, (int) (byte)0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.read((Buffer) null, 3L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = buffer0.writeIntLe(2);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = buffer0.writeIntLe(2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertNotNull(realBufferedSink2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, int0);
      assertSame(buffer0, buffer1);
      
      String string0 = realBufferedSource0.readUtf8();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals("\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(192);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertNotNull(bufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      
      Timeout timeout0 = hashingSource0.timeout();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(timeout0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      
      BufferedSink bufferedSink1 = realBufferedSink0.emitCompleteSegments();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertNotNull(bufferedSink1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(bufferedSink1, realBufferedSink1);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertNotNull(hashingSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(bufferedSink1, realBufferedSink1);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      
      GzipSource gzipSource0 = new GzipSource(realBufferedSink1.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(gzipSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readAll(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(2L, long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0, int0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(buffer1, buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      try { 
        realBufferedSource0.skip(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString0 = hashingSource1.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(byteString0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString1 = byteString0.md5();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(16, byteString1.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource2);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8("F7\"Rm9w^NgbD8%93");
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16L, buffer1.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource3);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(boolean0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(realBufferedSource0, realBufferedSource3);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      String string0 = realBufferedSource3.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertNull(string0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource3, realBufferedSource2);
      assertNotSame(realBufferedSource3, realBufferedSource0);
      assertNotSame(realBufferedSource3, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        byteString1.getByte(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = buffer0.writeIntLe((-4292));
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x3c
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(byteString0);
      assertNotSame(hashingSource0, hashingSource1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt((-1438));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      Buffer buffer1 = buffer0.writeIntLe((-1438));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      long long0 = realBufferedSource0.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(11L, long0);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString1.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource2);
      
      String string0 = realBufferedSource2.toString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertEquals("buffer(buffer(buffer([size=0])))", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)80;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(bufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8(".v'`+?mJZ");
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(9L, buffer2.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(9L, buffer2.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource2);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      byte byte0 = realBufferedSource0.readByte();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertEquals((byte)46, byte0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertNotNull(realBufferedSource3);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x76
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(hashingSink0);
      assertNotSame(buffer0, buffer1);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Timeout timeout0 = realBufferedSink1.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(timeout0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertNotNull(realBufferedSink2);
      
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertNotNull(bufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink2);
      assertNotSame(bufferedSink0, realBufferedSink1);
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink3);
      
      BufferedSink bufferedSink1 = realBufferedSink0.writeHexadecimalUnsignedLong(2492);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink3));
      assertNotNull(bufferedSink1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(bufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink2);
      assertNotSame(bufferedSink1, realBufferedSink1);
      assertSame(bufferedSink1, bufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink3);
      
      Buffer buffer2 = realBufferedSink1.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      HashingSink hashingSink1 = HashingSink.sha1(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotNull(hashingSink1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertNotSame(realBufferedSink1, bufferedSink1);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(hashingSink1, hashingSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotNull(buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertNotNull(buffer4);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(((RealBufferedSink) bufferedSink1).buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink3));
      assertNotNull(realBufferedSource2);
      
      long long0 = realBufferedSource2.readDecimalLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink3));
      assertEquals(9L, long0);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(bufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink2);
      assertNotSame(bufferedSink1, realBufferedSink1);
      assertSame(bufferedSink1, bufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink3);
      
      boolean boolean0 = realBufferedSource2.request(9L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(boolean0);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(bufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink2);
      assertNotSame(bufferedSink1, realBufferedSink1);
      assertSame(bufferedSink1, bufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink3);
      
      // Undeclared exception!
      try { 
        realBufferedSource2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x62
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer1 = realBufferedSource1.buffer;
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource2);
      
      realBufferedSource2.close();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      
      Inflater inflater0 = new Inflater(false);
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSource0, inflater0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertNotNull(inflaterSource0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(inflaterSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource3);
      
      // Undeclared exception!
      try { 
        realBufferedSource2.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString0 = hashingSource1.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(byteString0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString1 = byteString0.md5();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(16, byteString1.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer1 = realBufferedSource1.buffer;
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource2);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      realBufferedSource1.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      
      Inflater inflater0 = new Inflater(false);
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSink0.buffer, inflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertNotNull(inflaterSource0);
      
      ByteString byteString2 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertNotNull(byteString2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertNotNull(realBufferedSource3);
      
      RealBufferedSource realBufferedSource4 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource1));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertNotNull(realBufferedSource4);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)1;
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)1}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals((-1), int0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(realBufferedSource0, realBufferedSource3);
      assertNotSame(realBufferedSource0, realBufferedSource4);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        realBufferedSource1.skip(1095216660480L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource1.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(hashingSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource2);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(gzipSink0);
      
      GzipSink gzipSink1 = new GzipSink(realBufferedSource1.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(gzipSink1.equals((Object)gzipSink0));
      assertNotNull(gzipSink1);
      
      Deflater deflater0 = gzipSink1.deflater();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(gzipSink1.equals((Object)gzipSink0));
      assertNotNull(deflater0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(gzipSink1, gzipSink0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSource2.buffer, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(gzipSink1.equals((Object)gzipSink0));
      assertNotNull(deflaterSink0);
      
      long long0 = realBufferedSource2.readAll(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertEquals(0L, long0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource3);
      
      realBufferedSource3.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource3);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource3, realBufferedSource0);
      assertNotSame(realBufferedSource3, realBufferedSource2);
      assertNotSame(realBufferedSource3, realBufferedSource1);
      
      RealBufferedSource realBufferedSource4 = new RealBufferedSource(realBufferedSource3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource2));
      assertNotNull(realBufferedSource4);
      
      // Undeclared exception!
      try { 
        realBufferedSource4.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-122);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte) (-122)}, byteArray0);
      assertFalse(boolean0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(797);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertNotNull(bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      
      Timeout timeout0 = realBufferedSink1.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(timeout0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertNotNull(realBufferedSink2);
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink3);
      
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink3));
      assertNotNull(hashingSink0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertNotSame(bufferedSink0, realBufferedSink2);
      assertNotSame(bufferedSink0, realBufferedSink3);
      assertSame(bufferedSink0, realBufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)80;
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertNotNull(byteString0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink0);
      
      hashingSource0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink0);
      
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString1.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString1, byteString0);
      
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(5, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(5, options0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertEquals((-1), int0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink0);
      
      boolean boolean1 = realBufferedSource0.closed;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte)80;
      long long0 = realBufferedSource0.readAll(realBufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(2L, long0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink1.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSource1);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotNull(inputStream0);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      try { 
        realBufferedSource1.readFully(byteArray1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString0 = hashingSource1.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(byteString0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      ByteString byteString1 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString1.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource2);
      
      String string0 = hashingSource1.toString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(string0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource3);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource3.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = realBufferedSource2.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource3);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource3);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource4 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource3));
      assertNotNull(realBufferedSource4);
      
      long long0 = realBufferedSource4.indexOf(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource4));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource3));
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(realBufferedSource1, realBufferedSource4);
      assertNotSame(realBufferedSource1, realBufferedSource3);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource3);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource4);
      assertNotSame(buffer1, buffer0);
      assertNotSame(realBufferedSource4, realBufferedSource0);
      assertNotSame(realBufferedSource4, realBufferedSource2);
      assertNotSame(realBufferedSource4, realBufferedSource1);
      assertNotSame(realBufferedSource4, realBufferedSource3);
      
      RealBufferedSource realBufferedSource5 = new RealBufferedSource(realBufferedSource4);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertFalse(realBufferedSource5.equals((Object)realBufferedSource4));
      assertFalse(realBufferedSource5.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource5.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource5.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource5.equals((Object)realBufferedSource2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource4));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource4.equals((Object)realBufferedSource3));
      assertNotNull(realBufferedSource5);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      RealBufferedSource realBufferedSource6 = new RealBufferedSource(realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource6.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource6.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource6.equals((Object)realBufferedSource5));
      assertFalse(realBufferedSource6.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource6.equals((Object)realBufferedSource4));
      assertFalse(realBufferedSource6.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource5));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertNotNull(realBufferedSource6);
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(4, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = realBufferedSource0.read(buffer0, (long) (byte)0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      Timeout timeout0 = realBufferedSink0.timeout();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(timeout0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertNotNull(realBufferedSink1);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertNotNull(realBufferedSink2);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertNotNull(hashingSink0);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Pipe pipe0 = new Pipe(797);
      assertNotNull(pipe0);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(realBufferedSource1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(hashingSource0, hashingSource1);
      
      hashingSource1.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(hashingSource0, hashingSource1);
      
      boolean boolean0 = realBufferedSource1.closed;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeIntLe(57);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotNull(timeout0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      long long0 = realBufferedSource0.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(9L, long0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(3, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      String string0 = realBufferedSource0.readUtf8();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      String string1 = realBufferedSource0.toString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("buffer([size=0])", string1);
      assertNotNull(string1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((long) 57, byteString0, 334, 57);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(3, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(boolean0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      boolean boolean1 = realBufferedSource0.closed;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
