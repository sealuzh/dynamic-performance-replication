/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:38:13 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(3, "value ", "value ", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(90);
      classWriter0.visitInnerClass("", "", "k aiM6u~v", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(543);
      classWriter0.visitInnerClass("zBlqx7O(yOw5i,g", "zBlqx7O(yOw5i,g", "zBlqx7O(yOw5i,g", (-4329));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251658240);
      int int0 = classWriter0.newUTF8("#0[K}FKV5f");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(701);
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      int int0 = classWriter0.newNameType("%v3R)lk3X", "%v3R)lk3X");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1688));
      Item item0 = classWriter0.newMethodItem("Ck}CRS7", "", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-635));
      Item item0 = classWriter0.newMethodItem("'p5O4&#7H^(j*b:bJ7", "'p5O4&#7H^(j*b:bJ7", "'p5O4&#7H^(j*b:bJ7", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      Item item0 = classWriter0.newMethodItem("", "", ")Qp&V", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1641);
      int int0 = classWriter0.newMethod("AnnotationDefault", "", "", true);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      // Undeclared exception!
      try { 
        classWriter0.newMethod((String) null, "TcatTmmbS`M98/ku>v", "Q", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3730));
      Item item0 = classWriter0.newLong((byte) (-60));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3730));
      Item item0 = classWriter0.newInteger(666);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(701);
      Item item0 = classWriter0.newFloat(0.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-170));
      Item item0 = classWriter0.newFloat(1.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(537);
      Item item0 = classWriter0.newFieldItem("", "J", "");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4567);
      int int0 = classWriter0.newField("V~+VAK`<k1\bM#Q", "value ", "ySE*7t.bA?>YeJ");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2684);
      int int0 = classWriter0.newField("", "", "u");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.NotFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 3038);
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1688));
      Item item0 = classWriter0.newDouble((-1688));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1688));
      Item item0 = classWriter0.newClassItem("C|");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1026));
      int int0 = classWriter0.newClass("AV3C?lJwwXck=C}");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(370);
      int int0 = classWriter0.newClass("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(90);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(4, (-2187));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251658240);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "org.apache.commons.io.filefilter.DelegateFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(187);
      // Undeclared exception!
      try { 
        classWriter0.visitOuterClass((String) null, "", "KBy-YWAe 3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-982));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "value ";
      stringArray0[1] = "wheel.asm.Type";
      stringArray0[2] = "";
      stringArray0[3] = "wheel.asm.Type";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(2398, "", "wheel.asm.Type", "", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1641);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(5, (String) null, (String) null, "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.visitField(31, "Yoj", (String) null, "", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(370);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.visitField(666, "Deprecated", "|.Y]P(oqyS0)wB8@", "Deprecated", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@6a55f9b2
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3730));
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, "ee:^k~p08.e8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1791));
      // Undeclared exception!
      try { 
        classWriter0.newMethod("", (String) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter((-406));
      // Undeclared exception!
      try { 
        classWriter0.newConst(fileSystemHandling0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.testdata.FileSystemHandling@7151f6e
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      // Undeclared exception!
      try { 
        classWriter0.newClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.addType("t|kKA#sMt)h%f+X;\"");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1172, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1172
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1172);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("wheel.asm.Attribute", "RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'RuntimeVisibleAnnotations.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      int int0 = classWriter0.newNameType("", "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter");
      assertEquals("org.apache.commons.io.filefilter.OrFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Label", "wheel.asm.FieldWriter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1278);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addType("-SB8fgG_~r");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      classWriter0.addUninitializedType("RuntimeVisibleAnnotations", 34);
      int int0 = classWriter0.addUninitializedType("RuntimeVisibleAnnotations", (-1));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(218);
      int int0 = classWriter0.addUninitializedType("", 218);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("", 218);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      int int0 = classWriter0.addType("t|kKA#sMt)h%f+X;\"");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("t|kKA#sMt)h%f+X;\"");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(537);
      classWriter0.visitOuterClass("", "", "");
      Item item0 = classWriter0.newFieldItem("void", "", "");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      classWriter0.newConst("");
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-1721), "", "", "zF@_)dD;x~d$,)", "");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251658240);
      Item item0 = classWriter0.newDouble(251658240);
      Item item1 = classWriter0.newDouble(251658240);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      Item item0 = classWriter0.newLong(2047);
      Item item1 = classWriter0.newLong(2047);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-65));
      Item item0 = classWriter0.newFloat((-1.0F));
      Item item1 = classWriter0.newFloat((-1.0F));
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-406));
      int int0 = classWriter0.newMethod("Wv4 f", "Wv4 f", "Wv4 f", false);
      assertEquals(4, int0);
      
      int int1 = classWriter0.newMethod("Wv4 f", "Wv4 f", "Wv4 f", false);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.NotFileFilter");
      ClassWriter classWriter0 = new ClassWriter(701);
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 285212682);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4347));
      Class<Short> class0 = Short.class;
      Type type0 = Type.getType(class0);
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-170));
      Item item0 = classWriter0.newFieldItem("<;& S8c", "<;& S8c", "<;& S8c");
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@9
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(370);
      Double double0 = new Double(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "", "", double0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      Long long0 = new Long(11);
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-1), "Invalid IOCase name: ", "P", "wheel.asm.Type", long0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4347));
      Float float0 = new Float((float) 10);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(8, "java/lang/Object", "", "InnerClasses", float0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(370);
      Boolean boolean0 = Boolean.FALSE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-982));
      Boolean boolean0 = Boolean.TRUE;
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-982), "", "value ", "<4KZ+B", boolean0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1172);
      Short short0 = new Short((short) (-1295));
      Item item0 = classWriter0.newConstItem(short0);
      Item item1 = classWriter0.newInteger((short) (-1295));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      Character character0 = Character.valueOf(':');
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      Byte byte0 = new Byte((byte)113);
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1688));
      int int0 = classWriter0.newConst(classWriter0.COMPUTE_MAXS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(543);
      Attribute attribute0 = new Attribute("zBlqx7O(yOw5i,g");
      byte[] byteArray0 = new byte[9];
      attribute0.value = byteArray0;
      classWriter0.visitAttribute(attribute0);
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(57, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      classWriter0.visitAnnotation("%v3R)lk3X", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251658240);
      classWriter0.visitAnnotation("R", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(68, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1310);
      classWriter0.visitInnerClass("", "", "", 277);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(61, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4567);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",`aK\\";
      stringArray0[1] = "int";
      stringArray0[2] = ",`aK\\";
      stringArray0[3] = ",`aK\\";
      stringArray0[4] = "ySE*7t.bA?>YeJ";
      classWriter0.visit((-1025), (-1025), ",`aK\\", ",`aK\\", ",`aK\\", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(114, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      classWriter0.visitSource("}_J@|QW<esF$UOV", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(92, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "zF@_)dD;x~d$,)";
      classWriter0.visit(41, 34, "", "", "zF@_)dD;x~d$,)", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "h^g{UcD]f:dtnBo";
      stringArray0[1] = "RuntimeVisibleAnnotations";
      stringArray0[2] = "h^g{UcD]f:dtnBo";
      stringArray0[3] = "RuntimeVisibleAnnotations";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "h^g{UcD]f:dtnBo";
      stringArray0[7] = "RuntimeVisibleAnnotations";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (byte)113, "", "h^g{UcD]f:dtnBo", "h^g{UcD]f:dtnBo", stringArray0, false, false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(147, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(640);
      classWriter0.visitField(640, "R9o5", "R9o5", "{P@%}P;uQTI&1", "wheel.asm.ClassAdapter");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(127, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-170));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 285212682);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(251658240);
      classWriter0.visitInnerClass("n", "n", "#0[K}FKV5f", 251658240);
      classWriter0.visitInnerClass("#0[K}FKV5f", "n", (String) null, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.NotFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 3038);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(218);
      classWriter0.visitOuterClass("The list of suffixes must not be null", "", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      classWriter0.visitOuterClass("int", "EnclosingMethod", "+nra^pwm^,;?");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      classWriter0.visitOuterClass("%v3R)lk3X", (String) null, "wheel.asm.Type");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(67, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-170));
      classWriter0.visitSource("", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4347));
      classWriter0.visitSource("{q|5<1V@W(':QPIB8Pb", "java/lang/Object");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      classWriter0.visitSource((String) null, ")Qp&V");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4347));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java/lang/Object";
      stringArray0[1] = "InnerClasses";
      stringArray0[2] = "InnerClasses";
      stringArray0[3] = "InnerClasses";
      classWriter0.visit(6, (-827), "x/@.ri0/@", "", "", stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(640);
      classWriter0.visit(285212676, (-1277), "R9o5", "wheel.asm.ClassAdapter", "pv)^^9i}.ij\"qzvhY9_", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(141, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        classWriter0.visit(17, 17, "", "", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4347));
      Class<Short> class0 = Short.TYPE;
      Type type0 = Type.getType(class0);
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.NotFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 3038);
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      // Undeclared exception!
      try { 
        classWriter0.newField("SC3JegE]cp1.!]$", (String) null, "SC3JegE]cp1.!]$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
