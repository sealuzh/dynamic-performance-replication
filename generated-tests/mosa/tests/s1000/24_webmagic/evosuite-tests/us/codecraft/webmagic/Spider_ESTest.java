/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:18:23 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setSpawnUrl(false);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qH%^$");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.downloader((Downloader) null);
      spider0.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("us.codecraft.webmagic.Spider$Status");
      requestArray0[0] = request0;
      Spider spider1 = spider0.clearPipeline();
      spider1.thread(514);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.commonPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.stop();
      spider1.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      QueueScheduler queueScheduler1 = new QueueScheduler();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<SpiderListener> list1 = spider1.getAll((Collection<String>) list0);
      Spider spider2 = spider0.setSpiderListeners(list1);
      spider2.spawnUrl = false;
      spider2.scheduler(queueScheduler1);
      assertFalse(spider0.isSpawnUrl());
      
      spider0.getAll((Collection<String>) list0);
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.setUUID("5l% E%\"k-");
      Spider spider3 = spider2.scheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider3.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u.codecraft.webmagic.Spider$Staus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[17];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      String string0 = "5l% E%\"k-";
      Spider spider2 = spider1.setUUID("5l% E%\"k-");
      Spider spider3 = spider2.scheduler(queueScheduler0);
      spider3.setExitWhenComplete(false);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setSpawnUrl(true);
      spider2.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Tl:@'%I");
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 2);
      int int0 = spider0.getThreadAlive();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, int0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider0.startRequest(linkedList0);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      spider1.addPipeline(collectorPipeline0);
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2715);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-1678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qH%^$");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.setCharset("qH%^$");
      spider0.sleep(397);
      requestArray0[1] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      spider2.pageProcessor = (PageProcessor) simplePageProcessor0;
      assertTrue(spider2.isExitWhenComplete());
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider1.getAll((Collection<String>) linkedTransferQueue0);
      List<String> list0 = new LinkedList<String>();
      Spider spider3 = spider0.startUrls(list0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("{bDG.{wU\":7!wWY/;Y");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider1 = spider0.scheduler(queueScheduler0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(true);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      
      Spider spider2 = spider1.setUUID("wrong proto type map ");
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      
      spider2.stop();
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider3 = spider1.scheduler(queueScheduler0);
      assertNotNull(spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      
      boolean boolean0 = spider3.isSpawnUrl();
      assertTrue(boolean0);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      
      boolean boolean1 = spider2.isSpawnUrl();
      assertTrue(boolean1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertNotNull(queueScheduler1);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      
      QueueScheduler queueScheduler2 = new QueueScheduler();
      assertNotNull(queueScheduler2);
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      
      Spider spider4 = spider1.scheduler(queueScheduler0);
      assertNotNull(spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertNotSame(queueScheduler0, queueScheduler1);
      assertNotSame(queueScheduler0, queueScheduler2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertFalse(queueScheduler0.equals((Object)queueScheduler1));
      assertFalse(queueScheduler0.equals((Object)queueScheduler2));
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.downloader((Downloader) null);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      Spider spider3 = spider1.setPipelines(linkedList1);
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertNotSame(linkedList1, linkedList0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, linkedList1.size());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      
      FilePipeline filePipeline0 = new FilePipeline();
      assertNotNull(filePipeline0);
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      
      Spider spider4 = spider0.pipeline(filePipeline0);
      assertNotNull(spider4);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      
      Spider spider5 = spider4.thread(119);
      assertNotNull(spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isExitWhenComplete());
      
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      Request request0 = new Request("us.codecraft.webmagic.Spider$Status");
      assertNotNull(request0);
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals("us.codecraft.webmagic.Spider$Status", request0.getUrl());
      assertNull(request0.getCharset());
      assertEquals(0L, request0.getPriority());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      
      Spider spider2 = spider1.setSpawnUrl(true);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      Spider spider3 = spider1.setSpawnUrl(false);
      assertNotNull(spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      
      Spider spider4 = new Spider(simplePageProcessor0);
      assertNotNull(spider4);
      assertFalse(spider4.equals((Object)spider2));
      assertFalse(spider4.equals((Object)spider0));
      assertFalse(spider4.equals((Object)spider1));
      assertFalse(spider4.equals((Object)spider3));
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      
      spider4.stop();
      assertNotSame(spider4, spider2);
      assertNotSame(spider4, spider0);
      assertNotSame(spider4, spider1);
      assertNotSame(spider4, spider3);
      assertFalse(spider4.equals((Object)spider2));
      assertFalse(spider4.equals((Object)spider0));
      assertFalse(spider4.equals((Object)spider1));
      assertFalse(spider4.equals((Object)spider3));
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertNotNull(queueScheduler1);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      
      Spider spider5 = spider0.scheduler(queueScheduler1);
      assertNotNull(spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertNotSame(spider0, spider4);
      assertNotSame(queueScheduler1, queueScheduler0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertNotSame(spider5, spider4);
      assertFalse(spider0.equals((Object)spider4));
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertFalse(spider5.equals((Object)spider4));
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      
      Spider spider2 = spider1.setSpawnUrl(true);
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      spider2.stop();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      boolean boolean0 = spider2.isSpawnUrl();
      assertTrue(boolean0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      spider2.start();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      Spider spider3 = spider2.setScheduler(queueScheduler0);
      assertNotNull(spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      spider2.pageProcessor = (PageProcessor) simplePageProcessor0;
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      assertNotNull(linkedTransferQueue0);
      
      boolean boolean0 = linkedTransferQueue0.add("5@dun,");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      assertNotNull(resultItemsCollectorPipeline0);
      
      Spider spider3 = spider0.addPipeline(resultItemsCollectorPipeline0);
      assertNotNull(spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      assertNotNull(spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      
      Spider spider5 = spider0.setDownloader(phantomJSDownloader0);
      assertNotNull(spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      
      Spider spider6 = spider2.setExitWhenComplete(false);
      assertNotNull(spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isSpawnUrl());
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider7 = spider6.setPipelines(linkedList0);
      assertNotNull(spider7);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider0, spider7);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider7);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider7);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      assertSame(spider6, spider7);
      assertSame(spider7, spider2);
      assertSame(spider7, spider4);
      assertSame(spider7, spider3);
      assertSame(spider7, spider0);
      assertSame(spider7, spider5);
      assertSame(spider7, spider1);
      assertSame(spider7, spider6);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider6.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, spider7.getPageCount());
      assertFalse(spider7.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      
      Spider.Status spider_Status0 = Spider.Status.Running;
      assertEquals(Spider.Status.Running, spider_Status0);
      
      int int0 = spider_Status0.getValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A");
      assertNotNull(fileCacheQueueScheduler0);
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      assertNotNull(duplicateRemovedScheduler0);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      
      Spider spider4 = spider2.setPipelines((List<Pipeline>) null);
      assertNotNull(spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      
      Spider spider5 = spider4.clearPipeline();
      assertNotNull(spider5);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      
      Spider spider6 = spider4.setUUID("9$5KO9?0Uy7h}Kd^E");
      assertNotNull(spider6);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider6);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider6);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      
      Site site0 = spider4.getSite();
      assertNotNull(site0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider1, spider6);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider6);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider4, spider6);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0, site0.getRetryTimes());
      assertFalse(site0.isDisableCookieManagement());
      assertEquals(0, site0.getCycleRetryTimes());
      assertNull(site0.getUserAgent());
      assertNull(site0.getCharset());
      assertEquals(1000, site0.getRetrySleepTime());
      assertEquals(5000, site0.getSleepTime());
      assertNull(site0.getDomain());
      assertTrue(site0.isUseGzip());
      assertEquals(5000, site0.getTimeOut());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      assertNotNull(jsonFilePipeline0);
      assertEquals("/", jsonFilePipeline0.getPath());
      
      File file0 = jsonFilePipeline0.getFile("oF6 L\"|NUU_cA");
      assertNotNull(file0);
      assertEquals("/", jsonFilePipeline0.getPath());
      assertNull(file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals("oF6 L\"|NUU_cA", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("oF6 L\"|NUU_cA", file0.toString());
      
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("/", jsonFilePipeline0.getPath());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      String[] stringArray0 = new String[0];
      Spider spider2 = spider0.addUrl(stringArray0);
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setUUID("%4{clBFz");
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      
      Spider spider4 = spider3.scheduler((Scheduler) null);
      assertNotNull(spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      assertNotNull(fileCacheQueueScheduler0);
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      assertNotNull(duplicateRemovedScheduler0);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      
      Spider spider2 = spider0.scheduler(fileCacheQueueScheduler0);
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      assertNotNull(linkedTransferQueue0);
      
      List<Locale.LanguageRange> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      assertNotNull(list0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertNotNull(synchronousQueue0);
      
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      assertNotNull(orSelector0);
      
      List<String> list1 = orSelector0.selectList("A");
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Locale.LanguageRange> list2 = spider2.getAll((Collection<String>) list1);
      assertNotNull(list2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<String> list3 = Locale.filterTags(list2, (Collection<String>) linkedTransferQueue0);
      assertNotNull(list3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list4 = Locale.filterTags(list2, (Collection<String>) list3, locale_FilteringMode0);
      assertNotNull(list4);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      Spider spider3 = spider2.startUrls(list4);
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list4));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      Json json0 = new Json("A");
      assertNotNull(json0);
      
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      assertNotNull(spider4);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list4));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      
      CollectorPipeline collectorPipeline0 = spider4.getCollectorPipeline();
      assertNotNull(collectorPipeline0);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list4));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      
      Spider spider5 = spider2.pipeline(collectorPipeline0);
      assertNotNull(spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list4));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider5.getStatus());
      
      Spider spider6 = spider5.thread(2110);
      assertNotNull(spider6);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider6);
      assertSame(spider5, spider3);
      assertSame(spider6, spider4);
      assertSame(spider6, spider0);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider1);
      assertSame(spider6, spider3);
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list4));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider5.getStatus());
      assertEquals(Spider.Status.Stopped, spider6.getStatus());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      
      spider5.close();
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertSame(spider3, spider6);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider5);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider6);
      assertSame(spider5, spider3);
      assertTrue(list1.equals((Object)list3));
      assertTrue(list1.equals((Object)list4));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider5.getStatus());
      
      Spider.Status spider_Status0 = Spider.Status.Running;
      assertEquals(Spider.Status.Running, spider_Status0);
      
      int int0 = spider_Status0.getValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      
      Spider spider2 = spider1.setSpawnUrl(true);
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      spider2.stop();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      
      Page page1 = page0.setSkip(true);
      assertNotNull(page1);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertNull(page1.getCharset());
      
      Page page2 = page1.setSkip(true);
      assertNotNull(page2);
      assertSame(page0, page2);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertSame(page1, page2);
      assertSame(page2, page1);
      assertSame(page2, page0);
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getCharset());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertNull(page1.getCharset());
      assertNull(page2.getCharset());
      assertTrue(page2.isDownloadSuccess());
      assertNull(page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page2, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Tl:@'%I");
      assertNotNull(jsonFilePipeline0);
      assertEquals("Tl:@'%I/", jsonFilePipeline0.getPath());
      
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals("Tl:@'%I/", jsonFilePipeline0.getPath());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      assertNotNull(linkedBlockingQueue0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 2);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals("Tl:@'%I/", jsonFilePipeline0.getPath());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      
      Page page1 = page0.setSkip(true);
      assertNotNull(page1);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page1.getRawText());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      
      spider1.extractAndAddRequests(page1, false);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals("Tl:@'%I/", jsonFilePipeline0.getPath());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page1.getRawText());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1470);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "us.codecraft.webmagic.Spider$Status");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider3 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      
      Page page0 = Page.fail();
      assertNotNull(page0);
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertFalse(page0.isDownloadSuccess());
      
      Page page1 = page0.setRawText((String) null);
      assertNotNull(page1);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertFalse(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      
      Page page2 = page1.setSkip(true);
      assertNotNull(page2);
      assertSame(page0, page2);
      assertSame(page0, page1);
      assertSame(page1, page2);
      assertSame(page1, page0);
      assertSame(page2, page1);
      assertSame(page2, page0);
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertFalse(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertNull(page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      assertNull(page2.getCharset());
      assertFalse(page2.isDownloadSuccess());
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      assertNotNull(linkedTransferQueue0);
      
      List<Locale.LanguageRange> list0 = spider0.getAll((Collection<String>) linkedTransferQueue0);
      assertNotNull(list0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      assertNotNull(synchronousQueue0);
      
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) synchronousQueue0);
      assertNotNull(list1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Spider spider4 = spider1.startUrls(list1);
      assertNotNull(spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      spider3.checkIfRunning();
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(1470);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isSpawnUrl());
      
      Spider spider2 = spider1.setSpawnUrl(true);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      spider2.stop();
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      boolean boolean0 = spider2.isSpawnUrl();
      assertTrue(boolean0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertNotNull(queueScheduler1);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      
      Spider spider3 = spider1.scheduler(queueScheduler0);
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertNotSame(queueScheduler0, queueScheduler1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertFalse(queueScheduler0.equals((Object)queueScheduler1));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      
      Spider spider4 = spider0.setPipelines((List<Pipeline>) null);
      assertNotNull(spider4);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      
      boolean boolean2 = spider3.isSpawnUrl();
      assertTrue(boolean2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertNotSame(queueScheduler0, queueScheduler1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertFalse(queueScheduler0.equals((Object)queueScheduler1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      
      QueueScheduler queueScheduler2 = new QueueScheduler();
      assertNotNull(queueScheduler2);
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      
      Spider spider5 = spider2.scheduler(queueScheduler1);
      assertNotNull(spider5);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertNotSame(queueScheduler1, queueScheduler0);
      assertNotSame(queueScheduler1, queueScheduler2);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertFalse(queueScheduler1.equals((Object)queueScheduler2));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      
      Spider spider6 = spider5.scheduler(queueScheduler2);
      assertNotNull(spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider6);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider6);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertNotSame(queueScheduler1, queueScheduler0);
      assertNotSame(queueScheduler1, queueScheduler2);
      assertNotSame(queueScheduler2, queueScheduler1);
      assertNotSame(queueScheduler2, queueScheduler0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider6);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertFalse(queueScheduler1.equals((Object)queueScheduler2));
      assertFalse(queueScheduler2.equals((Object)queueScheduler1));
      assertFalse(queueScheduler2.equals((Object)queueScheduler0));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider6.isSpawnUrl());
      
      spider0.checkIfRunning();
      assertSame(spider0, spider5);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(0);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      int int0 = spider_Status0.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      
      Spider spider2 = spider1.setSpawnUrl(true);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      spider2.stop();
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      boolean boolean0 = spider2.isSpawnUrl();
      assertTrue(boolean0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertNotNull(queueScheduler1);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      
      Scheduler scheduler0 = spider1.getScheduler();
      assertNotNull(scheduler0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertNotSame(scheduler0, queueScheduler1);
      assertNotSame(scheduler0, queueScheduler0);
      assertFalse(scheduler0.equals((Object)queueScheduler1));
      assertFalse(scheduler0.equals((Object)queueScheduler0));
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      assertNotNull(jsonFilePipeline0);
      assertEquals("/", jsonFilePipeline0.getPath());
      
      Spider spider4 = spider1.addPipeline(jsonFilePipeline0);
      assertNotNull(spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals("/", jsonFilePipeline0.getPath());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider0.addRequest(requestArray0);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      Spider spider3 = spider2.thread(514);
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      assertNotNull(linkedTransferQueue0);
      
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      spider2.pageProcessor = (PageProcessor) simplePageProcessor0;
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      assertNotNull(linkedTransferQueue0);
      
      List<Locale.LanguageRange> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      assertNotNull(list0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Spider spider3 = spider0.addPipeline((Pipeline) null);
      assertNotNull(spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      Spider spider2 = spider1.setSpawnUrl(true);
      assertNotNull(spider2);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      spider2.stop();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      boolean boolean0 = spider2.isSpawnUrl();
      assertTrue(boolean0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertNotNull(queueScheduler1);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      
      Spider spider3 = spider1.scheduler(queueScheduler0);
      assertNotNull(spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertNotSame(queueScheduler0, queueScheduler1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertFalse(queueScheduler0.equals((Object)queueScheduler1));
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      
      Spider spider4 = spider0.scheduler(queueScheduler1);
      assertNotNull(spider4);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertNotSame(queueScheduler1, queueScheduler0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      
      boolean boolean2 = spider4.isExitWhenComplete();
      assertTrue(boolean2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertNotSame(queueScheduler1, queueScheduler0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertNotNull(spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("bvh)gChOD4y) vx7yNX", "bvh)gChOD4y) vx7yNX");
      assertNotNull(phantomJSDownloader0);
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertNotNull(spider1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      hashSetDuplicateRemover0.resetDuplicateCheck(spider0);
      assertSame(spider0, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      Page page0 = new Page();
      assertNotNull(page0);
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      
      Page page1 = page0.setSkip(true);
      assertNotNull(page1);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertNull(page1.getCharset());
      
      List<Request> list0 = page1.getTargetRequests();
      assertNotNull(list0);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertNull(page1.getCharset());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Spider spider2 = spider1.startRequest(list0);
      assertNotNull(spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertNull(page1.getRawText());
      assertNull(page1.getCharset());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("bvh)gChOD4y) vx7yNX", "");
      assertNotNull(phantomJSDownloader1);
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      
      Spider spider3 = spider1.clearPipeline();
      assertNotNull(spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertNotSame(phantomJSDownloader0, phantomJSDownloader1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertFalse(phantomJSDownloader0.equals((Object)phantomJSDownloader1));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover1);
      assertFalse(hashSetDuplicateRemover1.equals((Object)hashSetDuplicateRemover0));
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      assertNotNull(linkedTransferQueue0);
      
      List<Locale.LanguageRange> list1 = spider3.getAll((Collection<String>) linkedTransferQueue0);
      assertNotNull(list1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertNotSame(phantomJSDownloader0, phantomJSDownloader1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertFalse(phantomJSDownloader0.equals((Object)phantomJSDownloader1));
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Spider spider4 = spider3.startUrls(linkedList0);
      assertNotNull(spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertNotSame(phantomJSDownloader0, phantomJSDownloader1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertFalse(phantomJSDownloader0.equals((Object)phantomJSDownloader1));
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0, linkedList0.size());
  }
}
