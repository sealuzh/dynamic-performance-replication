/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 04:10:14 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.sql.Date;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jSONArray0.clear();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.getBoolean(544);
      jSONArray1.getShortValue(989);
      jSONArray0.getLong(3183);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSONArray1.toArray();
      jSONArray1.getJSONObject(544);
      jSONArray0.getBigDecimal(3205);
      JSONArray jSONArray4 = jSONArray3.fluentAdd((int) (short)0, (Object) "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      serializeConfig0.setTypeKey("unclosed.str");
      jSONArray4.toArray();
      serializeConfig0.setAsmEnable(false);
      JSON.toJSON((Object) "1.2.46", serializeConfig0);
      jSONArray4.getLong(3183);
      short short0 = jSONArray1.getShortValue(989);
      assertEquals((short)0, short0);
      
      jSONArray2.retainAll(jSONArray3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      int int0 = jSONArray3.indexOf(locale_FilteringMode0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = null;
      jSONArray0.setComponentType((Type) null);
      jSONArray0.contains((Object) null);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<Object> class0 = Object.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("0XO", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("0XO", class0, class0, (Type) null, (Field) null, 964, (-1620), 964);
      Class<Annotation> class1 = Annotation.class;
      fieldInfo0.getAnnation(class1);
      // Undeclared exception!
      try { 
        jSONArray0.add(964, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 964, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(544, concurrentSkipListMap0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.DEFFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray3.forEach(consumer0);
      jSONArray3.getDouble(0);
      jSONArray3.isEmpty();
      jSONArray2.getByte(544);
      jSONArray1.getDouble(989);
      jSONArray0.isEmpty();
      jSONArray3.getByte(544);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray4 = jSONArray3.fluentRemove(1012);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JSONArray jSONArray5 = new JSONArray();
      assertTrue(jSONArray5.isEmpty());
      
      boolean boolean0 = jSONArray3.isEmpty();
      jSONArray4.getObject(989, (Type) null);
      jSONArray5.set(0, (Object) null);
      Object object0 = new Object();
      jSONArray3.getShortValue(544);
      jSONArray1.getTimestamp(0);
      jSONArray0.getObject(1012, (Type) null);
      boolean boolean1 = jSONArray1.equals(fileSystemHandling0);
      assertFalse(jSONArray0.isEmpty());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      JSONArray jSONArray1 = jSONArray0.fluentSet(544, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray4.getByteValue(989);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSONArray2.getFloat(989);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray3.getByteValue(0);
      jSONArray3.getLong(544);
      jSONArray4.toArray();
      jSONArray3.getJSONObject(0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      jSONArray0.getBigDecimal(989);
      jSONArray0.getLong((byte)0);
      jSONArray0.remove(989);
      Short short0 = jSONArray4.getShort(544);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(544, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      jSONArray4.getDouble(0);
      jSONArray4.isEmpty();
      jSONArray3.getByte(544);
      jSONArray1.getDouble(66);
      jSONArray0.isEmpty();
      jSONArray4.getByte(544);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray5 = jSONArray4.fluentRemove(1012);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JSONArray jSONArray6 = new JSONArray();
      assertTrue(jSONArray6.isEmpty());
      
      jSONArray4.isEmpty();
      jSONArray5.getObject(989, (Type) null);
      jSONArray6.set(0, (Object) null);
      Object object0 = new Object();
      short short0 = jSONArray4.getShortValue(544);
      assertFalse(jSONArray0.isEmpty());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(544, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray3.getByte(544);
      JSONArray jSONArray5 = jSONArray1.fluentAdd(544, (Object) null);
      jSONArray1.getDouble(66);
      jSONArray0.isEmpty();
      jSONArray4.getByte(544);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray6 = jSONArray4.fluentRemove(1012);
      jSONArray5.remove(0);
      jSONArray0.getLong(544);
      jSONArray6.add((Object) concurrentSkipListMap0);
      jSONArray1.getInteger(989);
      Class<JSONObject> class0 = JSONObject.class;
      JSONArray jSONArray7 = jSONArray5.fluentRemove(544);
      // Undeclared exception!
      try { 
        jSONArray7.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.getBoolean(544);
      jSONArray1.getShortValue(989);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getBigInteger(989);
      int int0 = (-226);
      jSONArray1.getDate(3183);
      jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.getDouble(5813);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5813, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1023, "@type");
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[3] = serializerFeature2;
      serializeConfig0.clearSerializers();
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[4] = serializerFeature3;
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.SupportNonPublicField;
      JSON.toJSONString((Object) null, serializerFeatureArray0);
      featureArray0[1] = feature0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = JSON.DEFAULT_TYPE_KEY;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(989);
      jSONArray0.getJSONObject(16);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 989);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(1023);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      int int0 = 0;
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean(544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 544, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(1023, "@type");
      SerializeConfig serializeConfig0 = new SerializeConfig(1, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(1023);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(1023, "@type");
      int int0 = 1023;
      jSONArray0.set(1023, (Object) null);
      Type type0 = jSONArray0.componentType;
      JSONArray jSONArray1 = new JSONArray();
      int int1 = 989;
      jSONArray1.set(1023, "@type");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap1 = new ConcurrentSkipListMap<String, Field>((Map<? extends String, ? extends Field>) concurrentSkipListMap0);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentSkipListMap1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3198, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      jSONArray0.getBoolean(544);
      MockDate mockDate0 = new MockDate(3198, 989, 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.set(0, (Object) null);
      jSONArray3.size();
      jSONArray0.getShort(0);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((-2814));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.fluentAddAll((Collection<?>) jSONArray3);
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray0.getRelatedArray();
      jSONArray1.fluentAdd((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getSqlDate(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      JSONArray jSONArray5 = jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray1.toJSONString();
      jSONArray5.getByte(544);
      jSONArray1.getDouble(66);
      jSONArray0.isEmpty();
      jSONArray4.getByte(544);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray6 = jSONArray4.fluentRemove(1012);
      jSONArray6.fluentRemove(544);
      jSONArray6.get(2467);
      Class<InputStream> class0 = InputStream.class;
      Class<JSONArray> class1 = JSONArray.class;
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("[OP!:O[#h}DYXC:pk<g", class0, class1, class1, (Field) null, 544, (-3552), 2467);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      jSONArray2.setComponentType(type0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      JSONArray jSONArray5 = jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray5.getByte(544);
      jSONArray1.getDouble(66);
      jSONArray0.isEmpty();
      jSONArray4.getByte(544);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray6 = jSONArray4.fluentRemove(1012);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JSONArray jSONArray7 = new JSONArray();
      assertTrue(jSONArray7.isEmpty());
      
      jSONArray4.isEmpty();
      jSONArray6.getObject(1012, (Type) null);
      jSONArray1.get(0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.relatedArray = (Object) "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7MTTy");
      jSONArray3.containsAll(jSONArray4);
      JSONArray jSONArray5 = new JSONArray(1839);
      JSONArray jSONArray6 = jSONArray1.fluentAdd((Object) "com.alibaba.fastjson.JSONArray");
      jSONArray3.getFloat(989);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONArray4.setRelatedArray(pipedInputStream0);
      JSONArray jSONArray7 = jSONArray0.fluentRetainAll(jSONArray6);
      JSONArray jSONArray8 = jSONArray1.fluentAdd(3174, (Object) jSONArray7);
      jSONArray8.getTimestamp(989);
      int int0 = jSONArray1.size();
      assertEquals(6440, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(1023, "@type");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      int int0 = 1696;
      JSONObject jSONObject0 = new JSONObject(1696);
      Collection<Object> collection0 = jSONObject0.values();
      jSONArray0.addAll(1023, collection0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      jSONArray0.containsAll(collection0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray5 = jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.relatedArray = (Object) "";
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray5.getByte(544);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray6 = jSONArray5.fluentRemove(1561);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JSONArray jSONArray7 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray7, class0);
      assertTrue(jSONArray7.isEmpty());
      
      JSONArray jSONArray8 = jSONArray4.fluentAddAll(989, (Collection<?>) jSONArray6);
      jSONArray8.isEmpty();
      jSONArray0.getObject(5, (Type) null);
      jSONArray0.toArray();
      jSONArray1.getRelatedArray();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray5 = jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.relatedArray = (Object) "";
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray5.getByte(544);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray6 = jSONArray5.fluentRemove(1561);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JSONArray jSONArray7 = new JSONArray();
      assertTrue(jSONArray7.isEmpty());
      
      JSONArray jSONArray8 = jSONArray4.fluentAddAll(989, (Collection<?>) jSONArray6);
      jSONArray8.isEmpty();
      jSONArray0.getObject(5, (Type) null);
      jSONArray0.toArray();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      jSONArray0.contains((Object) null);
      int int0 = 1;
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      int int0 = 3225;
      JSONArray jSONArray5 = jSONArray2.fluentRemove(3225);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray5.getByte(544);
      jSONArray4.getBigDecimal(3919);
      jSONArray3.getByteValue(289);
      jSONArray1.getFloat(989);
      jSONArray0.fluentAdd(989, (Object) fileSystemHandling0);
      jSONArray2.remove(544);
      jSONArray1.getLong(989);
      jSONArray1.fluentClear();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(909);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Class<MockDate> class0 = MockDate.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) "@type");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll((Collection<?>) jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll(0, (Collection<?>) jSONArray1);
      jSONArray2.fluentAdd((Object) jSONArray0);
      jSONArray4.fluentRetainAll(jSONArray3);
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      ConcurrentSkipListMap<String, Field>[] concurrentSkipListMapArray0 = (ConcurrentSkipListMap<String, Field>[]) Array.newInstance(ConcurrentSkipListMap.class, 7);
      FileSystemHandling.shouldAllThrowIOExceptions();
      concurrentSkipListMapArray0[0] = concurrentSkipListMap0;
      concurrentSkipListMapArray0[2] = concurrentSkipListMap0;
      concurrentSkipListMapArray0[5] = concurrentSkipListMap0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      jSONArray0.fluentRemoveAll(linkedList0);
      jSONArray0.retainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(4608);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4608, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(1023, "@type");
      SerializeConfig serializeConfig0 = new SerializeConfig(1, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, serializerFeatureArray0);
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      jSONArray0.spliterator();
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.getString(1023);
      PipedInputStream pipedInputStream0 = new PipedInputStream(989);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      jSONArray0.getJSONObject(16);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",OY.", parserConfig0, (-1414));
      jSONArray0.getIntValue(61);
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintStream mockPrintStream0 = new MockPrintStream("@type");
      Charset charset0 = null;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      jSONArray0.spliterator();
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.getString(11);
      PipedInputStream pipedInputStream0 = new PipedInputStream(989);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) dataInputStream1);
      // Undeclared exception!
      try { 
        jSONArray1.addAll(1693, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1693, Size: 1026
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      jSONArray0.spliterator();
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.getString(11);
      PipedInputStream pipedInputStream0 = new PipedInputStream(989);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      jSONArray0.getJSONObject(16);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray0.isEmpty();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1414), (Type) parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3210);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JSONArray jSONArray4 = new JSONArray();
      jSONArray2.add((Object) jSONArray4);
      JSONArray jSONArray5 = jSONArray3.fluentRemove((Object) bufferedInputStream0);
      jSONArray5.getJSONObject(3182);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray4.fluentSet(3186, concurrentSkipListMap0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null, parserConfig0, 989);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(2960, true);
      Collection<Object> collection0 = jSONObject0.values();
      jSONArray0.fluentAddAll(collection0);
      TypeReference<String> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<String>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      jSONArray0.contains((Object) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ConcurrentSkipListMap<String, Field>[] concurrentSkipListMapArray0 = (ConcurrentSkipListMap<String, Field>[]) Array.newInstance(ConcurrentSkipListMap.class, 0);
      jSONArray0.toArray(concurrentSkipListMapArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      jSONArray0.spliterator();
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.getString(11);
      PipedInputStream pipedInputStream0 = new PipedInputStream(989);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      jSONArray0.getJSONObject(16);
      int int0 = 61;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MockDate>[] classArray0 = (Class<MockDate>[]) Array.newInstance(Class.class, 5);
      Class<MockDate> class0 = MockDate.class;
      classArray0[0] = class0;
      Class<MockDate> class1 = MockDate.class;
      classArray0[1] = class1;
      Class<MockDate> class2 = MockDate.class;
      classArray0[2] = class2;
      Class<MockDate> class3 = MockDate.class;
      classArray0[3] = class3;
      Class<MockDate> class4 = MockDate.class;
      classArray0[4] = class4;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",OY.", parserConfig0, (-1414));
      jSONArray0.getIntValue(61);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1023);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      jSONArray0.spliterator();
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.getString(11);
      PipedInputStream pipedInputStream0 = new PipedInputStream(989);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      jSONArray0.getJSONObject(16);
      jSONArray0.getDoubleValue(16);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(989);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 544, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentRemove(989);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll((Collection<?>) jSONArray3);
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray0.getRelatedArray();
      JSONArray jSONArray5 = jSONArray0.fluentRemove(1924);
      jSONArray2.getSqlDate(989);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray3.addAll(544, (Collection<?>) jSONArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      jSONArray0.containsAll(linkedList0);
      JSONArray jSONArray6 = new JSONArray(1839);
      JSON.toJSON((Object) null);
      jSONArray2.fluentAdd((Object) jSONObject0);
      jSONArray1.getFloat(50);
      jSONArray4.setRelatedArray(jSONArray5);
      jSONArray0.getTimestamp(193);
      int int0 = jSONArray0.size();
      assertEquals(3955, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) "S6yR6f8S> 18dy");
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      JSONArray jSONArray5 = jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray5.getByte(544);
      jSONArray4.getBigDecimal(3919);
      jSONArray3.getByteValue(289);
      jSONArray1.getFloat(989);
      jSONArray0.fluentAdd(989, (Object) fileSystemHandling0);
      JSONArray jSONArray6 = new JSONArray(544);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Field> class0 = Field.class;
      jSONArray3.getObject(544, (Type) class0);
      assertFalse(jSONArray0.isEmpty());
      
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray7 = jSONArray3.fluentRetainAll(linkedHashSet0);
      assertTrue(jSONArray7.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      jSONArray0.contains((Object) null);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)126;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-120);
      byteArray0[4] = (byte) (-100);
      Integer integer0 = new Integer((-946));
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.isEmpty();
      jSONArray1.iterator();
      jSONArray0.indexOf((Object) null);
      JSONArray jSONArray2 = new JSONArray(979);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll((int) (byte)89, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1702;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentSkipListMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, dataInputStream0);
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(1702);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.io\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = new JSONArray();
      MockDate mockDate0 = new MockDate(1076L);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) mockDate0);
      // Undeclared exception!
      try { 
        jSONArray2.set((-1810), mockDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray4 = new JSONArray();
      assertTrue(jSONArray4.isEmpty());
      
      JSONArray jSONArray5 = jSONArray1.fluentAddAll(989, (Collection<?>) jSONArray0);
      jSONArray5.isEmpty();
      jSONArray5.getObject(544, (Type) null);
      jSONArray3.toArray();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      JSONArray jSONArray4 = jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSONArray jSONArray5 = new JSONArray();
      assertTrue(jSONArray5.isEmpty());
      
      jSONArray4.isEmpty();
      Class<Field> class0 = Field.class;
      jSONArray2.getObject(989, (Type) class0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      jSONArray0.spliterator();
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = 11;
      jSONArray0.getString(11);
      PipedInputStream pipedInputStream0 = new PipedInputStream(989);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      jSONArray0.getJSONObject(16);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1023);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      JSONArray jSONArray5 = jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray5.getByte(544);
      jSONArray4.getBigDecimal(3919);
      jSONArray3.getByteValue(289);
      jSONArray1.getFloat(989);
      jSONArray0.fluentAdd(989, (Object) fileSystemHandling0);
      jSONArray2.remove(544);
      jSONArray1.getLong(989);
      // Undeclared exception!
      jSONArray5.remove((Object) jSONArray2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3195);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      jSONArray0.contains(dataInputStream0);
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        JSON.parseArray("oracle.sql.DATE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      JSONArray jSONArray5 = jSONArray2.fluentRemove(3227);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray4.forEach(consumer0);
      jSONArray1.getDouble(544);
      jSONArray4.isEmpty();
      jSONArray5.getByte(544);
      jSONArray4.getBigDecimal(3919);
      jSONArray3.getByteValue(289);
      jSONArray0.getBoolean(3221);
      jSONArray2.getLongValue(3227);
      // Undeclared exception!
      try { 
        jSONArray4.getShortValue((-3118));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      Type type0 = jSONArray1.componentType;
      JSONArray jSONArray2 = new JSONArray();
      jSONArray0.set(153, jSONArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      jSONArray0.addAll(153, (Collection<?>) linkedList1);
      jSONArray2.containsAll(jSONArray0);
      Float float0 = jSONArray0.getFloat(1);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.set(989, 989);
      BigInteger bigInteger0 = BigInteger.TEN;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MockDate mockDate0 = new MockDate((-2045), 672, (-2664));
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) mockDate0);
      jSONArray2.getDate(544);
      assertEquals(990, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONObject jSONObject0 = new JSONObject(true);
      TreeMap<String, JSONObject> treeMap0 = new TreeMap<String, JSONObject>();
      TreeMap<String, JSONObject> treeMap1 = new TreeMap<String, JSONObject>();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-64);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, concurrentSkipListMap0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = jSONArray2.fluentRemove(60);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray4);
      jSONArray4.getBoolean(544);
      JSONArray jSONArray5 = jSONArray4.fluentRemove(544);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray5.forEach(consumer0);
      Integer integer0 = new Integer(764);
      JSONArray jSONArray6 = new JSONArray();
      jSONArray2.isEmpty();
      jSONArray6.iterator();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray3.getJSONArray(100);
      jSONArray5.fluentClear();
      jSONArray5.retainAll(jSONArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, (Object) null);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(544);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature2;
      serializeConfig0.setAsmEnable(false);
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[3] = serializerFeature4;
      serializerFeatureArray0[4] = serializerFeature3;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(1673);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1673, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, concurrentSkipListMap0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 60;
      JSONArray jSONArray4 = jSONArray2.fluentRemove(60);
      JSONArray jSONArray5 = jSONArray3.fluentAddAll((Collection<?>) jSONArray4);
      jSONArray1.getRelatedArray();
      jSONArray3.getSqlDate(989);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray4.addAll(60, (Collection<?>) jSONArray0);
      jSONArray3.containsAll(linkedList0);
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray5.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, concurrentSkipListMap0);
      jSONArray2.getBoolean(0);
      JSONArray jSONArray3 = new JSONArray();
      Type type0 = jSONArray3.componentType;
      Integer integer0 = new Integer(1693);
      JSONArray jSONArray4 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray5 = new JSONArray();
      jSONArray5.iterator();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1023, "@type");
      Feature[] featureArray0 = new Feature[5];
      jSONArray0.spliterator();
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = 11;
      jSONArray0.getString(11);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ParserConfig.getGlobalInstance();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      int int1 = 1673;
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1023);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSONArray0.set(183, fileDescriptor0);
      int int0 = 687;
      jSONArray0.indexOf(fileDescriptor0);
      Integer integer0 = new Integer(687);
      int int1 = 99;
      JSONArray jSONArray1 = jSONArray0.fluentRemove(99);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(687, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 687, Size: 183
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, concurrentSkipListMap0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray4 = jSONArray2.fluentRemove(60);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray4);
      jSONArray1.getRelatedArray();
      jSONArray3.getSqlDate(989);
      MockDate mockDate0 = new MockDate((-1522), 544, (-684));
      JSONArray jSONArray5 = jSONArray2.fluentRemove((Object) mockDate0);
      jSONArray3.addAll((Collection<?>) jSONArray5);
      assertEquals(3956, jSONArray5.size());
      assertEquals(3956, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      Integer integer0 = new Integer(1693);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.add((Object) null);
      jSONArray2.isEmpty();
      jSONArray1.iterator();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(544, (Object) null);
      JSONObject jSONObject0 = new JSONObject(989);
      JSONObject jSONObject1 = jSONObject0.fluentPut("yyyy-MM-dd HH:mm:ss", jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.add(989, (Object) jSONObject1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 545
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      JSONObject jSONObject0 = new JSONObject(true);
      TreeMap<String, JSONObject> treeMap0 = new TreeMap<String, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(treeMap0);
      jSONObject1.keySet();
      jSONArray1.containsAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-3342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      ConcurrentSkipListMap<JSONObject, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, Field>();
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, concurrentSkipListMap0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = jSONArray2.fluentRemove(60);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray4);
      jSONArray1.getRelatedArray();
      Date date0 = jSONArray3.getSqlDate(989);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(1023);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(544);
      JSONObject jSONObject0 = new JSONObject(true);
      TreeMap<String, JSONObject> treeMap0 = new TreeMap<String, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(treeMap0);
      jSONObject1.keySet();
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@type";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "";
      stringArray0[4] = "@type";
      stringArray0[5] = "";
      stringArray0[6] = "1.2.46";
      stringArray0[7] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[8] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) null, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1702;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.getJSONArray(1006);
      jSONArray2.toArray();
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(31186);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31186, Size: 3406
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      jSONArray0.iterator();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray0.getBoolean(1702);
      jSONArray0.fluentRemove(1702);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray2.forEach(consumer0);
      jSONArray2.getByte(0);
      jSONArray2.getShortValue(999);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(1702, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3219, concurrentSkipListMap0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBoolean(544);
      MockDate mockDate0 = new MockDate(3219, 989, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(0, (Object) null);
      jSONArray4.size();
      // Undeclared exception!
      try { 
        jSONArray3.getTimestamp((-2814));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<Annotation, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<Annotation, String>();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) concurrentSkipListMap0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      concurrentSkipListMap0.containsKey(jSONArray0);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>(989, 2370.2446F);
      linkedHashSet0.add(jSONArray0);
      jSONArray2.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.subList(989, 544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 544
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1702;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, (Object) null);
      jSONArray2.set(1660, (Object) null);
      jSONArray1.getFloatValue(1702);
      jSONArray2.getShort(544);
      Class<Object> class0 = Object.class;
      jSONArray2.toJavaObject(class0);
      JSONArray jSONArray3 = new JSONArray(6451);
      jSONArray3.parallelStream();
      jSONArray2.addAll((Collection<?>) jSONArray3);
      Integer integer0 = new Integer(1);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      int int1 = 1686;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      jSONArray0.iterator();
      jSONArray1.getBigInteger(1702);
      jSONArray1.getBoolean(544);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.getBigDecimal(0);
      assertEquals(1703, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(544);
      JSONObject jSONObject0 = new JSONObject(true);
      TreeMap<String, JSONObject> treeMap0 = new TreeMap<String, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(treeMap0);
      jSONObject1.keySet();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 989);
      Class<JSONArray> class0 = JSONArray.class;
      Class<Annotation> class1 = Annotation.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class0, class1, (Field) null, 727, 123, 113);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      boolean boolean0 = jSONArray0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.getString(11);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1023);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(544);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[3] = serializerFeature4;
      serializerFeatureArray0[4] = serializerFeature3;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      jSONArray1.getShortValue(1673);
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) "1.2.46");
      jSONArray2.getFloat(56);
      assertEquals(1704, jSONArray1.size());
      assertEquals(1704, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(869);
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      Class<Field> class0 = Field.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      ConcurrentSkipListMap<MockDate, Field> concurrentSkipListMap1 = new ConcurrentSkipListMap<MockDate, Field>();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) concurrentSkipListMap1, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      jSONArray0.getShortValue(1683);
      Class<Integer> class1 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(list0);
      boolean boolean0 = jSONArray1.addAll(0, (Collection<?>) linkedHashSet0);
      assertEquals(1704, jSONArray1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.getDouble(548);
      jSONArray0.getFloatValue(1693);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("\u0005!>,h+h@{&'p#", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : \u0005!>,h+h@{&'p#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.getJSONObject(1702);
      Integer integer0 = new Integer((-405));
      jSONArray0.contains(concurrentSkipListMap0);
      jSONArray1.iterator();
      jSONArray0.getBigInteger(989);
      assertEquals(1703, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      byte byte0 = (byte) (-73);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte) (-1), linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd((int) (byte) (-90), (Object) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -90, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Integer integer0 = new Integer(2032);
      jSONArray1.add((Object) integer0);
      jSONArray0.contains(integer0);
      jSONArray1.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(6778);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6778, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g]4\u0003*S[97s");
      jSONArray0.set(3730, linkedList0);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      JSON.parseObject("", (Type) null, 3730, featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.getInteger(544);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(3730);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1023;
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1023, "@type");
      Integer integer0 = new Integer(989);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1023);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.getDouble(532);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parse("\u0005!>,h+h@{&'p#", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : \u0005!>,h+h@{&'p#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockDate mockDate0 = new MockDate(544, 989, 544);
      mockDate0.setTime(544);
      mockDate0.clone();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 831);
      jSONArray0.set(831, (Object) null);
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject((String) null, (Type) null, 544, featureArray0);
      jSONArray0.fluentAdd((Object) null);
      jSONArray0.getInteger(831);
      jSONArray0.getByte(831);
      assertEquals(833, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte) (-1), (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(1669, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1669, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockDate mockDate0 = new MockDate(544, 989, 544);
      mockDate0.clone();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 831);
      jSONArray0.set(831, bufferedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(831);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.io.BufferedInputStream@337fa0c5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      jSONArray1.fluentAdd(1501, (Object) concurrentSkipListMap0);
      boolean boolean0 = jSONArray0.getBooleanValue(55);
      assertEquals(1704, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46", parserConfig0, 1702);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1702, (Object) null);
      jSONArray0.getJSONArray(1654);
      jSONArray1.getComponentType();
      assertEquals(1703, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[3] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[4] = serializerFeature2;
      JSON.toJSONBytes((Object) null, serializeConfig0, 989, serializerFeatureArray0);
      Integer integer0 = new Integer(989);
      jSONArray0.add((Object) integer0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      jSONArray0.fluentSet(1702, (Object) null);
      Class<Integer> class0 = Integer.class;
      jSONArray0.getObject(796, class0);
      assertEquals(1703, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockDate mockDate0 = new MockDate(544, 989, 544);
      mockDate0.clone();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 831);
      jSONArray0.set(831, bufferedInputStream0);
      jSONArray0.getInteger(98);
      assertEquals(832, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray0.setRelatedArray(jSONArray1);
      int int0 = 160;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray1.fluentSet(0, jSONArray0);
      jSONArray1.getJSONArray(0);
      assertEquals(1, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.set(1023, "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1023);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 137;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g]4\u0003*S[97s");
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(1364, (Object) null);
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.getShort(211);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      SerializeConfig serializeConfig0 = new SerializeConfig(2016);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      jSONArray0.getInteger(1012);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      jSONArray0.indexOf(jSONArray1);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"unicode-1-1-utf-8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(92, object0);
      Class<String> class0 = String.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.toString();
      jSONArray0.getComponentType();
      jSONArray1.getComponentType();
      jSONArray0.listIterator();
      assertEquals(93, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-32);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-32));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -32
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.parallelStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      Object object0 = new Object();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f*s>-");
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONBytes(object0, serializeConfig0, 544, serializerFeatureArray0);
      jSONArray0.add((Object) "1.2.46");
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.add(741, (Object) listIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 741, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      jSONArray0.fluentSet(1702, (Object) null);
      boolean boolean0 = jSONArray0.getBooleanValue(55);
      assertEquals(1703, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1023, "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1023);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1452);
      Integer integer0 = new Integer((-1452));
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      Class<String> class0 = String.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 544, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(544);
      // Undeclared exception!
      try { 
        jSONArray0.add((-3021), (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3021, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-2438));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(920, type0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 920, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yyyy-MM-dd HH:mm:ss");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.handleResovleTask(defaultJSONParser0, (Integer) null);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1900));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "?Np3J\"v0";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2612), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-178));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      JSONObject jSONObject0 = new JSONObject(989);
      Class<Annotation> class0 = Annotation.class;
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("@type", class1, class1, class0, (Field) null, 989, 1440, 544);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class2 = Annotation.class;
      beanContext0.getAnnation(class2);
      beanContext0.getField();
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>(1320);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1045), (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1045, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-136));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1278, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1278, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-56);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray0.subList(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 61;
      JSONArray jSONArray1 = new JSONArray(61);
      // Undeclared exception!
      try { 
        jSONArray1.subList(1318, (-614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1318) > toIndex(-614)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1291);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1291, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1313);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1313
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray1 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) "@type");
      // Undeclared exception!
      try { 
        jSONArray4.getLongValue((-2518));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      boolean boolean0 = jSONArray0.remove((Object) jSONArray1);
      boolean boolean1 = jSONArray0.addAll((Collection<?>) jSONArray1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      Integer integer0 = new Integer(544);
      jSONArray0.remove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 1282;
      JSONArray jSONArray0 = new JSONArray(1282);
      int int1 = (-1339);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1339));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(180, (Object) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 180, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(393216);
      JSONObject jSONObject0 = new JSONObject(1324);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONObject0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentSet(1324, jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll(989, (Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray4.getShort(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 544, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1966), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(521);
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      int int0 = (-1);
      Object object0 = JSON.toJSON((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd((-1), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-935));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(2505, (Object) iterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2505, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, serializerFeatureArray0);
      Integer integer0 = new Integer(544);
      boolean boolean0 = jSONArray0.add((Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(83);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getString(1351);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1351, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get((-1553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(1322);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1322, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSONArray0;
      jSONArray0.toArray(objectArray0);
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(1364, (Object) null);
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.getShort(211);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      SerializeConfig serializeConfig0 = new SerializeConfig(2016);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      jSONArray1.getShortValue(989);
      jSONArray2.addAll(1, (Collection<?>) jSONArray1);
      assertEquals(2730, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(953);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 953, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 544, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.removeAll(linkedHashSet0);
      Class<String> class0 = String.class;
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject((String) null, class0, (ParseProcess) null, featureArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@type";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = null;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1686));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1576);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1576, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = new JSONArray(999);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(999, (Object) parserConfig0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1567));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = 753;
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-5530));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.iterator();
      assertTrue(jSONArray0.isEmpty());
      
      jSONArray0.lastIndexOf(", segement ");
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-4262);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-4262));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-2405));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 544, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(163);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 163, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(913);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 913, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1686));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_GENERATE_FEATURE = 544;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(167);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 167, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONArray0;
      objectArray0[1] = (Object) jSONArray0;
      jSONArray1.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      int int0 = (-3766);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-3766), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3766, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 989;
      integerArray0[1] = (Integer) 989;
      integerArray0[2] = (Integer) 989;
      integerArray0[3] = (Integer) 989;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      jSONArray1.isEmpty();
      jSONArray1.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-4934));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-892));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-567));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.equals(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-3624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getDouble((-4262));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class1 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3409, class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3409, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(570);
      JSONArray jSONArray1 = jSONArray0.fluentSet(570, "~0DCcic$");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray2);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss", parserConfig0, 0);
      Class<JSONObject> class0 = JSONObject.class;
      String string0 = "";
      jSONArray4.getIntValue(989);
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, linkedList0);
      jSONArray1.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-2930));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2930, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      long long0 = new Integer(989);
      Integer integer0 = new Integer((-2054));
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, integer0);
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(set0);
      JSONArray jSONArray3 = jSONArray1.fluentRetainAll(jSONArray2);
      jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g]4\u0003*S[97s");
      jSONArray0.containsAll(linkedList0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(137);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 137, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      Object object0 = JSON.toJSON((Object) jSONArray0, serializeConfig0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      JSON.parse(byteArray0, featureArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      jSONArray2.fluentClear();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      int int0 = 954;
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(753);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 753, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = new JSONArray();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 989;
      integerArray0[1] = (Integer) 989;
      integerArray0[2] = (Integer) 989;
      integerArray0[3] = (Integer) 989;
      integerArray0[4] = (Integer) 989;
      jSONArray0.toArray(integerArray0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(954);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 954, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = 1105;
      JSONArray jSONArray0 = new JSONArray(1105);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.removeAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-531));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -531, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "");
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(989, (Object) "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(954);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 954, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(962);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 962, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = 1089;
      JSONArray jSONArray0 = new JSONArray(594);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.subList(968, 948);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 948
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getInteger("");
      linkedList0.addLast((Object) null);
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedList0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      assertSame(jSONArray0, jSONArray4);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 55296;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int1 = 3619;
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(55296);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "");
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(989, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(55296, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3596);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3596, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(68);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.fluentRemoveAll(linkedList0);
      JSONObject jSONObject0 = new JSONObject(false);
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+W){iZ", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowArbitraryCommas;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "1.2.46", serializeConfig0, serializeFilterArray0, "1.2.46", (-719), (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1580));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      int int0 = 127;
      String string0 = "ovfsJPWE8Nca\"D.w=sK";
      Type[] typeArray0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(115);
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.fluentClear();
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-572));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = 68;
      JSONArray jSONArray0 = new JSONArray(68);
      int int1 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(77);
      Class<Integer> class0 = Integer.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(77, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.parallelStream();
      int int0 = 131;
      String string0 = "ovfsJPWE8Nca\"D.w=sK";
      Type[] typeArray0 = null;
      int int1 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 1518;
      JSONArray jSONArray0 = new JSONArray(1518);
      int int1 = 3641;
      String string0 = "";
      jSONArray0.set(3641, "");
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3641);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = 115;
      JSONArray jSONArray0 = new JSONArray(115);
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.fluentClear();
      int int1 = 2104;
      Class<Object> class1 = Object.class;
      jSONArray0.toJavaList(class1);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("applyName");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2639);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      jSONArray0.toArray();
      byteArray0[3] = (byte)60;
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      int int0 = 0;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        uTF8Decoder0.replaceWith("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Replacement too long
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-3624), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3624, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      JSON.parseArray("", class0);
      jSONArray0.size();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", 1);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(55296, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-915));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -915, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "[long";
      // Undeclared exception!
      try { 
        JSON.parseArray("[long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
