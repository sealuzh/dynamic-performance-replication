/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:26:37 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.2, mnStrategy0, 0.2);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 5341.849, (-367));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.params();
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientTolerance(362.9601);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy0.setHessianGradientNCycles((-2123354618));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.4566337973808943, mnStrategy0, (-100.0));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 786.28901899, 1328);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      mnUserParameterState0.setLimits(0, 0.0, 2689.832403759);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.params();
      mnStrategy0.setGradientTolerance((-0.5));
      mnUserParameterState0.setPrecision(10.0);
      MnStrategy mnStrategy1 = new MnStrategy();
      MnStrategy mnStrategy2 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1113.144704307403), mnStrategy2, 0.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-271.01337446588), 1328);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      mnUserParameters0.errors();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-100.0), (-337.8227548838557), (-100.0), 362.9601, 362.9601).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 13, mnStrategy0, (-2949.8254223));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.18, 1328);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 362.9601, 2139476638);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(852.698145, 2013.68630095982, 1.0, 2013.68630095982, 1.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.2, mnStrategy0, 0.2);
      int[] intArray0 = new int[0];
      double double0 = (-100.0);
      mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, (-100.0), 1616);
      int[] intArray1 = new int[4];
      intArray1[0] = 1616;
      intArray1[1] = 1616;
      intArray1[2] = 1616;
      intArray1[3] = 1616;
      double double1 = (-1448.63);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, (double[]) null, (double[]) null, (-768.5179908927696), 1616);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1616, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1974.3961562169493), 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.2, mnStrategy0, 0.2);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, (-8.7726353170753), 13);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.01337446588), 0.0, (-271.01337446588), 0.2, (-1113.144704307403)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4058.54460432, mnStrategy0, 0.0);
      int int0 = (-2124342660);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = mnUserParameterState0.params();
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientTolerance(362.9601);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1974.3961562169493), 4.0, 1603.67746646672, 8.200000000000001, 980.8269791706).when(fCNBase2).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase2, mnUserParameterState0, 61.5116685745, mnStrategy0, 2848.368788502619);
      mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray0, (-2214.115045302592), (-421));
      int[] intArray1 = new int[4];
      intArray1[0] = (-421);
      intArray1[1] = (-421);
      intArray1[2] = (-421);
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-2911.993952492627);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, (double[]) null, doubleArray1, (-2911.993952492627), (-2143213128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.4, (-2182.699094), 0.4, 0.4).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.2, mnStrategy0, 0.2);
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.3, 15);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, (-0.5), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance((-13.5));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1196, (double)1196, (-3391.54), 3507.556052675622, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.4711459892754043);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.4711459892754043;
      doubleArray0[5] = 0.0;
      doubleArray0[3] = 0.4711459892754043;
      doubleArray0[4] = (double) 1196;
      doubleArray0[5] = 0.4711459892754043;
      doubleArray0[6] = (double) 1196;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1196.0, 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.4, 917.9104285, (-1.0), (-1172.0), 0.4).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.2, mnStrategy0, 0.2);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 100.0, 100);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.4, 4);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1974.3961562169493), (-1974.3961562169493), 362.9601, (-100.0), (-1974.3961562169493)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.2, mnStrategy0, 0.2);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, (-8.7726353170753), 13);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.4, 2.3230755685411985E-5, 0.4).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.2, mnStrategy0, 0.2);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.3, 15);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 5.377470888762608E-5, 1);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1275.0, (-3373.1943489910154), 14.200000000000003, 0.5).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.2, mnStrategy0, 0.2);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 5341.849, (-367));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 1975.9976115140541, (-2123884931));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-829.922035), mnStrategy0, 0.0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1196, (-755.43298318561), 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.4711459892754043);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.4711459892754043;
      doubleArray0[5] = (-829.922035);
      doubleArray0[5] = 0.0;
      doubleArray0[4] = (double) 1196;
      doubleArray0[5] = 0.4711459892754043;
      doubleArray0[6] = (double) 1196;
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 1196.0, 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.028237177770380904, 0.028237177770380904, 0.028237177770380904, 0.028237177770380904, 0.028237177770380904).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.028237177770380904;
      doubleArray0[0] = 0.028237177770380904;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setMediumStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.028237177770380904, mnStrategy0, (-904.6897453963342));
      int int0 = 0;
      int[] intArray0 = new int[2];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.028237177770380904, 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.01337446588), 0.0, (-271.01337446588), 0.0, (-1113.144704307403)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1113.144704307403);
      doubleArray0[1] = (-271.01337446588);
      double double0 = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setMediumStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, (-904.6897453963342));
      mnStrategy0.setHessianStepTolerance((-271.01337446588));
      mnStrategy0.setLowStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int[] intArray0 = new int[1];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, (-1403));
      mnUserParameterState0.setLimits(0, 0.0, (-2512.5362202381475));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
      double double1 = 0.5;
      // Undeclared exception!
      try { 
        mnUserParameterState0.setUpperLimit(7, (double) 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.028237177770380904;
      double double1 = (-271.01337446588);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.01337446588), 0.028237177770380904, (-271.01337446588), 0.028237177770380904, (-271.01337446588)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.028237177770380904;
      doubleArray0[0] = 0.028237177770380904;
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setMediumStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-271.01337446588), mnStrategy0, (-904.6897453963342));
      int int1 = 30;
      int[] intArray0 = new int[2];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.028237177770380904, 30);
      // Undeclared exception!
      try { 
        mnUserParameterState0.add("%5g", (double) 30, 71.5264121, (-651.3922347), (-651.3922347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min == max
         //
         verifyException("org.freehep.math.minuit.MinuitParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.01337446588), 0.0, (-271.01337446588), (-271.01337446588), 4.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 4.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4058.54460432, mnStrategy0, 0.0);
      mnStrategy0.setHessianGradientNCycles(0);
      double[] doubleArray1 = mnUserParameterState0.params();
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 143.65321798604714, 0);
      mnUserParameterState0.fix(0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 484.296574195, 0);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1113.144704307403);
      doubleArray0[0] = 0.6459920415754395;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      mnUserParameterState0.setLimits(0, 0.6459920415754395, (-2512.5362202381475));
      mnUserParameterState0.setPrecision(0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-501.86235), (double)0, 1.0E-4, 1.2, (-9.0)).when(fCNBase2).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase2, mnUserParameterState0, (-501.86235), mnStrategy0, 0.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      mnUserParameterState0.setLimits(0, 0.0, 2689.832403759);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-271.01337446588);
      doubleArray1[1] = 0.0;
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.01337446588), (double)0, (-1113.144704307403), 1.2, (-9.0)).when(fCNBase2).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase2, mnUserParameterState0, (-271.01337446588), mnStrategy0, 0.0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.0, 0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 1.2;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.01337446588), 0.0, (-271.01337446588), 0.2, (-1113.144704307403)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1113.144704307403);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, (-904.6897453963342));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1113.144704307403), 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, (-1403));
      mnUserParameterState0.setLimits(0, 0.2, (-2512.5362202381475));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-200.058971), 0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-200.058971);
      doubleArray1[1] = 0.5;
      doubleArray1[2] = (-501.86235);
      doubleArray1[3] = 0.0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.0, 0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.5;
      doubleArray2[1] = (double) 0;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.01337446588), 0.0, (-271.01337446588), 0.2, (-1113.144704307403)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1113.144704307403);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, (-904.6897453963342));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1113.144704307403), 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, (-1403));
      mnUserParameterState0.setLimits(0, 0.2, (-2512.5362202381475));
      mnUserParameterState0.setLowerLimit(0, 3452.81308);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-200.058971), 0);
      int[] intArray1 = new int[7];
      intArray1[1] = 0;
      intArray1[2] = 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-200.058971);
      doubleArray1[1] = 0.5;
      doubleArray1[2] = (-501.86235);
      doubleArray1[3] = 0.0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.0, 0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.5;
      doubleArray2[1] = (double) 0;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-254.13361597770393), 0.0, (-254.13361597770393), 0.0, (-1113.144704307403)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1113.144704307403);
      doubleArray0[0] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-545.205355872534), mnStrategy0, (-1113.144704307403));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, (-1429));
      mnStrategy0.setHessianNCycles(0);
      mnUserParameterState0.setLimits(0, 0.0, (-2512.1549519734717));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, (-1429));
      mnStrategy0.setGradientNCycles((-1646516316));
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-254.13361597770393);
      doubleArray1[2] = (-501.86235);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.0, 0);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-254.13361597770393), 0.0, (-254.13361597770393), 0.0, (-1113.144704307403)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1113.144704307403);
      doubleArray0[0] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-545.205), mnStrategy0, (-1113.144704307403));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnStrategy0.setHessianNCycles(0);
      mnUserParameterState0.setLimits(0, 0.0, (-2512.1549519734717));
      int[] intArray0 = new int[7];
      intArray0[2] = 0;
      mnUserParameterState0.setUpperLimit(0, (-545.205));
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = (double) (-1426);
      doubleArray1[2] = (-496.72302665595794);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-2512.1549519734717), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1113.144704307403);
      doubleArray0[1] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianStepTolerance(10000.0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2585.875), (-4309.0054), 1931.652361773913, (-388.511274764309), (-271.01337446588)).when(fCNBase0).valueOf(any(double[].class));
      int[] intArray0 = new int[1];
      mnUserParameterState0.setLimits(0, 0.0, (-2512.5362202381475));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1403), mnStrategy0, 0.5);
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2585.875), 1759);
      assertNotNull(mnCross0);
  }
}
