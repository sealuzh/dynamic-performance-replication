/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:01:30 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.store.raw.xact.TransactionTable;
import org.databene.commons.collection.OrderedNameMap;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "U%\"AG-=JT";
      stringArray0[1] = "IS_DEFAULT BIT";
      stringArray0[2] = "U%\"AG-=JT";
      stringArray0[3] = "p1>ko";
      stringArray0[4] = "U%\"AG-=JT";
      stringArray0[5] = "U%\"AG-=JT";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("U%\"AG-=JT", true, dBUniqueConstraint0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.ownerDotComponent(dBTable0);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      TransactionTable transactionTable0 = null;
      try {
        transactionTable0 = new TransactionTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.xact.TransactionTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "42605");
      SQLUtil.renderValue(dBCheckConstraint0);
      String[] stringArray0 = new String[1];
      String string1 = "RGEn6";
      stringArray0[0] = "RGEn6";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      String string2 = " and ";
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder1.append(" and ");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder3);
      SQLUtil.normalize(" and ", false);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex("3tMkUi+w]", false, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "insertdate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k6cLXw%", defaultDBTable0, 0, "k6cLXw%");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("k6cLXw% K6CLXW% NOT NULL", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "k6cLXw% K6CLXW% NOT NULL";
      stringArray0[1] = "create table ";
      stringArray0[2] = "insertdate";
      stringArray0[3] = "insertdate";
      stringArray0[4] = "create table ";
      stringArray0[5] = "insertdate";
      stringArray0[6] = "k6cLXw%";
      stringArray0[7] = "insertdate";
      stringArray0[8] = "create table ";
      String string1 = SQLUtil.leftJoin("create table ", stringArray0, "k6cLXw%", "create table ", stringArray0);
      assertEquals("left join k6cLXw% as create table  on create table .k6cLXw% K6CLXW% NOT NULL = create table .k6cLXw% K6CLXW% NOT NULL and create table .create table  = create table .create table  and create table .insertdate = create table .insertdate and create table .insertdate = create table .insertdate and create table .create table  = create table .create table  and create table .insertdate = create table .insertdate and create table .k6cLXw% = create table .k6cLXw% and create table .insertdate = create table .insertdate and create table .create table  = create table .create table ", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop materialized view~r{?xc;bmnr2%cr#op^!");
      DBDataType dBDataType0 = DBDataType.getInstance(4, "drop materialized view~r{?xc;bmnr2%cr#op^!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view~r{?xc;bmnr2%cr#op^!", (DBTable) null, dBDataType0);
      defaultDBColumn0.setDefaultValue("drop materialized view~r{?xc;bmnr2%cr#op^!");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop index";
      stringArray0[1] = "drop materialized view~r{?xc;bmnr2%cr#op^!";
      stringArray0[2] = "drop index";
      stringArray0[3] = " AND ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "drop index", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog("alter index");
      DBSchema dBSchema0 = new DBSchema("field:", dBCatalog0);
      dBSchema0.getTable("field:");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("field:", (DBTable) null, 391, "alter index");
      linkedList0.offer(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("field:", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter table{5";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.innerJoin("alter table{5", stringArray0, "_?x;Sx!_\"<", "(alter table{5)", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter table{5", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("alter table{5");
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("_?x;Sx!_\"<", stringBuilder0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      StringBuilder stringBuilder2 = stringBuilder1.append("(tD");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2, nameSpec0);
      assertEquals("alter table{5 and _?x;Sx!_\"<(tD", stringBuilder1.toString());
      
      SQLUtil.ownerDotComponent(defaultDBTable0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY (alter table{5)", string0);
      
      SQLUtil.removeComments("_?x;Sx!_\"< as (alter table{5) on alter table{5.alter table{5 = (alter table{5).alter table{5");
      String string1 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" NOT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*|Xiz0`$z<7", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-767), "CLOB");
      Integer integer0 = new Integer((-2332));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals(" NOT : CLOB", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "*|Xiz0`$z<7";
      stringArray0[2] = " NOT";
      String string1 = SQLUtil.leftJoin("*|Xiz0`$z<7", stringArray0, "CLOB", "r", stringArray0);
      assertEquals("left join CLOB as r on *|Xiz0`$z<7.CLOB = r.CLOB and *|Xiz0`$z<7.*|Xiz0`$z<7 = r.*|Xiz0`$z<7 and *|Xiz0`$z<7. NOT = r. NOT", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter session;cocflt2#;o,";
      stringArray0[1] = " NTVzVACmxYn,ZZ}-:";
      stringArray0[2] = "exec";
      stringArray0[3] = "ug*{E5";
      stringArray0[4] = "truncate";
      stringArray0[5] = "R2rA]lp2x/oO{LZAHQ";
      stringArray0[6] = "m\u0006$";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesStructure(" NTVzVACmxYn,ZZ}-:");
      SQLUtil.mutatesDataOrStructure("alter session;cocflt2#;o,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m\u0006$");
      String[] stringArray1 = new String[1];
      String[] stringArray2 = new String[4];
      stringArray2[0] = "(alter session;cocflt2#;o,,  NTVzVACmxYn,ZZ}-:, exec, ug*{E5, truncate, R2rA]lp2x/oO{LZAHQ, m\u0006$)";
      stringArray2[1] = "truncate";
      stringArray2[2] = "(alter session;cocflt2#;o,,  NTVzVACmxYn,ZZ}-:, exec, ug*{E5, truncate, R2rA]lp2x/oO{LZAHQ, m\u0006$)";
      stringArray2[3] = "truncate";
      defaultDBTable0.getUniqueConstraint(stringArray2);
      stringArray1[0] = "ug*{E5";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.removeComments("9<I");
      Random.setNextRandom((-1953652071));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create unique index{5");
      stringArray0[0] = "9<I";
      stringArray0[1] = "9<I";
      stringArray0[2] = "create unique index{5";
      stringArray0[3] = "create unique index{5";
      stringArray0[4] = "create unique index{5";
      stringArray0[5] = "9<I";
      stringArray0[6] = "9<I";
      stringArray0[7] = "Gj@*sqH~";
      stringArray0[8] = "9<I";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index{5", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dBForeignKeyConstraint0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      dynamicByteArrayOutputStream0.setBeginPosition((-1953652071));
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec2, mockPrintWriter0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "9<I", "9<I", basicUUID0, false);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "9<I", schemaDescriptor0, 201, 'P');
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTriggerDescriptors(tableDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",A+HYjaGx4");
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",A+HYjaGx4";
      stringArray0[1] = " as ";
      stringArray0[2] = " as ";
      stringArray0[3] = "7PK";
      stringArray0[4] = " as ";
      stringArray0[5] = " as ";
      stringArray0[6] = " as ";
      stringArray0[7] = " as ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " as ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(",A+HYjaGx4", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "DY", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT DY UNIQUE (,A+HYjaGx4,  as ,  as , 7PK,  as ,  as ,  as ,  as )", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_Jzo{_ExES2v4r`");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_Jzo{_ExES2v4r`";
      stringArray0[1] = "_Jzo{_ExES2v4r`";
      stringArray0[2] = "_Jzo{_ExES2v4r`";
      stringArray0[3] = "_Jzo{_ExES2v4r`";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "_Jzo{_ExES2v4r`", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("_Jzo{_ExES2v4r`", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "_Jzo{_ExES2v4r`", false, stringArray0);
      dBUniqueIndex0.setTable(defaultDBTable0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      int int0 = 1;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("_Jzo{_ExES2v4r`", dBTable0, 1, "PRIMARY KEY (_Jzo{_ExES2v4r`, _Jzo{_ExES2v4r`, _Jzo{_ExES2v4r`, _Jzo{_ExES2v4r`)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_Jzo{_ExES2v4r`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(<;$/fb2wYvn}[vc";
      stringArray0[1] = "(<;$/fb2wYvn}[vc";
      stringArray0[2] = "(<;$/fb2wYvn}[vc";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "(<;$/fb2wYvn}[vc";
      stringArray0[5] = "drop materialized view";
      stringArray0[6] = "(<;$/fb2wYvn}[vc";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "(<;$/fb2wYvn}[vc", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("(<;$/fb2wYvn}[vc", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.PRC;
      PrintStream printStream0 = mockPrintStream1.format(locale0, "drop materialized view", (Object[]) stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "@n/?", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";A.o", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.ownerDotComponent(dBTable0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      SQLUtil.substituteMarkers("null", "null", (Object) null);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      Random.setNextRandom(2578);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("MFz?|(8:lf", dBSchema0);
      dBSchema0.getTables(true);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "MFz?|(8:lf");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
      
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      String string1 = "alter indexrename~r{?xc;bmnr2%crop^!";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("}APZUU(YQ#J{&sok", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(48, "renamerenam");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("(", 4);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      TableContainer tableContainer0 = new TableContainer("8{ve 3drhc9b ");
      tableContainer0.getTable("8{ve 3drhc9b ");
      int int0 = 90;
      DBDataType dBDataType0 = DBDataType.getInstance(90, "8{ve 3drhc9b ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8{ve 3drhc9b ", (DBTable) null, dBDataType0, integer0, integer1);
      Integer.sum(90, 90);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("'INDEXTYPE'");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("`\"0ydI$&$2L");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      TableContainer tableContainer0 = new TableContainer("`\"0ydI$&$2L");
      tableContainer0.getSchema();
      defaultDBTable0.setSchema((DBSchema) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "`\"0ydI$&$2L");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      FBClob fBClob0 = new FBClob();
      try { 
        fBClob0.getCharacterStream(4398046512162L, 4398046512162L);
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "selecte?";
      SQLUtil.mutatesDataOrStructure("selecte?");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "interval";
      stringArray0[1] = "selecte?";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = "DQ";
      TableContainer tableContainer0 = new TableContainer("DQ");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}LL{+]", (DBSchema) null);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(w03");
      System.setCurrentTimeMillis(165L);
      boolean boolean0 = SQLUtil.isProcedureCall("(w03");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("select into");
      boolean boolean2 = SQLUtil.isDML("A:+Smb}=o&%*/P");
      boolean boolean3 = SQLUtil.isQuery("m");
      assertFalse(boolean3 == boolean1);
      
      Boolean boolean4 = SQLUtil.mutatesStructure("D2(AIr4\">q''j)Z");
      assertTrue(boolean4.equals((Object)boolean2));
      
      SQLUtil.normalize("A:+Smb}=o&%*/P", false);
      String string0 = SQLUtil.normalize("A:+Smb}=o&%*/P", false);
      assertEquals("A : + Smb } = o & % */ P", string0);
      
      String string1 = SQLUtil.renderValue("D2(AIr4\">q''j)Z");
      assertEquals("'D2(AIr4\">q''j)Z'", string1);
      
      boolean boolean5 = SQLUtil.isDML("(,~c}");
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "Y7~T|+r/*-))GLW.s~%";
      // Undeclared exception!
      SQLUtil.isProcedureCall("Y7~T|+r/*-))GLW.s~%");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("TABLE_SCHEMA", false, "TABLE_SCHEMA", "TABLE_SCHEMA");
      dBCheckConstraint0.setName("select into");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.isQuery("select into");
      String string0 = "\u0001\u01DE";
      DBCheckConstraint dBCheckConstraint1 = null;
      try {
        dBCheckConstraint1 = new DBCheckConstraint("\u0001\u01DE", false, "\u0001\u01DE", "rRkD:*FC3#QPee");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.normalize("C.COLUMN_NAME FIELD, C.TYPE_NAME || '(' || C.NUMERIC_PRECISION || ')' TYPE, C.IS_NULLABLE \"NULL\", CASE (SELECT MAX(I.INDEX_TYPE_NAME) FROM INFORMATION_SCHEMA.INDEXES I WHERE I.TABLE_SCHEMA=C.TABLE_SCHEMA AND I.TABLE_NAME=C.TABLE_NAME AND I.COLUMN_NAME=C.COLUMN_NAME)WHEN 'PRIMARY KEY' THEN 'PRI' WHEN 'UNIQUE INDEX' THEN 'UNI' ELSE '' END KEY, IFNULL(COLUMN_DEFAULT, 'NULL') DEFAULT FROM INFORMATION_SCHEMA.COLUMNS C WHERE C.TABLE_NAME=? AND C.TABLE_SCHEMA=? ORDER BY C.ORDINAL_POSITION", true);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = " DEFAULT ";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("h+MF", true, " DEFAULT ", "h+MF");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.isDDL("org.h2.command.ddl.DropSequence");
      String string1 = null;
      String string2 = null;
      String string3 = "m:G08CKgEi:LVpt";
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("m:G08CKgEi:LVpt", "~ALt$Sd={^WvqVJM", versionNumber0);
      String string4 = "/479!7=";
      defaultDatabase0.getTable("/479!7=", false);
      DBCheckConstraint dBCheckConstraint1 = null;
      try {
        dBCheckConstraint1 = new DBCheckConstraint((String) null, false, (DBTable) null, "h+MF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.join((String) null, (String) null, stringArray0, "create unique index", stringArray0[2], stringArray0);
      System.setCurrentTimeMillis((-1L));
      SQLUtil.leftJoin("", stringArray0, "left", "call;cocflt2#;o,", stringArray0);
      SQLUtil.renderColumnListWithTableName("create unique index as null on null.null = null.null and null.null = null.null and null.null = null.null", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left join left as call;cocflt2#;o, on .null = call;cocflt2#;o,.null and .null = call;cocflt2#;o,.null and .null = call;cocflt2#;o,.null");
      VersionNumber versionNumber0 = VersionNumber.valueOf(stringArray0[0]);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "BLOBGETLENGTH", versionNumber0);
      defaultDatabase0.getCatalog("Error parsing SQL");
      defaultDBTable0.isIdentical((DBObject) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderValue((Object) null);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "call;cocflt2#;o,";
      stringArray1[1] = "Error parsing SQL";
      stringArray1[2] = "left join left as call;cocflt2#;o, on .null = call;cocflt2#;o,.null and .null = call;cocflt2#;o,.null and .null = call;cocflt2#;o,.null";
      stringArray1[3] = "create unique index";
      stringArray1[4] = "left";
      stringArray1[5] = "alter table";
      stringArray1[6] = "alter tableadd";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.isQuery("select into;cocflt2#;o,");
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.renderValue(integer0);
      String[] stringArray0 = new String[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      stringArray0[0] = "select into;cocflt2#;o,";
      stringArray0[1] = "select into;cocflt2#;o,";
      stringArray0[2] = "alter index";
      stringArray0[3] = "0";
      String string0 = " NULLS FIRST";
      stringArray0[4] = " NULLS FIRST";
      stringArray0[5] = "select into;cocflt2#;o,";
      stringArray0[6] = "0";
      SQLUtil.leftJoin("select into;cocflt2#;o,", stringArray0, (String) null, (String) null, stringArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select into;cocflt2#;o,", (String) null, versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'select into;cocflt2#;o,'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "`?";
      String string1 = "YFs]}GD^<\\";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YFs]}GD^<");
      Character character0 = Character.valueOf('A');
      Character.highSurrogate(423);
      Character.lowSurrogate((-2161));
      Character.isAlphabetic(16);
      SQLUtil.substituteMarkers("`?", "`?", character0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("`?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "BLOB";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Q-8", stringBuilder0);
      int int0 = (-2632);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(389, (CharSequence) stringBuilder0, 389, (-2632));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 389
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean0 = SQLUtil.mutatesStructure("h\u0000Ms!-Awrh9");
      assertFalse(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("h\u0000Ms!-Awrh9");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("PLXsb][jfr>A", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-769), "U%`vsn|^\"29|<R");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("isFirst", dBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("U%`VSN|^\"29|<R(1)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "pyT.";
      StringBuilder stringBuilder0 = new StringBuilder("pyT.");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("pyT.", stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer("pyT.");
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      int int0 = (-1939);
      // Undeclared exception!
      try { 
        stringBuilder2.deleteCharAt((-1939));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1939
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.isDML("`jVPC@P>U47]");
      SQLUtil.isDDL("aA$:&.Wph? mqS");
      SQLUtil.parseColumnTypeAndSize("`jVPC@P>U47]");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`jVPC@P>U47]");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized view", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(7);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "update#~pjr6y";
      SQLUtil.mutatesDataOrStructure("update#~pjr6y");
      String string1 = "Illegal column type format: ";
      SQLUtil.isQuery("Illegal column type format: ");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = "alter materialized view";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = "alter materialized view";
      stringArray0[5] = "alter materialized view";
      stringArray0[6] = "null";
      SQLUtil.join("null", "alter materialized view", stringArray0, "null", "Johab", stringArray0);
      SQLUtil.leftJoin("alter materialized view", stringArray0, "null", "alter materialized view", stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "null join null as Johab on alter materialized view.alter materialized view = Johab.alter materialized view and alter materialized view.alter materialized view = Johab.alter materialized view and alter materialized view.alter materialized view = Johab.alter materialized view and alter materialized view.alter materialized view = Johab.alter materialized view and alter materialized view.alter materialized view = Johab.alter materialized view and alter materialized view.alter materialized view = Johab.alter materialized view and alter materialized view.null = Johab.null";
      stringArray1[1] = "create materialized viewadd";
      stringArray1[2] = "left join null as alter materialized view on alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.null = alter materialized view.null";
      stringArray1[3] = "left join null as alter materialized view on alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.alter materialized view = alter materialized view.alter materialized view and alter materialized view.null = alter materialized view.null";
      stringArray1[4] = "Johab";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter indexcallexec*5l$";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ALTER TABLE ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint ALTER TABLE ", string0);
      assertNotNull(string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(11, "ALTER TABLE ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexcallexec*5l$", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter indexcallexec*5l$ ALTER TABLE  NULL", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("drop materialized view", "C<c/3beE37", "C<c/3beE37");
      assertEquals("drop materialized view", string0);
      
      SQLUtil.parseColumnTypeAndSize("drop materialized view");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesDataOrStructure("drop materialized view");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string1 = SQLUtil.normalize("@L*?]' gq::=6!B", true);
      assertEquals("@ L * ? ] ' gq::=6!B'", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      DBDataType dBDataType0 = DBDataType.getInstance(6, "insertcallexec*5l$[");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("@ L * ? ] ' gq::=6!B'", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("exec");
      dBColumnArray0[2] = dBColumn0;
      Integer integer2 = new Integer(0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("drop materialized view", defaultDBTable0, dBDataType0, integer0, integer2);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("drop materialized view", defaultDBTable0, dBDataType0, integer3);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn3;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("exec, @ L * ? ] ' gq::=6!B', exec, drop materialized view, drop materialized view", string2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("catalog null");
      DBDataType dBDataType0 = DBDataType.getInstance(1868, "catalog null");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("catalog null", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "&,coznaRrsM|4*JgJ:";
      String[] stringArray0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&,coznaRrsM|4*JgJ:", true, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      SQLUtil.parseColumnTypeAndSize("&,coznaRrsM|4*JgJ:");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis(0L);
      SQLUtil.normalize("{:", true);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("callcallexec*5l$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'callcallexec*5l$' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("eZhq0B4sfxt7xQ;");
      jdbcClob0.getCharacterStream();
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.wordChars(336, 335544577);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "insertexec*5l$[";
      SQLUtil.parseColumnTypeAndSize("insertexec*5l$[");
      System.setCurrentTimeMillis((-840L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("m}-");
      SQLUtil.parseColumnTypeAndSize("m}-");
      SQLUtil.mutatesDataOrStructure("exec*5l$[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = ".n_N~nX|?Qv0jZ,7*";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint(".n_N~nX|?Qv0jZ,7*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("*4fU{_9WKKz)_", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage(" m;xA_3F0`2G.n", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure(" m;xA_3F0`2G.n", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("*4fU{_9WKKz)_. m;xA_3F0`2G.n", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBSchema0.getTable("*4fU{_9WKKz)_");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*4fU{_9WKKz)_", (DBTable) null, 2147483645, "<w ");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("op_set_cursor ", (DBTable) null, 131, "*4fU{_9WKKz)_");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("*4fU{_9WKKz)_, op_set_cursor ", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001\u0109");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\u0001\u0109";
      stringArray0[1] = "\u0001\u0109";
      stringArray0[2] = "\u0001\u0109";
      stringArray0[3] = "j'0~Ix.j[q? xns&*%";
      stringArray0[4] = "\u0001\u0109";
      stringArray0[5] = "";
      stringArray0[6] = "\u0001\u0109";
      stringArray0[7] = "j'0~Ix.j[q? xns&*%";
      stringArray0[8] = "\u0001\u0109";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "j'0~Ix.j[q? xns&*%", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (\u0001\u0109, \u0001\u0109, \u0001\u0109, j'0~Ix.j[q? xns&*%, \u0001\u0109, , \u0001\u0109, j'0~Ix.j[q? xns&*%, \u0001\u0109)", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop materialized view{5");
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "drop materialized view{5";
      stringArray0[3] = "*/";
      stringArray0[4] = "SELECT * FROM ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "kta", true, stringArray0);
      String string0 = SQLUtil.substituteMarkers("", "SELECT * FROM ", dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.substituteMarkers("7", "7", "7");
      DBSchema dBSchema0 = new DBSchema(" or ", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("InternalTransaction", dBSchema0);
      String string0 = "CONSTRAINT ";
      defaultDBTable0.getColumns();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CONSTRAINT ", false, (String[]) null);
      String string1 = "create unique indexinsert";
      dBUniqueConstraint0.equals("create unique indexinsert");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" or ", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(dBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "^C \\kt`gp(43";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("^C kt`gp(43");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ^C kt`gp(43
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("drop materialized vieworg.apache.derby.impl.sql.compile.nextsequencenode");
      dBSchema0.getTable("drop materialized vieworg.apache.derby.impl.sql.compile.nextsequencenode");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "drop materialized vieworg.apache.derby.impl.sql.compile.nextsequencenode";
      stringArray0[1] = "drop materialized vieworg.apache.derby.impl.sql.compile.nextsequencenode";
      stringArray0[2] = "drop materialized vieworg.apache.derby.impl.sql.compile.nextsequencenode";
      stringArray0[3] = "drop materialized vieworg.apache.derby.impl.sql.compile.nextsequencenode";
      stringArray0[4] = "";
      stringArray0[5] = "!%[;HJ4+g@xct_m";
      stringArray0[6] = "CHARACTER_SET_ID";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "truncate";
      boolean boolean0 = false;
      SQLUtil.normalize("truncate", false);
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = "UNIQUE ";
      SQLUtil.normalize("UNIQUE ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("UNIQUE");
      int int0 = 1418;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(1418);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1418, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.isDML("You cannot rollback closed connection.");
      SQLUtil.removeComments("You cannot rollback closed connection.");
      String string0 = "\"Hq|/H";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"Hq|/H";
      stringArray0[1] = "You cannot rollback closed connection.";
      stringArray0[2] = "\"Hq|/H";
      stringArray0[3] = "\"Hq|/H";
      SQLUtil.renderColumnListWithTableName("\"Hq|/H", stringArray0);
      SQLUtil.normalize("\"Hq|/H.\"Hq|/H, \"Hq|/H.You cannot rollback closed connection., \"Hq|/H.\"Hq|/H, \"Hq|/H.\"Hq|/H", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "create materialized view";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("create materialized view");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'create materialized view' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "o:-}";
      int int0 = 400;
      StringBuilder stringBuilder0 = new StringBuilder(400);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("o:-}", stringBuilder0);
      boolean boolean0 = true;
      stringBuilder1.chars();
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(400, (float) 400);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 400
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(":aG7");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("$O");
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":aG7";
      stringArray0[1] = ":aG7";
      stringArray0[2] = ",xJ_g4l]<xoHqm)tD-$";
      stringArray0[3] = "create materialized view";
      stringArray0[4] = "$O";
      stringArray0[5] = ":aG7";
      stringArray0[6] = "$O";
      stringArray0[7] = "$O";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "update;cocflt2#;o,";
      SQLUtil.isDML("update;cocflt2#;o,");
      String string1 = ">f)3u;";
      DBSchema dBSchema0 = null;
      DBPackage dBPackage0 = new DBPackage("update;cocflt2#;o,", (DBSchema) null);
      OrderedNameMap.createCaseSensitiveMap();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">f)3u;";
      stringArray0[1] = "update;cocflt2#;o,";
      stringArray0[2] = "update;cocflt2#;o,";
      stringArray0[3] = "update;cocflt2#;o,";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (>f)3u;, update;cocflt2#;o,, update;cocflt2#;o,, update;cocflt2#;o,)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rPw,_*'Qz=R>d%R5@mk";
      stringArray0[1] = "rPw,_*'Qz=R>d%R5@mk";
      stringArray0[2] = "rPw,_*'Qz=R>d%R5@mk";
      stringArray0[3] = "rPw,_*'Qz=R>d%R5@mk";
      stringArray0[4] = "rPw,_*'Qz=R>d%R5@mk";
      stringArray0[5] = "rPw,_*'Qz=R>d%R5@mk";
      stringArray0[6] = "rPw,_*'Qz=R>d%R5@mk";
      stringArray0[7] = "rPw,_*'Qz=R>d%R5@mk";
      SQLUtil.leftJoin("rPw,_*'Qz=R>d%R5@mk", stringArray0, "rPw,_*'Qz=R>d%R5@mk", "rPw,_*'Qz=R>d%R5@mk", stringArray0);
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.renderValue(integer0);
      SQLUtil.renderValue("0");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (rPw,_*'Qz=R>d%R5@mk, rPw,_*'Qz=R>d%R5@mk, rPw,_*'Qz=R>d%R5@mk, rPw,_*'Qz=R>d%R5@mk, rPw,_*'Qz=R>d%R5@mk, rPw,_*'Qz=R>d%R5@mk, rPw,_*'Qz=R>d%R5@mk, rPw,_*'Qz=R>d%R5@mk)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "drop materialized viewadd";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewadd", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop materialized viewadd";
      stringArray0[1] = "eQ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized viewadd", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop materialized viewadd", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("UFB?BH#Za4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.isProcedureCall("org.firebirdsql.gds.impl.GDSHelper");
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "org.firebirdsql.gds.impl.GDSHelper", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = " ADD ";
      SQLUtil.isDDL(" ADD ");
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        errorMessages0.getNCharacterStream(0);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNCharacterStream(I)Ljava/io/Reader; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[sql=[";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ";yQwu:)Ka=C,Y";
      stringArray0[4] = "";
      stringArray0[5] = "Jy4i?";
      SQLUtil.renderColumnNames(stringArray0);
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.renderColumnNames((String[]) null);
      String string0 = "BNnC7]Q9O";
      SQLUtil.mutatesStructure("BNnC7]Q9O");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      String string1 = ".";
      DBTable dBTable0 = null;
      String string2 = "into";
      DBDataType dBDataType0 = DBDataType.getInstance(1356, "into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("into", (DBTable) null, 48, "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.isDDL("Px3");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Px3";
      stringArray0[1] = "UNIQUE ";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "UNIQUE ";
      stringArray1[1] = "UNIQUE ";
      stringArray1[2] = "cWVK1Tl6;H\"T*B)]";
      stringArray1[3] = "UNIQUE ";
      SQLUtil.leftJoin("7o;={dyVv", stringArray0, "cWVK1Tl6;H\"T*B)]", "Px3", stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("DEFAULT_COLLATION_NAME", stringArray1, "UNIQUE ", "DEFAULT_COLLATION_NAME", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLUtil.normalize(" add ", true);
      DBSchema dBSchema0 = new DBSchema("j}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("add", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j}";
      stringArray0[1] = "add";
      stringArray0[2] = " add ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" add ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      dBForeignKeyConstraint0.equals("j}");
      SQLUtil.isDML("j}");
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder("VkXn\"?B4");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CONSTRAINT \" add \" FOREIGN KEY (j}, add,  add ) REFERENCES add(j}, add,  add )");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("CONSTRAINT \" add \" FOREIGN KEY (j}, add,  add ) REFERENCES add(j}, add,  add )");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("aL-iLMn(rg,ngj", true);
      Random.setNextRandom(1629);
      String string0 = "6@_[t4 l<";
      SQLUtil.mutatesDataOrStructure("6@_[t4 l<");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "aL-iLMn(rg,ngj";
      stringArray0[1] = "6@_[t4 l<";
      stringArray0[2] = "create tablelvw<9omr5zq_]";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isDML("execute");
      SQLUtil.typeAndName((DBObject) null);
      String string1 = "Cp`";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create tablelvw<9omr5zq_]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = " NOT";
      SQLUtil.innerJoin("BS3X!ua~2e-,", stringArray0, " NOT", "-r;P=e=1:|)s/3sZ$H(", stringArray0);
      String string0 = "lpcZ";
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SQLERRD1", compositeDBObject0);
      tableContainer0.getTable("executeillegal column type format:");
      DBDataType dBDataType0 = DBDataType.getInstance((-485), "truncate");
      Integer integer0 = new Integer((-485));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lpcZ", (DBTable) null, dBDataType0, integer0);
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.removeComments("drop t");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("drop t");
      SQLUtil.typeAndName((DBObject) null);
      String string0 = "l'/h*-F6Bo9'?Q";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("drop t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "Expected file length: ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Expected file length: ");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'Expected file length: '
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">D!/Rz#Pm=^Pa(T2CA", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
