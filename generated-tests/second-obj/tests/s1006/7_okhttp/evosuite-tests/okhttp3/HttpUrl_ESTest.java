/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:56:22 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "";
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "::";
      try { 
        HttpUrl.getChecked("::");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::4.8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::4.8
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "K=wi_^1Z[H>CU", "http");
      HttpUrl.get(uRI0);
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNull(uRI1.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = " \"':;<=>@[]^`}}m/\\?#";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("vmB%RVny6\"t?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: vmB%RVny6\"t?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        HttpUrl.getChecked("C+z`-");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for C+z`-
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      try { 
        HttpUrl.getChecked("h*dH&Q?m");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for h*dH&Q?m
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("https:", "https:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "aWCb";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("aWCb");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("aWCb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: aWCb
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1507), "6\"LBLK^UT?\"3y&_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("\"J");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = " \"':;<=>@[]^`{}|/\\?#";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("::", "::");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "nak#`5F}#z2:gO-";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1616555954), "nak#`5F}#z2:gO-");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("ht:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("ht:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("[vSn V]A:A+;#]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: [vSn V]A:A+;#]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(":8");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("f::b:88b.?&:?");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("f::b:88b.?&:?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: f::b:88b.?&:?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "h2";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("h2");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("h2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: h2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("EcQ*P+El^ckWDd");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(".%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "+:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("2/%XFl~V*+c+");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(1726, "2/%XFl~V*+c+");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1726, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("::3b.8HEH");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("e%23Uh=3obf1Sz%2F!mRRCY");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "pathSegments == null";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("pathSegments == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("pathSegments == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      int int0 = (-935);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-935));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u2026");
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllEncodedQueryParameters("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      try { 
        MockURL.URL("0:E#-^Z", "", "0:E#-^Z");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 0:e#-^z
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("https:", "https:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("https:", "https:");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ";2U&";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password(";2U&");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "\n";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b:c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b:c
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("$\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("pU[&[ !%MnO5B3).", 97, 59, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("oV,NA]>+,h}y*$Zz", false);
      assertEquals("oV,NA]>+,h}y*$Zz", string0);
      assertNotNull(string0);
      
      try { 
        HttpUrl.getChecked("f::b::b.?&:?");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for f::b::b.?&:?
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "Y2m", "Y2m");
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:Y2m#Y2m", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("Y2m", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:Y2m#Y2m", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("Y2m", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("y2m", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://y2m/#Y2m", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("Y2m", httpUrl0.encodedFragment());
      assertEquals("Y2m", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      String string0 = MockURI.getUserInfo(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:Y2m#Y2m", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("Y2m", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("f:3b.8bi?&:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("\"J");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("\"J", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("f::b:88b.?&:?");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l W~Sp^`w]*A");
      assertFalse(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      httpUrl_Builder1.encodedQueryNamesAndValues = (List<String>) linkedList1;
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, httpUrl_Builder1.encodedQueryNamesAndValues.size());
      assertTrue(httpUrl_Builder1.encodedQueryNamesAndValues.isEmpty());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("username == null", "ffff0000");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL(".8", "f::b:88b.?&:?", "l W~Sp^`w]*A");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: .8
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("fromIndex < 0", "fromIndex < 0");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("fromIndex < 0");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "https:";
      String string1 = HttpUrl.percentDecode("https:", true);
      assertEquals("https:", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string2 = "<xBReH+%M9?,OrI";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(95, "<xBReH+%M9?,OrI");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 95, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("gtT+3Bh7jkhskQH");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ":l5CAC:HR%3C";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters(":l5CAC:HR%3C");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = "+h[ii<ZbZ?|]Q8o=";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedQuery("+h[ii<ZbZ?|]Q8o=");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("(da%f", 6, 48, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("v?/@907I<V9mZ;=Q_y");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        HttpUrl.getChecked("l4i$x_|");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for l4i$x_|
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      int int0 = HttpUrl.decodeHexDigit('(');
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1117), "x]\"Cs#IuJ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("a+B#:[t");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("UTF-32BE", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = ":::b?8bi?&:?";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(":::b?8bi?&:?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :::b?8bi?&:?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "aWCb";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("aWCb");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("aWCb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: aWCb
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("fromIndex < 0");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.username("2/| ?BJDvdRpo__\"");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("l({o<X~Y-jzW");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("l({o<X~Y-jzW");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      List<String> list0 = httpUrl_Builder2.encodedQueryNamesAndValues;
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("8cF.*{cRyg-u$X", "8cF.*{cRyg-u$X");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addPathSegments("8cF.*{cRyg-u$X");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.removeAllQueryParameters("l({o<X~Y-jzW");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder5);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "US-ASCII";
      try { 
        HttpUrl.getChecked("US-ASCII");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for US-ASCII
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        HttpUrl.getChecked("e}LYr)ZwvKw}G@");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for e}LYr)ZwvKw}G@
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "http:%";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("http:%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: http:%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("=\"A3>vhGQt'{D");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      int int0 = HttpUrl.defaultPort("RM58)59Az");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "https:";
      String string1 = HttpUrl.percentDecode("https:", true);
      assertEquals("https:", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("https:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", ":8", "http");
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("http::8#http", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("http::8#http", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("http");
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded(":8", (-3896), (-600));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ": ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(": ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      try { 
        MockURI.URI(": ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: : 
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "(;F~";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      String string1 = "*df`'H~|Ob],`";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.host("ld45!=Hx4ZS}+j");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPath("/]");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-2244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = HttpUrl.canonicalize("*/n%Xwl~V*Zc+", "6;?R?A?7q(13Sx\"", true, true, true, true);
      assertEquals("*/n%25Xwl~V*Zc+", string0);
      assertNotNull(string0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("*/n%Xwl~V*Zc+");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        HttpUrl.Builder.ParseResult.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant okhttp3.HttpUrl.Builder.ParseResult.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      httpUrl_Builder0.encodedQueryNamesAndValues = list0;
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(httpUrl_Builder0.encodedQueryNamesAndValues.isEmpty());
      assertEquals(1, httpUrl_Builder0.encodedQueryNamesAndValues.size());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("+h[ii<ZbZ?|]Q8o=");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(969);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      int int0 = 51;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment(51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "_f";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.host("_f");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("okio.Segment");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("okio.Segment");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("f::b:8b.?&:?");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("duration <= 0: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: duration <= 0: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "dW}5bb^H`}.";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.Util");
      assertFalse(boolean0);
      
      try { 
        HttpUrl.getChecked("okio.Util");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for okio.Util
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "\u2026";
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("\u2026");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: \u2026
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "MISSING_SCHEME");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        MockURI.URI("MISSING_SCHEME", ":8", "http");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 7: MISSING_SCHEME::8#http
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "\u2026";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      String string1 = "out == null";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(97, "\u2026");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = " E]NhN4< H]z@w9E #H";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment(" E]NhN4< H]z@w9E #H");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters(" E]NhN4< H]z@w9E #H");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme(" E]NhN4< H]z@w9E #H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme:  E]NhN4< H]z@w9E #H
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      int int0 = 933;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(933, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("x?w\"|pk)x%w[3h");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addEncodedQueryParameter((String) null, "::");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(17, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("&bbd!j~=:", true);
      assertEquals("&bbd!j~=:", string0);
      assertNotNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HttpUrl.pathSegmentsToString((StringBuilder) null, linkedList0);
      assertEquals(0, linkedList0.size());
      
      try { 
        HttpUrl.getChecked("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for [\u0000-\u001F-\u009Fp{javaWhitespace}]
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = HttpUrl.percentDecode("%7c;=kx7p@y*d2+o%22%3f%22j", true);
      assertEquals("|;=kx7p@y*d2 o\"?\"j", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "%z+F:";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%z+F:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("%z+F:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %z+F:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.encodedPassword = "CRS(0&F6oAR9`rXBM";
      String string0 = "f::b:8b.?&:?";
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment(" 't}L~;51g");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:=wi_%5e1z[h%3ecu#http");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:=wi_%5e1z[h%3ecu#http
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, 590, (String) null, (String) null, " for ");
      assertEquals("%20for%20", uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("#%20for%20", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      String string0 = MockURL.getQuery(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(string0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = httpUrl0.encodedPassword();
      assertEquals("", string1);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(string1);
      
      httpUrl_Builder0.parse(httpUrl0, "$FZl&j");
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      
      boolean boolean0 = HttpUrl.percentEncoded((String) null, 590, 590);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.URI("http", "http", "delegate == null");
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:http#delegate%20==%20null", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("delegate%20==%20null", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:http#delegate%20==%20null", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("delegate%20==%20null", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("delegate == null", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http/#delegate%20==%20null", httpUrl0.toString());
      assertEquals("delegate%20==%20null", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl0.newBuilder("JeMv+6\"=O#=+6)<tVs");
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:http#delegate%20==%20null", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("delegate%20==%20null", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("delegate == null", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http/#delegate%20==%20null", httpUrl0.toString());
      assertEquals("delegate%20==%20null", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl_Builder1);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:http#delegate%20==%20null", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("delegate%20==%20null", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("delegate == null", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http/#delegate%20==%20null", httpUrl0.toString());
      assertEquals("delegate%20==%20null", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string0 = httpUrl0.host();
      assertEquals("http", string0);
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:http#delegate%20==%20null", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("delegate%20==%20null", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("delegate == null", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http/#delegate%20==%20null", httpUrl0.toString());
      assertEquals("delegate%20==%20null", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertNotNull(string0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("]");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/]", httpUrl1.toString());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "r.";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("r.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = "f::b.8bi?&:?";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f::b.8bi?&:?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f::b.8bi?&:?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "";
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertNotNull(httpUrl_Builder1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*XrG&rTR");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "g}*x[]V5M@Bg9Js<";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("GMT", "g}*x[]V5M@Bg9Js<");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedPathSegments("%2e%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(37);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("+h[ii%3czbz%3f%7c]q8o=", "");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      httpUrl_Builder0.encodedUsername = "%2e%2e";
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      URI uRI0 = MockURI.URI("%2e%2e");
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("%2e%2e", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getScheme());
      assertEquals("%2e%2e", uRI0.toString());
      assertNotNull(uRI0);
      
      boolean boolean1 = httpUrl0.isHttps();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(string0);
      
      String string1 = "[[:";
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("$%0d");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "bytes is empty";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("bytes is empty");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("bytes is empty");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(912, "bytes is empty");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 912, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.encodedFragment = "vSn V]A:A+;#";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("vSn V]A:A+;#");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.fragment("w3Irp@Id-&j&)h0^");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegment("");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.addPathSegment("");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedFragment("https");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.removeAllQueryParameters("");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder6);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.addPathSegments("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder7);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder6.encodedUsername(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder8);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder8);
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder5.query("https");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertNotNull(httpUrl_Builder9);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder6.host("f.qb?8bi?&:?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f.qb?8bi?&:?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = " \"':;<=>@[]^`{}|/\\?#";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllQueryParameters("sN_P5?.DvY$+El-bC");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      String string1 = "MOI^<yCy]gRQQ'f_5nD";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.removeAllEncodedQueryParameters(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("%2e.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %2e.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllQueryParameters("LVaQ{b\"9HD`");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      String string0 = "8:9::";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}F:D");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("l W~Sp^`w]*A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: l W~Sp^`w]*A
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ":";
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = MockURL.getFile(uRL0);
      assertEquals("/fooExample", string0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(string0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      String string1 = httpUrl0.encodedQuery();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string1);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(string0);
      
      String string1 = httpUrl0.password();
      assertEquals("", string1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(string1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "(?");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("(?", stringBuilder0.toString());
      assertEquals("(?", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("^Y=_", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "|;=Kx7P@Y*D2+oF?\"J", "|;=Kx7P@Y*D2+oF?\"J");
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("+:");
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      httpUrl0.hashCode();
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      
      List<String> list1 = httpUrl0.pathSegments();
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      String string0 = httpUrl0.redact();
      assertEquals("http://y*d2+of/...", string0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(string0);
      
      String string1 = httpUrl0.encodedPath();
      assertEquals("/", string1);
      assertFalse(string1.equals((Object)string0));
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(string1);
      
      String string2 = httpUrl0.username();
      assertEquals("|;=Kx7P", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HttpUrl.percentDecode(buffer0, "v(", 590, (-655), false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = httpUrl0.encodedPassword();
      assertEquals("", string0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string0);
      
      String string1 = httpUrl0.toString();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", string1);
      assertFalse(string1.equals((Object)string0));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string1);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "https:+*c8b?&:#http";
      HttpUrl httpUrl0 = HttpUrl.parse("https:+*c8b?&:#http");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("+*c8b", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https://+*c8b/?&:#http", httpUrl0.toString());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("+*c8b", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https://+*c8b/?&:#http", httpUrl0.toString());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "f:", "f:");
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:f:#f:", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("f:", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:f:#f:", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("f:", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("http://f/#f:", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("f:", httpUrl0.encodedFragment());
      assertEquals("f:", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("f", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:f:#f:", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("f:", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("http://f/#f:", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("f:", httpUrl0.encodedFragment());
      assertEquals("f:", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("f", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://f/#f:", uRL0.toString());
      assertEquals("http://f/#f:", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("f", uRL0.getHost());
      assertEquals("f:", uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("f", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("f:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllEncodedQueryParameters(" \"':;<=>@[]^`{n|/?#&!$()=~");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      String string0 = httpUrl0.query();
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:f:#f:", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("f:", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("http://f/#f:", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("f:", httpUrl0.encodedFragment());
      assertEquals("f:", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("f", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(string0);
      
      String string1 = httpUrl0.encodedFragment();
      assertEquals("f:", string1);
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:f:#f:", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("f:", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("http://f/#f:", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("f:", httpUrl0.encodedFragment());
      assertEquals("f:", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("f", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      int int0 = httpUrl0.port();
      assertEquals(80, int0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals("%q}foNrs");
      assertFalse(boolean0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "%q}foNrs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "\\.";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL1 = MockURL.URL(uRL0, ".");
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotNull(uRL1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      URI uRI0 = MockURI.create(".");
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals(".", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getScheme());
      assertEquals(".", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      String string1 = "%2e%2e";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string2 = "U>wGwXaPa";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password(string2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters(string1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment(string0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment(string1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(httpUrl_Builder5);
      
      String string3 = "duration <= 0: ";
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.removeAllEncodedQueryParameters(string3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "";
      String string1 = "UI2";
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string2 = "c";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("c");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegments("+\\Qb2#,L&4gqH}PZ4");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.scheme("KFY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: KFY
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = httpUrl0.scheme();
      assertEquals("http", string0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string1 = httpUrl0.scheme();
      assertEquals("http", string1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string1);
      
      String string2 = httpUrl0.username();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "https:+*c8b?&:##ttp";
      HttpUrl httpUrl0 = HttpUrl.parse("https:+*c8b?&:##ttp");
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("#ttp", httpUrl0.fragment());
      assertEquals("+*c8b", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("https://+*c8b/?&:##ttp", httpUrl0.toString());
      assertEquals("#ttp", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      try { 
        MockURI.URI("https:+*c8b?&:##ttp", "=Z6Bcmn{3VSb31?^1i9", "=Z6Bcmn{3VSb31?^1i9", 328, "=Z6Bcmn{3VSb31?^1i9", "https:+*c8b?&:##ttp", "Zo99%w");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: https:+*c8b?&:##ttp://=Z6Bcmn%7B3VSb31%3F%5E1i9@=Z6Bcmn{3VSb31?^1i9:328=Z6Bcmn%7B3VSb31%3F%5E1i9?https:+*c8b?&:%23%23ttp#Zo99%25w
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("WL)XXI3FG>4");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("%22%3c%3e%5e%60%7b%7d%7c");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedQueryParameter("", "SUCCESS");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.port(70);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder5);
      
      URI uRI0 = MockURI.URI("http:k", "]3X`1(^@", "FHCRC", (-1694), "/...", "7mifK{=hI]_vPC", "88Mya<");
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("http:k://%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", uRI0.toString());
      assertEquals("88Mya%3C", uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("http:k://%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", uRI0.toString());
      assertEquals("88Mya%3C", uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI1.getPort());
      assertEquals("88Mya%3C", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertEquals("http:k://%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertNotNull(uRI1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("http:k://%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", uRI0.toString());
      assertEquals("88Mya%3C", uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI1.getPort());
      assertEquals("88Mya%3C", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertEquals("http:k://%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("k", httpUrl0.host());
      assertEquals(3, httpUrl0.pathSize());
      assertEquals("88Mya%3C", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("88Mya<", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://k//%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("http:k://%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", uRI0.toString());
      assertEquals("88Mya%3C", uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI1.getPort());
      assertEquals("88Mya%3C", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertEquals("http:k://%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("k", httpUrl0.host());
      assertEquals(3, httpUrl0.pathSize());
      assertEquals("88Mya%3C", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("88Mya<", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://k//%5D3X%601(%5E%40@FHCRC:-1694/...?7mifK%7B=hI]_vPC#88Mya%3C", httpUrl0.toString());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1362));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "o^QZ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("o^QZ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = "+h[ii%3czbz%3f%7c]q8o=";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(19, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("<|b$DGy;zDu68D|nj?");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("?PdWm%8|<n=.~.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ?PdWm%8|<n=.~.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "\n";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      URI uRI1 = httpUrl0.uri();
      assertNotSame(uRI1, uRI0);
      assertTrue(uRI1.equals((Object)uRI0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.somefakebutwellformedurl.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertNotNull(uRI1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "[:]";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "[:";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "|;=Kx7P@Y*D2+oF?\"J", "|;=Kx7P@Y*D2+oF?\"J");
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.queryParameter(")sTtI~+H&F");
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "https";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("https");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("https", "https");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      String string1 = "://";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments(".%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.encodedPassword(";:BoU\"q!");
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.scheme("https");
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder6);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder3.encodedPassword("://");
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder7);
      
      String string2 = "+DCTIa8c;R";
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder2.username("+DCTIa8c;R");
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertNotNull(httpUrl_Builder8);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "://");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder8.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)109;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-64), (byte)10, (byte) (-63), (byte)64, (byte) (-63), (byte)25, (byte)109}, byteArray0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      String string0 = MockURI.getRawPath(uRI0);
      assertEquals("/fooExample", string0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNotNull(string0);
      
      String string1 = httpUrl0.queryParameter("/fooExample");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "|;=Kx7P@Y*D2+oF?\"J", "|;=Kx7P@Y*D2+oF?\"J");
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals("%22J", string0);
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertNotNull(string0);
      
      List<String> list0 = httpUrl0.queryParameterValues("+:");
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      httpUrl0.hashCode();
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      
      List<String> list1 = httpUrl0.pathSegments();
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("y*d2+of", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      String string0 = MockURI.getUserInfo(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(string0);
      
      boolean boolean1 = httpUrl0.isHttps();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      StringBuilder stringBuilder0 = new StringBuilder("3");
      assertEquals("3", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      HttpUrl.pathSegmentsToString(stringBuilder0, list0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("3", stringBuilder0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(1240);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "https:p@id-%7f&j&)h0%5e#r");
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("p@id-%7f&j&)h0%5e", uRL1.getFile());
      assertEquals("r", uRL1.getRef());
      assertEquals("https:p@id-%7f&j&)h0%5e#r", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("https", uRL1.getProtocol());
      assertNull(uRL1.getAuthority());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("https:p@id-%7f&j&)h0%5e#r", uRL1.toExternalForm());
      assertEquals("p@id-%7f&j&)h0%5e", uRL1.getPath());
      assertNotNull(uRL1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("p@id-%7f&j&)h0%5e", uRL1.getFile());
      assertEquals("r", uRL1.getRef());
      assertEquals("https:p@id-%7f&j&)h0%5e#r", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("https", uRL1.getProtocol());
      assertNull(uRL1.getAuthority());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("https:p@id-%7f&j&)h0%5e#r", uRL1.toExternalForm());
      assertEquals("p@id-%7f&j&)h0%5e", uRL1.getPath());
      assertNull(httpUrl0);
      
      URI uRI0 = MockURI.create(".");
      assertEquals(".", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(".", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "%2e%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(string0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "source exhausted prematurely");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.query();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=w?Fv8");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = httpUrl0.host();
      assertEquals("www.somefakebutwellformedurl.org", string1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(string1);
      
      String string2 = httpUrl0.host();
      assertEquals("www.somefakebutwellformedurl.org", string2);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(string2);
      
      List<String> list0 = httpUrl0.queryParameterValues("https");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "|;=ux7PD2+o\"?^\"J";
      URI uRI0 = MockURI.URI("http", "|;=ux7PD2+o\"?^\"J", "|;=ux7PD2+o\"?^\"J");
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http:%7C;=ux7PD2+o%22?%5E%22J#%7C;=ux7PD2+o%22?%5E%22J", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("%7C;=ux7PD2+o%22?%5E%22J", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http:%7C;=ux7PD2+o%22?%5E%22J#%7C;=ux7PD2+o%22?%5E%22J", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("%7C;=ux7PD2+o%22?%5E%22J", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("|;=ux7PD2+o\"?^\"J", httpUrl0.fragment());
      assertEquals("%7C;=ux7PD2+o%22?%5E%22J", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("|;=ux7pd2+o\"", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://|;=ux7pd2+o\"/?%5E%22J#%7C;=ux7PD2+o%22?%5E%22J", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      int int0 = 849;
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(849);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1699, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "~:8", "http");
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("http:~:8#http", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("http:~:8#http", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(8, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("http://~:8/#http", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("~", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("http");
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        HttpUrl.Builder.ParseResult.valueOf("okio.Base64");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant okhttp3.HttpUrl.Builder.ParseResult.okio.Base64
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "https:2d71r1ng1nrehc#%7c;=ux7pd2+o%22?s5e%22j";
      URI uRI0 = MockURI.URI("https:2d71r1ng1nrehc#%7c;=ux7pd2+o%22?s5e%22j");
      assertEquals((-1), uRI0.getPort());
      assertEquals("%7c;=ux7pd2+o%22?s5e%22j", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("https:2d71r1ng1nrehc#%7c;=ux7pd2+o%22?s5e%22j", uRI0.toString());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:2d71r1ng1nrehc#%7c;=ux7pd2+o%22?s5e%22j");
      assertEquals("https", httpUrl0.scheme());
      assertEquals("%7c;=ux7pd2+o%22?s5e%22j", httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("2d71r1ng1nrehc", httpUrl0.host());
      assertEquals("|;=ux7pd2+o\"?s5e\"j", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("https://2d71r1ng1nrehc/#%7c;=ux7pd2+o%22?s5e%22j", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "$pz%0d";
      try { 
        MockURL.URL("$pz%0d");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: $pz%0d
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "|;=Kp7P@Y*D2h@i?\"J";
      URI uRI0 = MockURI.URI("http", "|;=Kp7P@Y*D2h@i?\"J", "|;=Kp7P@Y*D2h@i?\"J");
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://%7C%3B%3DKp7P%40Y*D2h@i/?%22J#%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.toString());
      assertEquals("|;=Kp7P@Y*D2h@i?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.encodedFragment());
      assertEquals("|;=Kp7P@Y*D2h", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("i", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertNotNull(httpUrl0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      List<String> list0 = httpUrl0.queryParameterValues("':");
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://%7C%3B%3DKp7P%40Y*D2h@i/?%22J#%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.toString());
      assertEquals("|;=Kp7P@Y*D2h@i?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.encodedFragment());
      assertEquals("|;=Kp7P@Y*D2h", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("i", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string1 = httpUrl0.query();
      assertEquals("\"J", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://%7C%3B%3DKp7P%40Y*D2h@i/?%22J#%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.toString());
      assertEquals("|;=Kp7P@Y*D2h@i?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.encodedFragment());
      assertEquals("|;=Kp7P@Y*D2h", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("i", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(2922);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5845, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "TlrW4d0oSqpK", "TlrW4d0oSqpK");
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:TlrW4d0oSqpK#TlrW4d0oSqpK", uRI0.toString());
      assertEquals("TlrW4d0oSqpK", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:TlrW4d0oSqpK#TlrW4d0oSqpK", uRI0.toString());
      assertEquals("TlrW4d0oSqpK", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("tlrw4d0osqpk", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.fragment());
      assertEquals("http://tlrw4d0osqpk/#TlrW4d0oSqpK", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:TlrW4d0oSqpK#TlrW4d0oSqpK", uRI0.toString());
      assertEquals("TlrW4d0oSqpK", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("tlrw4d0osqpk", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.fragment());
      assertEquals("http://tlrw4d0osqpk/#TlrW4d0oSqpK", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://tlrw4d0osqpk/#TlrW4d0oSqpK", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("tlrw4d0osqpk", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("TlrW4d0oSqpK", uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("tlrw4d0osqpk", uRL0.getHost());
      assertEquals("http://tlrw4d0osqpk/#TlrW4d0oSqpK", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("TlrW4d0oSqpK");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("TlrW4d0oSqpK");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      String string0 = httpUrl0.query();
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:TlrW4d0oSqpK#TlrW4d0oSqpK", uRI0.toString());
      assertEquals("TlrW4d0oSqpK", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("tlrw4d0osqpk", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.fragment());
      assertEquals("http://tlrw4d0osqpk/#TlrW4d0oSqpK", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(string0);
      
      String string1 = httpUrl0.encodedFragment();
      assertEquals("TlrW4d0oSqpK", string1);
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:TlrW4d0oSqpK#TlrW4d0oSqpK", uRI0.toString());
      assertEquals("TlrW4d0oSqpK", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("tlrw4d0osqpk", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.fragment());
      assertEquals("http://tlrw4d0osqpk/#TlrW4d0oSqpK", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotNull(string1);
      
      int int0 = httpUrl0.pathSize();
      assertEquals(1, int0);
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:TlrW4d0oSqpK#TlrW4d0oSqpK", uRI0.toString());
      assertEquals("TlrW4d0oSqpK", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("tlrw4d0osqpk", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("TlrW4d0oSqpK", httpUrl0.fragment());
      assertEquals("http://tlrw4d0osqpk/#TlrW4d0oSqpK", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", ":+*c8b?&:", "http");
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("http::+*c8b?&:#http", uRI0.toString());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("%22':;%3c=%3e@[J%5e%60%7d%7dm", ":+*c8b?&:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.scheme("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username(":+*c8b?&:");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertFalse(boolean0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "http";
      URI uRI0 = MockURI.URI("http", "|;=Kx7P@Y*D2+oF?\"J", "|;=Kx7P@Y*D2+oF?\"J");
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals(80, httpUrl0.port());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      int int0 = (-496);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-496));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "|;=Kp7P@Y*D2h@i?\"J", "|;=Kp7P@Y*D2h@i?\"J");
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kp7P@Y*D2h", httpUrl0.username());
      assertEquals("|;=Kp7P@Y*D2h@i?\"J", httpUrl0.fragment());
      assertEquals("i", httpUrl0.host());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKp7P%40Y*D2h@i/?%22J#%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kp7P@Y*D2h", httpUrl0.username());
      assertEquals("|;=Kp7P@Y*D2h@i?\"J", httpUrl0.fragment());
      assertEquals("i", httpUrl0.host());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKp7P%40Y*D2h@i/?%22J#%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, httpUrl0.querySize());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals("%22J", string0);
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kp7P@Y*D2h", httpUrl0.username());
      assertEquals("|;=Kp7P@Y*D2h@i?\"J", httpUrl0.fragment());
      assertEquals("i", httpUrl0.host());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKp7P%40Y*D2h@i/?%22J#%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, httpUrl0.querySize());
      assertNotNull(string0);
      
      List<String> list0 = httpUrl0.queryParameterValues("+:");
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kp7P@Y*D2h", httpUrl0.username());
      assertEquals("|;=Kp7P@Y*D2h@i?\"J", httpUrl0.fragment());
      assertEquals("i", httpUrl0.host());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKp7P%40Y*D2h@i/?%22J#%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      httpUrl0.hashCode();
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", uRI0.getRawFragment());
      assertEquals("http:%7C;=Kp7P@Y*D2h@i?%22J#%7C;=Kp7P@Y*D2h@i?%22J", uRI0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("|;=Kp7P@Y*D2h", httpUrl0.username());
      assertEquals("|;=Kp7P@Y*D2h@i?\"J", httpUrl0.fragment());
      assertEquals("i", httpUrl0.host());
      assertEquals("%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKp7P%40Y*D2h@i/?%22J#%7C;=Kp7P@Y*D2h@i?%22J", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, httpUrl0.querySize());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = httpUrl0.password();
      assertEquals("", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(string0);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.pathSegmentsToString(stringBuilder0, linkedList0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j");
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertNotNull(uRI1);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("I^Hub");
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("https://2d71rr1ng1nrehc/I%5EHub", httpUrl1.toString());
      assertNotNull(httpUrl1);
      
      String string0 = httpUrl0.query();
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(string0);
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = HttpUrl.Builder.ParseResult.SUCCESS;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray0);
      
      boolean boolean1 = httpUrl0.equals(httpUrl1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(boolean1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(boolean1 == boolean0);
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("https://2d71rr1ng1nrehc/I%5EHub", httpUrl1.toString());
      
      String string1 = httpUrl1.queryParameter("");
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("https://2d71rr1ng1nrehc/I%5EHub", httpUrl1.toString());
      assertNull(string1);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<String> list1 = httpUrl1.pathSegments();
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(list1, list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(list1.equals((Object)list0));
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("https://2d71rr1ng1nrehc/I%5EHub", httpUrl1.toString());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotNull(list1);
      
      String string2 = httpUrl1.username();
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("", string2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawPath());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI1.getRawFragment());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertEquals("https", uRI1.getScheme());
      assertNull(uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI1.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("https://2d71rr1ng1nrehc/I%5EHub", httpUrl1.toString());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j");
      assertNull(uRI0.getRawUserInfo());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"':;<=>@[]^`{}|/?#");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(uRI0.getRawUserInfo());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/%22':;%3C=%3E@[]%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals("", httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertEquals(2, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
      
      String string0 = httpUrl0.query();
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertNull(uRI0.getRawUserInfo());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(string0);
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = HttpUrl.Builder.ParseResult.SUCCESS;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      String string1 = httpUrl1.queryParameter("");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(uRI0.getRawUserInfo());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/%22':;%3C=%3E@[]%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals("", httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertEquals(2, httpUrl1.pathSize());
      assertNull(string1);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertNull(uRI0.getRawUserInfo());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      List<String> list1 = httpUrl1.pathSegments();
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(list1, list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(list1.equals((Object)list0));
      assertNull(uRI0.getRawUserInfo());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/%22':;%3C=%3E@[]%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals("", httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      String string2 = httpUrl0.username();
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals("", string2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertNull(uRI0.getRawUserInfo());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("https", uRI0.getScheme());
      assertEquals("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("2d71rr1ng1nrehc", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.encodedFragment());
      assertEquals("https://2d71rr1ng1nrehc/#%7c;=ux7pd2+o%22?%5e%22j", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("|;=ux7pd2+o\"?^\"j", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      URL uRL1 = MockURL.URL(uRL0, "\n");
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotNull(uRL1);
      
      boolean boolean1 = HttpUrl.percentEncoded("https:*c8b?&:#tgp", 8, (-1795));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = httpUrl0.encodedPath();
      assertNotSame(uRL0, uRL1);
      assertEquals("/fooExample", string0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(string0);
      
      URI uRI0 = MockURI.URI("SUCCESS");
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("SUCCESS", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("SUCCESS", uRI0.getRawPath());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNotNull(uRI0);
      
      String string1 = httpUrl0.fragment();
      assertNotSame(uRL0, uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "f:", "f:");
      assertEquals("f:", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http:f:#f:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNotNull(uRI0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("f:", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http:f:#f:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", httpUrl0.username());
      assertEquals("f:", httpUrl0.encodedFragment());
      assertEquals("f:", httpUrl0.fragment());
      assertEquals("http://f/#f:", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("f", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      String string0 = httpUrl0.host();
      assertEquals("f", string0);
      assertEquals("f:", uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("http:f:#f:", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", httpUrl0.username());
      assertEquals("f:", httpUrl0.encodedFragment());
      assertEquals("f:", httpUrl0.fragment());
      assertEquals("http://f/#f:", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("f", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.URI("http", "|;=Kx7P@Y*D2+oF?\"J", "|;=Kx7P@Y*D2+oF?\"J");
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("+:");
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawPath());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addPathSegments("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      String string0 = "wA9boOqY6a& tsFK";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("wA9boOqY6a& tsFK");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.setQueryParameter("", "");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      int int0 = (-1125);
      String string1 = "..";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment((-1125), "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "|;=Kx7P@Y*D2+oF?\"J", "|;=Kx7P@Y*D2+oF?\"J");
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      String string0 = "+:";
      String string1 = httpUrl0.encodedQuery();
      assertEquals("%22J", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(string1);
      
      List<String> list0 = httpUrl0.queryParameterValues("+:");
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      httpUrl0.hashCode();
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("%22J");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("%22J", "|;=Kx7P@Y*D2+oF?\"J");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("%22J");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      
      int int0 = httpUrl0.querySize();
      assertEquals(1, int0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http:%7C;=Kx7P@Y*D2+oF?%22J#%7C;=Kx7P@Y*D2+oF?%22J", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getRawPath());
      assertEquals("|;=Kx7P", httpUrl0.username());
      assertEquals("y*d2+of", httpUrl0.host());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.encodedFragment());
      assertEquals("http://%7C%3B%3DKx7P@y*d2+of/?%22J#%7C;=Kx7P@Y*D2+oF?%22J", httpUrl0.toString());
      assertEquals("|;=Kx7P@Y*D2+oF?\"J", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("f::b:8b.?&:?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f::b:8b.?&:?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.canonicalize("[", "':", false, true, true, false);
      URI uRI0 = MockURI.URI("fe");
      MockURI.normalize(uRI0);
      HttpUrl.queryStringToNamesAndValues("':");
      HttpUrl.canonicalize("g?KL`I7%qhs%e>%,=[", "https::8#http", true, true, true, true);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        HttpUrl.getChecked("%2e");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for %2e
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "2:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("2:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 2:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.query();
      HttpUrl httpUrl1 = HttpUrl.getChecked("https:2d71rr1ng1nrehc#%7c;=ux7pd2+o%22?%5e%22j");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      httpUrl1.encodedPathSegments();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I^Hub");
      httpUrl0.equals(httpUrl0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl0.encodedQuery();
      httpUrl1.scheme();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("{Bbe_P{tKl'%`.");
      String string0 = ")\"[";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":");
      StringBuilder stringBuilder0 = new StringBuilder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query(":");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockURL.getQuery(uRL0);
      httpUrl_Builder1.encodedFragment((String) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      httpUrl_Builder2.parse(httpUrl0, "\u0004Ux,UGGThd1Orx");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "http";
      URI uRI0 = MockURI.URI("http", "|;=Kx7P@Y*D2+oF?\"J", "|;=Kx7P@Y*D2+oF?\"J");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = ObjectStreamConstants.baseWireHandle;
      MockURI.getRawFragment(uRI0);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(8257536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 8257536
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URI uRI0 = MockURI.URI("tgp", ":+*c8b?&:", "tgp");
      HttpUrl.get(uRI0);
      HttpUrl.Builder.ParseResult.values();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HmacSHA256");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[[:]");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("https", ".");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("+s/g:1J", ",q=tmgwH-8'Ms");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "f::b:8b.?&:?";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f::b::b.?&:?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f::b::b.?&:?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "https:";
      URI uRI0 = MockURI.URI("https:", "|;=Kx7P@Y*D2+oF?\"J", "https:");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "f::b:88b.?&:?";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("GTWoeaTR");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("f::b:88b.?&:?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f::b:88b.?&:?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery(" \"'<>#&=");
      httpUrl_Builder0.encodedQuery("%0A");
      httpUrl_Builder0.port(24);
  }
}
