/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:32:46 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Choice;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.TextField;
import java.awt.color.ICC_Profile;
import java.awt.event.ContainerListener;
import java.awt.event.KeyListener;
import java.beans.EventSetDescriptor;
import java.beans.beancontext.BeanContextServicesSupport;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.ActionMap;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JTextPane;
import javax.swing.border.CompoundBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.MetaBean;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("Y/Uj<pPmd!/", "Y/Uj<pPmd!/");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      TextViewer textViewer0 = new TextViewer();
      filter0.addTrainingSetListener(textViewer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.removeInstanceListener((InstanceListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addInstanceListener((InstanceListener) null);
      boolean boolean0 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addConfigurationListener((ConfigurationListener) null);
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName("ERROR (See log for details).");
      filter0.getVisual();
      assertEquals("ERROR (See log for details).", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptDataSet((DataSetEvent) null);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      filter0.disconnectionNotification("DuQ.csdTB@", integer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus((-42));
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      int int0 = JRootPane.INFORMATION_DIALOG;
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      boolean boolean0 = filter0.eventGeneratable("Stream finished.");
      boolean boolean1 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeInstanceListener(flowByExpression0);
      Attribute attribute0 = new Attribute("|-5J-5D");
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.getStructure("v|31.nU1jb#,Hm;~mS");
      TestSetEvent testSetEvent0 = new TestSetEvent(attribute0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      filter0.addTestSetListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isOptimizedDrawingEnabled();
      filter0.globalInfo();
      filter0.eventGeneratable("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      filter0.setCustomName("");
      filter0.validate();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, (Instances) null);
      filter0.notifyInstanceListeners(instanceEvent0);
      Object object0 = filter0.getWrappedAlgorithm();
      filter0.eventGeneratable("GR+I&U=od+E%wdW");
      filter0.setWrappedAlgorithm(object0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      filter0.getComponentListeners();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Logger logger0 = trainingSetMaker0.m_logger;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      filter0.addConfigurationListener((ConfigurationListener) null);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      Saver saver0 = new Saver();
      filter0.addInstanceListener(classAssigner0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Associator associator0 = new Associator();
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      classifierErrorsPlotInstances0.getInstances();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instanceEvent0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMaximumSize();
      filter0.getMouseWheelListeners();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      filter0.removeAncestorListener(ancestorListener0);
      Add add1 = new Add();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Add add2 = new Add();
      add0.toString();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      instanceEvent0.setStructure((Instances) null);
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      appender0.getAlignmentX();
      filter0.acceptInstance(instanceEvent0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        filter0.performRequest("weka.filters.unsupervised.attribute.Add");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka.filters.unsupervised.attribute.Add not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(keyListener0, keyListener0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      filter0.addKeyListener((KeyListener) null);
      MetaBean metaBean0 = new MetaBean();
      filter0.eventGeneratable("configuration");
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      assertFalse(wekaTaskMonitor0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      sorter0.m_busy = true;
      BeanVisual beanVisual0 = sorter0.m_visual;
      filter0.setVisual(beanVisual0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/gui/beans/icons/");
      filter0.globalInfo();
      filter0.getFilter();
      filter0.getFilter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(beanVisual0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getFilter();
      filter0.useDefaultVisual();
      assertEquals("Sorter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      BeanVisual beanVisual0 = filter0.m_visual;
      beanVisual0.getSize((Dimension) null);
      filter0.setVisual(beanVisual0);
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      filter0.getComponentListeners();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      filter0.addConfigurationListener((ConfigurationListener) null);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      Saver saver0 = new Saver();
      filter0.addInstanceListener(classAssigner0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Associator associator0 = new Associator();
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      classifierErrorsPlotInstances0.getInstances();
      DataSetEvent dataSetEvent0 = new DataSetEvent(associator0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Logger logger0 = trainingSetMaker0.m_logger;
      filter0.setLog((Logger) null);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(trainingSetMaker0, (Instances) null, 2036, 2887, 1006, 2036);
      filter0.acceptTrainingSet(trainingSetEvent0);
      boolean boolean0 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.removeMouseMotionListener(defaultCaret0);
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0, 0, 10000);
      Attribute attribute0 = new Attribute("@data");
      TrainingSetMaker trainingSetMaker1 = new TrainingSetMaker();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      textDirectoryLoader0.getStructure();
      filter0.acceptTestSet(testSetEvent0);
      String string0 = "d1M6=D`>s";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "@data");
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      InstanceEvent instanceEvent0 = new InstanceEvent(classifierPerformanceEvaluator0);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.getWrappedAlgorithm();
      filter0.connectionAllowed("string");
      SparseInstance sparseInstance0 = new SparseInstance(0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(sparseInstance0, instances0, 0, 1);
      filter0.acceptTrainingSet(trainingSetEvent0);
      TextField textField0 = null;
      try {
        textField0 = new TextField("d1M6=D`>s", 46);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseWheelListeners();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel((WekaTaskMonitor) null, false);
      filter0.setLog(logPanel0);
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "WARNING: Not an incremental filter.");
      Sorter sorter2 = new Sorter();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      Locale.forLanguageTag("configuration");
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      instanceEvent0.setStructure((Instances) null);
      appender0.grabFocus();
      instanceEvent0.setStatus(1);
      filter0.acceptInstance(instanceEvent0);
      Choice choice0 = null;
      try {
        choice0 = new Choice();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseWheelListeners();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      filter0.acceptInstance(instanceEvent0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "WARNING: Not an incremental filter.");
      Sorter sorter2 = new Sorter();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      Locale locale0 = Locale.FRENCH;
      Locale.forLanguageTag("configuration");
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      instanceEvent0.setStructure((Instances) null);
      appender0.grabFocus();
      instanceEvent0.setStatus(1);
      filter0.acceptInstance(instanceEvent0);
      Choice choice0 = null;
      try {
        choice0 = new Choice();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = attributeSummarizer0.m_framePoppedUp;
      MultiFilter multiFilter0 = new MultiFilter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.connectionNotification("WARNING: Not an incremental filter.", multiFilter0);
      filter0.useDefaultVisual();
      ArffLoader arffLoader0 = new ArffLoader();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      LineBorder.createBlackLineBorder();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      boolean boolean0 = attributeSummarizer0.m_framePoppedUp;
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.connectionNotification("L};u*=/Ji", attributeSummarizer0);
      filter0.useDefaultVisual();
      ArffLoader arffLoader0 = new ArffLoader();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(1041);
      filter0.hasFocus();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addDataSourceListener(flowByExpression0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      sorter1.addNotify();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      sorter1.removeMouseMotionListener(defaultCaret0);
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Logger logger0 = sorter1.m_log;
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      Appender appender0 = new Appender();
      Instances instances1 = appender0.m_completeHeader;
      instanceEvent1.setStructure(instances0);
      filter0.acceptInstance(instanceEvent1);
      textDirectoryLoader0.getCharSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(".bsi", instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      filter0.removeInstanceListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(1041);
      filter0.hasFocus();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addDataSourceListener(flowByExpression0);
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.toString();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.filters.unsupervised.attribute.Add");
      Logger logger0 = sorter1.m_log;
      InstanceEvent instanceEvent1 = sorter1.m_ie;
      Appender appender0 = new Appender();
      Instances instances1 = appender0.m_completeHeader;
      instanceEvent1.setStructure(instances0);
      filter0.acceptInstance(instanceEvent1);
      textDirectoryLoader0.getCharSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(".bsi", instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      filter0.removeInstanceListener(appender0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      LineBorder.createBlackLineBorder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Add add0 = new Add();
      String string0 = JOptionPane.WANTS_INPUT_PROPERTY;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter1 = new Filter();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      filter0.getBaselineResizeBehavior();
      Classifier classifier0 = new Classifier();
      filter0.addTestSetListener(classifier0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("wantsInput", arrayList0, 46);
      TestSetEvent testSetEvent0 = new TestSetEvent(fileSystemHandling0, instances0, 46, (-996), 1, 1);
      filter0.acceptTestSet(testSetEvent0);
      filter0.isBusy();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getPreferredSize();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      filter0.removeAncestorListener(ancestorListener0);
      Add add1 = new Add();
      Add add2 = new Add();
      add0.toString();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      instanceEvent0.setStructure((Instances) null);
      ArffLoader arffLoader0 = new ArffLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instanceEvent0.setInstance(binarySparseInstance0);
      binarySparseInstance0.copy();
      ArffLoader arffLoader1 = new ArffLoader();
      appender0.addNotify();
      appender0.getAlignmentX();
      instanceEvent0.setStatus(1146);
      filter0.acceptInstance(instanceEvent0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      filter0.setCustomName("FYwJ8");
      filter0.enumerateRequests();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.hasFocus();
      filter0.useDefaultVisual();
      AllFilter allFilter0 = new AllFilter();
      ActionMap actionMap0 = filter0.getActionMap();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.removeDataSourceListener(trainTestSplitMaker0);
      filter0.setFilter(allFilter0);
      actionMap0.getParent();
      filter0.getFilter();
      actionMap0.clear();
      filter0.getWrappedAlgorithm();
      filter0.connectionNotification("8X~dNy>yU!LYF;8E55j", actionMap0);
      filter0.connectionNotification("8X~dNy>yU!LYF;8E55j", allFilter0);
      System.setCurrentTimeMillis((-52L));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      filter0.getMaximumSize();
      filter0.getMouseWheelListeners();
      int int0 = Double.BYTES;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addInstanceListener(substringLabeler0);
      filter0.getKeyListeners();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      CompoundBorder compoundBorder0 = new CompoundBorder();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.connectionNotification("instance", scatterPlotMatrix0);
      filter0.useDefaultVisual();
      filter0.connectionAllowed("fif3");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      filter0.getMaximumSize();
      filter0.getMouseWheelListeners();
      int int0 = Double.BYTES;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addInstanceListener(substringLabeler0);
      filter0.getKeyListeners();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Add add0 = new Add();
      add0.toString();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      Logger logger0 = sorter1.m_log;
      InstanceEvent instanceEvent1 = sorter1.m_ie;
      Appender appender0 = new Appender();
      Instances instances1 = appender0.m_completeHeader;
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent0);
      textDirectoryLoader0.getCharSet();
      DataSetEvent dataSetEvent0 = null;
      try {
        dataSetEvent0 = new DataSetEvent((Object) null, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMaximumSize();
      filter0.getMouseWheelListeners();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.setFilter(add0);
      Filter filter1 = new Filter();
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel((WekaTaskMonitor) null, false);
      filter0.setLog(logPanel0);
      Saver saver0 = new Saver();
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      instanceEvent0.setStatus(Integer.MAX_VALUE);
      filter0.acceptInstance(instanceEvent0);
      TestInstances testInstances0 = new TestInstances();
      sorter0.getStructure(" ");
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      instanceEvent0.setStructure((Instances) null);
      ArffLoader arffLoader0 = new ArffLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(400);
      instanceEvent0.setInstance(binarySparseInstance0);
      instanceEvent0.setInstance(binarySparseInstance0);
      instanceEvent0.setStatus(105);
      filter1.acceptInstance(instanceEvent0);
      filter0.setFilter(add0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      filter0.disconnectionNotification(".bsi", (Object) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent1 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getBorder();
      filter0.addDataSourceListener(filter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      add0.toString();
      filter0.setFilter(add0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      filter0.removeContainerListener(containerListener0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      Appender appender0 = new Appender();
      sorter1.getConnectedFormat();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getRevision();
      appender0.getAlignmentX();
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      filter0.enumerateRequests();
      filter0.removeTestSetListener(sorter0);
      filter0.enumerateRequests();
      filter0.stop();
      Appender appender1 = new Appender();
      filter0.addTestSetListener(appender0);
      filter0.isBusy();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      int int0 = ICC_Profile.icSigGreenMatrixColumnTag;
      filter0.addDataSourceListener(filter0);
      Sorter sorter0 = new Sorter();
      Saver saver0 = new Saver();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.compactify();
      instanceEvent0.setStatus((-1));
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      MockRandom mockRandom0 = new MockRandom(2);
      Character.valueOf(',');
      filter0.isOptimizedDrawingEnabled();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      JTextPane jTextPane0 = new JTextPane();
      filter0.setCustomName("nxNnI oAB1DT");
      TextViewer textViewer0 = new TextViewer();
      filter0.connectionNotification(".bsi", textViewer0);
      Instances instances1 = testInstances0.getData();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addConfigurationListener(configurationListener0);
      filter0.acceptInstance(instanceEvent0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestSetEvent testSetEvent0 = new TestSetEvent(instances1, instances0, 2963, 0);
      filter0.acceptTestSet(testSetEvent0);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      GraphViewer graphViewer0 = new GraphViewer();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(1041);
      filter0.hasFocus();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addDataSourceListener(flowByExpression0);
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.toString();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.filters.unsupervised.attribute.Add");
      Logger logger0 = sorter1.m_log;
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      Appender appender0 = new Appender();
      Instances instances1 = appender0.m_completeHeader;
      instanceEvent1.setStructure(instances0);
      textDirectoryLoader0.setCharSet((String) null);
      filter0.acceptInstance(instanceEvent1);
      textDirectoryLoader0.getCharSet();
      filter0.removeDataSourceListener(sorter0);
  }
}
