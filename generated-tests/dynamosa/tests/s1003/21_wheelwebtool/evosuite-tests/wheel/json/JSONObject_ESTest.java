/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 15:15:25 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("] is not a JSONArray.", (Collection) linkedList0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      jSONObject0.put("I2*}2C8,sW/3Ix1;|i", (Map) hashMap0);
      String string0 = jSONObject0.toString((-395));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{l<U");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {l<U
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}7tE$BZ?BGi_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }7tE$BZ?BGi_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      Object object0 = jSONObject0.remove("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("wheel.json.JSONObject$Null", stringArray0);
      jSONObject0.put("wheel.json.JSONObject$Null", 638);
      long long0 = jSONObject0.optLong("wheel.json.JSONObject$Null");
      assertEquals(638L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("CsO&YK<y]-U", (-2306.3));
      long long0 = jSONObject1.optLong("CsO&YK<y]-U");
      assertEquals((-2306L), long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "25vG|O!&Pw|]");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("25vG|O!&Pw|]", jSONArray0);
      jSONObject0.optJSONArray("25vG|O!&Pw|]");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      int int0 = jSONObject1.optInt(",:]}/\"[{;=#");
      assertEquals(1513, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (-948));
      double double0 = jSONObject1.optDouble("istoUpperCase");
      assertEquals((-948.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" of ", true);
      boolean boolean0 = jSONObject0.optBoolean(" of ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put(",\n", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt(",\n");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("vb>66*G", (Collection) linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("*^);lT", "*^);lT");
      boolean boolean0 = jSONObject1.has("*^);lT");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      long long0 = jSONObject1.getLong("t$d($$p_06X<l_.mS$");
      assertEquals(91L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (-948));
      long long0 = jSONObject1.getLong("istoUpperCase");
      assertEquals((-948L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.append("getreverseBytes", "true");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("getreverseBytes");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("wheel.json.JSONObject$Null", stringArray0);
      jSONObject0.put("wheel.json.JSONObject$Null", 638);
      double double0 = jSONObject0.getDouble("wheel.json.JSONObject$Null");
      assertEquals(638.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (-948));
      double double0 = jSONObject1.getDouble("istoUpperCase");
      assertEquals((-948.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt(",:]}/\"[{;=#", jSONObject0);
      Object object0 = jSONObject1.get(",:]}/\"[{;=#");
      assertSame(jSONObject1, object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(long0, 0, 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(0, 0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{L/aDAi|>_~swf8", (Map) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Byte byte0 = new Byte((byte)117);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.putIfAbsent(byte0, byte0);
      JSONObject jSONObject1 = jSONObject0.put("%k", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("U4G@b{w5\"MV$P#l%d>", (Collection) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put(",\n", collection0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      Object object0 = new Object();
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("7Hc)U", 2829L);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("`-Ypi,(ck6',&yh", 0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 1632);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("oCL-d(q+2>^&rKeEZ", 0.0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1513.60791904039);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (double) 91);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString(".E)bau+Ned'|3-j", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("t$d($$p_06X<l_.mS$", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null, ";![10]g");
      assertEquals(";![10]g", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "Missing value");
      assertEquals("Missing value", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("1biyJT>vnZSC", (long) (-2440));
      assertEquals((-2440L), long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("in=", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      long long0 = jSONObject0.optLong("", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong(stringArray0[3]);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((-3270));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      jSONObject0.optJSONArray((String) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null, (-1889));
      assertEquals((-1889), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 125);
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Bad value from toJSONString: ", (-4052.0722478207535));
      assertEquals((-4052.0722478207535), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = new Double(2551.6362292856);
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("wheel.json.JSONArray");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("/c$H%X1='[<G<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/c$H%X1='[<G<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "25vG|O!&Pw|]");
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-0.21357720394529323));
      assertEquals("-0.21357720394529323", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(48.02489154855582);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "<N6!z");
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("<N6!z", object0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 120, 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Double) null, "{}");
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject1, 29, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getlogicalXor");
      // Undeclared exception!
      jSONObject0.toString((-1884456487), (-1884456487));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1538));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(168.096041344);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = new JSONObject((Object) "\"\"");
      String string0 = jSONObject1.toString(1447);
      // Undeclared exception!
      jSONObject0.getJSONArray(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 10);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.quote("\"C03 z3_t\\<\"");
      assertEquals("\"\\\"C03 z3_t\\\\<\\\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((float) (-1889));
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, float0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("is", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getparseBoolean", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      double double0 = jSONObject1.optDouble("t$d($$p_06X<l_.mS$", 0.0);
      assertEquals(91.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (double) 91);
      assertEquals(91.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      jSONObject0.opt("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Object object1 = jSONObject0.opt((String) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("*^6);lT", "*^6);lT");
      try { 
        jSONObject0.getInt("*^6);lT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*^6);lT\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("t$d($$p_06X<l_.mS$", 44);
      int int0 = jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("EmL4N56;u", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 1473L);
      assertEquals(1473L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      jSONObject0.append(" at character ", iterator0);
      String string0 = jSONObject0.optString(" at character ", "istoLowerCase");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("r4");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Mflr)]p<t:", "Mflr)]p<t:");
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, 504, (-1506));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap0, (-163), 47);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-30733247), (-26752530));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-782), (-782));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(4, 4);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "<N6!z");
      // Undeclared exception!
      jSONObject0.toString(2121);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((Long) null, integer0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float((-2160.97));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("(;YR7Xrw@ .;", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = new Double(1.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote("5\n");
      assertEquals("\"5\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Wc!PcyZmA";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (long) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject1 = jSONObject0.put("%%F;z1f|@))1I|I1!", (Map) hashMap0);
      String string0 = jSONObject1.optString("%%F;z1f|@))1I|I1!");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject1 = jSONObject0.put("Q", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("Q");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("] is not a JSONArray.");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getparseBoolean", 690.103403526);
      double double0 = jSONObject1.optDouble("getparseBoolean");
      assertEquals(690.103403526, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("??&gYhC85", (Collection) linkedList0);
      jSONObject0.putOpt("@DXb", "<N6!z");
      jSONObject0.optBoolean("@DXb");
      Boolean boolean0 = new Boolean("<N6!z");
      JSONObject jSONObject1 = new JSONObject(boolean0);
      Short short0 = new Short((short) (-764));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject1 = jSONObject0.put("I2*}2C8,sW/3Ix1;|i", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("I2*}2C8,sW/3Ix1;|i");
      JSONArray jSONArray0 = jSONObject2.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a numb.");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a numo.");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("`Y$)tLUl", 0L);
      long long0 = jSONObject1.getLong("`Y$)tLUl");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getparseBoolean", 690.103403526);
      try { 
        jSONObject1.getJSONObject("getparseBoolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getparseBoolean\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("iscopyValueOf", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("iscopyValueOf");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A}=WEy2", true);
      try { 
        jSONObject0.getJSONArray("A}=WEy2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A}=WEy2\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("P", (-1L));
      int int0 = jSONObject0.optInt("P");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("PO7m9J:?", 0L);
      double double0 = jSONObject0.getDouble("PO7m9J:?");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", (Object) "");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", true);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.getBoolean("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("V+", "V+");
      try { 
        jSONObject0.getBoolean("V+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V+\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float(2547.924F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("gettoString", false);
      boolean boolean0 = jSONObject0.optBoolean("gettoString", false);
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1962.532280236664);
      assertEquals("1962.532280236664", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject1 = jSONObject0.put(" of ", (Map) hashMap0);
      try { 
        jSONObject1.append(" of ", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ of ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("isjoin", (Collection) linkedList0);
      Object object0 = new Object();
      jSONObject0.append("isjoin", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Double double0 = new Double((-2726.94870922));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("n*1Ed#^csQt9e1Y?", double0);
      jSONObject0.accumulate("n*1Ed#^csQt9e1Y?", "n*1Ed#^csQt9e1Y?");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("issum", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "<N6!z");
      JSONObject jSONObject1 = jSONObject0.putOpt("<N6!z", "<N6!z");
      jSONObject1.accumulate("<N6!z", jSONObject1);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.putOpt("Z", jSONArray0);
      try { 
        jSONObject0.getBoolean("Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{&7Rwc,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {&7Rwc,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("<n6!z");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of <n6!z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("{", object0);
      boolean boolean0 = jSONObject1.isNull("{");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(",\n", ",\n");
      boolean boolean0 = jSONObject0.isNull(",\n");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      jSONObject0.put("oy?P{0^!&wu7q", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-238L));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("vb>66*G", (Collection) linkedList0);
      String string0 = jSONObject0.toString(115, (-1282));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }
}
