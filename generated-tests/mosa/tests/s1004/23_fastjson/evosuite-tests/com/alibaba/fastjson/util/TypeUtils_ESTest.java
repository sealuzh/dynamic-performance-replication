/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:57:02 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntBinaryOperator;
import java.util.function.ToDoubleBiFunction;
import java.util.function.ToIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) indexOutOfBoundsException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      Integer integer0 = new Integer((-1958));
      assertEquals((-1958), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) breakIterator0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      ClassLoader.getSystemClassLoader();
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.fnv1a_64("dd/MM/yyyy");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("dd/MM/yyyy");
      Type[] typeArray0 = new Type[0];
      mockIllegalAccessException0.getCause();
      Class<Double> class0 = Double.TYPE;
      MockFile mockFile0 = new MockFile("dd/MM/yyyy");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. org.evosuite.runtime.mock.java.lang.MockIllegalAccessException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.fnv1a_64("dd/MM/yyyy");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("dd/MM/yyyy");
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      Collection collection0 = new ArrayList<NumberDeserializer>();
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.isNumber("iterator");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      TypeUtils.castToString(mockHijrahDate0);
      TypeUtils.toLocale("B2iwG6");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.fnv1a_64("o");
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.getOrDefault("o", "org.springframework.remoting.support.RemoteInvocationResult");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      TypeUtils.isProxy(class0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.createCollection(class0);
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.isNumber("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TypeUtils.isHibernateInitialized(class1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      BreakIterator.getCharacterInstance();
      TypeUtils.decapitalize("(C)Ljava/lang/Character;");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMClassLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.util.ASMClassLoader@eb4fb46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Object object0 = new Object();
      TypeUtils.castToString(classLoader0);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sqlDateDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.alib\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("Ljava.util.concurrent.ConcurrentSkipListMap", false);
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader1, false);
      TypeUtils.castToByte((Object) null);
      Integer integer0 = new Integer(631);
      TypeUtils.castToBoolean((Object) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToSqlDate("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToByte((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Float> class0 = Float.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      linkedHashMap0.put("boi/6lFm", "boi/6lFm");
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.castToSqlTime((Object) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("javassist.util.proxy.ProxyObject", "javassist.util.proxy.ProxyObject");
      weakHashMap0.put((String) null, (String) null);
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isNumber("");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "BUKphkv";
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("BUKphkv");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      TypeUtils.getClassFromMapping("fastjson.parser.autoTypeAccept");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(33);
      jSONArray0.getComponentType();
      TypeUtils.getCollectionItemClass((Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TypeUtils.isHibernateInitialized(mockSimpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isGenericParamType(class0);
      String string0 = "getEndInclusive";
      TypeUtils.fnv1a_64_lower("getEndInclusive");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3565), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3565
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<TypeNotPresentException> class1 = TypeNotPresentException.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Object object0 = new Object();
      TypeUtils.loadClass((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("gethashCode");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.createCollection(type0);
      TypeUtils.castToInt((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) weakHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ms|CRl-,NYuiT/_TVw", classLoader0);
      Class<Boolean> class0 = Boolean.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "Ms|CRl-,NYuiT/_TVw", fieldArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JSONObject jSONObject0 = new JSONObject();
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLException> class1 = SQLException.class;
      TypeUtils.isProxy(class1);
      Class<Time> class2 = Time.class;
      TypeUtils.getGenericParamType(class2);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@570531aa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getCollectionItemType(type0);
      Class<SQLException> class1 = SQLException.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("", true);
      classLoader0.getParent();
      TypeUtils.loadClass("", classLoader0, false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(21, 21, 36, 21, 21);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=21,MONTH=21,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=36,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=21,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("fastjson.parser.deny");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) noSuchFieldException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("dd/MM/yyyy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : dd/MM/yyyy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.time.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BreakIterator.getCharacterInstance();
      Byte byte0 = new Byte((byte)8);
      TypeUtils.castToBoolean(byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.fnv1a_64("dd/MM/yyyy");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("dd/MM/yyyy");
      mockIllegalAccessException0.getCause();
      Class<Double> class0 = Double.TYPE;
      MockFile mockFile0 = new MockFile("dd/MM/yyyy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[0];
      Throwable throwable0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Lorg.springframework.util.LinkedMultiValueMap", "D;BJyTC,8`", 28, longArray0, (Throwable) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 28;
      intArray0[1] = 28;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("NwxI!30}l_x0^", intArray0);
      batchUpdateException1.getUpdateCounts();
      batchUpdateException0.addSuppressed(batchUpdateException1);
      batchUpdateException0.setNextException(batchUpdateException1);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("D;BJyTC,8`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"D;BJyTC,8`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToSqlDate("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToByte((Object) null);
      MockThread mockThread0 = new MockThread("");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("NG2keGw!/P", classLoader0, true);
      ClassLoader.getSystemClassLoader();
      Object object0 = new Object();
      TypeUtils.castToString(mockThread0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("vO:taL5{T~+5|=P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"vO:taL5{T~+5|=P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("[N", "^'e`VEEaC{&l");
      Class<Time> class0 = Time.class;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      SQLDataException sQLDataException0 = new SQLDataException("[N", "[N");
      TypeUtils.getGenericParamType(class0);
      Point point0 = new Point((-1669), (-1669));
      TypeUtils.castToSqlTime((Object) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      ClassLoader.getSystemClassLoader();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isKotlin(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TypeUtils.isHibernateInitialized(class0);
      TypeUtils.getClass((Type) class0);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.fnv1a_64_lower("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("javassist.util.proxy.ProxyObject", "javassist.util.proxy.ProxyObject");
      weakHashMap0.put((String) null, (String) null);
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isNumber("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("java.time.chrono.MinguoDate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.time.chrono.MinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Class<Byte> class1 = Byte.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.setAsmEnable(false);
      java.util.IdentityHashMap<InterruptedException, StringCharacterIterator> identityHashMap0 = new java.util.IdentityHashMap<InterruptedException, StringCharacterIterator>();
      identityHashMap0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      javaBeanSerializer0.getType();
      MockThread mockThread0 = new MockThread("F4){Mnf'");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      parserConfig0.setAsmEnable(true);
      java.util.IdentityHashMap<InterruptedException, StringCharacterIterator> identityHashMap0 = new java.util.IdentityHashMap<InterruptedException, StringCharacterIterator>();
      identityHashMap0.clone();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@98
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.time.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BreakIterator.getCharacterInstance();
      Byte byte0 = new Byte((byte)8);
      TypeUtils.castToDate(byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConcurrentHashMap<InstantiationError, String> concurrentHashMap0 = new ConcurrentHashMap<InstantiationError, String>();
      Function<Object, TimeUnit> function0 = (Function<Object, TimeUnit>) mock(Function.class, new ViolatedAssumptionAnswer());
      Consumer<TimeUnit> consumer0 = (Consumer<TimeUnit>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachKey(2112L, (Function<? super InstantiationError, ? extends TimeUnit>) function0, (Consumer<? super TimeUnit>) consumer0);
      ToIntFunction<Map.Entry<InstantiationError, String>> toIntFunction0 = (ToIntFunction<Map.Entry<InstantiationError, String>>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToInt((-1230L), toIntFunction0, (-68703773), intBinaryOperator0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader.getSystemClassLoader();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockDate mockDate0 = new MockDate(2361, 4295, 495);
      TypeUtils.castToSqlDate(mockDate0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Class<Float> class1 = Float.class;
      TypeUtils.isPath(class1);
      TypeUtils.castToByte((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("b8emn1C&N72q oE^B", false);
      // Undeclared exception!
      try { 
        JSON.parseObject("b8emn1C&N72q oE^B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : b8emn1C&N72q oE^B
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeUtils.fnv1a_64("0_Ma3@D.E_j=FHCG*e");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("0_Ma3@D.E_j=FHCG*e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0_Ma3@D.E_j=FHCG*e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedHashSet<JobAttributes> linkedHashSet0 = new LinkedHashSet<JobAttributes>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "o";
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToDoubleBiFunction<Object, Object> toDoubleBiFunction0 = (ToDoubleBiFunction<Object, Object>) mock(ToDoubleBiFunction.class, new ViolatedAssumptionAnswer());
      AtomicInteger atomicInteger0 = new AtomicInteger((-353));
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.asm.TypeCollector$1";
      TypeUtils.loadClass("com.alibaba.fastjson.asm.TypeCollector$1");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("com.alibaba.fastjson.asm.TypeCollector$1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.alibaba.fastjson.asm.TypeCollector$1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("hashCode");
      BreakIterator.getCharacterInstance();
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.fnv1a_64_lower("can not cast to char, value : ");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      java.util.IdentityHashMap<RenderingHints.Key, BigDecimal> identityHashMap0 = new java.util.IdentityHashMap<RenderingHints.Key, BigDecimal>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      identityHashMap0.put(renderingHints_Key0, (BigDecimal) null);
      TypeUtils.castToBigDecimal(renderingHints0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(identityHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.util\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("CUr2O", true);
      ClassLoader classLoader2 = classLoader0.getParent();
      classLoader2.setPackageAssertionStatus("#-tAUJf!", true);
      TypeUtils.loadClass(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V", classLoader1, true);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(30, ";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      ParserConfig parserConfig0 = new ParserConfig(classLoader2);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "CUr2O", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("aoG'b-TUyK2:2vzFkkk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : aoG'b-TUyK2:2vzFkkk
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToString((Object) null);
      TypeUtils.isKotlin(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      String string0 = "[N";
      String string1 = "^'e`VEEaC{&l";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("L,Q+yzW", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setPackageAssertionStatus("e/2DDiMzY", true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[N", classLoader1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.loadClass("matchedCount", (ClassLoader) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("matchedCount", "matchedCount");
      sQLSyntaxErrorException0.fillInStackTrace();
      sQLSyntaxErrorException0.printStackTrace();
      TypeUtils.castToString(sQLSyntaxErrorException0);
      TypeUtils.castToDate((Object) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(33);
      jSONArray0.getComponentType();
      SQLException sQLException0 = new SQLException("1.2.46");
      BigDecimal bigDecimal0 = new BigDecimal(33);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ConcurrentHashMap<InstantiationException, MockThaiBuddhistDate> concurrentHashMap0 = new ConcurrentHashMap<InstantiationException, MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "/Date(";
      Locale locale0 = TypeUtils.toLocale("/Date(");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : /date(
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(33);
      jSONArray0.getComponentType();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError((String) null);
      TypeUtils.cast((Object) noSuchMethodError0, class0, parserConfig0);
      StackOverflowError stackOverflowError0 = new StackOverflowError("yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Long long0 = new Long(0L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeSupport");
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept", classLoader1, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.replace("NE", "}CjI6 kWLU:");
      TypeUtils.isPath(class0);
      Integer integer0 = Integer.valueOf(572);
      TypeUtils.castToFloat(integer0);
      Class<DataTruncation> class1 = DataTruncation.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, false);
      Character character0 = Character.valueOf('-');
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : -
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("Ljava.util.concurrent.ConcurrentSkipListMap", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader1, true);
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToFloat((Object) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) linkedHashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Long long0 = new Long(0L);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) long0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "Xgz8";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.replaceAll(biFunction0);
      TypeUtils typeUtils0 = new TypeUtils();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("");
      System.setCurrentTimeMillis((-732L));
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.fnv1a_64_lower("Ug");
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.deny");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "java.[D");
      MockThread mockThread0 = new MockThread(threadGroup1, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("byte", classLoader0, false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unsupported set operation.");
      TypeUtils.fnv1a_64_lower("org.evosuite.runtime.mock.StaticReplacementMock");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.fnv1a_64("can not cast to short, value : ");
      TypeUtils.fnv1a_64_lower("can not cast to short, value : ");
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.getSerializeFeatures(class0);
      AtomicInteger atomicInteger0 = new AtomicInteger(99);
      TypeUtils.castToShort((Object) null);
      Locale.getISOCountries();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      TypeUtils.getClassFromMapping("SQLState");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("[N", "^'e`VEEal{&l");
      Class<Time> class0 = Time.class;
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.castToDouble((Object) null);
      hashMap0.put("fastjson.parser.deny", "}D44Uh&Un0\n&2O");
      TypeUtils.decapitalize(":?r:}q0");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.castToBigInteger((Object) null);
      Class<Double> class0 = Double.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Ozt", concurrentHashMap0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      Class<Double> class2 = Double.class;
      FieldInfo fieldInfo0 = new FieldInfo(")iE9H|K7m9zQ\"E<!", class1, class2, class0, (Field) null, 16, 16, 16);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      // Undeclared exception!
      try { 
        fieldInfo0.get(parameterizedTypeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Double> class0 = Double.TYPE;
      MockFile mockFile0 = new MockFile("i");
      MockPrintStream mockPrintStream0 = new MockPrintStream("i");
      BreakIterator.getCharacterInstance();
      TypeUtils.castToBoolean((Object) null);
      Class<JobAttributes> class1 = JobAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.fnv1a_64_lower("i");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isProxy(class0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.isProxy(class0);
      TypeUtils.isNumber("/&%s,jcw");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      // Undeclared exception!
      try { 
        Time.valueOf("java.time.chrono.MinguoDate");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.global;
      JavaBeanInfo.build(class0, (Type) class0, (PropertyNamingStrategy) null);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("F0+WTSg3#Ea=", numberFormatException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Ljava.awt.Point");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Point> class0 = Point.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      String string0 = "Xgz8";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.replaceAll(biFunction0);
      identityHashMap0.put("javassist.util.proxy.ProxyObject", "");
      identityHashMap0.put("Xgz8", "Xgz8");
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      Class<IllegalAccessException> class1 = IllegalAccessException.class;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, "Xgz8", fieldArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.IllegalAccessException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      Class<Character> class1 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isProxy(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.setPackageAssertionStatus(",Q+yzW", false);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass(",Q+yzW", classLoader0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      gridBagConstraints0.weighty = 876.5212546;
      Class<IllegalThreadStateException> class1 = IllegalThreadStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(",Q+yzW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",Q+yzW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<Time> class1 = Time.class;
      TreeMap<GridBagConstraints, SQLInvalidAuthorizationSpecException> treeMap0 = new TreeMap<GridBagConstraints, SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("javassist.util.proxy.ProxyObject", "javassist.util.proxy.ProxyObject");
      weakHashMap0.put("o", "o");
      Class<IllegalThreadStateException> class1 = IllegalThreadStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {javassist.util.proxy.ProxyObject=javassist.util.proxy.ProxyObject, o=o}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<Rectangle> class0 = Rectangle.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, identityHashMap0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToSqlDate("");
      TypeUtils.castToByte((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONObject jSONObject0 = new JSONObject();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) " GG&trV1r6!", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("javassist.util.proxy.ProxyObject", "javassist.util.proxy.ProxyObject");
      weakHashMap0.put("o", "o");
      weakHashMap0.put((String) null, (String) null);
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isNumber("");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      TypeUtils.castToString(mockMinguoDate0);
      TypeUtils.unwrapOptional(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<Rectangle> class1 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      int[] intArray0 = new int[2];
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("");
      TypeUtils.toLocale("java.time.ZoneId");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Mock for GenericArrayType, hashCode: 829341394
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isKotlin(class0);
      String string0 = "W";
      System.setCurrentTimeMillis((-732L));
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("java.time.chrono.MinguoDate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.time.chrono.MinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TypeUtils.fnv1a_64("dd/MM/yyyy");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("dd/MM/yyyy");
      MockException mockException0 = new MockException();
      Class<Double> class0 = Double.TYPE;
      MockFile mockFile0 = new MockFile("dd/MM/yyyy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.clearClassMapping();
      Long long0 = new Long(432565811632116445L);
      TypeUtils.castToTimestamp(long0);
      UUID uUID0 = MockUUID.fromString("dd/MM/yyyy");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(uUID0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ThreadGroup threadGroup0 = new ThreadGroup("CUr2O");
      MockThread mockThread0 = new MockThread(threadGroup0, "CUr2O");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("CUr2O", true);
      classLoader0.setPackageAssertionStatus("#-tAUJf!", true);
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader1, true);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.fnv1a_64("dd/MM/yyyy");
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ConcurrentHashMap<NumberDeserializer, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<NumberDeserializer, JavaBeanDeserializer>();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      Constructor<FieldInfo>[] constructorArray0 = (Constructor<FieldInfo>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : interface java.util.List
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Float> class0 = Float.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getRawClass(class0);
      TypeUtils.isPath(class0);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      classLoader0.getParent();
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Point> class1 = Point.class;
      TypeUtils.getSerializeFeatures(class1);
      Class<BigInteger> class2 = BigInteger.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.decapitalize("java/lang/Boolean");
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.setAsmEnable(false);
      java.util.IdentityHashMap<InterruptedException, StringCharacterIterator> identityHashMap0 = new java.util.IdentityHashMap<InterruptedException, StringCharacterIterator>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("java/lang/Boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java/lang/Boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
      Type type1 = TypeUtils.getCollectionItemType(type0);
      Class<SQLException> class1 = SQLException.class;
      TypeUtils.isProxy(class1);
      TypeUtils.getCollectionItemType(type1);
      Class<Time> class2 = Time.class;
      TreeMap<GridBagConstraints, SQLInvalidAuthorizationSpecException> treeMap0 = new TreeMap<GridBagConstraints, SQLInvalidAuthorizationSpecException>();
      TypeUtils.castToBigDecimal(treeMap0);
      TypeUtils.getGenericParamType(class2);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      TypeUtils.castToChar((Object) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToSqlDate("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToByte((Object) null);
      TypeUtils.getGenericParamType(class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Integer integer0 = new Integer((-3479));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -3479
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unsupported set operation.");
      TypeUtils.fnv1a_64_lower("org.evosuite.runtime.mock.StaticReplacementMock");
      Class<Double> class0 = Double.TYPE;
      MockFile mockFile0 = new MockFile("Q[A)*E");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Q[A)*E";
      mockPrintStream0.printf("Q[A)*E", objectArray0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      mockIllegalAccessException0.printStackTrace((PrintStream) mockPrintStream0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig();
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockPrintStream0, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@446615d6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("Ljava.awt.Rectangle", "$UUVz");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      linkedHashMap0.put("Ljava.awt.Rectangle", "boi/6lFm");
      Class<IllegalStateException> class1 = IllegalStateException.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DecimalFormatSymbols.getInstance();
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Double> class1 = Double.TYPE;
      MockFile mockFile0 = new MockFile("dd/MM/yyyy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      TypeUtils.cast((Object) null, (Type) class1, parserConfig1);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ConcurrentHashMap<NumberDeserializer, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<NumberDeserializer, JavaBeanDeserializer>();
      Constructor<FieldInfo>[] constructorArray0 = (Constructor<FieldInfo>[]) Array.newInstance(Constructor.class, 9);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.castToSqlDate((Object) null);
      Random.setNextRandom(631);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TypeUtils.fnv1a_64("dd/MM/yyyy");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("o", "dd/MM/yyyy");
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.getCollectionItemType((Type) null);
      classLoader0.setPackageAssertionStatus("java.sql.BatchUpdateException", false);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "o", fieldArray0);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      Float float0 = new Float(1.0F);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(32);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      javaBeanSerializer0.getType();
      TypeUtils.getCollectionItemType(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      AtomicInteger atomicInteger0 = new AtomicInteger(1570);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      Class<Point> class1 = Point.class;
      TypeUtils.getSerializeFeatures(class1);
      Class<Byte> class2 = Byte.TYPE;
      Class<DataTruncation> class3 = DataTruncation.class;
      TypeUtils.isPath(class3);
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("net.sf.cglib.proxy.Factory");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldError0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchFieldError: net.sf.cglib.proxy.Factory
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ThreadGroup threadGroup0 = new ThreadGroup("CUr2O");
      MockThread mockThread0 = new MockThread(threadGroup0, "CUr2O");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("CUr2O", true);
      MockThread.getAllStackTraces();
      classLoader0.setPackageAssertionStatus("#-tAUJf!", true);
      TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader0, true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("LH?", decimalFormatSymbols0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"classLoader\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class<JavaObjectDeserializer> class2 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<InternalError> class3 = InternalError.class;
      JavaBeanInfo.build((Class<?>) class3, (Type) class1, (PropertyNamingStrategy) null);
      BigDecimal bigDecimal0 = new BigDecimal(1054);
      Locale locale0 = Locale.FRANCE;
      Collator collator0 = Collator.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(collator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.text.RuleBasedCollator@ea51b32a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToSqlDate("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToByte((Object) null);
      ClassLoader.getSystemClassLoader();
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("NULL", decimalFormatSymbols0);
      TypeUtils.cast((Object) "", (Type) class0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.getGenericParamType(type0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = null;
      try {
        treeMap0 = new TreeMap<String, String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isProxy(class0);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Class<Character> class1 = Character.class;
      TypeUtils.isProxy(class1);
      TypeUtils.isNumber("d@5IZaa");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      SQLDataException sQLDataException0 = new SQLDataException("java.time.chrono.MinguoDate", "Ljava.awt.Point", 10);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLDataException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLDataException: java.time.chrono.MinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("Ljava.awt.Rectangle", "$UUVz");
      linkedHashMap0.put("Ljava.awt.Rectangle", "boi/6lFm");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.clearClassMapping();
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig2 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "$UUVz", (Type) parameterizedTypeImpl0, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }
}
