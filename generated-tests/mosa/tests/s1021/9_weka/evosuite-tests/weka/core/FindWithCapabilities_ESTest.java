/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:01:36 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ChebyshevDistance;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Range;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.setFilename(" .u");
      findWithCapabilities0.listOptions();
      assertEquals(" .u", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Superclass = "8034";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("#e`");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.setFilename("#e`");
      findWithCapabilities1.getOptions();
      assertEquals("#e`", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-\"[i}#&pV,7G@>_";
      stringArray0[1] = "unary-atts";
      stringArray0[2] = "Q{LFd\"LJ";
      stringArray0[3] = "!.hE8i&";
      stringArray0[4] = "-numeric-atts";
      stringArray0[5] = "M&4zJe6G9&$;ojFP4E!";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.find();
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getNotCapabilities();
      findWithCapabilities1.getNotCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      String[] stringArray2 = findWithCapabilities0.getOptions();
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.disableAllClasses();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(0, vector0.size());
      
      capabilities0.enableAllClasses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      capabilities0.disableAllAttributeDependencies();
      findWithCapabilities0.setOptions(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_METHOD;
      findWithCapabilities0.m_Superclass = "globalInfo";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      String[] stringArray1 = findWithCapabilities3.getOptions();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      vector0.add("-1");
      Range range0 = new Range();
      Vector vector1 = new Vector<ChebyshevDistance>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector1.forEach(consumer0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      hashtable0.put("-nominal-atts", vector0);
      findWithCapabilities0.setFilename(")");
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      Random.setNextRandom(1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals(")", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-W";
      stringArray0[1] = "]jZa+!u0t\"d";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      testInstances0.m_NumRelationalString = 4608;
      FindWithCapabilities findWithCapabilities1 = (FindWithCapabilities)testInstances0.getHandler();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities1.m_NotCapabilities = capabilities1;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(testInstances0.m_Handler);
      findWithCapabilities1.listOptions();
      findWithCapabilities2.getMisses();
      findWithCapabilities2.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.disableAllClasses();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.disableAllClasses();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.disableAllClasses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.disableAllClasses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "`coe2Xavj :r]&Y";
      stringArray1[1] = "Sorted array (ints): ";
      stringArray1[2] = "W2,%A  K^mDi0N\"F";
      stringArray1[3] = "misses";
      stringArray1[4] = "%Yp)+xuT";
      stringArray1[5] = "relational";
      stringArray1[6] = "Lr%'8j>|";
      stringArray1[7] = "-no-class";
      stringArray1[8] = "P>>]n!6?ZKA";
      FindWithCapabilities.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.m_Packages = vector0;
      String[] stringArray0 = new String[2];
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertNotSame(vector1, vector0);
      
      findWithCapabilities0.getOptions();
      Vector<String> vector2 = findWithCapabilities1.find();
      assertTrue(vector2.equals((Object)vector0));
      assertTrue(vector2.equals((Object)vector1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.disableAllClasses();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotSame(stringArray1, stringArray0);
  }
}
