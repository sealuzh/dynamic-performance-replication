/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:11:47 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-13), "<tn9hetic", "<tn9hetic", "<tn9hetic", ">aUjw\" h");
      fieldWriter0.getSize();
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1816);
      classWriter0.invalidFrames = false;
      classWriter0.index = 1816;
      classWriter0.invalidFrames = true;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 239, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", ">a%jw\" h");
      fieldWriter0.visitAnnotation("RuntimeInvisibleAnnotations", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "<tn9hetic", "<tn9hetic", "<tn9hetic", "<tn9hetic");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(127);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, ">aUjw\" h", ">aUjw\" h", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
      fieldWriter0.visitAnnotation("RuntimeInvisibleAnnotations", false);
      fieldWriter0.getSize();
      System.setCurrentTimeMillis(960L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3434);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "yn{m~?eyn", "Class not found", "\"5Z\"No1", "yn{m~?eyn");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1818);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      classWriter0.visitField(4, "dzM'0li^2q@fn(G", ".D'}ah$A,&zYGZo", "", (Object) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-694), "{o>", "%Qy!?h{CYtM:<(}E+", "", "RuntimeInvisibleAnnotations");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "<tn9hetic", "<tn9hetic", "<tn9hetic", "<tn9hetic");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.toByteArray();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1542), "44MqN]<A'>lD*H1P~t", "", "Y#t$]]:-?C=8~CA`kK", "44MqN]<A'>lD*H1P~t");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("44MqN]<A'>lD*H1P~t");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1818);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      classWriter0.visitField(4, "dzM'0li^2q@fn(G", ".D'}ah$A,&zYGZo", "", (Object) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "%g4kk&>OsW[LtWP70]", "RuntimeInvisibleAnnotations", "", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, (-4724), "\"5Z\"No1", "yn{m~?eyn", "yn{m~?eyn", (Object) null);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.next = null;
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3434);
      ClassWriter classWriter1 = new ClassWriter(4);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 1065, "G8gdLMY_2", "G8gdLMY_2", (String) null, "K3");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "<tn9hetic", "<tn9hetic", "LM/<O,|^xg*Iy0Fwsp|", "LM/<O,|^xg*Iy0Fwsp|");
      fieldWriter0.getSize();
      String[] stringArray0 = new String[0];
      classWriter0.visit(65535, 407, "<tn9hetic", "`}2X~i7A1,>}'tw", "short", stringArray0);
      ByteVector byteVector0 = new ByteVector(4096);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Sensitive";
      classWriter0.visit(4096, (-106), "Sensitive", "Sensitive", "i&TzEC~", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-13), "<tn9hetic", "<tn9hetic", "<tn9hetic", ">aUjw\" h");
      fieldWriter0.getSize();
      System.setCurrentTimeMillis(2);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      System.setCurrentTimeMillis((-13));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4098);
      ClassWriter classWriter1 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 11, "<tn9hetic", "Synthetic", (String) null, "Synthetic");
      ByteVector byteVector0 = classWriter1.pool;
      fieldWriter0.put(byteVector0);
  }
}
