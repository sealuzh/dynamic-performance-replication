/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:18:16 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.SingleIndex;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.getMisses();
      findWithCapabilities1.getOptions();
      Enumeration enumeration0 = findWithCapabilities1.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("xLEIIUbr;*^cH");
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      assertEquals("xLEIIUbr;*^cH", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "qC#u vZtIPC~Aj";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.getMatches();
      vector0.add("/versions.txt");
      String[] stringArray0 = Locale.getISOLanguages();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "\nSum of weights: ";
      stringArray0[2] = "-not-string-class";
      stringArray0[3] = "si:%4T:*zYV>HR|s";
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities1.m_Handler = null;
      stringArray0[4] = ".enable(";
      stringArray0[5] = "\the minimum number of instances (default 1).";
      FindWithCapabilities.main(stringArray0);
      stringArray0[6] = "";
      stringArray0[7] = "~l-7nJSvl94V`;qh";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.m_InstancesTest = false;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.m_Filename = "-binary-atts";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities0.m_MissingValuesTest = false;
      Vector<String> vector0 = findWithCapabilities1.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      capabilities0.enableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities1.getRevision();
      findWithCapabilities0.find();
      vector0.add("`b(hscRj");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":+2w>;>}9}{u.(%ar";
      stringArray0[1] = "-binary-atts";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "qC#u vZtIPC~Aj";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qC#u vZtIPC~Aj");
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.setFilename("qado. 0K");
      findWithCapabilities0.getNotCapabilities();
      assertEquals("qado. 0K", findWithCapabilities0.getFilename());
      
      Random.setNextRandom(4012);
      findWithCapabilities0.setOptions(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-string-class");
      vector0.removeAllElements();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=rpv_3";
      stringArray0[1] = "<!-- globalinfo-end -->";
      stringArray0[2] = "<!-- globalinfo-end -->";
      stringArray0[3] = "R20";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "<!-- globalinfo-end -->";
      stringArray1[1] = "<!-- globalinfo-end -->";
      stringArray1[2] = "-string-class";
      stringArray1[3] = "R20";
      stringArray1[4] = "<!-- globalinfo-end -->";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.setFilename("<!-- globalinfo-end -->");
      assertEquals("<!-- globalinfo-end -->", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities1.setFilename("Bo6`");
      findWithCapabilities1.find();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.getRevision();
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities1.find();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("`9v{zS 3egy?u)kq!@z");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getRevision();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-binary-class";
      stringArray0[1] = "\tMust handle missing class values.";
      stringArray0[2] = "8034";
      stringArray0[3] = "Ba6`";
      stringArray0[4] = "`9v{zS 3egy?u)kq!@z";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = ":C#u +ZtIKPC3Aj";
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_ClassIndex = null;
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.getFilename();
      vector0.add(":C#u +ZtIKPC3Aj");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vector0.add(":C#u +ZtIKPC3Aj");
      SingleIndex.main(stringArray0);
      vector0.removeAll(findWithCapabilities0.m_Misses);
      Random.setNextRandom((-143));
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("D#a");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("D#a");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vector0.add("\"-1");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "qC#u vZtIPC~Aj";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("ERM~*yhrX5R/#");
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = new Capabilities(findWithCapabilities1);
      capabilities1.enableAllClasses();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      findWithCapabilities1.setCapabilities(capabilities0);
      SingleIndex.main(stringArray0);
      Random.setNextRandom(124);
      SingleIndex.main(stringArray0);
      Random.setNextRandom(124);
      findWithCapabilities0.setOptions(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      boolean boolean1 = findWithCapabilities1.isEnabled(capabilities_Capability1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T_m)!Mj&T/I0");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "T_m)!Mj&T/I0";
      byte[] byteArray0 = new byte[0];
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.enableAll();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      assertTrue(boolean0);
      
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertTrue(vector1.equals((Object)vector0));
      assertNotSame(vector1, vector0);
      
      String[] stringArray0 = findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(1609L);
      findWithCapabilities0.setClassIndex(">");
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalNominalValues(93);
      testInstances0.setNumClasses(93);
      testInstances0.setNumNominalValues(1538);
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.MISSING_VALUES;
      boolean boolean1 = findWithCapabilities0.isEnabled(capabilities_Capability3);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities2.listOptions();
      findWithCapabilities2.setClassIndex("HXjL<T7-");
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      Capabilities capabilities1 = new Capabilities((CapabilitiesHandler) null);
      HashSet<Capabilities.Capability> hashSet0 = capabilities1.m_Dependencies;
      capabilities1.m_Dependencies = hashSet0;
      capabilities1.getClassCapabilities();
      Capabilities capabilities2 = new Capabilities(findWithCapabilities0);
      capabilities0.enableAllClasses();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setCapabilities(capabilities0);
      SingleIndex.main(testInstances0.DEFAULT_WORDS);
      Random.setNextRandom(116);
      SingleIndex.main(stringArray0);
      Random.setNextRandom((-2));
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.m_Filename = "";
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-not-date-class";
      stringArray0[1] = "";
      stringArray0[2] = "-W <classname>";
      stringArray0[3] = "";
      stringArray0[4] = " class that matched the criteria:\n";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      SingleIndex singleIndex0 = new SingleIndex("");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      singleIndex0.getRevision();
      findWithCapabilities0.find();
      SingleIndex.indexToString(11);
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      String string1 = GlobalInfoJavadoc.GLOBALINFO_STARTTAG;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = findWithCapabilities1.find();
      vector0.add("<!-- globalinfo-end -->");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "<!-- globalinfo-end -->";
      stringArray1[1] = "M0D4Z8j2jt";
      stringArray1[2] = "<!-- globalinfo-start -->";
      stringArray1[3] = "<!-- globalinfo-end -->";
      stringArray1[4] = "<!-- globalinfo-end -->";
      stringArray1[5] = "-not-numeric-class";
      stringArray1[6] = "<!-- globalinfo-start -->";
      stringArray1[7] = "<!-- globalinfo-start -->";
      stringArray1[8] = "M0D4Z8j2jt";
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getNotCapabilities();
      SingleIndex.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      SingleIndex.main(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "uqM\\u@mVE&)N xf";
      findWithCapabilities0.m_Filename = string0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = findWithCapabilities0.m_Filename;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      assertEquals("uqM\\u@mVE&)N xf", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      capabilities0.getClassCapabilities();
      capabilities0.m_Owner = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities1.enableAllClasses();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.setClassIndex("\"ZU!T1*");
      capabilities0.getAttributeCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities1.setFilename("j^B*DG86zFFHX=*");
      findWithCapabilities1.getCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Random.setNextRandom(111);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "yH[";
      stringArray0[1] = "FWR";
      stringArray0[2] = ".zip";
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(111);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      System.setCurrentTimeMillis(6);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability3);
      Random.setNextRandom(116);
      findWithCapabilities1.getOptions();
      String string0 = findWithCapabilities1.getRevision();
      assertEquals("8034", string0);
      
      Vector<String> vector1 = findWithCapabilities1.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-not-string-atts");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "-not-string-atts";
      stringArray0[2] = "-not-string-atts";
      stringArray0[3] = "-not-string-atts";
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YaT0$j(|n]Yr3UC");
      findWithCapabilities0.m_Matches = vector0;
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        vector0.add(83, "-not-string-atts");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 83 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities1.listOptions();
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities1.getMatches();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = capabilities0.m_Test;
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      SingleIndex.main(stringArray0);
      boolean boolean1 = capabilities0.m_InstancesTest;
      Random.setNextRandom(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.setOwner(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("-not-string-class");
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setFilename("-not-date-class");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.enable(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(i-y(G";
      stringArray0[1] = "-not-unary-class";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.handles(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis((-3705L));
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.setClassIndex("-1");
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      vector0.add("");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.m_Superclass = "";
      SingleIndex singleIndex0 = new SingleIndex("");
      findWithCapabilities3.m_ClassIndex = singleIndex0;
      FindWithCapabilities.main(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.forceDeleteAttributeAt(204);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      findWithCapabilities1.getRevision();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "^aJ`>";
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.m_RelationalClassFormat;
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setClassIndex("@relation");
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      vector0.add("^aJ`>");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      vector0.add("^aJ`>");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("Y1OgA&(uGF,WIM!RVq");
      findWithCapabilities1.getNotCapabilities();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.getNotCapabilities();
      findWithCapabilities2.listOptions();
      findWithCapabilities0.setClassIndex("-q1");
      findWithCapabilities1.getMatches();
      capabilities0.enableAllClassDependencies();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = capabilities0.m_Test;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray1 = new String[6];
      FindWithCapabilities.main(stringArray1);
      SingleIndex.main(stringArray1);
      Random.setNextRandom(367);
      FindWithCapabilities.main(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1077);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "qC#u vZtIPC~Aj";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("");
      findWithCapabilities1.getMatches();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.m_GenericPropertiesCreator = false;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getRevision();
      String string0 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities3.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities1.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.m_Superclass = "qC#u vZtIPC~Aj";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = TechnicalInformationHandlerJavadoc.BIBTEX_ENDTAG;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(99);
      binarySparseInstance0.isMissing(79);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities1.listOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability2);
      findWithCapabilities2.enable(capabilities_Capability0);
      Random.setNextRandom((-1845734225));
      findWithCapabilities2.getOptions();
      findWithCapabilities2.getRevision();
      findWithCapabilities1.find();
      Random.setNextRandom(1051);
      binarySparseInstance0.dataset();
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "T_m)!Mj&T/I0";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T_m)!Mj&T/I0");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "T_m)!Mj&T/I0";
      byte[] byteArray0 = new byte[0];
      findWithCapabilities0.listOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.enableAll();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(1609L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = capabilities0.m_MissingValuesTest;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      FindWithCapabilities.main(stringArray0);
      capabilities0.disableAll();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.add("/H*&H..>}L`{");
      findWithCapabilities0.m_Superclass = "qC#u vZtIPC~Aj";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      String string1 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qC#u vZtIPC~Aj");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom(2942);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities.main((String[]) null);
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      findWithCapabilities1.m_Packages = vector0;
      String[] stringArray2 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.getRevision();
      FindWithCapabilities.main(stringArray2);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"ZU!T1*";
      stringArray0[1] = "\"ZU!T1*";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      capabilities0.getClassCapabilities();
      capabilities0.m_Owner = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities1.enableAllClasses();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.setClassIndex("\"ZU!T1*");
      capabilities0.getAttributeCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.getRevision();
      FindWithCapabilities.main(stringArray1);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "qC#u vZtIPC~Aj";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      String string1 = findWithCapabilities0.getFilename();
      assertEquals("", string1);
      
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<!-- globalinfo-end -->");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qC#u vZtIPC~Aj");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      SingleIndex.main(stringArray0);
      Random.setNextRandom(0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      boolean boolean0 = capabilities0.m_InstancesTest;
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom((-239));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      capabilities0.m_MissingValuesTest = true;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      String string1 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<!-- globalinfo-end -->");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "N1OhX+8+vZun9Sm%-t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom(2942);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.isEnabled(capabilities_Capability0);
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities2.getOptions();
      findWithCapabilities2.setCapabilities(capabilities0);
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities2.isEnabled(capabilities_Capability2);
      assertFalse(boolean1 == boolean0);
  }
}
