/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:33:14 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 8);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom((-1014));
      Random.setNextRandom(8);
      DenseVector denseVector0 = DenseVector.constant(8, 8);
      Matrix matrix0 = denseVector0.toRowMatrix();
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(denseMatrix0);
      SingularValueDecompositor singularValueDecompositor2 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor2.decompose();
      SingularValueDecompositor singularValueDecompositor3 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor3.applicableTo(denseMatrix0);
      singularValueDecompositor2.decompose();
      int int0 = (-1688);
      // Undeclared exception!
      SparseMatrix.identity(2075565373);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(463, 463);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(463, rowMajorSparseMatrix0.rows());
      assertEquals(463, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = 3594;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 463;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(37, 37);
      assertEquals(37, denseMatrix0.rows());
      assertEquals(37, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(37, denseMatrix0.rows());
      assertEquals(37, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(37, denseMatrix0.rows());
      assertEquals(37, denseMatrix0.columns());
      assertNotNull(matrixArray0);
      
      Random.setNextRandom(490);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat((String) null, decimalFormatSymbols0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(32, 32);
      assertEquals(32, denseMatrix0.columns());
      assertEquals(32, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(32, denseMatrix0.columns());
      assertEquals(32, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 29;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(29, 29);
      assertEquals(29, denseMatrix0.columns());
      assertEquals(29, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(29, denseMatrix0.columns());
      assertEquals(29, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(32, 33);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(33, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(33, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }
}
