/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:16:38 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      compressedVector0.copyOfLength(0);
      compressedVector0.sliceLeft(0);
      compressedVector0.toSparseVector();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(2793, 2793);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2793' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5, 5);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      boolean boolean0 = compressedVector0.nonZeroAt(28);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      byte[] byteArray0 = new byte[6];
      Integer.getInteger("This vector can't grow up.");
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(3, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2, 2);
      compressedVector0.setAll(2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.set(8, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '8' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 5);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      
      compressedVector0.setAll(22.0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1484.939927;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(48, 48);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 48);
      compressedVector0.toRowMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      Integer integer0 = new Integer(0);
      Byte byte0 = new Byte((byte) (-73));
      Byte.toUnsignedLong((byte)35);
      Byte.compare((byte) (-73), (byte)0);
      hashMap0.replace(integer0, byte0);
      double[] doubleArray0 = new double[1];
      compressedVector0.euclideanNorm();
      doubleArray0[0] = (double) 48;
      CompressedVector.fromArray(doubleArray0);
      compressedVector1.toBinary();
      // Undeclared exception!
      try { 
        compressedVector0.set(48, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '48' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = new CompressedVector(5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(292, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double((-3));
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1326.820989353992;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(1326.820989353992);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      int int0 = 0;
      compressedVector0.nonZeroAt(0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-1428);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-1428), (double) (-1428), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[20];
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 7);
      compressedVector0.copyOfLength(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1601;
      CompressedVector compressedVector0 = new CompressedVector(1601, 1601);
      // Undeclared exception!
      try { 
        compressedVector0.non((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      int int0 = (-1822);
      Integer integer0 = new Integer((-1822));
      Integer.getInteger("");
      Integer.getInteger("This vector can't grow up.");
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      Byte.toUnsignedInt((byte)105);
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        Vector.fromMap(hashMap0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1893, 0.0, (Random) mockRandom0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)7, (byte)101, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2572);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.set(0, 458.541338747);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1601, 1601);
      compressedVector0.max();
      compressedVector0.swapElements(1601, 1957);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-1313), 1957);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1313' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      Vector vector0 = compressedVector0.copyOfLength(0);
      vector0.infinityNorm();
      Vector vector1 = compressedVector0.sliceLeft(0);
      vector1.toDenseVector();
      compressedVector0.toSparseVector();
      // Undeclared exception!
      try { 
        vector0.swapElements(550, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1601, 1601);
      compressedVector0.infinityNorm();
      compressedVector0.swapElements(1601, 1601);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2299), (-2299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2299
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(4);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(726);
      hashMap0.put(integer1, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((-1822));
      Integer.getInteger("");
      Integer.getInteger("This vector can't grow up.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[2];
      int int0 = 4450;
      CompressedVector compressedVector0 = new CompressedVector(4450, 4450, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[7];
      intArray0[1] = 1154;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      compressedVector0.swapElements(1154, 1154);
      boolean boolean0 = compressedVector0.nonZeroAt(1154);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((-1822));
      Integer.getInteger("");
      Integer.getInteger("This vector can't grow up.");
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 13);
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copy();
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(13, compressedVector2.length());
      
      double double0 = compressedVector1.getOrElse(2, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1601, 1601);
      compressedVector0.max();
      compressedVector0.divide(1604.675);
      compressedVector0.swapElements(1601, 1957);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1774.6853001;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = (-1169.352419145);
      doubleArray0[4] = 174.943288747;
      doubleArray0[5] = (-1245.15131);
      doubleArray0[6] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroAt((-1));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.min();
      compressedVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("G8vuHbb3-J-f/J%``Lt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[20];
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      compressedVector0.swapElements(2, 2);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = new CompressedVector(5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(292, vectorFunction0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1245.15131);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 4753.745038173681;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 292;
      doubleArray0[5] = (double) 292;
      CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(776.8643).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(292, vectorFunction1);
      compressedVector0.blankOfLength(292);
      assertEquals(0.2, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1134);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getDecimalFormatSymbols();
      compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      compressedVector0.nonZeroIterator();
      int int0 = 22;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3322.0)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(22, vectorFunction1);
      int int1 = (-1417);
      VectorFunction vectorFunction2 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction2).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction2);
      // Undeclared exception!
      try { 
        compressedVector0.set((-1417), 675.545224);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1417' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-1822));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)16;
      doubleArray0[1] = (double) (byte)16;
      doubleArray0[2] = (double) (byte) (-86);
      doubleArray0[3] = (double) (byte)16;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte) (-86), vectorFunction0);
      assertEquals(4, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = new CompressedVector(2260, (byte)2);
      Vector vector0 = compressedVector1.blankOfLength(0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1081);
      compressedVector0.setAll(1081);
      compressedVector0.getOrElse(8, 1081);
      assertEquals(1081, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = new CompressedVector(5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(292, vectorFunction0);
      Integer.getInteger("          ");
      CompressedVector.fromMap(hashMap0, 4);
      double double0 = compressedVector0.getOrElse(1, 4);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5, 5);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(5);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.constant(5, 5);
      Double double1 = ooPlaceInnerProduct0.applySymmetric(denseVector0, compressedVector0);
      linkedList0.add(double1);
      linkedList0.add(double0);
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      compressedVector1.swapElements((-2347), 5);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5, 5);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = 4753.745038173681;
      CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(5, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector1.blankOfLength((-2811));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2811
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 5;
      doubleArray0[8] = (double) 5;
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 2;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 2;
      intArray0[5] = 5;
      CompressedVector compressedVector0 = new CompressedVector(5, 2, doubleArray0, intArray0);
      compressedVector0.swapElements(2, 13);
      assertArrayEquals(new int[] {5, 13, 5, 5, 2, 5}, intArray0);
      
      CompressedVector compressedVector1 = new CompressedVector(5, 5);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(5);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 1945;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 5;
      intArray0[2] = 1945;
      intArray0[3] = 1945;
      intArray0[4] = 5;
      intArray0[5] = 5;
      CompressedVector compressedVector0 = new CompressedVector(1945, 5, doubleArray0, intArray0);
      compressedVector0.swapElements(204, 1);
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-1452), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1452
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      CompressedVector compressedVector0 = CompressedVector.fromBinary(byteArray0);
      compressedVector0.getOrElse((byte)16, (byte)16);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4.0;
      doubleArray0[1] = (double) (byte)16;
      doubleArray0[2] = (double) (byte)16;
      doubleArray0[3] = (double) (byte)16;
      doubleArray0[4] = (double) (byte)16;
      doubleArray0[5] = 16.0;
      doubleArray0[6] = 16.0;
      doubleArray0[7] = (-1759.8130285654363);
      doubleArray0[8] = (double) (byte)16;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1047, 1047);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)4, (byte)23, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1047, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 984;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-2394.12);
      doubleArray0[6] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 984;
      intArray0[1] = 984;
      intArray0[2] = 2;
      intArray0[3] = 984;
      intArray0[4] = 984;
      intArray0[5] = 2;
      intArray0[6] = 984;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      compressedVector0.swapElements(215, 984);
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector(2, 2584);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2584.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[2];
      intArray0[1] = 977;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, 977);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 984;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-2394.12);
      doubleArray0[6] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 984;
      intArray0[1] = 984;
      intArray0[2] = 2;
      intArray0[3] = 984;
      intArray0[4] = 984;
      intArray0[5] = 2;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Vector.fromMap(hashMap0, 10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements(215, 984);
      compressedVector0.blankOfLength(984);
      assertArrayEquals(new int[] {215, 984, 2, 984, 984, 2, 0}, intArray0);
      assertArrayEquals(new double[] {984.0, 2.0, 2.0, 2.0, 2.0, (-2394.12), 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1157;
      doubleArray0[1] = (double) 5;
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 1495;
      CompressedVector compressedVector0 = new CompressedVector(5, 1495, doubleArray0, intArray0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '5' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1073741824;
      doubleArray0[1] = 986.923734;
      doubleArray0[2] = (double) 1073741824;
      int[] intArray0 = new int[5];
      intArray0[0] = 1073741824;
      intArray0[1] = 1073741824;
      intArray0[2] = 1073741824;
      intArray0[3] = 1073741824;
      intArray0[4] = 1073741824;
      CompressedVector compressedVector0 = new CompressedVector(1073741824, 1073741824, doubleArray0, intArray0);
      Vector vector0 = compressedVector0.blank();
      // Undeclared exception!
      try { 
        compressedVector0.subtract(vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1073741824' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-2394.12);
      doubleArray0[6] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[5] = 2;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Vector.fromMap(hashMap0, 10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(505.66731, 1026.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements(215, 1);
      compressedVector0.blankOfLength(1);
      assertArrayEquals(new double[] {505.66731, 1026.0, 0.0, 2.0, 2.0, (-2394.12), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 1, 0, 0, 0, 2, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[6] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 984;
      intArray0[1] = 984;
      intArray0[2] = 2;
      intArray0[3] = 984;
      intArray0[4] = 984;
      intArray0[5] = 2;
      doubleArray0[4] = (double) 984;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      compressedVector0.swapElements(215, 984);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      linkedList0.add((Double) 984.0);
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector1.to(vectorFactory0);
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new int[] {0, 215, 984, 984, 984, 2, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[6] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2;
      doubleArray0[4] = (double) 984;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      linkedList0.add((Double) 984.0);
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, compressedVector1.cardinality());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector1).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 977;
      intArray0[1] = 977;
      intArray0[2] = 2;
      intArray0[4] = 0;
      intArray0[5] = 2;
      doubleArray0[4] = (double) 977;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector.fromMap(hashMap0, 977);
      compressedVector0.swapElements(215, 977);
      compressedVector0.swapElements(2, 2);
      CompressedVector compressedVector1 = new CompressedVector();
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("org.la4j.vector.sparse.CompressedVector");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = (double) 977;
      doubleArray0[6] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 977;
      intArray0[1] = 977;
      intArray0[2] = 2;
      intArray0[4] = 0;
      intArray0[5] = 2;
      doubleArray0[4] = (double) 977;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      compressedVector0.swapElements(215, 977);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      compressedVector0.swapElements(215, 2);
      assertArrayEquals(new int[] {2, 977, 2, 0, 0, 2, 0}, intArray0);
  }
}
