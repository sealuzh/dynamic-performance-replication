/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:52:26 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.HijrahDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1116), "DFprec<ated", "DFprec<ated", "DFprec<ated", "DFprec<ated");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("DFprec<ated", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      classWriter0.thisName = "nQ?:\"'VH3";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "Synthetic", "");
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.visitEnd();
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("nQ?:\"'VH3");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 2, "'&eo8sd?7{&f`pP,", (String) null, "ConstantValue", hijrahDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      classWriter0.thisName = "nQ?:\"'VH3";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "Synthetic", "");
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.visitEnd();
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("nQ?:\"'VH3");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)24;
      fieldWriter0.visitAttribute(attribute0);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)0;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, 8, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1103), "Deprecated", "Deprecated", "rXkeBu(fOO\"gimchf)J", "Deprecated");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1523);
      classWriter0.thisName = "nQ?:\"'VH3";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "Synthetic", "");
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.visitEnd();
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("nQ?:\"'VH3");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)24;
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      byteArray0[3] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)0;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, 8, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ClassWriter classWriter0 = new ClassWriter(974);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "D#KR)IrG", "org.apache.commons.io.IOCase", "D#KR)IrG", "org.apache.commons.io.IOCase");
      ByteVector byteVector0 = new ByteVector(66);
      ByteVector byteVector1 = byteVector0.putLong(1L);
      ByteVector byteVector2 = byteVector1.putInt((-2767));
      ByteVector byteVector3 = byteVector2.putShort(4731);
      ByteVector byteVector4 = byteVector3.putUTF8("");
      fieldWriter0.put(byteVector4);
      assertSame(byteVector0, byteVector4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1076));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "rXkeBu(fOO\"gimchf)J", "rXkeBu(fOO\"gimchf)J", "rXkeBu(fOO\"gimchf)J", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(310);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 310, "Gt4gs|L", "Gt4gs|L", "Gt4gs|L", "Gt4gs|L");
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.visitAnnotation("RuntimeVisibleAnnotations", false);
      fieldWriter1.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter2 = new FieldWriter(classWriter0, 1, "", "|,g[%", (String) null, (Object) null);
      assertFalse(fieldWriter2.equals((Object)fieldWriter1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(310);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Gt4gs|L", "=|&Qv7\",", "`C-UNJg;.", (Object) null);
      Attribute attribute0 = new Attribute("Gt4gs|L");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter0.getSize();
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-1714));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(310);
      Attribute attribute0 = new Attribute("Gt4gs|L");
      FieldWriter fieldWriter0 = classWriter0.lastField;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 1, "Gt4gs|L", "System", (String) null, "[]");
      fieldWriter1.getSize();
      ByteVector byteVector0 = new ByteVector(1);
      int int0 = fieldWriter1.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1756), "DFprec<ated", "DFprec<ated", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      classWriter0.version = 3049;
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1103), "Deprecated", "Deprecated", "Deprecated", "Deprecated");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }
}
