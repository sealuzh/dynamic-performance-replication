/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:32:53 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-4536.582), (-4536.582), 0.0, 0.9);
      double double0 = dormandPrince54Integrator0.getMinReduction();
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getMaxGrowth();
      highamHall54Integrator0.getSafety();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-15.0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 1684.03103548;
      double double1 = (-1239.602);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3469.170548511), 2, 1684.03103548, (-1239.602));
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(83.29670519907735, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(3469.170548511, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(2.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(4, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(4, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-3469.170548511));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Collection<EventHandler> collection0 = highamHall54Integrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      assertNotNull(highamHall54Integrator1);
      assertFalse(highamHall54Integrator1.equals((Object)highamHall54Integrator0));
      assertEquals(0.0, highamHall54Integrator1.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator1.getOrder());
      assertEquals(0.9, highamHall54Integrator1.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator1.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator1.getName());
      assertEquals(0, highamHall54Integrator1.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator1.getMaxEvaluations());
      assertEquals(0.0, highamHall54Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator1.getMaxGrowth(), 0.01);
      
      Collection<EventHandler> collection1 = highamHall54Integrator0.getEventHandlers();
      assertNotSame(highamHall54Integrator0, highamHall54Integrator1);
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      assertFalse(highamHall54Integrator0.equals((Object)highamHall54Integrator1));
      assertFalse(collection1.equals((Object)collection0));
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = highamHall54Integrator1.getSafety();
      assertEquals(0.9, double0, 0.01);
      assertNotSame(highamHall54Integrator1, highamHall54Integrator0);
      assertFalse(highamHall54Integrator1.equals((Object)highamHall54Integrator0));
      assertEquals(0.0, highamHall54Integrator1.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator1.getOrder());
      assertEquals(0.9, highamHall54Integrator1.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator1.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator1.getName());
      assertEquals(0, highamHall54Integrator1.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator1.getMaxEvaluations());
      assertEquals(0.0, highamHall54Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator1.getMaxGrowth(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime((-3469.170548511));
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals((-3469.170548511), expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1533.22892, 10.0, doubleArray0, doubleArray0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(123.82362133292662, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1533.22892, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(10.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Collection<EventHandler> collection0 = highamHall54Integrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(123.82362133292662, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1533.22892, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(10.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = (-278.3561830206115);
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(1533.22892, (-3482.993957840169), (-266.823927), (-278.3561830206115));
      assertNotNull(highamHall54Integrator1);
      assertFalse(highamHall54Integrator1.equals((Object)highamHall54Integrator0));
      assertEquals(2310.893131312179, highamHall54Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(3482.993957840169, highamHall54Integrator1.getMaxStep(), 0.01);
      assertEquals(0, highamHall54Integrator1.getEvaluations());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator1.getName());
      assertEquals(5, highamHall54Integrator1.getOrder());
      assertEquals(0.2, highamHall54Integrator1.getMinReduction(), 0.01);
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator1.getMaxEvaluations());
      assertEquals(Double.NaN, highamHall54Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator1.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator1.getMaxGrowth(), 0.01);
      assertEquals(1533.22892, highamHall54Integrator1.getMinStep(), 0.01);
      
      double double1 = highamHall54Integrator0.getMaxGrowth();
      assertEquals(10.0, double1, 0.01);
      assertNotSame(highamHall54Integrator0, highamHall54Integrator1);
      assertFalse(highamHall54Integrator0.equals((Object)highamHall54Integrator1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(123.82362133292662, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1533.22892, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(10.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      HighamHall54Integrator highamHall54Integrator2 = new HighamHall54Integrator(0.9, 1533.22892, doubleArray0, doubleArray0);
      assertNotNull(highamHall54Integrator2);
      assertFalse(highamHall54Integrator2.equals((Object)highamHall54Integrator0));
      assertFalse(highamHall54Integrator2.equals((Object)highamHall54Integrator1));
      assertEquals(10.0, highamHall54Integrator2.getMaxGrowth(), 0.01);
      assertEquals(37.147086399877985, highamHall54Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator2.getSafety(), 0.01);
      assertEquals(0.9, highamHall54Integrator2.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator2.getMinReduction(), 0.01);
      assertEquals(1533.22892, highamHall54Integrator2.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator2.getName());
      assertEquals(0, highamHall54Integrator2.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator2.getMaxEvaluations());
      assertEquals(Double.NaN, highamHall54Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator2.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double2 = highamHall54Integrator2.getSafety();
      assertEquals(0.9, double2, 0.01);
      assertNotSame(highamHall54Integrator2, highamHall54Integrator0);
      assertNotSame(highamHall54Integrator2, highamHall54Integrator1);
      assertFalse(highamHall54Integrator2.equals((Object)highamHall54Integrator0));
      assertFalse(highamHall54Integrator2.equals((Object)highamHall54Integrator1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(10.0, highamHall54Integrator2.getMaxGrowth(), 0.01);
      assertEquals(37.147086399877985, highamHall54Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator2.getSafety(), 0.01);
      assertEquals(0.9, highamHall54Integrator2.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator2.getMinReduction(), 0.01);
      assertEquals(1533.22892, highamHall54Integrator2.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator2.getName());
      assertEquals(0, highamHall54Integrator2.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator2.getMaxEvaluations());
      assertEquals(Double.NaN, highamHall54Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator2.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime(1.0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(1.0, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      highamHall54Integrator1.integrate(expandableStatefulODE0, 0.2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Collection<EventHandler> collection0 = highamHall54Integrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(407.3044, (-2692.80217865), (-139.176320855619), 0.0);
      assertNotNull(highamHall54Integrator1);
      assertFalse(highamHall54Integrator1.equals((Object)highamHall54Integrator0));
      assertEquals(10.0, highamHall54Integrator1.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator1.getSafety(), 0.01);
      assertEquals(0, highamHall54Integrator1.getEvaluations());
      assertEquals(1047.2775065347919, highamHall54Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator1.getName());
      assertEquals(0.2, highamHall54Integrator1.getMinReduction(), 0.01);
      assertEquals(2692.80217865, highamHall54Integrator1.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator1.getOrder());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator1.getMaxEvaluations());
      assertEquals(407.3044, highamHall54Integrator1.getMinStep(), 0.01);
      
      highamHall54Integrator0.clearStepHandlers();
      assertNotSame(highamHall54Integrator0, highamHall54Integrator1);
      assertFalse(highamHall54Integrator0.equals((Object)highamHall54Integrator1));
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      HighamHall54Integrator highamHall54Integrator2 = new HighamHall54Integrator((-2353.0245188328), (-2353.0245188328), 2825.780046, 407.3044);
      assertNotNull(highamHall54Integrator2);
      assertFalse(highamHall54Integrator2.equals((Object)highamHall54Integrator0));
      assertFalse(highamHall54Integrator2.equals((Object)highamHall54Integrator1));
      assertEquals(0, highamHall54Integrator2.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator2.getMaxEvaluations());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator2.getName());
      assertEquals(0.2, highamHall54Integrator2.getMinReduction(), 0.01);
      assertEquals(2353.0245188328, highamHall54Integrator2.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator2.getMaxGrowth(), 0.01);
      assertEquals(2353.0245188328, highamHall54Integrator2.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator2.getOrder());
      assertEquals(2353.0245188328, highamHall54Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator2.getSafety(), 0.01);
      
      Double double0 = new Double((-930.97407));
      assertEquals((-930.97407), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = highamHall54Integrator0.getSafety();
      assertEquals(0.9, double1, 0.01);
      assertNotSame(highamHall54Integrator0, highamHall54Integrator1);
      assertNotSame(highamHall54Integrator0, highamHall54Integrator2);
      assertFalse(highamHall54Integrator0.equals((Object)highamHall54Integrator1));
      assertFalse(highamHall54Integrator0.equals((Object)highamHall54Integrator2));
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime((-2692.80217865));
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals((-2692.80217865), expandableStatefulODE0.getTime(), 0.01);
      
      highamHall54Integrator1.integrate(expandableStatefulODE0, (-2353.0245188328));
      assertNotSame(highamHall54Integrator1, highamHall54Integrator2);
      assertNotSame(highamHall54Integrator1, highamHall54Integrator0);
      assertFalse(highamHall54Integrator1.equals((Object)highamHall54Integrator2));
      assertFalse(highamHall54Integrator1.equals((Object)highamHall54Integrator0));
      assertEquals(8, highamHall54Integrator1.getEvaluations());
      assertEquals(10.0, highamHall54Integrator1.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator1.getSafety(), 0.01);
      assertEquals(1047.2775065347919, highamHall54Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator1.getName());
      assertEquals(0.2, highamHall54Integrator1.getMinReduction(), 0.01);
      assertEquals(2692.80217865, highamHall54Integrator1.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator1.getOrder());
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator1.getMaxEvaluations());
      assertEquals(407.3044, highamHall54Integrator1.getMinStep(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals((-2353.0245188328), expandableStatefulODE0.getTime(), 0.01);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-930.97407), (-115.62874445), 0.9, (-957.572475448975));
      assertNotNull(dormandPrince54Integrator0);
      assertEquals(328.096575461565, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(930.97407, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(115.62874445, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
      assertEquals(328.096575461565, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(930.97407, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(115.62874445, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
  }
}
