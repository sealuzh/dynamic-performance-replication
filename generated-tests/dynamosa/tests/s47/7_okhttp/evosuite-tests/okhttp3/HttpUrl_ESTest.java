/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:13:23 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI1.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("O4UC_W", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = httpUrl_Builder4.parse(httpUrl0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedPassword("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.encodedQuery("O4UC_W");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertNotNull(httpUrl1);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://:(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?O4UC_W", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", httpUrl1.password());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult1 = httpUrl_Builder4.parse(httpUrl1, "[]");
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://:(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?O4UC_W", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", httpUrl1.password());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(httpUrl_Builder_ParseResult1, httpUrl_Builder_ParseResult0);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder3);
      assertNotNull(httpUrl2);
      assertFalse(httpUrl2.isHttps());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)", httpUrl2.encodedPassword());
      assertNull(httpUrl2.fragment());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("http://:(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)@www.somefakebutwellformedurl.org/[]?O4UC_W", httpUrl2.toString());
      assertEquals("", httpUrl2.username());
      assertEquals("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", httpUrl2.password());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(1, httpUrl2.querySize());
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      // Undeclared exception!
      try { 
        httpUrl2.queryParameterValue((-937));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("fooexample");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("http", uRI1.getScheme());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "fooexample");
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toExternalForm());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toExternalForm());
      assertEquals("http://www.somefakebutwellformedurl.org/fooexample", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl2);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toExternalForm());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooexample", httpUrl2.toString());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(1, httpUrl2.pathSize());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertTrue(httpUrl2.equals((Object)httpUrl0));
      
      httpUrl_Builder0.parse(httpUrl1, "b");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toExternalForm());
      assertEquals("http://www.somefakebutwellformedurl.org/fooexample", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = "*/c{R";
      HttpUrl httpUrl3 = httpUrl1.resolve("htt://some/fake/but/wellformed/url");
      assertNull(httpUrl3);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toExternalForm());
      assertEquals("http://www.somefakebutwellformedurl.org/fooexample", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("*/c{R", "htt://some/fake/but/wellformed/url");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertNotNull(set0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooexample", uRL1.toExternalForm());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("htt://some/fake/but/wellformed/url"));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.equals((Object)httpUrl2));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-302), "fooexample");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "";
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(""));
      
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", "");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addQueryParameter(" \"'<>#", "w");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder4);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment("5\u000Bux&+6u4");
      assertNotNull(httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedQueryParameter("Es{L}N$p", "%2e%2e");
      assertNotNull(httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder1);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host(".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("");
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addEncodedQueryParameter("fooexample", "GMT");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.setQueryParameter("https", "%2e");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.parse("%2e");
      assertNull(httpUrl0);
      
      httpUrl_Builder0.parse((HttpUrl) null, "https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.encodedPassword("GMT");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
      
      String string0 = httpUrl0.host();
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("]%");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.scheme("https");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.setEncodedQueryParameter("]%", "\n");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addPathSegment("]%");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("fooEmple");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
      
      String string0 = httpUrl0.host();
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("[hex=");
      assertNotNull(httpUrl1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/[hex=", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString(stringBuilder0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("@Fvn"));
      
      List<String> list1 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertTrue(list1.contains("@Fvn"));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      boolean boolean1 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HttpUrl.percentDecode(buffer0, "~D?&Z/D<Jmq ~=LdKQ!", (-97), (-3878), false);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("%7d%7f3p%20vevsfay");
      assertNotNull(httpUrl1);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.password());
      assertEquals("http://foo.bar/%7d%7f3p%20vevsfay", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl0.password();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.password());
      assertEquals("http://foo.bar/%7d%7f3p%20vevsfay", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl1.newBuilder("l%5ezkc%7d$-w_c%5ecp5c%60s");
      assertNotNull(httpUrl_Builder1);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.password());
      assertEquals("http://foo.bar/%7d%7f3p%20vevsfay", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("\n");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("\n");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"<>^`{}|/?#");
      assertNotNull(httpUrl1);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(2, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http://foo.bar/%22%3C%3E%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedFragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      List<String> list0 = httpUrl1.queryParameterValues("=dPGs@w");
      assertNotNull(list0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(2, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http://foo.bar/%22%3C%3E%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedFragment());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(" \"<>^`{}|/?#"));
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = HttpUrl.parse(" \"<>^`{}|/?#");
      assertNull(httpUrl2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "v";
      HttpUrl httpUrl0 = HttpUrl.parse("v");
      assertNull(httpUrl0);
      
      char[] charArray0 = new char[9];
      char char0 = '<';
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("v");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery((String) null);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removePathSegment(0);
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = ":@";
      try { 
        HttpUrl.getChecked(":@");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for :@
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "$?WF5\\u*ti`";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("[hex=", string0);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("[hex=");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("fa:BuZferSize < 1: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: fa:BuZferSize < 1: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(14);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(58, "Zrs,{_+%}4|{#S");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 58, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("source is closed");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("source is closed");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      String string0 = "J{ih&u\"UZ h1Rzc]I";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("source is closed", "J{ih&u\"UZ h1Rzc]I");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment((-1840));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("@Fvn"));
      
      List<String> list1 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertTrue(list1.contains("@Fvn"));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      boolean boolean1 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fvn");
      assertNotNull(httpUrl_Builder0);
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertNotNull(httpUrl2);
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http://foo.bar/@Fvn", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.fragment());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      HttpUrl httpUrl3 = HttpUrl.parse("fooExample");
      assertNull(httpUrl3);
      
      Set<String> set0 = httpUrl2.queryParameterNames();
      assertNotNull(set0);
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http://foo.bar/@Fvn", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.fragment());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("fooExample"));
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      String string0 = httpUrl2.encodedUsername();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http://foo.bar/@Fvn", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.fragment());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "DfgQY";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("DfgQY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: DfgQY
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e.");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertTrue(uRI1.isAbsolute());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertTrue(uRI1.isAbsolute());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllEncodedQueryParameters("tt~a[+]ODp/dSLYh.YP");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      httpUrl_Builder0.parse(httpUrl0, "# L7?6d(n");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedPassword("zi:yW!");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.fragment("thread interrupted");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("'Ah5");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      HttpUrl httpUrl2 = httpUrl_Builder5.build();
      assertNotNull(httpUrl2);
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("%27Ah5", httpUrl2.encodedPassword());
      assertEquals("thread interrupted", httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("'Ah5", httpUrl2.password());
      assertEquals("http://:%27Ah5@www.somefakebutwellformedurl.org/fooExample#thread interrupted", httpUrl2.toString());
      assertEquals("thread interrupted", httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      boolean boolean0 = httpUrl1.equals(httpUrl_Builder4);
      assertFalse(boolean0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertTrue(uRI1.isAbsolute());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      
      String string0 = httpUrl2.encodedPassword();
      assertNotNull(string0);
      assertEquals("%27Ah5", string0);
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("%27Ah5", httpUrl2.encodedPassword());
      assertEquals("thread interrupted", httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("'Ah5", httpUrl2.password());
      assertEquals("http://:%27Ah5@www.somefakebutwellformedurl.org/fooExample#thread interrupted", httpUrl2.toString());
      assertEquals("thread interrupted", httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl1.newBuilder();
      assertNotNull(httpUrl_Builder6);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertTrue(uRI1.isAbsolute());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:+?2zzg");
      assertNotNull(httpUrl0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("+", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("https://+/?2zz%7Fg", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addEncodedPathSegment("%2e.");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedQueryParameter("%s: actual 0x%08x != expected 0x%08x", "ri%22%7B%60%7B");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      
      URL uRL1 = MockURI.toURL(uRI0);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      
      URI uRI1 = httpUrl0.uri();
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.somefakebutwellformedurl.org", uRI1.getRawAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI1.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRI1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRI1, uRI0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRI1.equals((Object)uRI0));
      
      httpUrl_Builder4.parse(httpUrl0, "Z0Y,");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(uRL0, uRL1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertTrue(uRL0.equals((Object)uRL1));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.encodedQuery((String) null);
      assertNotNull(httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder4);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder4));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.addPathSegments(" 0I)T@c-");
      assertNotNull(httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder5);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder5);
      assertNotNull(httpUrl1);
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/Z0Y,?%s:%20actual%200x%08x%20!%3D%20expected%200x%08x=ri%22%7B%60%7B", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("Dn}OxTHg3");
      assertNotNull(httpUrl2);
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/Z0Y,?%s:%20actual%200x%08x%20!%3D%20expected%200x%08x=ri%22%7B%60%7B", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/Dn%7DOxTHg3", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertNotSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl2.newBuilder();
      assertNotNull(httpUrl_Builder8);
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/Z0Y,?%s:%20actual%200x%08x%20!%3D%20expected%200x%08x=ri%22%7B%60%7B", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/Dn%7DOxTHg3", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      int int0 = httpUrl1.querySize();
      assertEquals(1, int0);
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/Z0Y,?%s:%20actual%200x%08x%20!%3D%20expected%200x%08x=ri%22%7B%60%7B", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      URI uRI2 = httpUrl2.uri();
      assertNotNull(uRI2);
      assertEquals("/Dn%7DOxTHg3", uRI2.getRawPath());
      assertEquals("http://www.somefakebutwellformedurl.org/Dn%7DOxTHg3", uRI2.toString());
      assertNull(uRI2.getRawFragment());
      assertTrue(uRI2.isAbsolute());
      assertEquals((-1), uRI2.getPort());
      assertFalse(uRI2.isOpaque());
      assertEquals("http", uRI2.getScheme());
      assertNull(uRI2.getRawQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getHost());
      assertNull(uRI2.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getRawAuthority());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/Z0Y,?%s:%20actual%200x%08x%20!%3D%20expected%200x%08x=ri%22%7B%60%7B", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/Dn%7DOxTHg3", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertNotSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(uRI2, uRI1);
      assertNotSame(uRI2, uRI0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(uRI2.equals((Object)uRI1));
      assertFalse(uRI2.equals((Object)uRI0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"<>^`{}|/?#");
      assertNotNull(httpUrl1);
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://foo.bar/%22%3C%3E%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(2, httpUrl1.pathSize());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = HttpUrl.parse(" \"<>^`{}|/?#");
      assertNull(httpUrl2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("http:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("encodedPathSegments == null");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.encodedPassword("byteString == null");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI1);
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder4.parse(httpUrl0, "encodedPathSegments == null");
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("source%20is%20closed");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      assertNotNull(httpUrl1);
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("source%20is%20closed", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("source is closed", httpUrl1.password());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http://:source%20is%20closed@www.somefakebutwellformedurl.org/encodedPathSegments%20==%20null", httpUrl1.toString());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedQuery(":^JNa([l=]o]5");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertNotNull(list0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains("byteString == null"));
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder3.encodedUsername("source%20is%20closed");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      
      HttpUrl httpUrl2 = HttpUrl.parse("8/y16=3&r&Kf=:");
      assertNull(httpUrl2);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder0.query("8/y16=3&r&Kf=:");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("timeout < 0: ", 0, (-2637), "timeout < 0: ", false, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("zk)(Ilw;=.", "O4OC_W");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      httpUrl_Builder1.parse(httpUrl0, "zk)(Ilw;=.");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("zk)(Ilw;=.");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("UTF-32BE");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("zk)(Ilw;=.", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("UTF-32BE", httpUrl1.password());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("UTF-32BE", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://zk)(Ilw%3B%3D.:UTF-32BE@www.somefakebutwellformedurl.org/zk)(Ilw;=.?zk)(Ilw;%3D.=O4OC_W", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder0);
      assertNotNull(httpUrl2);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("UTF-32BE", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertEquals("zk)(Ilw;=.", httpUrl2.username());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("UTF-32BE", httpUrl2.encodedPassword());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http://zk)(Ilw%3B%3D.:UTF-32BE@www.somefakebutwellformedurl.org/zk)(Ilw;=.?zk)(Ilw;%3D.=O4OC_W", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertEquals(1, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      
      Set<String> set0 = httpUrl1.queryParameterNames();
      assertNotNull(set0);
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("zk)(Ilw;=.", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("UTF-32BE", httpUrl1.password());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("UTF-32BE", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://zk)(Ilw%3B%3D.:UTF-32BE@www.somefakebutwellformedurl.org/zk)(Ilw;=.?zk)(Ilw;%3D.=O4OC_W", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains("zk)(Ilw;=."));
      assertFalse(set0.contains("UTF-32BE"));
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("FUE/)oQ2sE4 7kf.2E", "FUE/)oQ2sE4 7kf.2E");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("O4OC_W");
      assertNotNull(httpUrl1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/O4OC_W", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      boolean boolean0 = httpUrl0.equals(httpUrl1);
      assertFalse(boolean0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/O4OC_W", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addEncodedQueryParameter("fooexample", "GMT");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.setQueryParameter("https", "%2e");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI0);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder0.parse(httpUrl0, "https:/www.somefakebutwellformedurl.org/fooexample");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.encodedPassword("unexpected encodedPath: ");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(string0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      URL uRL1 = httpUrl0.url();
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("7Gi]_");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("7Gi]_");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      String string1 = "}mk`I5=g)ZB*aU~Mo";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.fragment(" \"':;<=>@[]^`{}|/?#&!$(),~");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.addEncodedPathSegment("}mk`I5=g)ZB*aU~Mo");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      httpUrl_Builder3.encodedUsername = "7Gi]_";
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedQuery("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder1.addEncodedQueryParameter("[size=", "7Gi]_");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder2.addEncodedQueryParameter("o.ti", "");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder3.username("encodedPathSegments == null");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder6.removePathSegment(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("kF");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("doLrB:+?2ZzwG", "@n'%t~b");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedQuery("doLrB:+?2ZzwG");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.setEncodedQueryParameter("A;o3zGoy4P2[&QV.", "{YFs#/@XbK]np=");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.encodedPassword("kqo'Qy+FW");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.fragment("kF");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      
      httpUrl_Builder5.encodedPassword = "A;o3zGoy4P2[&QV.";
      httpUrl_Builder0.parse(httpUrl0, "http://some/fake/but/wellformed/url");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder4);
      assertNotNull(httpUrl1);
      assertEquals("http://:A;o3zGoy4P2[&QV.@some/fake/but/wellformed/url?doLrB:+?2ZzwG&A;o3zGoy4P2[%26QV.=%7BYFs%23/@XbK]np%3D#kF", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals("A;o3zGoy4P2[&QV.", httpUrl1.password());
      assertEquals("kF", httpUrl1.encodedFragment());
      assertEquals(4, httpUrl1.pathSize());
      assertEquals("kF", httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("some", httpUrl1.host());
      assertEquals("A;o3zGoy4P2[&QV.", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals(2, httpUrl1.querySize());
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl_Builder5.build();
      assertNotNull(httpUrl2);
      assertEquals("", httpUrl2.username());
      assertEquals("A;o3zGoy4P2[&QV.", httpUrl2.password());
      assertEquals("some", httpUrl2.host());
      assertEquals("A;o3zGoy4P2[&QV.", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertEquals(2, httpUrl2.querySize());
      assertEquals("http://:A;o3zGoy4P2[&QV.@some/fake/but/wellformed/url?doLrB:+?2ZzwG&A;o3zGoy4P2[%26QV.=%7BYFs%23/@XbK]np%3D#kF", httpUrl2.toString());
      assertEquals("kF", httpUrl2.fragment());
      assertEquals("kF", httpUrl2.encodedFragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals(4, httpUrl2.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      // Undeclared exception!
      try { 
        httpUrl2.uri();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in user info at index 19: http://:A;o3zGoy4P2[&QV.@some/fake/but/wellformed/url?doLrB:+?2ZzwG&A;o3zGoy4P2[%26QV.=%7BYFs%23/@XbK]np%3D#kF
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      assertNotNull(uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder1.parse(httpUrl0, "Invalid host: ");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("Invalid host: ");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedQuery("}<S#");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.addEncodedPathSegments("\u2026");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertNotNull(httpUrl1);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertEquals("Invalid host: ", httpUrl1.password());
      assertEquals("http://:Invalid%20host%3A%20@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6?}%3CS%23", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals("Invalid%20host%3A%20", httpUrl1.encodedPassword());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl1.newBuilder();
      assertNotNull(httpUrl_Builder7);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertEquals("Invalid host: ", httpUrl1.password());
      assertEquals("http://:Invalid%20host%3A%20@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6?}%3CS%23", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals("Invalid%20host%3A%20", httpUrl1.encodedPassword());
      assertNotSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder4);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      
      String string0 = httpUrl1.host();
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertEquals("Invalid host: ", httpUrl1.password());
      assertEquals("http://:Invalid%20host%3A%20@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6?}%3CS%23", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals("Invalid%20host%3A%20", httpUrl1.encodedPassword());
      assertNotSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string1 = httpUrl0.queryParameter("");
      assertNull(string1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      String string2 = httpUrl0.query();
      assertNull(string2);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("I%E=H+eBQ", "I%E=H+eBQ");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("H*F=6-Q.}2");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("Es%7BL%7DN$p%7F");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegment("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "fffe");
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fffe", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fffe", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fffe", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fffe", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fffe", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder3.parse(httpUrl0, "Z0Y,");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fffe", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fffe", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fffe", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.encodedPassword("Es%7BL%7DN$p%7F");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.encodedQuery("Expected%20leading%20[0-9]%20or%20%27-%27%20character%20but%20was%200x");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder2.addEncodedPathSegments("fffe");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      assertNotNull(httpUrl1);
      assertEquals("Es%7BL%7DN$p%7F", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("Es{L}N$p", httpUrl1.password());
      assertEquals(2, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://:Es%7BL%7DN$p%7F@www.somefakebutwellformedurl.org/Z0Y,/fffe?Expected%20leading%20[0-9]%20or%20%27-%27%20character%20but%20was%200x", httpUrl1.toString());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder8);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fffe", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fffe", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fffe", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      
      String string0 = httpUrl1.host();
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals("Es%7BL%7DN$p%7F", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("Es{L}N$p", httpUrl1.password());
      assertEquals(2, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://:Es%7BL%7DN$p%7F@www.somefakebutwellformedurl.org/Z0Y,/fffe?Expected%20leading%20[0-9]%20or%20%27-%27%20character%20but%20was%200x", httpUrl1.toString());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("qa.~#");
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegment("%2e.");
      assertNotNull(httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.encodedPassword("qa.~#");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI1);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("qa.~#");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      
      httpUrl_Builder4.parse(httpUrl1, "c]IJ57(I");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.encodedPassword("'5");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      String string0 = httpUrl_Builder1.toString();
      assertNotNull(string0);
      assertEquals("http://:%275@www.somefakebutwellformedurl.org/c]IJ57(I", string0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      
      HttpUrl httpUrl2 = HttpUrl.parse("okio.GzipSink");
      assertNull(httpUrl2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains("@Fvn"));
      
      List<String> list1 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list1);
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(list1.contains("@Fvn"));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      boolean boolean1 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fvn");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertNotNull(httpUrl2);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://foo.bar/@Fvn", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("foo.bar", httpUrl2.host());
      assertNull(httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      HttpUrl httpUrl3 = HttpUrl.parse("fooExample");
      assertNull(httpUrl3);
      
      HttpUrl httpUrl4 = httpUrl2.resolve(":%5EJNa([l=]o]5");
      assertNotNull(httpUrl4);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://foo.bar/@Fvn", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("foo.bar", httpUrl2.host());
      assertNull(httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl4.isHttps());
      assertEquals("", httpUrl4.encodedPassword());
      assertEquals("", httpUrl4.password());
      assertEquals(1, httpUrl4.pathSize());
      assertEquals("foo.bar", httpUrl4.host());
      assertEquals("http://foo.bar/:%5EJNa([l=]o]5", httpUrl4.toString());
      assertNull(httpUrl4.fragment());
      assertNull(httpUrl4.encodedFragment());
      assertEquals("", httpUrl4.username());
      assertEquals(0, httpUrl4.querySize());
      assertEquals(80, httpUrl4.port());
      assertEquals("http", httpUrl4.scheme());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl4);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl4);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl4);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl4, httpUrl1);
      assertNotSame(httpUrl4, httpUrl0);
      assertNotSame(httpUrl4, httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl4.equals((Object)httpUrl1));
      assertFalse(httpUrl4.equals((Object)httpUrl0));
      assertFalse(httpUrl4.equals((Object)httpUrl2));
      
      String string0 = httpUrl4.encodedPath();
      assertNotNull(string0);
      assertEquals("/:%5EJNa([l=]o]5", string0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://foo.bar/@Fvn", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("foo.bar", httpUrl2.host());
      assertNull(httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl4.isHttps());
      assertEquals("", httpUrl4.encodedPassword());
      assertEquals("", httpUrl4.password());
      assertEquals(1, httpUrl4.pathSize());
      assertEquals("foo.bar", httpUrl4.host());
      assertEquals("http://foo.bar/:%5EJNa([l=]o]5", httpUrl4.toString());
      assertNull(httpUrl4.fragment());
      assertNull(httpUrl4.encodedFragment());
      assertEquals("", httpUrl4.username());
      assertEquals(0, httpUrl4.querySize());
      assertEquals(80, httpUrl4.port());
      assertEquals("http", httpUrl4.scheme());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl4);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl4);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl4);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl4, httpUrl1);
      assertNotSame(httpUrl4, httpUrl0);
      assertNotSame(httpUrl4, httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl4));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl4));
      assertFalse(httpUrl2.equals((Object)httpUrl4));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl4.equals((Object)httpUrl1));
      assertFalse(httpUrl4.equals((Object)httpUrl0));
      assertFalse(httpUrl4.equals((Object)httpUrl2));
      
      String string1 = httpUrl1.username();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl4);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl4);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl4));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl4));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("xf:ZOJclw-ZLwS/X");
      assertNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((Buffer) null, "W\"Y-Dp>(^jB&eY", (-995), 43, "Z?*^O,7z}J~68B~xAR", true, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertEquals((-1), int0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList1.contains("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)"));
      assertFalse(list0.contains("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)"));
      
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList1.contains("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)"));
      assertFalse(list0.contains("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)"));
      
      try { 
        HttpUrl.getChecked("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "8Hu9P4I<`X:/";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("8Hu9P4I<`X:/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 8Hu9P4I<`X:/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "@.v";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("@.v", "%20e;zW]%3Cj}%7Fbj0b%3D");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string1 = "_/)+8C](-/Z#VhAB4j";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("_/)+8C](-/Z#VhAB4j");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addEncodedPathSegment(".");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string1 = "https";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", "");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string2 = "w";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addQueryParameter(" \"'<>#", "w");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder4);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment("5\u000Bux&+6u4");
      assertNotNull(httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder2);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder2));
      
      String string3 = "endIndex < beginIndex: ";
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setQueryParameter(" \"'<>#", "endIndex < beginIndex: ");
      assertNotNull(httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder4.username("");
      assertNotNull(httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      
      String string4 = "P0c<ExK";
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder3.removeAllQueryParameters("P0c<ExK");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder8.addEncodedPathSegments("5\u000Bux&+6u4");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder9);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder7);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder7));
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((Buffer) null, "endIndex < beginIndex: ", 499, 561, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addEncodedQueryParameter("fooexample", "GMT");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.setQueryParameter("https", "%2e");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addQueryParameter("uE8[LSt%H?", "qmh.p?j");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder7 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder7);
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder6.fragment("nhFRr1^O.}v");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder3.setQueryParameter("Es{L}N$p", ":^2BL4hn:l");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder10 = httpUrl_Builder0.username(" \"'<>#");
      assertNotNull(httpUrl_Builder10);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder9);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder5);
      assertSame(httpUrl_Builder10, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder4);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder4));
      
      HttpUrl.Builder httpUrl_Builder11 = httpUrl_Builder2.removeAllQueryParameters("%2e");
      assertNotNull(httpUrl_Builder11);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder11);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder10);
      assertSame(httpUrl_Builder11, httpUrl_Builder4);
      assertSame(httpUrl_Builder11, httpUrl_Builder2);
      assertSame(httpUrl_Builder11, httpUrl_Builder1);
      assertSame(httpUrl_Builder11, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder0);
      assertSame(httpUrl_Builder11, httpUrl_Builder9);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder10);
      assertSame(httpUrl_Builder11, httpUrl_Builder5);
      assertSame(httpUrl_Builder11, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder7);
      assertSame(httpUrl_Builder11, httpUrl_Builder3);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder10));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder10));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder10));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder7));
      
      HttpUrl.Builder httpUrl_Builder12 = httpUrl_Builder5.addEncodedPathSegments("%2e");
      assertNotNull(httpUrl_Builder12);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder12);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder11);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder12);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder10);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder11);
      assertSame(httpUrl_Builder5, httpUrl_Builder12);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder10);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder12, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder12, httpUrl_Builder10);
      assertSame(httpUrl_Builder12, httpUrl_Builder6);
      assertSame(httpUrl_Builder12, httpUrl_Builder9);
      assertSame(httpUrl_Builder12, httpUrl_Builder5);
      assertSame(httpUrl_Builder12, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder12, httpUrl_Builder7);
      assertSame(httpUrl_Builder12, httpUrl_Builder2);
      assertSame(httpUrl_Builder12, httpUrl_Builder3);
      assertSame(httpUrl_Builder12, httpUrl_Builder4);
      assertSame(httpUrl_Builder12, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder12, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder10));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder10));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder10));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder12.equals((Object)httpUrl_Builder10));
      assertFalse(httpUrl_Builder12.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder12.equals((Object)httpUrl_Builder0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "http:";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("1]kIR's!:CA*4 ?5{1#");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("k+OE\"TXpFzI");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("k+OE\"TXpFzI");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("UTF-2BE");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      assertNotNull(uRL1);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter("O4OC_W", "YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = httpUrl_Builder5.parse(httpUrl0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.encodedUsername("O4OC_W");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder3.encodedPassword("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder5.encodedQuery("7wD3Jk!v0i?K8WSrrM");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      
      HttpUrl httpUrl1 = httpUrl_Builder5.build();
      assertNotNull(httpUrl1);
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl1.password());
      assertEquals("O4OC_W", httpUrl1.username());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl1.encodedPassword());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder2.encodedUsername("~GILK]^;D");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      String string0 = httpUrl0.host();
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      String string1 = httpUrl1.queryParameter("_\"~`XHg");
      assertNull(string1);
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl1.password());
      assertEquals("O4OC_W", httpUrl1.username());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl1.encodedPassword());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("~GILK]^;D");
      assertNotNull(httpUrl2);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/~GILK]%5E;D", httpUrl2.toString());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl2.encodedPassword());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl2.password());
      assertEquals("O4OC_W", httpUrl2.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl1.password());
      assertEquals("O4OC_W", httpUrl1.username());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl1.encodedPassword());
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult1 = httpUrl_Builder0.parse(httpUrl2, "0");
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/~GILK]%5E;D", httpUrl2.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(1, httpUrl2.pathSize());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl2.encodedPassword());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl2.password());
      assertEquals("O4OC_W", httpUrl2.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl1.password());
      assertEquals("O4OC_W", httpUrl1.username());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl1.encodedPassword());
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertSame(httpUrl_Builder_ParseResult1, httpUrl_Builder_ParseResult0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      
      String string2 = httpUrl0.fragment();
      assertEquals("a<mf2KK='&", string2);
      assertNotNull(string2);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(string2.equals((Object)string0));
      
      httpUrl0.queryParameterValues("Number too large: ");
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      
      httpUrl_Builder0.reencodeForUri();
      httpUrl1.encodedUsername();
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("@Fvn"));
      
      List<String> list1 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertTrue(list1.contains("@Fvn"));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      boolean boolean1 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fvn");
      assertNotNull(httpUrl_Builder0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      httpUrl_Builder0.encodedFragment = "";
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertNotNull(httpUrl2);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals("http://foo.bar/@Fvn#", httpUrl2.toString());
      assertEquals("", httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("", httpUrl2.encodedFragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("l%5ezkc%7d$-w_c%5ecp5c%60s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: l%5ezkc%7d$-w_c%5ecp5c%60s
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder3.parse(httpUrl0, "Invalid host: ");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("[ftp:/");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.encodedQuery("}<S#");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.addEncodedPathSegments("\u2026");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertNotNull(httpUrl1);
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6?}%3CS%23", httpUrl1.toString());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertFalse(httpUrl1.isHttps());
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(2, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("\u2026");
      assertNotNull(httpUrl2);
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6?}%3CS%23", httpUrl1.toString());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertFalse(httpUrl1.isHttps());
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("[ftp:/", httpUrl2.password());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(2, httpUrl2.pathSize());
      assertEquals("%5Bftp%3A%2F", httpUrl2.encodedPassword());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-1795644570));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 2412, 2412, "([0-9a-fa-f]*:[0-9a-fa-f:.]*)%7c([", false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HttpUrl.percentDecode(buffer0, "%20e;zW]%3Cj}%7Fbj0b%3D", (-3878), (-3878), true);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("~D?&Z/D<Jmq ~=LdKQ!");
      assertNotNull(httpUrl1);
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("foo.bar", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(2, httpUrl1.querySize());
      assertEquals("http://foo.bar/~D?&Z/D%3CJmq%20~=LdKQ!", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl1.newBuilder("%7 %7fp%20vevfay");
      assertNotNull(httpUrl_Builder1);
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("foo.bar", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(2, httpUrl1.querySize());
      assertEquals("http://foo.bar/~D?&Z/D%3CJmq%20~=LdKQ!", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("C%Q");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("/", "C%Q");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addEncodedPathSegments("C%Q");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("doLrB:+?2ZzwG");
      assertNull(httpUrl_Builder0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      URI uRI2 = MockURI.aHttpURI;
      assertNotNull(uRI2);
      assertEquals("http", uRI2.getScheme());
      assertEquals("", uRI2.getRawPath());
      assertEquals("foo.bar", uRI2.getRawAuthority());
      assertTrue(uRI2.isAbsolute());
      assertEquals("http://foo.bar", uRI2.toString());
      assertEquals("foo.bar", uRI2.getHost());
      assertEquals((-1), uRI2.getPort());
      assertFalse(uRI2.isOpaque());
      assertNull(uRI2.getRawFragment());
      assertNull(uRI2.getRawUserInfo());
      assertNull(uRI2.getRawQuery());
      assertNotSame(uRI2, uRI0);
      assertNotSame(uRI2, uRI1);
      assertFalse(uRI2.equals((Object)uRI0));
      assertFalse(uRI2.equals((Object)uRI1));
      
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET;
      assertNotNull(string0);
      assertEquals("", string0);
      
      URL uRL1 = httpUrl0.url();
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string1 = httpUrl0.toString();
      assertNotNull(string1);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", string1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter(":^JNa([l=]o]5", ":^JNa([l=]o]5");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("*p=Ki4er@KT+k@ueTJ");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      int int0 = HttpUrl.defaultPort("*p=Ki4er@KT+k@ueTJ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%20");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse(".%20");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "ftp:/", (-1932), 1113, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "*PRsL&|";
      int int0 = (-1420);
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("*PRsL&|", (-1420), (-1420), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "%2e.";
      int int0 = 65535;
      String string1 = "unexpected scheme: ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("%2e.", 65535, 65535, "unexpected scheme: ", false, false, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      
      URL uRL1 = httpUrl0.url();
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("/rQ\"f");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter(" e;zW]<j}bj0b=", "/rQ\"f");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("/rQ\"f");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.password("encodedName == null");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegment("/rQ\"f");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedPassword(" e;zW]<j}bj0b=");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder4.encodedUsername("encodedName == null");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI0);
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl0.newBuilder("doLrB:+?2ZzwG");
      assertNull(httpUrl_Builder8);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      
      httpUrl_Builder0.parse(httpUrl1, "`Ng(jM+h6Uh[E8JcW");
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder4.encodedPassword("%2e%2e");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      
      HttpUrl httpUrl2 = httpUrl_Builder2.build();
      assertNotNull(httpUrl2);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("%2e%2e", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals("http://:%2e%2e@www.somefakebutwellformedurl.org/%60Ng(jM+h6Uh[E8JcW?%20e;zW]%3Cj}%7Fbj0b%3D=/rQ%22f", httpUrl2.toString());
      assertEquals(80, httpUrl2.port());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(1, httpUrl2.querySize());
      assertEquals("..", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      boolean boolean0 = httpUrl0.equals(httpUrl_Builder1);
      assertFalse(boolean0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded((String) null, 14, 14);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("");
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addEncodedQueryParameter("fooexample", "GMT");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder5 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder5);
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.fragment("5\u000Bux&+6u4");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder2.setQueryParameter("https", "N;^<xs");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("<>_v#!C&T#+tC_XiSS", 37, 37, "<>_v#!C&T#+tC_XiSS", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("wn");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("wn");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.setQueryParameter("wn", "wn");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      int int0 = HttpUrl.defaultPort("wn");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("RYe,\"WTs6bs}v");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("RYe,\"WTs6bs}v");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      httpUrl_Builder0.parse(httpUrl0, "wN");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("wN");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      assertNotNull(httpUrl1);
      assertEquals("wn", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertEquals("http://wn/wN", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl0.scheme();
      assertNotNull(string0);
      assertEquals("http", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      
      boolean boolean0 = httpUrl0.equals(uRI0);
      assertFalse(boolean0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("`Uhsb^z4$");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("sv5y", "");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("`Uhsb^z4$");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.encodedUsername("sv5y");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI1);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder3.parse(httpUrl0, "`Ng(jM+h6Uh[E8JcW");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder5.encodedPassword("$VALUES");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertNotNull(httpUrl1);
      assertEquals(1, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("$VALUES", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals("$VALUES", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://:$VALUES@www.somefakebutwellformedurl.org/%60Ng(jM+h6Uh[E8JcW?sv5y=", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":@");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "of1Z&Yk";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment(":@");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("lLXh$");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(":@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :@
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("Zrs,{_+%}4|{#S", "Zrs,{_+%}4|{#S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      int int0 = HttpUrl.defaultPort("Zrs,{_+%}4|{#S");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("\u2026", "\u2026");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("\u2026");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%20");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter(".%20", ".%20");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = HttpUrl.parse(".%20");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, 97, 97, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("N");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("/rQ\"f");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("/rQ\"f", "/rQ\"f");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string0 = HttpUrl.USERNAME_ENCODE_SET;
      assertNotNull(string0);
      assertEquals(" \"':;<=>@[]^`{}|/\\?#", string0);
      
      HttpUrl.Builder httpUrl_Builder3 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder3);
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      
      String string1 = "2iCs)v6?P";
      String string2 = "HmacSHA1";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("HmacSHA1");
      assertNotNull(httpUrl_Builder4);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.host("+QN{");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("/L^ZkC}$-W_C^CP5c`S"));
      
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded((String) null, (-97), 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "okhttp3.HttpUrl$1";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("okhttp3.HttpUrl$1");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("okhttp3.HttpUrl$1");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("v*B%m@S;-R3}(tTqK");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("Unexpected hex string: ");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment(1533, "okhttp3.HttpUrl");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1533, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "kysr!x2q";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("ftp:/", "kysr!x2q");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("ftp:/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ftp:/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ".%20";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ".%20";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath(".%20");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: .%20
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%20");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment(".%20");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment((String) null);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.removeAllQueryParameters(".%20");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("qa.~#");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("https:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("okio.InflaterSource", "");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.setEncodedQueryParameter("\n", "Q81~yVCD.ZGMeA#K");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.addEncodedPathSegments("\n");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      String string0 = "Sqxk,``*n66B";
      try { 
        MockURL.URL("Sqxk,``*n66B", "'D&wK;&-", "_@?0F|XIz<%d*\"-J<5");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: sqxk,``*n66b
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      boolean boolean0 = httpUrl0.equals(sequenceInputStream0);
      assertFalse(boolean0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      String string0 = httpUrl0.queryParameter("https:+?2zzwg");
      assertNull(string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("CRC", "K=/w,");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("_jzq{6");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("CRC", "://");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("K=/w,");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.host("_jzq{6");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.removePathSegment(19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment(",");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.password("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.encodedFragment("iqS/c$F]5AjzN");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.fragment("iqS/c$F]5AjzN");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder3.encodedPassword(",");
      assertNotNull(httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      httpUrl_Builder7.parse((HttpUrl) null, "^`{|}");
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder0.encodedPassword("Ri3c^|3");
      assertNotNull(httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("MISSING_SCHEME");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment(".%2e");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder3);
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      
      HttpUrl httpUrl0 = HttpUrl.parse(")j6vca*bi#u.-'o)g)");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("HaR\"6=dY=");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("faxBuZferL/ze < 1: ");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("%2e", "faxBuZferL/ze < 1: ");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegments("%2e");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      int int0 = HttpUrl.defaultPort("%2e");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("NE~&LOTe");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string1 = "~D?&Z/D<Jmq ~=LdKQ!";
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, (String) null, 91, 2402, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("doLrB:+?2ZzwG");
      assertNull(httpUrl_Builder0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      URI uRI2 = MockURI.aHttpURI;
      assertNotNull(uRI2);
      assertEquals("http", uRI2.getScheme());
      assertEquals("", uRI2.getRawPath());
      assertTrue(uRI2.isAbsolute());
      assertNull(uRI2.getRawUserInfo());
      assertEquals("http://foo.bar", uRI2.toString());
      assertEquals("foo.bar", uRI2.getHost());
      assertEquals("foo.bar", uRI2.getRawAuthority());
      assertFalse(uRI2.isOpaque());
      assertNull(uRI2.getRawQuery());
      assertNull(uRI2.getRawFragment());
      assertEquals((-1), uRI2.getPort());
      assertNotSame(uRI2, uRI0);
      assertNotSame(uRI2, uRI1);
      assertFalse(uRI2.equals((Object)uRI0));
      assertFalse(uRI2.equals((Object)uRI1));
      
      HttpUrl httpUrl1 = HttpUrl.parse("doLrB:+?2ZzwG");
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder1.parse(httpUrl0, "\u2026");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string0 = HttpUrl.percentDecode("}<S#", true);
      assertNotNull(string0);
      assertEquals("}<S#", string0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      HttpUrl.canonicalize(buffer0, "", 113, (-437), "}<S#", true, false, true, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", (-1), (-1), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter("O4OC_W", "YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      httpUrl_Builder5.parse(httpUrl0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.encodedUsername("O4OC_W");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder3.encodedPassword("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder5.encodedQuery("7wD3Jk!v0i?K8WSrrM");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      
      HttpUrl httpUrl1 = httpUrl_Builder5.build();
      assertNotNull(httpUrl1);
      assertEquals("http", httpUrl1.scheme());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl1.password());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("O4OC_W", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder0.setQueryParameter("YR<iHH#a<mf2KK='&", "7wD3Jk!v0i?K8WSrrM");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder4);
      assertNotNull(httpUrl2);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertEquals(80, httpUrl2.port());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl2.password());
      assertEquals("O4OC_W", httpUrl2.username());
      assertFalse(httpUrl2.isHttps());
      assertEquals(2, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl2.encodedPassword());
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM&YR%3CiHH%23a%3Cmf2K%7FK%3D%27%26=7wD3Jk!v0i?K8WSrrM", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      Set<String> set0 = httpUrl1.queryParameterNames();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl1.password());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("O4OC_W", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://O4OC_W:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(set0.contains("O4OC_W"));
      assertTrue(set0.contains("7wD3Jk!v0i?K8WSrrM"));
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter(":^JNa([l=]o]5", ":^JNa([l=]o]5");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.addEncodedQueryParameter("1?$x>WDU;`zkCKUj", "1z&e^RwD!e}W[");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = HttpUrl.parse("SHA-256");
      assertNull(httpUrl0);
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = httpUrl_Builder0.parse((HttpUrl) null, "SHA-256");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder1.addQueryParameter("A)@w", "]Ov&S3");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder6);
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder4.setQueryParameter("http://some/fake/but/wellformed/url", "1?$x>WDU;`zkCKUj");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI1);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult1 = httpUrl_Builder0.parse(httpUrl1, "byteCount < 0: ");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl_Builder_ParseResult1, httpUrl_Builder_ParseResult0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl_Builder_ParseResult1.equals((Object)httpUrl_Builder_ParseResult0));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder6.encodedPassword("http://some/fake/but/wellformed/url");
      assertNotNull(httpUrl_Builder8);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      HttpUrl httpUrl2 = httpUrl_Builder5.build();
      assertNotNull(httpUrl2);
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(4, httpUrl2.querySize());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertEquals(80, httpUrl2.port());
      assertEquals("http://www.somefakebutwellformedurl.org/byteCount%20%3C%200:?:%5EJNa([l%3D]o]5=:%5EJNa([l%3D]o]5&1?$x%3EWDU;`zkCKUj=1z%26e^RwD!e}W[&A)@w=]Ov%26S3&http://some/fake/but/wellformed/url=1?$x%3EWDU;`zkCKUj", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl1);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder3.parse(httpUrl0, "Invalid host: ");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("[ftp:/");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertNotNull(httpUrl1);
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:", httpUrl1.toString());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.encodedQuery("}<S#");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.addEncodedPathSegments("\u2026");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      
      String string0 = httpUrl0.password();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl1.newBuilder();
      assertNotNull(httpUrl_Builder8);
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:", httpUrl1.toString());
      assertNotSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl2);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.fragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedFragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl2.newBuilder("\u2026");
      assertNotNull(httpUrl_Builder9);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.fragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedFragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder7);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder7));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string1 = httpUrl0.username();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.equals((Object)httpUrl2));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("DIgQY");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("DIgQY");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      int int0 = HttpUrl.defaultPort("http");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("Es%7BL%7DN$p%7F");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegment("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("}<S#", "");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      
      URL uRL1 = MockURI.toURL(uRI0);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      URI uRI1 = httpUrl0.uri();
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI1.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.somefakebutwellformedurl.org", uRI1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI1.toString());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRI1, uRI0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertTrue(uRI1.equals((Object)uRI0));
      
      httpUrl_Builder3.parse(httpUrl0, "Z0Y,");
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRI0.equals((Object)uRI1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.addPathSegments("}<S#");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      assertNotNull(httpUrl1);
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/Z0Y,/%7D%3CS%23?}%3CS%23=", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl1.newBuilder();
      assertNotNull(httpUrl_Builder6);
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/Z0Y,/%7D%3CS%23?}%3CS%23=", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRI0.equals((Object)uRI1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      URI uRI2 = httpUrl0.uri();
      assertNotNull(uRI2);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI2.toString());
      assertNull(uRI2.getRawQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getHost());
      assertEquals("http", uRI2.getScheme());
      assertEquals((-1), uRI2.getPort());
      assertFalse(uRI2.isOpaque());
      assertNull(uRI2.getRawFragment());
      assertTrue(uRI2.isAbsolute());
      assertNull(uRI2.getRawUserInfo());
      assertEquals("/fooExample", uRI2.getRawPath());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getRawAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI0, uRI2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(uRI2, uRI0);
      assertNotSame(uRI2, uRI1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRI0.equals((Object)uRI1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(uRI2.equals((Object)uRI1));
      assertTrue(uRI2.equals((Object)uRI0));
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("httpq:");
      assertNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("O4UC_W", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      httpUrl_Builder4.parse(httpUrl0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedPassword("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.encodedQuery("O4UC_W");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertNotNull(httpUrl1);
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://:(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?O4UC_W", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.encodedUsername("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      
      String string0 = httpUrl1.queryParameter("_\"~`XHg");
      assertNull(string0);
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://:(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?O4UC_W", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("O4UC_W");
      assertNotNull(httpUrl2);
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("http://:(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)@www.somefakebutwellformedurl.org/O4UC_W", httpUrl2.toString());
      assertEquals("(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)", httpUrl2.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://:(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?O4UC_W", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      int int0 = HttpUrl.defaultPort("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertEquals((-1), int0);
      
      List<String> list0 = httpUrl1.pathSegments();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://:(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?O4UC_W", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+)", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertTrue(list0.contains("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)"));
      assertFalse(list0.contains("_\"~`XHg"));
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(string0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      
      URL uRL1 = httpUrl0.url();
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedFragment((String) null);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.fragment("7Gi]_");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.username("7Gi]_");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder1.fragment(" \"':;<=>@[]^`{}|/?#&!$(),~");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.addEncodedPathSegment("}mk`I5=g)ZB*aU~Mo");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      httpUrl_Builder4.encodedUsername = "7Gi]_";
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.encodedQuery("okhttp3.HttpUrl");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder1.addEncodedQueryParameter("[size=", "7Gi]_");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder6.encodedQuery("7Gi]_");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder9);
      assertSame(httpUrl_Builder6, httpUrl_Builder8);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      
      HttpUrl.Builder httpUrl_Builder10 = httpUrl_Builder6.encodedUsername("He^l65L");
      assertNotNull(httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder10);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder10);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder9);
      assertSame(httpUrl_Builder6, httpUrl_Builder8);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder10);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder3);
      assertSame(httpUrl_Builder10, httpUrl_Builder2);
      assertSame(httpUrl_Builder10, httpUrl_Builder6);
      assertSame(httpUrl_Builder10, httpUrl_Builder7);
      assertSame(httpUrl_Builder10, httpUrl_Builder0);
      assertSame(httpUrl_Builder10, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder4);
      assertSame(httpUrl_Builder10, httpUrl_Builder5);
      assertSame(httpUrl_Builder10, httpUrl_Builder8);
      assertSame(httpUrl_Builder10, httpUrl_Builder9);
      
      HttpUrl.Builder httpUrl_Builder11 = httpUrl_Builder3.addPathSegments("okio.SegmentPool");
      assertNotNull(httpUrl_Builder11);
      assertSame(httpUrl_Builder11, httpUrl_Builder8);
      assertSame(httpUrl_Builder11, httpUrl_Builder2);
      assertSame(httpUrl_Builder11, httpUrl_Builder9);
      assertSame(httpUrl_Builder11, httpUrl_Builder1);
      assertSame(httpUrl_Builder11, httpUrl_Builder0);
      assertSame(httpUrl_Builder11, httpUrl_Builder3);
      assertSame(httpUrl_Builder11, httpUrl_Builder5);
      assertSame(httpUrl_Builder11, httpUrl_Builder6);
      assertSame(httpUrl_Builder11, httpUrl_Builder10);
      assertSame(httpUrl_Builder11, httpUrl_Builder7);
      assertSame(httpUrl_Builder11, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder11);
      assertSame(httpUrl_Builder3, httpUrl_Builder10);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder12 = httpUrl_Builder4.host("okhttp3.RequestBody$3");
      assertNotNull(httpUrl_Builder12);
      assertSame(httpUrl_Builder12, httpUrl_Builder6);
      assertSame(httpUrl_Builder12, httpUrl_Builder10);
      assertSame(httpUrl_Builder12, httpUrl_Builder11);
      assertSame(httpUrl_Builder12, httpUrl_Builder2);
      assertSame(httpUrl_Builder12, httpUrl_Builder3);
      assertSame(httpUrl_Builder12, httpUrl_Builder5);
      assertSame(httpUrl_Builder12, httpUrl_Builder9);
      assertSame(httpUrl_Builder12, httpUrl_Builder8);
      assertSame(httpUrl_Builder12, httpUrl_Builder1);
      assertSame(httpUrl_Builder12, httpUrl_Builder0);
      assertSame(httpUrl_Builder12, httpUrl_Builder4);
      assertSame(httpUrl_Builder12, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder12);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder12);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder11);
      assertSame(httpUrl_Builder3, httpUrl_Builder10);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder12);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder10);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder12);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder11);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      
      String string0 = "https";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("https", 19, 10, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "\u2026";
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/fooExample", uRI0.getRawPath());
      
      URL uRL1 = MockURL.URL(uRL0, "b_OaM_LWe|H%");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/b_OaM_LWe|H%", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/b_OaM_LWe|H%", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/b_OaM_LWe|H%", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/b_OaM_LWe|H%", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/b_OaM_LWe%7CH%", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.parse(httpUrl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      httpUrl_Builder0.parse(httpUrl0, "z");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("B~lPA>d,3_");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedQuery("B~lPA>d,3_");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      assertNotNull(httpUrl1);
      assertEquals("http://:B~lPA%3Ed,3_@www.somefakebutwellformedurl.org/z?B~lPA%3Ed,3_", httpUrl1.toString());
      assertEquals("B~lPA%3Ed,3_", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("B~lPA>d,3_", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedUsername("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      String string0 = httpUrl0.host();
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      String string1 = httpUrl1.queryParameter("www.somefakebutwellformedurl.org");
      assertNull(string1);
      assertEquals("http://:B~lPA%3Ed,3_@www.somefakebutwellformedurl.org/z?B~lPA%3Ed,3_", httpUrl1.toString());
      assertEquals("B~lPA%3Ed,3_", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("B~lPA>d,3_", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("'Ah5", "'Ah5");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("%2e.", ",%3Eut.=h4");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      int int0 = HttpUrl.defaultPort("%2e.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("kF");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("doLrB:+?2ZzwG", "@n'%t~b");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegments("@n'%t~b");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.setEncodedQueryParameter("A;o3zGoy4P2[&QV.", "{YFs#/@XbK]np=");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.encodedPassword("kqo'Qy+FW");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.fragment("kF");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = HttpUrl.parse("http://some/fake/but/wellformed/url");
      assertNotNull(httpUrl1);
      assertEquals("some", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("http://some/fake/but/wellformed/url", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(4, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.host("+QN{");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("-9xQ");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.setQueryParameter("+QN{", "");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.password("/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.username("x055plQZAeYL,5~M|3");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder5.encodedFragment("X-");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder5.addEncodedPathSegments("%2e%2e");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("N");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "eMGOz";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("eMGOz", "eMGOz");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("fa:BuZferSize < 1: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: fa:BuZferSize < 1: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fkn");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertNotNull(httpUrl2);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.username());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("http");
      assertNotNull(httpUrl_Builder1);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      List<String> list0 = httpUrl2.encodedPathSegments();
      assertNotNull(list0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.username());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(""));
      assertTrue(list0.contains("@Fkn"));
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("http");
      assertNotNull(httpUrl_Builder2);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("X*nPa(:nA.k6L&q");
      assertNotNull(httpUrl_Builder3);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl3 = HttpUrl.parse("http");
      assertNull(httpUrl3);
      
      httpUrl2.hashCode();
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.username());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertNotNull(uRI1);
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA%F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA%F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("O4UC_W", "YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = httpUrl0.encodedFragment();
      assertNotNull(string0);
      assertEquals("a<mf2K%7FK='&", string0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "@Fvn";
      String string1 = "https";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~.dohl=^ FQ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment((-3200), "https");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      
      String string0 = "https:/www.somefakebutwellformedurl.org/yr<ihh#a<mf2kk='&";
      URL uRL1 = MockURL.URL(uRL0, "https:/www.somefakebutwellformedurl.org/yr<ihh#a<mf2kk='&");
      assertNotNull(uRL1);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("a<mf2kk='&", uRL1.getRef());
      assertEquals("https:/www.somefakebutwellformedurl.org/yr<ihh#a<mf2kk='&", uRL1.toString());
      assertEquals("https:/www.somefakebutwellformedurl.org/yr<ihh#a<mf2kk='&", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("a<mf2kk='&", uRL1.getRef());
      assertEquals("https:/www.somefakebutwellformedurl.org/yr<ihh#a<mf2kk='&", uRL1.toString());
      assertEquals("https:/www.somefakebutwellformedurl.org/yr<ihh#a<mf2kk='&", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("a<mf2kk='&", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/yr%3Cihh#a<mf2k%7Fk='&", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("a<mf2k%7Fk='&", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedQuery("https:/www.somefakebutwellformedurl.org/yr<ihh#a<mf2kk='&");
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder1));
      
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertEquals("http", uRI1.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("doLrB:+?2ZzwG");
      assertNull(httpUrl_Builder0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      
      URI uRI2 = MockURI.aHttpURI;
      assertNotNull(uRI2);
      assertFalse(uRI2.isOpaque());
      assertEquals("http://foo.bar", uRI2.toString());
      assertNull(uRI2.getRawFragment());
      assertEquals("http", uRI2.getScheme());
      assertEquals("foo.bar", uRI2.getHost());
      assertNull(uRI2.getRawUserInfo());
      assertEquals("foo.bar", uRI2.getRawAuthority());
      assertNull(uRI2.getRawQuery());
      assertEquals((-1), uRI2.getPort());
      assertEquals("", uRI2.getRawPath());
      assertTrue(uRI2.isAbsolute());
      assertNotSame(uRI2, uRI1);
      assertNotSame(uRI2, uRI0);
      assertFalse(uRI2.equals((Object)uRI1));
      assertFalse(uRI2.equals((Object)uRI0));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder1);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      
      int int0 = HttpUrl.defaultPort("https");
      assertEquals(443, int0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("doLrB:+?2ZzwG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: doLrB:+?2ZzwG
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPassword("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      boolean boolean0 = HttpUrl.percentEncoded("ri%2522%257B%2560%257B", 4, 9);
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("/fooexample");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertSame(uRI0, uRI1);
      
      httpUrl_Builder2.parse(httpUrl0, "http://some/fake/but/wellformed/url");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(uRI0, uRI1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.reencodeForUri();
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder5);
      assertNotNull(httpUrl1);
      assertEquals(4, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("/fooexample", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://:%2Ffooexample@some/fake/but/wellformed/url", httpUrl1.toString());
      assertEquals("some", httpUrl1.host());
      assertEquals("%2Ffooexample", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertNotNull(httpUrl2);
      assertEquals("http://:%2Ffooexample@some/fake/but/wellformed/url", httpUrl2.toString());
      assertFalse(httpUrl2.isHttps());
      assertEquals(4, httpUrl2.pathSize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertEquals("%2Ffooexample", httpUrl2.encodedPassword());
      assertNull(httpUrl2.fragment());
      assertEquals("/fooexample", httpUrl2.password());
      assertEquals("some", httpUrl2.host());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      
      URI uRI2 = httpUrl0.uri();
      assertNotNull(uRI2);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(uRI2.getRawQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI2.toString());
      assertEquals("http", uRI2.getScheme());
      assertFalse(uRI2.isOpaque());
      assertEquals((-1), uRI2.getPort());
      assertTrue(uRI2.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getRawAuthority());
      assertNull(uRI2.getRawFragment());
      assertNull(uRI2.getRawUserInfo());
      assertEquals("/fooExample", uRI2.getRawPath());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getHost());
      assertSame(uRI0, uRI1);
      assertNotSame(uRI0, uRI2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(uRI2, uRI1);
      assertNotSame(uRI2, uRI0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(uRI2.equals((Object)uRI1));
      assertTrue(uRI2.equals((Object)uRI0));
      
      List<String> list0 = httpUrl2.queryParameterValues("");
      assertNotNull(list0);
      assertEquals("http://:%2Ffooexample@some/fake/but/wellformed/url", httpUrl2.toString());
      assertFalse(httpUrl2.isHttps());
      assertEquals(4, httpUrl2.pathSize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertEquals("%2Ffooexample", httpUrl2.encodedPassword());
      assertNull(httpUrl2.fragment());
      assertEquals("/fooexample", httpUrl2.password());
      assertEquals("some", httpUrl2.host());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains("/fooexample"));
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      
      HttpUrl httpUrl3 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl3);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl3.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl3.host());
      assertEquals("", httpUrl3.password());
      assertEquals(1, httpUrl3.pathSize());
      assertFalse(httpUrl3.isHttps());
      assertEquals("", httpUrl3.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl3.toString());
      assertNull(httpUrl3.fragment());
      assertEquals("", httpUrl3.encodedPassword());
      assertNull(httpUrl3.encodedFragment());
      assertEquals("http", httpUrl3.scheme());
      assertEquals(80, httpUrl3.port());
      assertNotSame(httpUrl3, httpUrl0);
      assertNotSame(httpUrl3, httpUrl1);
      assertNotSame(httpUrl3, httpUrl2);
      assertFalse(httpUrl3.equals((Object)httpUrl1));
      assertFalse(httpUrl3.equals((Object)httpUrl2));
      assertTrue(httpUrl3.equals((Object)httpUrl0));
      
      String string0 = httpUrl0.encodedUsername();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertSame(uRI0, uRI1);
      assertNotSame(uRI0, uRI2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl3);
      assertTrue(uRI0.equals((Object)uRI2));
      assertTrue(httpUrl0.equals((Object)httpUrl3));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("http", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder3.parse(httpUrl0, "Invalid host: ");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("[ftp:/");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      String string0 = httpUrl_Builder3.toString();
      assertNotNull(string0);
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:", string0);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      
      HttpUrl httpUrl1 = HttpUrl.parse("");
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
      
      String string0 = HttpUrl.percentDecode("", true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "%2e.";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 16711680
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("https:/some/fake/but/wellformed/url");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedPathSegments(".inputStream()");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = HttpUrl.parse(".inputStream()");
      assertNull(httpUrl0);
      
      URI uRI0 = MockURI.URI("https:/some/fake/but/wellformed/url");
      assertNotNull(uRI0);
      assertEquals("https:/some/fake/but/wellformed/url", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/some/fake/but/wellformed/url", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl1);
      assertEquals("https:/some/fake/but/wellformed/url", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/some/fake/but/wellformed/url", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("", httpUrl1.username());
      assertEquals("some", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https://some/fake/but/wellformed/url", httpUrl1.toString());
      assertTrue(httpUrl1.isHttps());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(4, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals(443, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "v2}Akz=G";
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("v2}Akz=G");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.contains("v2}Akz=G"));
      
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("),.LrR1tl.", 0, 0, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters(",(");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.encodedUsername = " &E( #7W-F@QvU$cG#'";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter(" &E( #7W-F@QvU$cG#'", "M91@{c/");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPath("/");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("/");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(" &E( #7W-F@QvU$cG#'"));
      assertTrue(list0.contains("/"));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("K1f,1J~uJe", "K1f,1J~uJe");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegment("%2e.");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("fooexample", "fooexample");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.query("fooexample");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.removeAllQueryParameters("%2e.");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.addEncodedPathSegments("..");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      
      int int0 = HttpUrl.defaultPort("fooexample");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "/\\";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("[");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      httpUrl_Builder0.parse(httpUrl0, "|,");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl httpUrl2 = HttpUrl.parse("[]");
      assertNull(httpUrl2);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HttpUrl.canonicalize(buffer0, "maxBufferSize < 1: ", (-1355), (-1355), "", false, false, true, false);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("'aT/aW:>b;\"h|Q@B{+", "'aT/aW:>b;\"h|Q@B{+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("\r", "https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([", (-2229), (-1488));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addEncodedPathSegment("%2e.");
      assertNotNull(httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setQueryParameter("ri%22%7B%60%7B", "ri%22%7B%60%7B");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.removeAllEncodedQueryParameters("ri%22%7B%60%7B");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.encodedQuery("oc{W+Dg[+Qz).");
      assertNotNull(httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder7.encodedFragment("Z0Y,");
      assertNotNull(httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder8);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder7.username("Z_[Z:ys2%qcT:b;L1");
      assertNotNull(httpUrl_Builder9);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder8);
      assertSame(httpUrl_Builder7, httpUrl_Builder9);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder1);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder10 = httpUrl_Builder5.query("Z8OG?(O");
      assertNotNull(httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder4, httpUrl_Builder10);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder10);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder3);
      assertSame(httpUrl_Builder10, httpUrl_Builder6);
      assertSame(httpUrl_Builder10, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder7);
      assertSame(httpUrl_Builder10, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder9);
      assertSame(httpUrl_Builder10, httpUrl_Builder4);
      assertSame(httpUrl_Builder10, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder11 = httpUrl_Builder10.removeAllQueryParameters("https");
      assertNotNull(httpUrl_Builder11);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder4, httpUrl_Builder10);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder10);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder3);
      assertSame(httpUrl_Builder10, httpUrl_Builder6);
      assertSame(httpUrl_Builder10, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder7);
      assertSame(httpUrl_Builder10, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder9);
      assertSame(httpUrl_Builder10, httpUrl_Builder4);
      assertSame(httpUrl_Builder10, httpUrl_Builder5);
      assertSame(httpUrl_Builder10, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder7);
      assertSame(httpUrl_Builder11, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder9);
      assertSame(httpUrl_Builder11, httpUrl_Builder4);
      assertSame(httpUrl_Builder11, httpUrl_Builder3);
      assertSame(httpUrl_Builder11, httpUrl_Builder5);
      assertSame(httpUrl_Builder11, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder0);
      assertSame(httpUrl_Builder11, httpUrl_Builder10);
      assertSame(httpUrl_Builder11, httpUrl_Builder6);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder12 = httpUrl_Builder1.addEncodedPathSegments("..");
      assertNotNull(httpUrl_Builder12);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder12);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder12, httpUrl_Builder11);
      assertSame(httpUrl_Builder12, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder12, httpUrl_Builder9);
      assertNotSame(httpUrl_Builder12, httpUrl_Builder7);
      assertSame(httpUrl_Builder12, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder12, httpUrl_Builder8);
      assertSame(httpUrl_Builder12, httpUrl_Builder2);
      assertSame(httpUrl_Builder12, httpUrl_Builder6);
      assertSame(httpUrl_Builder12, httpUrl_Builder10);
      assertSame(httpUrl_Builder12, httpUrl_Builder3);
      assertSame(httpUrl_Builder12, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder12, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder12.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder12.equals((Object)httpUrl_Builder9));
      assertFalse(httpUrl_Builder12.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder12.equals((Object)httpUrl_Builder0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "wN");
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/wN", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/wN", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      httpUrl_Builder0.parse(httpUrl0, "wN");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedQuery("84A/Ntw3|)c&FZ=Jst|");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(6);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addEncodedPathSegments("CabCnn");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertNotNull(httpUrl1);
      assertEquals("+", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("+", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(2, httpUrl1.querySize());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("http://:+@www.somefakebutwellformedurl.org:6/wN/CabCnn?84A/Ntw3|)c&FZ=Jst|", httpUrl1.toString());
      assertEquals(6, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl1.query();
      assertNotNull(string0);
      assertEquals("84A/Ntw3|)c&FZ=Jst|", string0);
      assertEquals("+", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("+", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(2, httpUrl1.querySize());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("http://:+@www.somefakebutwellformedurl.org:6/wN/CabCnn?84A/Ntw3|)c&FZ=Jst|", httpUrl1.toString());
      assertEquals(6, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      URL uRL2 = httpUrl0.url();
      assertNotNull(uRL2);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", uRL2.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL2.toExternalForm());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL2.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRL2.getHost());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertEquals("http", uRL2.getProtocol());
      assertNull(uRL2.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = " \"'<>#";
      try { 
        HttpUrl.getChecked("https");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for https
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("m6g]'(");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URL uRL1 = MockURL.URL(uRL0, "o7VH*UG");
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/o7VH*UG", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/o7VH*UG", uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/o7VH*UG", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/o7VH*UG", uRL1.toExternalForm());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/o7VH*UG", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = httpUrl0.resolve("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/o7VH*UG", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/o7VH*UG", uRL1.toExternalForm());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/o7VH*UG", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(0, httpUrl1.querySize());
      assertTrue(httpUrl1.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("9z5:n%?R)B2zq)yv/");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("9z5:n%?R)B2zq)yv/");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains("9z5:n%?R)B2zq)yv/"));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "getsockname failed";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("getsockname failed");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string1 = "?u";
      String string2 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("?u", (String) null);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("<+5f_$");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("<+5f_$"));
      
      List<String> list1 = HttpUrl.queryStringToNamesAndValues("endIndex > length(");
      assertNotNull(list1);
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.contains("<+5f_$"));
      assertTrue(list1.contains("endIndex > length("));
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      
      boolean boolean0 = HttpUrl.percentEncoded("", (-334), (-334));
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl1.newBuilder("");
      assertNotNull(httpUrl_Builder1);
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", "");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string0 = "5Mc^[uR7}[+~Qcks~";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("5Mc^[uR7}[+~Qcks~");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addPathSegments("5Mc^[uR7}[+~Qcks~");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder1.removeAllEncodedQueryParameters("X+9U)0E7V");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.removeAllQueryParameters("okhttp3.RequestBody");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(773, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedQueryParameter("fooexample", "GPT");
      assertNotNull(httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.setQueryParameter("https", "%2e");
      assertNotNull(httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("uE8[LSt%H?", "qmh.p?j");
      assertNotNull(httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder6 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder6);
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      
      boolean boolean0 = httpUrl0.isHttps();
      assertTrue(boolean0);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder5.fragment("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder7.addEncodedPathSegment("https");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder8);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl0.newBuilder("https");
      assertNotNull(httpUrl_Builder9);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertNotSame(httpUrl_Builder9, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder2);
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder10 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder10);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertNotSame(httpUrl_Builder10, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder9);
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder9));
      
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      
      // Undeclared exception!
      try { 
        httpUrl0.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "https";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", "");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegments("KysR!x2q");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.setPathSegment(0, "");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      String string0 = httpUrl0.query();
      assertNull(string0);
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("", "size > Integer.MAX_VALUE: ", true, true, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("Lt");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("", "L?.Zyk");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("size > Integer.MAX_VALUE: ");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      String string1 = " 45&";
      String string2 = "7PFALf\\v(~a8*";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("jqW92xW%jGp{e~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: jqW92xW%jGp{e~
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}?S5#");
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("S5", uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/}?S5#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}?S5#", uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      List<String> list0 = httpUrl0.queryParameterValues("@n'%25t~b");
      assertNotNull(list0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("@n'%25t~b"));
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("@n'%25t~b"));
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      httpUrl_Builder0.parse(httpUrl0, "");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HttpUrl httpUrl1 = HttpUrl.parse("");
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "mBnZEPS@xj#P2~X2kzZ";
      try { 
        HttpUrl.getChecked("mBnZEPS@xj#P2~X2kzZ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for mBnZEPS@xj#P2~X2kzZ
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("'Ah5", "ri%22%7B%60%7B");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
      
      HttpUrl httpUrl0 = HttpUrl.parse("Z+");
      assertNull(httpUrl0);
      
      String string0 = HttpUrl.percentDecode("Zf+", true);
      assertNotNull(string0);
      assertEquals("Zf ", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "b9+7%t|{<k\\?ys;";
      int int0 = HttpUrl.defaultPort("oc_B0");
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("b9+7%t|{<k?ys;", "");
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("oc_B0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: oc_B0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "mBnZEPS@xj#P2~X2kzZ";
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      String string0 = httpUrl0.encodedUsername();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      List<String> list0 = httpUrl0.queryParameterValues("");
      assertNotNull(list0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("ftp", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("ftp", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI1.getRawPath());
      assertEquals("ftp://foo.bar", uRI1.toString());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertEquals("ftp", uRI1.getScheme());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("ftp:/");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("ftp:/", "size < 4: ");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegments("kF");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.setEncodedQueryParameter("okhttp3.ResponseBody$1", "I%E=H+eBQ");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.encodedPassword("&Sf+GrF;^4JZ#LdU");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.fragment("ftp:/");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      httpUrl_Builder1.parse(httpUrl0, "doLrB:+?2ZzwG");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder1.reencodeForUri();
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("N");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      int int0 = HttpUrl.defaultPort("N");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("q~4&j", 51, 51, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(string0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      
      URL uRL1 = httpUrl0.url();
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string1 = httpUrl0.query();
      assertNull(string1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("::");
      assertNotNull(httpUrl1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/::", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      URI uRI0 = httpUrl0.uri();
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("W<\"hg 8T");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "\u2026";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.fragment("\u2026");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("W<\"hg 8T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: W<\"hg 8T
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("O4OC_W", "YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      httpUrl_Builder4.parse(httpUrl0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedPassword("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.encodedQuery("7wD3Jk!v0i?K8WSrrM");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertNotNull(httpUrl1);
      assertEquals("http://:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl1.encodedPassword());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder1.encodedUsername("~GILK]^;D");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      
      String string0 = httpUrl0.host();
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl httpUrl2 = httpUrl_Builder2.build();
      assertNotNull(httpUrl2);
      assertEquals(1, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("~GILK]^;D", httpUrl2.username());
      assertEquals("http://~GILK%5D%5E%3BD:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl2.toString());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl2.encodedPassword());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertFalse(httpUrl2.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      String string1 = httpUrl2.password();
      assertNotNull(string1);
      assertEquals("YR<iHH#a<mf2KK='&", string1);
      assertEquals(1, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("~GILK]^;D", httpUrl2.username());
      assertEquals("http://~GILK%5D%5E%3BD:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl2.toString());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl2.encodedPassword());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertFalse(httpUrl2.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      String string2 = httpUrl_Builder4.toString();
      assertNotNull(string2);
      assertEquals("http://~GILK%5D%5E%3BD:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", string2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      HttpUrl httpUrl3 = HttpUrl.parse("O4OC_W");
      assertNull(httpUrl3);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "https:mple:fooexample";
      try { 
        HttpUrl.getChecked("https:mple:fooexample");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:mple:fooexample
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter("O4OC_W", "YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      httpUrl_Builder5.parse(httpUrl0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.encodedPassword("YR<iHH#a<mf2KK='&");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      HttpUrl httpUrl1 = httpUrl_Builder5.build();
      assertNotNull(httpUrl1);
      assertEquals(4, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("YR%3CiHH%23a%3Cmf2K%7FK%3D%27&", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://:YR%3CiHH%23a%3Cmf2K%7FK%3D%27&@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?YR%3CiHH%23a%3Cmf2K%7FK=%27&&([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)=([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)&O4OC_W=YR%3CiHH%23a%3Cmf2K%7FK%3D%27%26", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("YR<iHH#a<mf2KK='&", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder2.encodedUsername("~GILK]^;D");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      
      String string0 = httpUrl0.host();
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl httpUrl2 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl2);
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals((-1), uRI1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(uRL0.equals((Object)uRL1));
      
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(67);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 135, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
      
      int int0 = HttpUrl.defaultPort("rIJyJl6,]_%vY5,-yE%");
      assertEquals((-1), int0);
      
      String string0 = httpUrl0.username();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("-9223372036854775808", "-9223372036854775808");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(1190);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string0 = "{YFs%23/@XbK]np";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("{YFs%23/@XbK]np");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("::");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "&_u yM4?VO(Y0f~";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("&_u yM4?VO(Y0f~");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addQueryParameter((String) null, "j9k{7p:Cvz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("zk)(Ilw;=.", "O4OC_W");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      httpUrl_Builder1.parse(httpUrl0, "zk)(Ilw;=.");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("O4OC_W");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      assertNotNull(httpUrl1);
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/zk)(Ilw;=.?zk)(Ilw;%3D.=O4OC_W", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl1.newBuilder("zk)(Ilw;=.");
      assertNotNull(httpUrl_Builder3);
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/zk)(Ilw;=.?zk)(Ilw;%3D.=O4OC_W", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      
      HttpUrl httpUrl2 = httpUrl0.resolve("nxgm&\"2!Av,z#GY'");
      assertNotNull(httpUrl2);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("GY'", httpUrl2.fragment());
      assertEquals("GY'", httpUrl2.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/nxgm&%222!Av,z#GY'", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      boolean boolean0 = httpUrl0.equals(httpUrl2);
      assertFalse(boolean0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals("GY'", httpUrl2.fragment());
      assertEquals("GY'", httpUrl2.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/nxgm&%222!Av,z#GY'", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      String string0 = httpUrl0.encodedUsername();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@vn");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("@vn"));
      
      List<String> list1 = HttpUrl.queryStringToNamesAndValues("@vn");
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertTrue(list1.contains("@vn"));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      HttpUrl httpUrl0 = HttpUrl.parse("@vn");
      assertNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)0;
      Buffer buffer1 = buffer0.write(byteArray0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)56, (byte)11, (byte) (-45), (byte)25, (byte)65, (byte)62, (byte) (-70), (byte)110, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "okio.SegmentPool", (-1285), 64, "nAtG}IzrL*'xdw/5", true, false, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("'aT/aW:>b;\"h|Q@B{+", "'aT/aW:>b;\"h|Q@B{+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("vdb&Ol$tOjOK-8NV($");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      int int0 = HttpUrl.defaultPort("vdb&Ol$tOjOK-8NV($");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", (-1485), (-1485), "okio.Buffer$2", false, true, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("of1Z&Yk");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("https");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("of1Z&Yk");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("of1Z&Yk");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.port(128);
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      boolean boolean0 = HttpUrl.percentEncoded("mBnZEPS@xj#P ~X2kzZ", 128, 128);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("of1Z&Yk");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertFalse(list0.contains("of1Z&Yk"));
      
      boolean boolean1 = HttpUrl.percentEncoded("N6G$", 255, (-552));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI1);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      
      httpUrl_Builder3.parse(httpUrl0, "/L^ZkC}$-W_C^CP5c`S");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(uRL0, uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.setPathSegment(0, "}3p VEVsfAy");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder1.setPathSegment(0, "M$XGx[");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedPassword("");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.encodedQuery("host == null");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      
      String string0 = httpUrl0.username();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("Oiy");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("Oiy", "Oiy");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("Oiy");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("Oiy");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Oiy
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedQueryParameter("fooexample", "GMT");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.setQueryParameter("https", "%2e");
      assertNotNull(httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("uE8[LSt%H?", "qmh.p?j");
      assertNotNull(httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder6 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder6);
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder4));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder5.fragment("nhFRr1^O.}v");
      assertNotNull(httpUrl_Builder7);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder2.setQueryParameter("Es{L}N$p", ":^2BL4hn:l");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder0.username(" \"'<>#");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder9.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder10 = httpUrl_Builder0.removeAllQueryParameters("%2e");
      assertNotNull(httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder10, httpUrl_Builder7);
      assertSame(httpUrl_Builder10, httpUrl_Builder9);
      assertSame(httpUrl_Builder10, httpUrl_Builder5);
      assertSame(httpUrl_Builder10, httpUrl_Builder0);
      assertSame(httpUrl_Builder10, httpUrl_Builder2);
      assertSame(httpUrl_Builder10, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder10, httpUrl_Builder3);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder10.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder11 = httpUrl_Builder5.encodedUsername("QqIO%6;NQ");
      assertNotNull(httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder4, httpUrl_Builder11);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder10);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder10);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder11);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder11, httpUrl_Builder5);
      assertSame(httpUrl_Builder11, httpUrl_Builder7);
      assertSame(httpUrl_Builder11, httpUrl_Builder8);
      assertSame(httpUrl_Builder11, httpUrl_Builder0);
      assertSame(httpUrl_Builder11, httpUrl_Builder10);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder1);
      assertSame(httpUrl_Builder11, httpUrl_Builder9);
      assertSame(httpUrl_Builder11, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder11, httpUrl_Builder3);
      assertSame(httpUrl_Builder11, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder11.equals((Object)httpUrl_Builder3));
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("'aT/aW:>b;\"h|Q@B{+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.port(2192);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("'aT/aW:>b;\"h|Q@B{+");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fkn");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains("@Fkn"));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("@Fkn"));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l%5ezkc%7d$-w_c%5ecp5c%60s");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      URI uRI1 = httpUrl0.uri();
      assertNotNull(uRI1);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/", uRI1.getRawPath());
      assertEquals("http://foo.bar/", uRI1.toString());
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals((-1), uRI1.getPort());
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertFalse(uRI1.equals((Object)uRI0));
      
      int int0 = httpUrl0.port();
      assertEquals(80, int0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotSame(uRI0, uRI1);
      assertFalse(uRI0.equals((Object)uRI1));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("doLrB:+?2ZzwG", "%e2%80%a6");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("O4OC_W", "zk)(Ilw;=.");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      httpUrl_Builder1.parse((HttpUrl) null, "oviJW,q");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.removeAllQueryParameters("\r");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("LPISZE");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      String string0 = "UTF-32BE";
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedPassword("\r");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("/rQ\"f");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter(" e;zW]<j}bj0b=", "/rQ\"f");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments(" e;zW]<j}bj0b=");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.encodedPassword("/rQ\"f");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("zk)(Ilw;=.", "O4OC_W");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = httpUrl_Builder1.parse(httpUrl0, "zk)(Ilw;=.");
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("LPISZE");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("O4OC_W");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      assertNotNull(httpUrl1);
      assertEquals("LPISZE", httpUrl1.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("O4OC_W", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("O4OC_W", httpUrl1.password());
      assertEquals("http://LPISZE:O4OC_W@www.somefakebutwellformedurl.org/zk)(Ilw;=.?zk)(Ilw;%3D.=O4OC_W", httpUrl1.toString());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult1 = httpUrl_Builder1.parse(httpUrl0, "LPISZE");
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder_ParseResult1, httpUrl_Builder_ParseResult0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("zk)(Ilw;=.");
      assertNotNull(httpUrl2);
      assertEquals("LPISZE", httpUrl1.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("O4OC_W", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("O4OC_W", httpUrl1.password());
      assertEquals("http://LPISZE:O4OC_W@www.somefakebutwellformedurl.org/zk)(Ilw;=.?zk)(Ilw;%3D.=O4OC_W", httpUrl1.toString());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("LPISZE", httpUrl2.username());
      assertEquals("O4OC_W", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("O4OC_W", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http://LPISZE:O4OC_W@www.somefakebutwellformedurl.org/zk)(Ilw;=.", httpUrl2.toString());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.encodedFragment());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = httpUrl0.encodedFragment();
      assertNotNull(string0);
      assertEquals("a<mf2K%7FK='&", string0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      
      URL uRL1 = MockURL.URL(uRL0, "wN");
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/wN", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/wN", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      httpUrl_Builder0.parse(httpUrl0, "wN");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("wN", "wN");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("j274G2T*:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertNotNull(httpUrl1);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/wN/j274G2T*%7F:?wN=wN", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl1.newBuilder();
      assertNotNull(httpUrl_Builder3);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/wN/j274G2T*%7F:?wN=wN", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder1));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedQueryParameter("https", "okhttp3.HttpUrl$1");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI1);
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      URI uRI2 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI2);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI2.getScheme());
      assertNull(uRI2.getRawFragment());
      assertNull(uRI2.getRawUserInfo());
      assertNull(uRI2.getRawQuery());
      assertEquals("/fooExample", uRI2.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI2.toString());
      assertEquals((-1), uRI2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI2.getHost());
      assertFalse(uRI2.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI2.getRawAuthority());
      assertTrue(uRI2.isAbsolute());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI0, uRI2);
      assertSame(uRI2, uRI1);
      assertSame(uRI2, uRI0);
      assertTrue(uRL0.equals((Object)uRL1));
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI2);
      assertNotNull(httpUrl1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI2.getScheme());
      assertNull(uRI2.getRawFragment());
      assertNull(uRI2.getRawUserInfo());
      assertNull(uRI2.getRawQuery());
      assertEquals("/fooExample", uRI2.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI2.toString());
      assertEquals((-1), uRI2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI2.getHost());
      assertFalse(uRI2.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI2.getRawAuthority());
      assertTrue(uRI2.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI0, uRI2);
      assertSame(uRI2, uRI1);
      assertSame(uRI2, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("FRrL^7p%r2Auj'@f?D");
      assertNotNull(httpUrl2);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI2.getScheme());
      assertNull(uRI2.getRawFragment());
      assertNull(uRI2.getRawUserInfo());
      assertNull(uRI2.getRawQuery());
      assertEquals("/fooExample", uRI2.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI2.toString());
      assertEquals((-1), uRI2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRI2.getHost());
      assertFalse(uRI2.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI2.getRawAuthority());
      assertTrue(uRI2.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals(1, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.username());
      assertEquals("http://www.somefakebutwellformedurl.org/FRrL%5E7p%r2Auj'@f?%7FD", httpUrl2.toString());
      assertEquals("http", httpUrl2.scheme());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertNull(httpUrl2.fragment());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI0, uRI2);
      assertSame(uRI2, uRI1);
      assertSame(uRI2, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      URL uRL2 = MockURL.getFileExample();
      assertNotNull(uRL2);
      assertNull(uRL2.getQuery());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals("some", uRL2.getAuthority());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.getUserInfo());
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      
      HttpUrl httpUrl3 = HttpUrl.get(uRL2);
      assertNull(httpUrl3);
      assertNull(uRL2.getQuery());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("file", uRL2.getProtocol());
      assertEquals("some", uRL2.getAuthority());
      assertEquals((-1), uRL2.getPort());
      assertEquals("some", uRL2.getHost());
      assertNull(uRL2.getUserInfo());
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      assertFalse(uRL2.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder4);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertSame(uRI0, uRI1);
      assertSame(uRI0, uRI2);
      assertSame(uRI1, uRI2);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL2));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fkn");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("@Fkn"));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("@Fkn"));
      
      boolean boolean1 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fkn");
      assertNotNull(httpUrl_Builder0);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertNotNull(httpUrl2);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.encodedPassword());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      URL uRL0 = httpUrl2.url();
      assertNotNull(uRL0);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar/@Fkn", uRL0.toString());
      assertEquals("http://foo.bar/@Fkn", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET_URI;
      assertNotNull(string0);
      assertEquals(" \"#<>\\^`{|}", string0);
      
      boolean boolean3 = httpUrl0.isHttps();
      assertFalse(boolean3);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HttpUrl httpUrl3 = httpUrl_Builder0.build();
      assertNotNull(httpUrl3);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl3.encodedPassword());
      assertEquals("", httpUrl3.password());
      assertFalse(httpUrl3.isHttps());
      assertEquals(0, httpUrl3.querySize());
      assertEquals(80, httpUrl3.port());
      assertEquals("http://foo.bar/@Fkn", httpUrl3.toString());
      assertNull(httpUrl3.fragment());
      assertEquals("http", httpUrl3.scheme());
      assertEquals("", httpUrl3.username());
      assertNull(httpUrl3.encodedFragment());
      assertEquals(1, httpUrl3.pathSize());
      assertEquals("foo.bar", httpUrl3.host());
      assertNotSame(httpUrl0, httpUrl3);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl3);
      assertNotSame(httpUrl3, httpUrl1);
      assertNotSame(httpUrl3, httpUrl2);
      assertNotSame(httpUrl3, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl3.equals((Object)httpUrl1));
      assertTrue(httpUrl3.equals((Object)httpUrl2));
      assertFalse(httpUrl3.equals((Object)httpUrl0));
      
      int int0 = httpUrl3.querySize();
      assertEquals(0, int0);
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl3.encodedPassword());
      assertEquals("", httpUrl3.password());
      assertFalse(httpUrl3.isHttps());
      assertEquals(0, httpUrl3.querySize());
      assertEquals(80, httpUrl3.port());
      assertEquals("http://foo.bar/@Fkn", httpUrl3.toString());
      assertNull(httpUrl3.fragment());
      assertEquals("http", httpUrl3.scheme());
      assertEquals("", httpUrl3.username());
      assertNull(httpUrl3.encodedFragment());
      assertEquals(1, httpUrl3.pathSize());
      assertEquals("foo.bar", httpUrl3.host());
      assertNotSame(httpUrl0, httpUrl3);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl3);
      assertNotSame(httpUrl3, httpUrl1);
      assertNotSame(httpUrl3, httpUrl2);
      assertNotSame(httpUrl3, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl3));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl3));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl3.equals((Object)httpUrl1));
      assertTrue(httpUrl3.equals((Object)httpUrl2));
      assertFalse(httpUrl3.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(".%20");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked(".%20");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for .%20
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("endIndex < beginIndex", "");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegment("]\"[0]5D@Hau");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("zk)(Ilw;=.", "O4OC_W");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = httpUrl_Builder1.parse(httpUrl0, "zk)(Ilw;=.");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("LPISZE");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("UTF-32BE");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.encodedPassword("\n");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      assertNotNull(httpUrl1);
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("UTF-32BE", httpUrl1.username());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://UTF-32BE@www.somefakebutwellformedurl.org/zk)(Ilw;=.?zk)(Ilw;%3D.=O4OC_W", httpUrl1.toString());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl2);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(httpUrl2.isHttps());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.password());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertTrue(httpUrl2.equals((Object)httpUrl0));
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult1 = httpUrl_Builder0.parse(httpUrl2, "LPISZE");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(httpUrl2.isHttps());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.password());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertSame(httpUrl_Builder_ParseResult1, httpUrl_Builder_ParseResult0);
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertTrue(httpUrl2.equals((Object)httpUrl0));
      
      HttpUrl httpUrl3 = httpUrl0.resolve("\n");
      assertNotNull(httpUrl3);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl3.encodedFragment());
      assertEquals(1, httpUrl3.pathSize());
      assertEquals("", httpUrl3.username());
      assertEquals("", httpUrl3.encodedPassword());
      assertEquals("http", httpUrl3.scheme());
      assertEquals(0, httpUrl3.querySize());
      assertEquals(80, httpUrl3.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl3.host());
      assertFalse(httpUrl3.isHttps());
      assertEquals("", httpUrl3.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl3.toString());
      assertNull(httpUrl3.fragment());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl3);
      assertNotSame(httpUrl3, httpUrl1);
      assertNotSame(httpUrl3, httpUrl2);
      assertNotSame(httpUrl3, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl3.equals((Object)httpUrl0));
      assertFalse(httpUrl3.equals((Object)httpUrl1));
      assertTrue(httpUrl3.equals((Object)httpUrl2));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("Oiy");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("Oiy", "Oiy");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("Oiy");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("", "");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.addEncodedQueryParameter("", "[size=0]");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      try { 
        MockURL.URL("source == null", "", "feff");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: source == null
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("%7 %7fp%20vevfay");
      assertNotNull(httpUrl1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/%7%20%7fp%20vevfay", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl0.redact();
      assertNotNull(string0);
      assertEquals("http://www.somefakebutwellformedurl.org/...", string0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("O4OC_W");
      assertNotNull(httpUrl1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("http://www.somefakebutwellformedurl.org/O4OC_W", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertTrue(boolean0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("\n", "\n");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      String string1 = "fooexample";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegment("%2e.");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.setQueryParameter("'5", "Mt:wka'0mBw");
      assertNotNull(httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.removeAllEncodedQueryParameters("Z0Y,");
      assertNotNull(httpUrl_Builder5);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedQuery("Mt:wka'0mBw");
      assertNotNull(httpUrl_Builder6);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.encodedFragment("%20e;zw]%3cj%7d%7fbj0b=");
      assertNotNull(httpUrl_Builder7);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder7.removeAllQueryParameters("%2e.");
      assertNotNull(httpUrl_Builder8);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder8);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder8);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder7.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("getsockname failed", "2|Z >n>oq] `", false, false, false, true);
      assertNotNull(string0);
      assertEquals("gets%6Fck%6Eame%20failed", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse(" \"'<>#");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("w");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("Xi56oj&3A\"", "Es{L}N$p");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("Xi56oj&3A\"");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Xi56oj&3A\"
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("DfgQY");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      int int0 = HttpUrl.defaultPort("DfgQY");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("9z5y:n%?R2zq)yv/", "9z5y:n%?R2zq)yv/");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("9z5y:n%?R2zq)yv/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 9z5y:n%?R2zq)yv/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("Zrs,{_+%}4|{#S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("fgQY");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("=%2e.");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      httpUrl_Builder1.parse(httpUrl0, "fgQY");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("fgQY");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment(")");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.addQueryParameter("x#`k.Zlkl-yo>:", "/rQ%22f");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedPathSegments("endIndex < beginIndex");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      
      HttpUrl httpUrl2 = httpUrl_Builder6.build();
      assertNotNull(httpUrl2);
      assertEquals(")", httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertEquals("fgQY", httpUrl2.password());
      assertEquals(1, httpUrl2.querySize());
      assertEquals(")", httpUrl2.fragment());
      assertEquals(2, httpUrl2.pathSize());
      assertEquals("http", httpUrl2.scheme());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://:fgQY@www.somefakebutwellformedurl.org/fgQY/endIndex%20%3C%20beginIndex?x%23`k.Zlkl-yo%3E:=/rQ%2522f#)", httpUrl2.toString());
      assertEquals("", httpUrl2.username());
      assertEquals("fgQY", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      boolean boolean0 = httpUrl0.equals((Object) null);
      assertFalse(boolean0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      
      String string0 = httpUrl2.encodedPassword();
      assertNotNull(string0);
      assertEquals("fgQY", string0);
      assertEquals(")", httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertEquals("fgQY", httpUrl2.password());
      assertEquals(1, httpUrl2.querySize());
      assertEquals(")", httpUrl2.fragment());
      assertEquals(2, httpUrl2.pathSize());
      assertEquals("http", httpUrl2.scheme());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://:fgQY@www.somefakebutwellformedurl.org/fgQY/endIndex%20%3C%20beginIndex?x%23`k.Zlkl-yo%3E:=/rQ%2522f#)", httpUrl2.toString());
      assertEquals("", httpUrl2.username());
      assertEquals("fgQY", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = HttpUrl.getChecked("https:+?2zzwg");
      assertNotNull(httpUrl1);
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals("https://+/?2zzwg", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals(443, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals("+", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertTrue(httpUrl1.isHttps());
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("oM.,");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("fooexample");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedQueryParameter("fooexample", "GMT");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      
      URL uRL1 = MockURI.toURL(uRI0);
      assertNotNull(uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl2);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertTrue(httpUrl2.equals((Object)httpUrl0));
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "", (-3138), 513, "M21M", false, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "`Uhsb^z4$";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("`Uhsb^z4$");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("sv5y", "");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("!99wp i!<=D2&");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("!99wp i!<=D2&");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("!99wp i!<=D2&");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertFalse(list0.contains("!99wp i!<=D2&"));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("https");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("https");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      String string0 = "1C8OKtD";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.query("https");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment((-2934), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      URL uRL1 = httpUrl0.url();
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string1 = httpUrl0.query();
      assertNull(string1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setQueryParameter((String) null, "okhttp3.HttpUrl$Builder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "";
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("aY#Y}w");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("aY#Y}w");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("9z5y:n%?R2zq)yv/");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("9z5y:n%?R2zq)yv/");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("9z5y:n%?R2zq)yv/"));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fkn");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains("@Fkn"));
      
      String string0 = null;
      boolean boolean1 = HttpUrl.percentEncoded((String) null, (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fkn");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains("@Fkn"));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("@Fkn"));
      
      boolean boolean0 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-104), (-104));
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      
      boolean boolean1 = httpUrl0.isHttps();
      assertFalse(boolean1);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertTrue(boolean1 == boolean0);
      
      HttpUrl httpUrl1 = HttpUrl.parse("B,&_;9M%p#6fqg%");
      assertNull(httpUrl1);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertNotNull(set0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("B,&_;9M%p#6fqg%"));
      
      String string0 = httpUrl0.encodedUsername();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      
      List<String> list1 = httpUrl0.pathSegments();
      assertNotNull(list1);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(list1.contains(string0));
      assertFalse(list1.contains("B,&_;9M%p#6fqg%"));
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder3.parse(httpUrl0, "Invalid host: ");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("[ftp:/");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.encodedQuery("}<S#");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.addEncodedPathSegments("\u2026");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertNotNull(httpUrl1);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6?}%3CS%23", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals(2, httpUrl1.pathSize());
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder2);
      assertNotNull(httpUrl2);
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertFalse(httpUrl2.isHttps());
      assertEquals("[ftp:/", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertEquals("%5Bftp%3A%2F", httpUrl2.encodedPassword());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6?}%3CS%23", httpUrl2.toString());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(2, httpUrl2.pathSize());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(1, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      URI uRI2 = httpUrl0.uri();
      assertNotNull(uRI2);
      assertNull(uRI2.getRawUserInfo());
      assertFalse(uRI2.isOpaque());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getRawAuthority());
      assertEquals("", uRI2.getRawFragment());
      assertTrue(uRI2.isAbsolute());
      assertEquals("/%7D%3CS", uRI2.getRawPath());
      assertEquals("http", uRI2.getScheme());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", uRI2.toString());
      assertEquals((-1), uRI2.getPort());
      assertNull(uRI2.getRawQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("", uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNotSame(uRI2, uRI1);
      assertNotSame(uRI2, uRI0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertFalse(uRI2.equals((Object)uRI1));
      assertFalse(uRI2.equals((Object)uRI0));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("-9223372036854775808", "-9223372036854775808");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(1190);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("{YFs%23/@XbK]np");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      String string0 = "::";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("::");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "mBnZEPS@xj#P ~X2kzZ";
      String string1 = "&PW@S(`G0gyZH*Mm";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@Xa_/W");
      assertFalse(boolean0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("&PW@S(`G0gyZH*Mm", "&PW@S(`G0gyZH*Mm", 1548, "&PW@S(`G0gyZH*Mm", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("&PW@S(`G0gyZH*Mm", uRL0.getHost());
      assertEquals("&pw@s(`g0gyzh*mm", uRL0.getProtocol());
      assertEquals("&PW@S(`G0gyZH*Mm", uRL0.getFile());
      assertEquals("&PW@S(`G0gyZH*Mm", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("&PW@S(`G0gyZH*Mm:1548", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(1548, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "mBnZEPS@xj#P ~X2kzZ", uRLStreamHandler1);
      assertNotNull(uRL1);
      assertEquals("&PW@S(`G0gyZH*Mm", uRL0.getHost());
      assertEquals("&pw@s(`g0gyzh*mm", uRL0.getProtocol());
      assertEquals("&PW@S(`G0gyZH*Mm", uRL0.getFile());
      assertEquals("&PW@S(`G0gyZH*Mm", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("&PW@S(`G0gyZH*Mm:1548", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(1548, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("P ~X2kzZ", uRL1.getRef());
      assertEquals("&PW@S(`G0gyZH*Mm:1548", uRL1.getAuthority());
      assertEquals(1548, uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toString());
      assertEquals("&PW@S(`G0gyZH*Mm", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("&pw@s(`g0gyzh*mm", uRL1.getProtocol());
      assertEquals("&PW@S(`G0gyZH*Mm", uRL1.getFile());
      assertEquals("&PW@S(`G0gyZH*Mm", uRL1.getPath());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = " 1-xsZ&aFf&\"j";
      int int0 = 0;
      boolean boolean0 = false;
      String string1 = HttpUrl.canonicalize(" 1-xsZ&aFf&\"j", 0, 0, " 1-xsZ&aFf&\"j", true, true, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(38);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "/rQ\"f";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("/rQ\"f");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string1 = " e;zW]<j}bj0b=";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter(" e;zW]<j}bj0b=", "/rQ\"f");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments(" e;zW]<j}bj0b=");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("/rQ\"f");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      httpUrl_Builder0.parse(httpUrl0, "wN");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      assertNotNull(httpUrl1);
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://:+@www.somefakebutwellformedurl.org/wN", httpUrl1.toString());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("+", httpUrl1.password());
      assertNull(httpUrl1.fragment());
      assertEquals("+", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("+", "wN");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder1);
      assertNotNull(httpUrl2);
      assertEquals("http", httpUrl2.scheme());
      assertEquals("+", httpUrl2.encodedPassword());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals(1, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http://:+@www.somefakebutwellformedurl.org/wN?%2B=wN", httpUrl2.toString());
      assertEquals("+", httpUrl2.password());
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HttpUrl.percentDecode(buffer0, "~D?&Z/D<Jmq ~=LdKQ!", (-97), (-3878), false);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("$VALUES");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("~D?&Z/D<Jmq ~=LdKQ!", "~D?&Z/D<Jmq ~=LdKQ!");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("$VALUES");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("A;o3zGoy4P2[&QV.", "$VALUES");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment("A;o3zGoy4P2[&QV.");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      httpUrl_Builder5.parse(httpUrl0, ">?OuNWIfsN#&mI^_:ww");
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.reencodeForUri();
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.addPathSegments(".");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      assertNotNull(httpUrl1);
      assertEquals("&mI^_:ww", httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://foo.bar/%3E?OuNWIfsN#&mI%5E_:ww", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("&mI%5E_:ww", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      URI uRI1 = httpUrl0.uri();
      assertNotNull(uRI1);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRI1.getScheme());
      assertEquals("/", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getRawQuery());
      assertEquals("http://foo.bar/", uRI1.toString());
      assertNotSame(uRI0, uRI1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(uRI1, uRI0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(uRI1.equals((Object)uRI0));
      
      List<String> list0 = httpUrl1.queryParameterValues("$VALUES");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("&mI^_:ww", httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://foo.bar/%3E?OuNWIfsN#&mI%5E_:ww", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("&mI%5E_:ww", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertFalse(list0.contains("$VALUES"));
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fkn");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains("@Fkn"));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("@Fkn"));
      
      boolean boolean1 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("uqGzH\")d^aZ[>H");
      assertNotNull(httpUrl1);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://foo.bar/uqGzH%22)d%5EaZ[%3EH", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fkn");
      assertNotNull(httpUrl_Builder0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://foo.bar/uqGzH%22)d%5EaZ[%3EH", httpUrl1.toString());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertNotNull(httpUrl2);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://foo.bar/uqGzH%22)d%5EaZ[%3EH", httpUrl1.toString());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.fragment());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      URL uRL0 = httpUrl2.url();
      assertNotNull(uRL0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://foo.bar/uqGzH%22)d%5EaZ[%3EH", httpUrl1.toString());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.fragment());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals(0, httpUrl2.querySize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(80, httpUrl2.port());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar/@Fkn", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://foo.bar/@Fkn", uRL0.toString());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getHost());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      String string0 = HttpUrl.FRAGMENT_ENCODE_SET_URI;
      assertNotNull(string0);
      assertEquals(" \"#<>\\^`{|}", string0);
      
      boolean boolean3 = httpUrl0.isHttps();
      assertFalse(boolean3);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HttpUrl httpUrl3 = httpUrl_Builder0.build();
      assertNotNull(httpUrl3);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://foo.bar/uqGzH%22)d%5EaZ[%3EH", httpUrl1.toString());
      assertFalse(httpUrl3.isHttps());
      assertEquals(0, httpUrl3.querySize());
      assertEquals(80, httpUrl3.port());
      assertEquals(1, httpUrl3.pathSize());
      assertEquals("", httpUrl3.encodedPassword());
      assertEquals("", httpUrl3.password());
      assertNull(httpUrl3.fragment());
      assertEquals("http://foo.bar/@Fkn", httpUrl3.toString());
      assertEquals("http", httpUrl3.scheme());
      assertEquals("", httpUrl3.username());
      assertEquals("foo.bar", httpUrl3.host());
      assertNull(httpUrl3.encodedFragment());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl3);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl3);
      assertNotSame(httpUrl3, httpUrl0);
      assertNotSame(httpUrl3, httpUrl1);
      assertNotSame(httpUrl3, httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl3.equals((Object)httpUrl0));
      assertFalse(httpUrl3.equals((Object)httpUrl1));
      assertTrue(httpUrl3.equals((Object)httpUrl2));
      
      int int0 = httpUrl3.port;
      assertEquals(80, int0);
      
      HttpUrl.canonicalize(buffer0, " \"#<>^`{|}", 80, 80, "SHA-1", false, true, false, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("}3nkq=&@_#h)m_VP5.");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertFalse(list0.contains("}3nkq=&@_#h)m_VP5."));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("fgQY");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      int int0 = HttpUrl.defaultPort("fgQY");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = " hex=";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter(" hex=", " hex=");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port((-3592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -3592
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI1.getPort());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder1.parse(httpUrl0, "\u2026");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("", uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      assertNotNull(httpUrl1);
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/%E2%80%A6", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl1.password();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/%E2%80%A6", httpUrl1.toString());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string1 = httpUrl_Builder2.toString();
      assertNotNull(string1);
      assertEquals("http://www.somefakebutwellformedurl.org/%E2%80%A6", string1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertFalse(string1.equals((Object)string0));
      
      HttpUrl httpUrl2 = HttpUrl.getChecked("http://www.somefakebutwellformedurl.org/%E2%80%A6");
      assertNotNull(httpUrl2);
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/%E2%80%A6", httpUrl2.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.username());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.encodedPassword());
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string0 = httpUrl0.password();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/}<S#", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getRef());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = HttpUrl.parse("[ftp:/");
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      String string0 = "size=%s offset=%s byteCount=%s";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("size=%s offset=%s byteCount=%s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: size=%s offset=%s byteCount=%s
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      String string0 = HttpUrl.PATH_SEGMENT_ENCODE_SET_URI;
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      URL uRL1 = httpUrl0.url();
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string1 = httpUrl0.query();
      assertNull(string1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      
      String string2 = httpUrl0.query();
      assertNull(string2);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = httpUrl0.equals(object0);
      assertFalse(boolean0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      String string3 = httpUrl0.encodedPassword();
      assertNotNull(string3);
      assertEquals("", string3);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(string3.equals((Object)string0));
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HttpUrl.percentDecode(buffer0, "", (-3031), (-3031), false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, (String) null, (-3031), (-658), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("DfgQY");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("DfgQY");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      
      boolean boolean0 = HttpUrl.percentEncoded("?}1%g,ga8", 45, 45);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("Invalid URL: ");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("Invalid URL: "));
      assertFalse(list0.contains("?}1%g,ga8"));
      
      URL uRL1 = MockURL.getFileExample();
      assertNotNull(uRL1);
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL1);
      assertNull(httpUrl1);
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fkn");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("@Fkn"));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("@Fkn"));
      
      boolean boolean1 = HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fkn");
      assertNotNull(httpUrl_Builder0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      assertNotNull(httpUrl2);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("http");
      assertNotNull(httpUrl_Builder1);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      
      List<String> list1 = httpUrl2.encodedPathSegments();
      assertNotNull(list1);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.contains("l%5ezkc%7d$-w_c%5ecp5c%60s"));
      assertTrue(list1.contains("@Fkn"));
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(list1, list0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(list1.equals((Object)list0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("http");
      assertNotNull(httpUrl_Builder2);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("X*nPa(:nA.k6L&q");
      assertNotNull(httpUrl_Builder3);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      
      HttpUrl httpUrl3 = HttpUrl.parse("http");
      assertNull(httpUrl3);
      
      httpUrl2.hashCode();
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.password());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("foo.bar", httpUrl2.host());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http://foo.bar/@Fkn", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertEquals("http", uRI1.getScheme());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/YR<iHH#a<mf2KK='&", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("a<mf2KK='&", uRL1.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/YR%3CiHH#a<mf2K%7FK='&", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      try { 
        HttpUrl.getChecked("$VALUES");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for $VALUES
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("http:///tmp/foo.bar");
      assertNotNull(httpUrl0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("tmp", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("httpq:");
      assertNull(httpUrl1);
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("foo.bar", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI1);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedQueryParameter("ftp:/", "6");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      String string0 = "5";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("0");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("ftp:/");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for ftp:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", "");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      String string0 = " \"'<>#";
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
      
      httpUrl_Builder0.parse((HttpUrl) null, "w");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addQueryParameter(" \"'<>#", "w");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      String string1 = "5\\13ux&+6u4";
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder4);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment("5\u000Bux&+6u4");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder2));
      
      String string2 = "Es{L}N$p";
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedQueryParameter("Es{L}N$p", "%2e%2e");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder6.equals((Object)httpUrl_Builder2));
      
      try { 
        HttpUrl.getChecked("Es{L}N$p");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Es{L}N$p
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(48, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "/L^ZkC}$-W_C^CP5c`S");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.username("yx7%7c.");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = HttpUrl.percentDecode("&{;hJ", true);
      assertNotNull(string0);
      assertEquals("&{;hJ", string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL1 = httpUrl0.url();
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      URI uRI0 = httpUrl0.uri();
      assertNotNull(uRI0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "/rQ%22Af";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("/rQ%22Af", "0i8Fo");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      boolean boolean0 = HttpUrl.percentEncoded("/rQ%22Af", 224, 108);
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer1, "/rQ%22Af", (-1), 108, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("L?.Zyk");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "$?WF5\\u*ti`";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter(string0, (String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit(' ');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ">I%2:";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(">I%2:");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment((-55297));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("Z}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("M#bJ`G");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawFragment());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals((-1), uRI1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURL.URL(uRL0, "Z}<S#");
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/Z%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder3.parse(httpUrl0, "Invalid host: ");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/Z%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("[ftp:/");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertNotNull(httpUrl1);
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:", httpUrl1.toString());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.encodedQuery("Z}<S#");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder0.addEncodedPathSegments("M#bJ`G");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl2);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      assertNull(httpUrl2.encodedFragment());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(0, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      String string0 = httpUrl0.password();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/Z%7D%3CS#", httpUrl0.toString());
      assertEquals("", httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl1.newBuilder();
      assertNotNull(httpUrl_Builder8);
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:", httpUrl1.toString());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder7);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder7));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder5));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder6));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder8.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      
      HttpUrl httpUrl3 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl3);
      assertEquals("", httpUrl3.encodedFragment());
      assertEquals("", httpUrl3.fragment());
      assertEquals("", httpUrl3.username());
      assertEquals(1, httpUrl3.pathSize());
      assertFalse(httpUrl3.isHttps());
      assertEquals("", httpUrl3.password());
      assertEquals("http://www.somefakebutwellformedurl.org/Z%7D%3CS#", httpUrl3.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl3.host());
      assertEquals("", httpUrl3.encodedPassword());
      assertEquals("http", httpUrl3.scheme());
      assertEquals(0, httpUrl3.querySize());
      assertEquals(80, httpUrl3.port());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Z}<S#", uRL1.toString());
      assertEquals("", uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNotSame(httpUrl3, httpUrl2);
      assertNotSame(httpUrl3, httpUrl0);
      assertNotSame(httpUrl3, httpUrl1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(httpUrl3.equals((Object)httpUrl2));
      assertTrue(httpUrl3.equals((Object)httpUrl0));
      assertFalse(httpUrl3.equals((Object)httpUrl1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl4 = new HttpUrl(httpUrl_Builder5);
      assertNotNull(httpUrl4);
      assertEquals("", httpUrl4.username());
      assertEquals("http", httpUrl4.scheme());
      assertNull(httpUrl4.fragment());
      assertNull(httpUrl4.encodedFragment());
      assertEquals("[ftp:/", httpUrl4.password());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/M%23bJ%60G?Z}%3CS%23", httpUrl4.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl4.host());
      assertEquals(80, httpUrl4.port());
      assertFalse(httpUrl4.isHttps());
      assertEquals("%5Bftp%3A%2F", httpUrl4.encodedPassword());
      assertEquals(1, httpUrl4.querySize());
      assertEquals(2, httpUrl4.pathSize());
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl4.equals((Object)httpUrl1));
      assertFalse(httpUrl4.equals((Object)httpUrl3));
      assertFalse(httpUrl4.equals((Object)httpUrl2));
      assertFalse(httpUrl4.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder8));
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HttpUrl.percentDecode(buffer0, "Z}<S#", (-1352), (-1352), false);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      URI uRI2 = httpUrl4.uri();
      assertNotNull(uRI2);
      assertEquals("", httpUrl4.username());
      assertEquals("http", httpUrl4.scheme());
      assertNull(httpUrl4.fragment());
      assertNull(httpUrl4.encodedFragment());
      assertEquals("[ftp:/", httpUrl4.password());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/M%23bJ%60G?Z}%3CS%23", httpUrl4.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl4.host());
      assertEquals(80, httpUrl4.port());
      assertFalse(httpUrl4.isHttps());
      assertEquals("%5Bftp%3A%2F", httpUrl4.encodedPassword());
      assertEquals(1, httpUrl4.querySize());
      assertEquals(2, httpUrl4.pathSize());
      assertEquals("Z%7D%3CS%23", uRI2.getRawQuery());
      assertNull(uRI2.getRawFragment());
      assertTrue(uRI2.isAbsolute());
      assertEquals(":%5Bftp%3A%2F@www.somefakebutwellformedurl.org", uRI2.getRawAuthority());
      assertFalse(uRI2.isOpaque());
      assertEquals("/Invalid%20host:/M%23bJ%60G", uRI2.getRawPath());
      assertEquals("www.somefakebutwellformedurl.org", uRI2.getHost());
      assertEquals(":%5Bftp%3A%2F", uRI2.getRawUserInfo());
      assertEquals((-1), uRI2.getPort());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/M%23bJ%60G?Z%7D%3CS%23", uRI2.toString());
      assertEquals("http", uRI2.getScheme());
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertNotSame(httpUrl4, httpUrl1);
      assertNotSame(httpUrl4, httpUrl3);
      assertNotSame(httpUrl4, httpUrl2);
      assertNotSame(httpUrl4, httpUrl0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertNotSame(uRI2, uRI0);
      assertNotSame(uRI2, uRI1);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder8));
      assertFalse(httpUrl4.equals((Object)httpUrl1));
      assertFalse(httpUrl4.equals((Object)httpUrl3));
      assertFalse(httpUrl4.equals((Object)httpUrl2));
      assertFalse(httpUrl4.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder8));
      assertFalse(uRI2.equals((Object)uRI0));
      assertFalse(uRI2.equals((Object)uRI1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder8));
      
      try { 
        HttpUrl.getChecked("Dp^C)i&ql");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Dp^C)i&ql
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fvn");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(list0.contains("@Fvn"));
      
      boolean boolean1 = HttpUrl.percentEncoded("@Fvn", (-97), (-97));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      assertNotNull(uRI1);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getScheme());
      assertEquals("", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertEquals("", uRI1.toString());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertFalse(uRI1.equals((Object)uRI0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNull(httpUrl0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getScheme());
      assertEquals("", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertEquals("", uRI1.toString());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      String string0 = "~D?&Z/D<Jmq ~=LdKQ!";
      String string1 = "%252e.";
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "%252e.", 0, 116, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("}<S#");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      
      URI uRI0 = MockURL.toURI(uRL0);
      assertNotNull(uRI0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      assertNotNull(uRI1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI1.getScheme());
      assertTrue(uRI1.isAbsolute());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getRawAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRI1.getHost());
      assertEquals("/fooExample", uRI1.getRawPath());
      assertNull(uRI1.getRawQuery());
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      URL uRL1 = MockURI.toURL(uRI0);
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      httpUrl_Builder3.parse(httpUrl0, "Invalid host: ");
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(uRL0, uRL1);
      assertSame(uRI0, uRI1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("[ftp:/");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertNotNull(httpUrl1);
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("[ftp:/", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.encodedQuery("}<S#");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      
      List<String> list0 = httpUrl1.encodedPathSegments();
      assertNotNull(list0);
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:", httpUrl1.toString());
      assertFalse(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("[ftp:/", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(""));
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.encodedUsername("%20e;zW]%3Cj}%7Fbj0b%3D");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      
      HttpUrl httpUrl2 = HttpUrl.parse("");
      assertNull(httpUrl2);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("&<K9= ;[i");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURI.aFTPURI;
      MockURI.normalize(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("kF");
      httpUrl_Builder0.addEncodedQueryParameter("doLrB:+?2ZzwG", "@n'%t~b");
      httpUrl_Builder0.addPathSegments("@n'%t~b");
      httpUrl_Builder1.setEncodedQueryParameter("A;o3zGoy4P2[&QV.", "{YFs#/@XbK]np=");
      httpUrl_Builder0.encodedPassword("kqo'Qy+FW");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.fragment("kF");
      httpUrl_Builder0.parse(httpUrl0, "http://some/fake/but/wellformed/url");
      httpUrl_Builder0.reencodeForUri();
      URI uRI1 = httpUrl0.uri();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI1.toString());
      
      httpUrl0.url();
      assertEquals(1, httpUrl0.pathSize());
      
      String string0 = httpUrl_Builder2.toString();
      assertEquals("http://:kqo%27Qy+FW@some/fake/but/wellformed/url?doLrB:+?2ZzwG=@n%27%25t~b&A;o3zGoy4P2[%26QV.=%7BYFs%23/@XbK]np%3D#kF", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "pM");
      httpUrl_Builder1.removePathSegment(0);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(37, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("%2e.");
      httpUrl_Builder0.query("%2e.");
      HttpUrl httpUrl0 = HttpUrl.parse("%2e.");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      MockURL.URL(uRL0, "wN");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "wN");
      assertEquals(80, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("+");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedQuery("84A/Ntw3|)c&FZ=Jst|");
      httpUrl_Builder2.port(6);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedPathSegments("CabCnn");
      httpUrl_Builder3.build();
      String string0 = httpUrl_Builder1.toString();
      assertEquals("http://:+@www.somefakebutwellformedurl.org:6/wN/CabCnn?84A/Ntw3|)c&FZ=Jst|", string0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder3);
      httpUrl1.pathSegments();
      assertEquals(2, httpUrl1.querySize());
      assertEquals("+", httpUrl1.password());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      MockURL.toURI(uRL0);
      MockURL.URL(uRL0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.parse(httpUrl0, "z");
      httpUrl_Builder0.encodedPassword("B~lPA>d,3_");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("B~lPA>d,3_");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      String string0 = httpUrl0.host();
      assertEquals("www.somefakebutwellformedurl.org", string0);
      
      httpUrl1.queryParameter("www.somefakebutwellformedurl.org");
      assertEquals("B~lPA>d,3_", httpUrl1.password());
      assertEquals("http://:B~lPA%3Ed,3_@www.somefakebutwellformedurl.org/z?B~lPA%3Ed,3_", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("W<\"hg 8T");
      int int0 = HttpUrl.defaultPort("W<\"hg 8T");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockURL.getHttpExample();
      String string0 = "/L^ZkC}$-W_C^CP5c`S";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/L^ZkC}$-W_C^CP5c`S");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setPathSegment(0, ":Y\")H \"+7v<h");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("/L^ZkC}$-W_C^CP5c`S");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment(":Y\")H \"+7v<h");
      String string1 = "b";
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("b");
      String string2 = "?Y6'Ny6w~~_|4vi";
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setEncodedPathSegment(90, "?Y6'Ny6w~~_|4vi");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("..");
      HttpUrl httpUrl0 = HttpUrl.parse("6Unj!JQ~hPJ y(");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("}<S#");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("\u2026");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl_Builder3.parse(httpUrl0, "Invalid host: ");
      httpUrl_Builder4.encodedPassword("[ftp:/");
      httpUrl_Builder4.build();
      httpUrl_Builder2.encodedQuery("}<S#");
      httpUrl_Builder0.addEncodedPathSegments("\u2026");
      httpUrl_Builder1.build();
      try { 
        HttpUrl.getChecked("Invalid host: ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Invalid host: 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      try { 
        HttpUrl.getChecked("},9o#n Iu");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for },9o#n Iu
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("v2}Akz=G");
      String string0 = "/L^ZkC}$-W_C^CP5c`S";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter(":@", (String) null);
      String string2 = "%60uhsb%5ez4$";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("%60uhsb%5ez4$");
      int int0 = 82;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(82, "/L^ZkC}$-W_C^CP5c`S");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("fooexample");
      httpUrl_Builder0.addEncodedPathSegment("fooexample");
      httpUrl_Builder0.addEncodedPathSegment("%2e.");
      int int0 = HttpUrl.defaultPort("fooexample");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      MockURL.URL(uRL0, "wN");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.encodedPassword("+");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("84A/Ntw3|)c&FZ=Jst|");
      httpUrl_Builder1.port(6);
      HttpUrl.parse("wN");
      HttpUrl.Builder.ParseResult.values();
      StringBuilder stringBuilder0 = new StringBuilder("okio.Pipe$PipeSink");
      StringBuilder stringBuilder1 = stringBuilder0.insert(6, "duration <= 0: ");
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "84A/Ntw3|)c&FZ=Jst|");
      List<String> list0 = httpUrl_Builder1.encodedPathSegments;
      HttpUrl.pathSegmentsToString(stringBuilder2, list0);
      HttpUrl httpUrl1 = httpUrl0.resolve(">d^-@I@");
      assertEquals("http://www.somefakebutwellformedurl.org/%3Ed%5E-@I@", httpUrl1.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("okhttp3.HttpUrl$Builder");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("{yQ:@<{f0eP");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("{yQ:@<{f0eP");
      httpUrl_Builder1.addPathSegments("okhttp3.HttpUrl$Builder");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedUsername("{yQ:@<{f0eP");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = (-988);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("timeout < 0: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("%2FL%5EZkC%7D$-W_C%5ECPg%60S");
      httpUrl_Builder3.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      try { 
        HttpUrl.getChecked("A;o3zGoy4P2[&QV.");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for A;o3zGoy4P2[&QV.
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedQuery();
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("9z5:n%?R)B2zq)yv/");
      httpUrl_Builder0.removeAllEncodedQueryParameters("9z5:n%?R)B2zq)yv/");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("9z5:n%?R)B2zq)yv/");
      assertTrue(list0.contains("9z5:n%?R)B2zq)yv/"));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "33nq=&@_#hm_VP5.";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("33nq=&@_#hm_VP5.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 33nq=&@_#hm_VP5.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "pM");
      httpUrl_Builder1.username("pM");
      httpUrl_Builder0.encodedFragment("");
      httpUrl_Builder0.addEncodedPathSegments("pM");
      try { 
        HttpUrl.getChecked("a%5E!Gowd&DGYpfU");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for a%5E!Gowd&DGYpfU
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      HttpUrl.parse("6x;9My5");
      int int0 = 0;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2759));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:+?2zzwg");
      assertEquals("https://+/?2zzwg", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(2048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4096, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("&_u yM4?VO(Y0f~");
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("@Fkn");
      assertTrue(list0.contains("@Fkn"));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fkn");
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("http");
      List<String> list1 = httpUrl2.encodedPathSegments();
      assertTrue(list1.contains("@Fkn"));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("http");
      httpUrl_Builder2.encodedUsername("X*nPa(:n0.k6L&q");
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.parse("HA-1");
      httpUrl0.queryParameterNames();
      httpUrl0.fragment();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("Zrs,{_+%}4|{#S");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("");
      httpUrl_Builder1.addEncodedPathSegments(".");
      int int0 = HttpUrl.defaultPort(".");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder.ParseResult.values();
      httpUrl0.host();
      HttpUrl httpUrl1 = httpUrl0.resolve("www.somefakebutwellformedurl.org");
      assertEquals(80, httpUrl1.port());
      assertEquals("http://www.somefakebutwellformedurl.org/www.somefakebutwellformedurl.org", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      HttpUrl.decodeHexDigit('M');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("");
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("`Uhsb^z4$");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("sv5y", "");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("`Uhsb^z4$");
      httpUrl_Builder4.encodedPassword("");
      URL uRL0 = MockURL.getHttpExample();
      httpUrl_Builder0.encodedUsername("sv5y");
      MockURL.toURI(uRL0);
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("", (-2655), 1968);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockURL.getFileExample();
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      HttpUrl.percentDecode("L#M/ew9jPzb2}m", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "L#M/ew9jPzb2}m");
      StringBuilder stringBuilder1 = stringBuilder0.append(53);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "L#M/ew9jPzb2}m");
      StringBuilder stringBuilder3 = stringBuilder2.append((long) 53);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(58, 2407.4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 58
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("");
      httpUrl_Builder0.password("");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("}<S#");
      httpUrl_Builder0.encodedPassword("\u2026");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      String string0 = "Invalid host: ";
      httpUrl_Builder1.parse(httpUrl0, "Invalid host: ");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      httpUrl1.encodedQuery();
      String string1 = HttpUrl.FRAGMENT_ENCODE_SET_URI;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("C", (-2744), (-2744), "GMT", false, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedQuery();
      httpUrl0.encodedQuery();
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("z");
      httpUrl_Builder1.addEncodedPathSegments("%2e%2e");
      HttpUrl httpUrl0 = HttpUrl.parse("%2e%2e");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.normalize(uRI0);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder1.addPathSegment("o==5,MK7g");
      String string0 = "ze%20%3c%201:%20";
      HttpUrl.parse("ze%20%3c%201:%20");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("o==5,MK7g");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.parse("-");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1576), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "N/\\vMaS'*";
      try { 
        HttpUrl.getChecked("N/vMaS'*");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for N/vMaS'*
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%7D%3CS";
      HttpUrl.percentEncoded("%7D%3CS", 0, 57343);
      try { 
        MockURI.URI("%7D%3CS", "%7D%3CS", "%7D%3CS", "%7D%3CS", "%7D%3CS");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: %7D%3CS://%257D%253CS%257D%253CS?%257D%253CS#%257D%253CS
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("+");
      httpUrl_Builder0.addEncodedPathSegments("+");
      HttpUrl.parse("https:+?2zzwg");
      httpUrl_Builder1.parse(httpUrl0, "]");
      int int0 = (-938);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment((-938), "https:+?2zzwg");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = HttpUrl.PATH_SEGMENT_ENCODE_SET_URI;
      httpUrl0.redact();
      httpUrl0.url();
      httpUrl0.query();
      URI uRI0 = MockURI.aHttpURI;
      try { 
        HttpUrl.getChecked("okhttp3.HttpUrl$Builder");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for okhttp3.HttpUrl$Builder
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.queryStringToNamesAndValues("@Fvn");
      HttpUrl.queryStringToNamesAndValues("@Fvn");
      HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", (-97), (-97));
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder("@Fvn");
      httpUrl_Builder0.build();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("l%5ezkc%7d$-w_c%5ecp5c%60s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: l%5ezkc%7d$-w_c%5ecp5c%60s
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "RYe,\"WTs6bs}v");
      httpUrl_Builder0.addEncodedPathSegments("RYe,\"WTs6bs}v");
      httpUrl_Builder1.removePathSegment(0);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl0.url();
      httpUrl0.queryParameterNames();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("");
      httpUrl_Builder2.addEncodedPathSegment("fooexample");
      HttpUrl.percentEncoded("}K+,`vpNV6", (-51), (-51));
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "~D?&Z/D<Jmq ~=LdKQ!", 11, (-3878), false);
      HttpUrl httpUrl1 = httpUrl0.resolve("okio.ByteString");
      HttpUrl httpUrl2 = httpUrl1.resolve("~D?&Z/D<Jmq ~=LdKQ!");
      assertEquals("http://foo.bar/~D?&Z/D%3CJmq%20~=LdKQ!", httpUrl2.toString());
      
      URL uRL0 = httpUrl0.url();
      HttpUrl httpUrl3 = HttpUrl.get(uRL0);
      httpUrl3.newBuilder();
      httpUrl0.newBuilder("fooexample");
      assertFalse(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("/rQ\"f");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("https:", "https:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.setQueryParameter("/rQ\"f", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([");
      httpUrl_Builder3.addQueryParameter("%2e", "P.Oai43\"[1e#t");
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.isHttps();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.fragment("P.Oai43\"[1e#t");
      httpUrl_Builder5.addEncodedPathSegment("H");
      httpUrl0.newBuilder("([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([");
      httpUrl0.newBuilder();
      httpUrl0.equals("P.Oai43\"[1e#t");
      httpUrl0.encodedPassword();
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      httpUrl0.equals(sequenceInputStream0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      
      int int0 = HttpUrl.decodeHexDigit('A');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      try { 
        HttpUrl.getChecked("httpq:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for httpq:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("UNSUPPORTED_SCHEME");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Zrs,{_+%}4|{\\#S";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "iMCO8jou");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("'Ah5", "'Ah5");
      int int0 = HttpUrl.defaultPort("'Ah5");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, (String) null, 41, 41, "6", true, true, true, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("%3e'", false);
      assertEquals(">'", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("", "[size=0]");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("endIndex < beginIndex", "tgPm2#Sofv%");
      httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegment("Invalid%20host:");
      httpUrl_Builder3.password(":^JNa([l=]o]5");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.removeAllQueryParameters("okhttp3.HttpUrl$1");
      httpUrl_Builder4.addEncodedPathSegment("Gi2RKqZ5roH");
      httpUrl_Builder3.encodedUsername(":^JNa([l=]o]5");
      HttpUrl.parse("Invalid%20host:");
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "B", (-4236), (-4236), "okhttp3.HttpUrl$Builder$ParseResult", false, false, false, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "+HZHbFc";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("+HZHbFc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: +HZHbFc
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.queryStringToNamesAndValues(" < ");
      HttpUrl.queryStringToNamesAndValues(":^JNa([l=]o]5");
      HttpUrl.percentEncoded("l%5ezkc%7d$-w_c%5ecp5c%60s", 58, 58);
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl0.resolve("okhttp3.RequestBody$1");
      httpUrl0.newBuilder("@N'%T~b");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("ht");
      httpUrl_Builder0.addEncodedPathSegments("ht");
      int int0 = HttpUrl.defaultPort("ht");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      URI uRI1 = MockURI.normalize(uRI0);
      HttpUrl.get(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.removeAllEncodedQueryParameters("[");
      HttpUrl httpUrl1 = httpUrl0.resolve("[");
      assertNotNull(httpUrl1);
      
      httpUrl1.queryParameterValues((String) null);
      assertEquals(80, httpUrl1.port());
      assertEquals("http://www.somefakebutwellformedurl.org/[", httpUrl1.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedQuery();
      httpUrl0.url();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("okhttp3.HttpUrl");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("7Gi]_");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("7Gi]_");
      String string0 = "}mk`I5=g)ZB*aU~Mo";
      httpUrl_Builder1.fragment("okhttp3.HttpUrl");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("}mk`I5=g)ZB*aU~Mo");
      httpUrl_Builder3.encodedUsername = "7Gi]_";
      httpUrl_Builder4.encodedQuery("okhttp3.HttpUrl");
      httpUrl_Builder1.addEncodedQueryParameter("[size=", "7Gi]_");
      int int0 = 16;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedQueryParameter((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
      
      HttpUrl.Builder.ParseResult.values();
      int int0 = HttpUrl.decodeHexDigit('4');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      try { 
        HttpUrl.getChecked("%6BhfssX>");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for %6BhfssX>
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("Zrs,{_+%}4|{#S");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("::");
      httpUrl_Builder0.setEncodedPathSegment(0, "pM");
      httpUrl_Builder0.addEncodedPathSegments("pM");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("{C5jyhWVB& *5D", "", 0, "%2e", uRLStreamHandler0);
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "%2e", uRLStreamHandler1);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.normalize(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("kF");
      httpUrl_Builder0.encodedQuery("doLrB:+?2ZzwG");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("A;o3zGoy4P2[&QV.", "{YFs#/@XbK]np=");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("kqo'Qy+FW");
      httpUrl_Builder0.fragment("kF");
      httpUrl_Builder0.parse(httpUrl0, "http://some/fake/but/wellformed/url");
      httpUrl_Builder0.reencodeForUri();
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      HttpUrl httpUrl2 = httpUrl_Builder3.build();
      URI uRI1 = httpUrl2.uri();
      assertEquals("http://:kqo%27Qy+FW@some/fake/but/wellformed/url?doLrB:+?2ZzwG&A;o3zGoy4P2[%26QV.=%7BYFs%23/@XbK]np%3D#kF", uRI1.toString());
      
      httpUrl1.queryParameterValues(" =OzN~ag+A_&^");
      List<String> list0 = httpUrl2.pathSegments();
      httpUrl2.encodedQuery();
      List<String> list1 = httpUrl1.encodedPathSegments();
      assertEquals("kqo'Qy+FW", httpUrl1.password());
      assertEquals("http://:kqo%27Qy+FW@some/fake/but/wellformed/url?doLrB:+?2ZzwG&A;o3zGoy4P2[%26QV.=%7BYFs%23/@XbK]np%3D#kF", httpUrl1.toString());
      assertTrue(list1.equals((Object)list0));
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      String string0 = HttpUrl.PATH_SEGMENT_ENCODE_SET_URI;
      MockURL.toURI(uRL0);
      URI uRI0 = MockURI.aFileURI;
      MockURI.parseServerAuthority(uRI0);
      String string1 = "k_8^st9xV?o";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k_8^st9xV?o");
      String string2 = "?#";
      URL uRL1 = MockURL.URL(uRL0, "?#");
      HttpUrl.get(uRL1);
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(101, "k_8^st9xV?o");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e.");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("%2e.");
      String string0 = "v";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("v");
      httpUrl_Builder3.encodedUsername("HmacSHA256");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.port(65535);
      httpUrl_Builder4.encodedPassword("HmacSHA256");
      String string1 = "7wD3Jk!v0i?K8WSrrM";
      httpUrl_Builder1.encodedQuery("HmacSHA256");
      HttpUrl.Builder httpUrl_Builder5 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder5.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("http:");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "wN");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("+");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      httpUrl1.newBuilder();
      HttpUrl httpUrl2 = HttpUrl.parse("+");
      assertNull(httpUrl2);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.host();
      HttpUrl httpUrl1 = httpUrl0.resolve("foo.bar");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName((-2773));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      httpUrl_Builder0.addEncodedPathSegment("");
      httpUrl_Builder0.password("");
      httpUrl_Builder0.addPathSegment("}<S#");
      String string1 = "\u2026";
      httpUrl_Builder0.encodedPassword("\u2026");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      MockURI.toURL(uRI0);
      try { 
        HttpUrl.getChecked("\u2026");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for \u2026
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Fksr)zEGU>?x{LUg!C";
      httpUrl_Builder0.password("]");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("Fksr)zEGU>?x{LUg!C", "Fksr)zEGU>?x{LUg!C");
      String string1 = ".";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host(".");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment(".");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = "[";
      httpUrl_Builder2.addPathSegment("[");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment((-1364), ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments(">");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues(">");
      assertTrue(list0.contains(">"));
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.encodedPassword("+");
      HttpUrl httpUrl1 = httpUrl0.resolve("https:+?2zzwg");
      httpUrl_Builder0.parse(httpUrl1, "https:+?2zzwg");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("https://+/?2zzwg", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("%22!Af6%2B[L9N", "O4OC_W");
      httpUrl_Builder1.parse(httpUrl0, "%22!Af6%2B[L9N");
      httpUrl_Builder0.encodedUsername("O4OC_W");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("fooexample", "pZk'-#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      HttpUrl httpUrl2 = httpUrl_Builder1.build();
      URI uRI0 = httpUrl1.uri();
      List<String> list0 = httpUrl2.queryParameterValues("%22!Af6%2B[L9N");
      assertFalse(list0.contains("O4OC_W"));
      
      int int0 = httpUrl1.querySize();
      assertEquals(2, int0);
      
      HttpUrl httpUrl3 = HttpUrl.get(uRI0);
      assertEquals("http://O4OC_W@www.somefakebutwellformedurl.org/%22!Af6%2B[L9N?%22!Af6%2B[L9N=O4OC_W&fooexample=pZk%27-%23", httpUrl1.toString());
      assertEquals("O4OC_W", httpUrl1.username());
      assertEquals("http://O4OC_W@www.somefakebutwellformedurl.org/%22!Af6%2B%5BL9N?%22!Af6%2B[L9N=O4OC_W&fooexample=pZk%27-%23", httpUrl3.toString());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%22!Af6%2B[L9N");
      // Undeclared exception!
      try { 
        httpUrl2.queryParameterName((-1020));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder.ParseResult.values();
      HttpUrl.Builder.ParseResult.values();
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "but", 1239, 1239, (String) null, false, true, false, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("DfgQY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: DfgQY
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("fooexample");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fooexample");
      URL uRL1 = MockURL.URL(uRL0, "fooexample");
      HttpUrl.get(uRL1);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.parse(httpUrl0, "c");
      assertEquals(80, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("*/c{R", "http://some/fake/but/wellformed/url");
      String string0 = httpUrl_Builder2.toString();
      assertEquals("http://www.somefakebutwellformedurl.org/c?*%7F/c{R=http://some/fake/but/wellformed/url", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("fooexample");
      httpUrl_Builder1.addEncodedQueryParameter("fooexample", "GMT");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("https", "%2e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("uE8[LSt%H?", "qmh.p?j");
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.isHttps();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.fragment("https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedPathSegment("https");
      httpUrl_Builder6.encodedUsername("%2B");
      HttpUrl httpUrl1 = HttpUrl.parse("G'o1}60.>bh");
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("endIndex < beginIndex", "~*");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("rq%2522f");
      httpUrl_Builder0.username("~*");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.fragment((String) null);
      httpUrl_Builder2.setQueryParameter("rq%2522f", "sO>ds2YSEb$");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.username("5\"lrbF;=l");
      httpUrl_Builder4.removeAllQueryParameters("19j-p|fE2VS=#R-?");
      httpUrl_Builder6.addEncodedPathSegments("\\");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "/L^ZkC}$-W_C^CP5c`S");
      httpUrl_Builder0.addEncodedPathSegment("%2e%2e");
      String string0 = "V)7y#^EN`J2`";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("V)7y#^EN`J2`", "@u");
      httpUrl_Builder1.removeAllEncodedQueryParameters("UJ37N5J`jqRgaW");
      httpUrl_Builder1.removeAllQueryParameters("'5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("%257d%253cs%2523");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%20");
      httpUrl_Builder1.addPathSegment(".%20");
      HttpUrl httpUrl0 = HttpUrl.parse(".%20");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("fooexample");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fooexample");
      URL uRL1 = MockURL.URL(uRL0, "fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      HttpUrl httpUrl1 = HttpUrl.get(uRL1);
      httpUrl_Builder0.parse(httpUrl1, "b");
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder1);
      httpUrl0.uri();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1843));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("33nq=&@_#hm_VP5.");
      assertEquals(4, list0.size());
      
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals("", string0);
      
      String string1 = httpUrl0.encodedUsername();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("9z5y:n%?R2zq)yv/");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("9z5y:n%?R2zq)yv/");
      assertTrue(list0.contains("9z5y:n%?R2zq)yv/"));
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("");
      httpUrl_Builder0.password("");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("}<S#");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPassword("\u2026");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      URL uRL1 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder1.parse(httpUrl0, "Invalid host: ");
      httpUrl_Builder2.encodedPassword("[ftp:/");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:", httpUrl1.toString());
      
      HttpUrl.parse("https:");
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      httpUrl2.queryParameterNames();
      httpUrl0.encodedUsername();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("@Fvn");
      Buffer buffer0 = new Buffer();
      int int0 = (-1620);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, " \"'<>#", (-1620), 466, "7NC`![", true, true, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("zk)(Ilw;=.", "O4OC_W");
      httpUrl_Builder1.parse(httpUrl0, "zk)(Ilw;=.");
      httpUrl_Builder0.encodedUsername("O4OC_W");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("fooexample", "pZk'-#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      HttpUrl httpUrl2 = httpUrl_Builder1.build();
      httpUrl2.queryParameterName(0);
      httpUrl1.uri();
      httpUrl2.queryParameterValues("zk)(Ilw;=.");
      httpUrl1.querySize();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "pZk'-#");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(546, (char[]) null, 3125, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 546
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "66V)$?6F}o_pKqNN");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("Invalid URL: ");
      httpUrl_Builder1.parse(httpUrl0, ":");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("op@m!!(`D ;");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("op@m!!(`D ;");
      httpUrl_Builder2.port(1738);
      httpUrl_Builder1.addEncodedPathSegments("wN");
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      httpUrl0.query();
      assertEquals("http://www.somefakebutwellformedurl.org/66V)$?6F}o_pKqNN", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      
      httpUrl1.url();
      assertEquals("http://:op%40m!!(%60D%20%3B@www.somefakebutwellformedurl.org:1738/:/wN?op@m!!(`D%20;#Invalid%20URL:%20", httpUrl1.toString());
      assertEquals("op@m!!(`D ;", httpUrl1.password());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "/*p=Ki4er@KT+k@ueTJ");
      HttpUrl.get(uRL1);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      String string0 = "[faxBuZferL/ze < 1: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("[faxBuZferL/ze < 1: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [faxBuZferL/ze < 1: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      httpUrl_Builder1.removeAllEncodedQueryParameters("4?g{3_r!X5W%3EosS}Y");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedFragment("4?g{3_r!X5W%3EosS}Y");
      httpUrl_Builder2.fragment("okhttp3.HttpUrl");
      httpUrl_Builder0.username("^");
      String string0 = "}mk`I5=g)ZB*aU~Mo";
      httpUrl_Builder2.fragment("ftp:");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("");
      httpUrl_Builder0.parse((HttpUrl) null, "}<S#");
      httpUrl_Builder0.password("");
      httpUrl_Builder0.addPathSegment("}<S#");
      httpUrl_Builder0.encodedPassword("\u2026");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "Idd", 127, 127, true);
      HttpUrl httpUrl1 = httpUrl0.resolve("Idd");
      assertNotNull(httpUrl1);
      
      httpUrl1.newBuilder();
      httpUrl1.newBuilder("%7 %7fp%20vevfay");
      assertEquals("http://www.somefakebutwellformedurl.org/Idd", httpUrl1.toString());
      
      String string0 = httpUrl0.scheme();
      assertEquals("http", string0);
      
      String string1 = httpUrl0.fragment();
      assertEquals("", string1);
      assertEquals("http://www.somefakebutwellformedurl.org/%7D%3CS#", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "bI%;jQs=IHfAP*`%");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("\u2026]");
      httpUrl_Builder1.addPathSegments("YR<iHH#a<mf2KK='&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("bI%;jQs=IHfAP*`%", "|;=F/Is&,&mgv%^");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.removeAllEncodedQueryParameters("\u2026]");
      httpUrl_Builder0.setEncodedQueryParameter("O4OC_W", "");
      httpUrl_Builder2.parse(httpUrl0, "..");
      httpUrl_Builder1.encodedPassword("|;=F/Is&,&mgv%^");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("https:/www.somefakebutwellformedurl.org/%e2%80%a6");
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      httpUrl_Builder3.encodedUsername("YR<iHH#a<mf2KK='&");
      String string0 = httpUrl1.host();
      assertEquals("www.somefakebutwellformedurl.org", string0);
      
      httpUrl0.queryParameter("~GILK]^;D");
      HttpUrl httpUrl2 = httpUrl1.resolve("XTwk*;dYC6 (NrJy2J");
      assertEquals("|;=F/Is&,&mgv%^", httpUrl1.password());
      assertEquals("http://:%7C%3B%3DF%2FIs&,&mgv%%5E@www.somefakebutwellformedurl.org/?https:/www.somefakebutwellformedurl.org/%e2%80%a6", httpUrl1.toString());
      assertEquals("http://:%7C%3B%3DF%2FIs&,&mgv%%5E@www.somefakebutwellformedurl.org/XTwk*;dYC6%20(NrJy%7F2J", httpUrl2.toString());
      
      httpUrl_Builder3.parse(httpUrl0, "~GILK]^;D");
      assertEquals("http://www.somefakebutwellformedurl.org/bI%;jQs=IHfAP*%60%", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("");
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURI.aFTPURI;
      HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("%2e%2e", 932, 932, (String) null, true, true, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder.ParseResult.values();
      Buffer buffer0 = new Buffer();
      HttpUrl httpUrl1 = httpUrl0.resolve("%7 %7fp%20vevfay");
      assertNotNull(httpUrl1);
      
      httpUrl1.port();
      assertEquals("http://www.somefakebutwellformedurl.org/%7%20%7fp%20vevfay", httpUrl1.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedQueryParameter("Z8OG?(O", "GMT");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.setQueryParameter("GMT", " \"'<>#");
      httpUrl_Builder4.addQueryParameter("%2e", "Z8OG?(O");
      HttpUrl.Builder httpUrl_Builder5 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment("pAlF");
      httpUrl_Builder0.setQueryParameter("unexpected host: ", "https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl_Builder2.username("okhttp3.RequestBody");
      httpUrl_Builder0.removeAllQueryParameters("uE8[LSt%H?");
      httpUrl_Builder3.encodedUsername("ZLh3B^/(-/\"n/m%h");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("of1Z&Yk");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("https");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("of1Z&Yk");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("of1Z&Yk");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.port(128);
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedQueryParameter("mBnZEPS@xj#P ~X2kzZ", "unexpected host: ");
      httpUrl_Builder0.addQueryParameter("unexpected host: ", "https");
      String string0 = "5\\13ux&+6u4";
      HttpUrl.Builder httpUrl_Builder7 = new HttpUrl.Builder();
      httpUrl_Builder3.fragment("lJ*nEm>\"T*I");
      httpUrl_Builder4.setQueryParameter("w", "endIndex < beginIndex: ");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter(":^JNa([l=]o]5", ":^JNa([l=]o]5");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("1?$x>WDU;`zdCKUj", "1z&e^RwD!e}W[");
      HttpUrl.parse("SHA-256");
      httpUrl_Builder0.parse((HttpUrl) null, "SHA-256");
      String string0 = "%7Dmk%60I5=g)ZB*aU~Mo";
      httpUrl_Builder1.addQueryParameter("A)@w", "]Ov&S3");
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment(":^JNa([l=]o]5");
      httpUrl_Builder3.addEncodedQueryParameter("%2e%2e", "SHA-256");
      try { 
        HttpUrl.getChecked("/t9b![F=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for /t9b![F=
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      HttpUrl httpUrl1 = httpUrl0.resolve("%7 %7fp%20vevfay");
      assertNotNull(httpUrl1);
      
      List<String> list0 = httpUrl1.pathSegments();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("http://foo.bar/%7%20%7fp%20vevfay", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(":^JNa([l=]o]5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("http:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("encodedPathSegments == null");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.encodedPassword("byteString == null");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      URI uRI1 = MockURI.normalize(uRI0);
      URL uRL1 = MockURI.toURL(uRI1);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder4.parse(httpUrl0, "encodedPathSegments == null");
      httpUrl_Builder4.encodedPassword("source%20is%20closed");
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      assertEquals("http://:source%20is%20closed@www.somefakebutwellformedurl.org/encodedPathSegments%20==%20null", httpUrl1.toString());
      assertEquals("source is closed", httpUrl1.password());
      
      httpUrl0.encodedPathSegments();
      httpUrl_Builder3.encodedUsername("source%20is%20closed");
      HttpUrl httpUrl2 = HttpUrl.get(uRI0);
      httpUrl2.password();
      assertEquals(80, httpUrl2.port());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegment("}<S#");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword("\u2026");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "}<S#");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder3.parse(httpUrl0, "Invalid host: ");
      httpUrl_Builder4.encodedPassword("[ftp:/");
      httpUrl_Builder2.encodedQuery("}<S#");
      httpUrl_Builder0.addEncodedPathSegments("\u2026");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      httpUrl1.newBuilder();
      String string0 = httpUrl1.host();
      assertEquals("http://:%5Bftp%3A%2F@www.somefakebutwellformedurl.org/Invalid%20host:/%E2%80%A6?}%3CS%23", httpUrl1.toString());
      assertEquals("%5Bftp%3A%2F", httpUrl1.encodedPassword());
      assertEquals("[ftp:/", httpUrl1.password());
      assertEquals(80, httpUrl1.port());
      assertEquals("www.somefakebutwellformedurl.org", string0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockURL.URL(uRL0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.queryStringToNamesAndValues("<kKwR|h5C");
      httpUrl_Builder0.parse(httpUrl0, "z");
      httpUrl_Builder0.encodedPassword("B~lPA>d,3_");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("B~lPA>d,3_");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      httpUrl_Builder1.setEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "z");
      httpUrl_Builder2.parse(httpUrl1, "okio.Util");
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder0);
      // Undeclared exception!
      try { 
        httpUrl2.queryParameterName(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("sg^GJ ~u");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("sg^GJ ~u", "sg^GJ ~u");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("@#", "sg^GJ ~u");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("Q`<={l7!SZK");
      String string0 = "CdAJn=MpAPVLIm5";
      httpUrl_Builder5.addEncodedPathSegment("CdAJn=MpAPVLIm5");
      httpUrl_Builder4.addQueryParameter("Q`<={l7!SZK", ".");
      httpUrl_Builder0.addPathSegments(".");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.removeAllQueryParameters("");
      String string1 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      httpUrl_Builder4.setQueryParameter(".", ".");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.host("@#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: @#
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "fEwQ&5W0^#/xAfNZyi");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.username("4#N4\"M}rA");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegments("/");
      httpUrl_Builder3.encodedFragment("/");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addEncodedPathSegments("4#N4\"M}rA");
      httpUrl_Builder4.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('!');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:+?2zzwg");
      httpUrl0.pathSize();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://+/?2zzwg", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("33nq=&@_#hm_VP5.");
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "33nq=&@_#hm_VP5.", (-2669), (-1), "33nq=&@_#hm_VP5.", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("iJ)iBM'b#T}k:@R>A(");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("iJ)iBM'b#T}k:@R>A(");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("iJ)iBM'b#T}k:@R>A(", "iJ)iBM'b#T}k:@R>A(");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("iJ)iBM'b#T}k:@R>A(");
      httpUrl_Builder1.setEncodedQueryParameter(".", "u^dgb_y?M");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedQuery("");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setPathSegment(0, "yx7|.");
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.parse("{2y!|mlge^*]IsM?DT");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(493, "{2y!|mlge^*]IsM?DT");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 493, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "https:/some/fake/but/wellformed/url";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("https:/some/fake/but/wellformed/url");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: https:/some/fake/but/wellformed/url
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "fooexample";
      httpUrl_Builder0.addEncodedPathSegment("fooexample");
      String string1 = "=%2e.";
      httpUrl_Builder0.encodedPassword("fooexample");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      URI uRI1 = MockURI.normalize(uRI0);
      URL uRL1 = MockURI.toURL(uRI1);
      HttpUrl.get(uRL1);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("I%E=H+eBQ", "I%E=H+eBQ");
      httpUrl_Builder1.fragment("H*F=6-Q.}2");
      HttpUrl httpUrl0 = HttpUrl.parse("I%E=H+eBQ");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getFileExample();
      HttpUrl.get(uRL0);
      httpUrl_Builder0.addEncodedQueryParameter("doLr7B:+?2ZzwG", "%e2%80%a6");
      httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("!\r");
      httpUrl_Builder1.encodedUsername("LPISZE");
      httpUrl_Builder0.encodedPassword("!\r");
      int int0 = HttpUrl.defaultPort(")4Oa_W");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURI.aFTPURI;
      MockURI.normalize(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("kF");
      httpUrl_Builder0.addEncodedQueryParameter("doLrB:+?2ZzwG", "@n'%t~b");
      httpUrl_Builder0.addPathSegments("@n'%t~b");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("A;o3zGoy4P2[&QV.", "{YFs#/@XbK]np=");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("kqo'Qy+FW");
      httpUrl_Builder0.fragment("kF");
      httpUrl_Builder0.parse(httpUrl0, "http://some/fake/but/wellformed/url");
      httpUrl_Builder0.reencodeForUri();
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      HttpUrl httpUrl2 = httpUrl_Builder3.build();
      URI uRI1 = httpUrl2.uri();
      assertEquals("http://:kqo%27Qy+FW@some/fake/but/wellformed/url?doLrB:+?2ZzwG=@n%27%25t~b&A;o3zGoy4P2[%26QV.=%7BYFs%23/@XbK]np%3D#kF", uRI1.toString());
      
      httpUrl1.queryParameterValues(" =OzN~ag+A_&^");
      assertEquals("kqo'Qy+FW", httpUrl1.password());
      assertEquals("http://:kqo%27Qy+FW@some/fake/but/wellformed/url?doLrB:+?2ZzwG=@n%27%25t~b&A;o3zGoy4P2[%26QV.=%7BYFs%23/@XbK]np%3D#kF", httpUrl1.toString());
      
      HttpUrl httpUrl3 = HttpUrl.get(uRL0);
      httpUrl3.encodedUsername();
      assertEquals(80, httpUrl3.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl3.toString());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "YR<iHH#a<mf2KK='&");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("YR<iHH#a<mf2KK='&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("YR<iHH#a<mf2KK='&");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter("O4OC_W", "YR<iHH#a<mf2KK='&");
      httpUrl_Builder5.parse(httpUrl0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      httpUrl_Builder0.encodedUsername("O4OC_W");
      httpUrl_Builder5.encodedQuery("7wD3Jk!v0i?K8WSrrM");
      HttpUrl httpUrl1 = httpUrl_Builder5.build();
      httpUrl_Builder1.build();
      List<String> list0 = httpUrl1.queryParameterValues("7wD3Jk!v0i?K8WSrrM");
      assertEquals("http://O4OC_W@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?7wD3Jk!v0i?K8WSrrM", httpUrl1.toString());
      assertFalse(list0.contains("7wD3Jk!v0i?K8WSrrM"));
      
      HttpUrl.defaultPort("YR<iHH#a<mf2KK='&");
      httpUrl0.newBuilder();
      assertEquals("a<mf2KK='&", httpUrl0.fragment());
      assertEquals("a<mf2K%7FK='&", httpUrl0.encodedFragment());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "b9+7%t|{<k\\?ys;";
      try { 
        HttpUrl.getChecked("b9+7%t|{<k?ys;");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for b9+7%t|{<k?ys;
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      String string0 = "https";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", "");
      int int0 = 0;
      httpUrl_Builder0.username("KysR!x2q");
      httpUrl_Builder2.setPathSegment(0, "");
      httpUrl_Builder1.encodedUsername = "UNSUPPORTED_SCHEME";
      HttpUrl.canonicalize("i3d))?_R", "UNSUPPORTED_SCHEME", true, false, true, false);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("\n");
      int int0 = HttpUrl.defaultPort("\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("DfgQY");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("");
      String string0 = "8^[(\\TBT0^jJ";
      httpUrl_Builder1.username("8^[(TBT0^jJ");
      int int0 = 1418;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURI.aFTPURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("kF");
      httpUrl_Builder0.addEncodedQueryParameter("doLrB:+?2ZzwG", "kF");
      httpUrl_Builder0.addPathSegments("doLrB:+?2ZzwG");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("A;o3zGoy4P2[&QV.", "{YFs#/@XbK]np=");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("kqo'Qy+FW");
      httpUrl_Builder0.fragment("kF");
      httpUrl_Builder0.parse(httpUrl0, "http://some/fake/but/wellformed/url");
      httpUrl_Builder0.reencodeForUri();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      httpUrl_Builder3.setQueryParameter("doLrB:+?2ZzwG", "*p=ki4er@kt+k@uetj");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      HttpUrl httpUrl2 = httpUrl_Builder3.build();
      httpUrl2.redact();
      httpUrl1.queryParameterValues(" =hzN~at+A_T^");
      HttpUrl.defaultPort(" =hzN~at+A_T^");
      httpUrl0.newBuilder();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("kqo'Qy+FW", 37, 37, "", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.resolve(uRI0, uRI0);
      URL uRL1 = MockURL.URL(uRL0, "size == 0");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("size == 0");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("size == 0");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter("O4OC_W", "size == 0");
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder5.parse(httpUrl0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      httpUrl_Builder3.encodedPassword("size == 0");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedQuery("O4OC_W");
      httpUrl_Builder2.encodedUsername("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      httpUrl0.host();
      httpUrl0.queryParameter("size == 0");
      HttpUrl httpUrl1 = httpUrl_Builder6.build();
      HttpUrl httpUrl2 = httpUrl1.resolve("\r");
      assertEquals("http://(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+):size%20%3D%3D%200@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?O4OC_W", httpUrl2.toString());
      assertEquals("size == 0", httpUrl2.password());
      assertEquals(1, httpUrl2.querySize());
      assertEquals("http://(%5B0-9a-fA-F%5D*%3A%5B0-9a-fA-F%3A.%5D*)%7C(%5Bd.%5D+):size%20%3D%3D%200@www.somefakebutwellformedurl.org/([0-9a-fA-F]*:[0-9a-fA-F:.]*)%7C([d.]+)?O4OC_W", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("FUE/)oQ2sE4 7kf.2E", "FUE/)oQ2sE4 7kf.2E");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("fooexample");
      httpUrl_Builder0.encodedPassword("fooexample");
      URL uRL0 = MockURL.getHttpExample();
      MockURL.toURI(uRL0);
      MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI0);
      MockURL.URL(uRL0, "fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "CabCnn");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPassword("+");
      httpUrl_Builder2.encodedQuery(" \"':;<=>@[]^`{}|/?#&!$(),~");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(6);
      httpUrl_Builder3.addEncodedPathSegments("fooexample");
      httpUrl_Builder1.build();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.addEncodedPathSegment("CabCnn");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedUsername("CabCnn");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.encodedPath("6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 6
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "/L^ZkC}$-W_C^CP5c`S");
      httpUrl_Builder1.username("/L^ZkC}$-W_C^CP5c`S");
      Buffer buffer0 = new Buffer();
      int int0 = (-56321);
      HttpUrl.percentDecode(buffer0, "/L^ZkC}$-W_C^CP5c`S", (-56321), (-56321), true);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedQuery();
      httpUrl0.url();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) null);
      List<String> list0 = httpUrl_Builder0.encodedQueryNamesAndValues;
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString(stringBuilder1, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("|&Z1zB'ENs2P5Y48H7r", (String) null);
      httpUrl_Builder1.encodedUsername("ubp!zALS'hc<");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      MockURL.toURI(uRL0);
      MockURL.URL(uRL0, "wN");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = httpUrl_Builder0.parse(httpUrl0, "wN");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      
      httpUrl_Builder0.encodedPassword("+");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("j274G2T*:");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      httpUrl1.newBuilder();
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult1 = httpUrl_Builder0.parse(httpUrl1, "https:+?2zzwg");
      assertEquals("+", httpUrl1.encodedPassword());
      assertEquals("http://:+@www.somefakebutwellformedurl.org/wN/j274G2T*%7F:", httpUrl1.toString());
      assertSame(httpUrl_Builder_ParseResult1, httpUrl_Builder_ParseResult0);
      assertEquals("+", httpUrl1.password());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "host == null";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("host == null");
      String string1 = "fffe";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("fffe");
      String string2 = "";
      httpUrl_Builder2.removeAllQueryParameters("");
      int int0 = 318;
      String string3 = "M|";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(318, "M|");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 318, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("/L^ZkC}$-W_C^CP5c`S");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.host("+QN{");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("-9xQ");
      httpUrl_Builder1.setQueryParameter("+QN{", "");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.username("Hran");
      httpUrl_Builder1.encodedPassword("/L^ZkC}$-W_C^CP5c`S");
      httpUrl_Builder3.encodedQuery("y%257fwztm");
      httpUrl_Builder4.addEncodedPathSegments(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      URI uRI1 = MockURI.normalize(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl1);
      
      httpUrl_Builder0.removeAllEncodedQueryParameters("[");
      httpUrl_Builder0.parse(httpUrl0, "[");
      httpUrl0.fragment();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedQuery();
      httpUrl0.url();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("okhttp3.HttpUrl");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("7Gi]_");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("7Gi]_");
      httpUrl_Builder1.fragment(" \"':;<=>@[]^`{}|/?#&!$(),~");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("}mk`I5=g)ZB*aU~Mo");
      httpUrl_Builder3.encodedUsername = "7Gi]_";
      httpUrl_Builder4.encodedQuery("okhttp3.HttpUrl");
      httpUrl_Builder1.addEncodedQueryParameter("[size=", "7Gi]_");
      httpUrl_Builder4.encodedQuery("7Gi]_");
      httpUrl_Builder4.encodedUsername("He^l65L");
      httpUrl_Builder2.addPathSegments("okio.SegmentPool");
      httpUrl_Builder2.addEncodedPathSegment("}mk`I5=g)ZB*aU~Mo");
      httpUrl0.newBuilder();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("unexpected path segment: ");
      assertTrue(list0.contains("unexpected path segment: "));
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder1.addEncodedPathSegment("fooexample");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("fooexample");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedPathSegment("%2e.");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addPathSegment("fooexample");
      URL uRL0 = MockURL.getHttpExample();
      httpUrl_Builder4.addEncodedQueryParameter("fooexample", "fooexample");
      URI uRI0 = MockURL.toURI(uRL0);
      URL uRL1 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.uri();
      httpUrl_Builder3.parse(httpUrl0, "%2e.");
      httpUrl_Builder4.addPathSegments("Z0Y,");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      httpUrl0.newBuilder();
      httpUrl0.querySize();
      httpUrl0.uri();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string0 = "fooexample";
      httpUrl_Builder0.addEncodedPathSegment("fooexample");
      String string1 = "https";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("fooexample", "https");
      URI uRI0 = MockURI.URI("fooexample", "-I@\n\"heE}ghW'.pWW&", (String) null);
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      HttpUrl.get(uRI1);
      httpUrl_Builder2.parse((HttpUrl) null, ":So");
      httpUrl_Builder0.setQueryParameter("https", "endIndex > string.length: ");
      try { 
        HttpUrl.getChecked("https");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for https
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "[-=B 3jLi(^", 0, 128, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "";
      String string1 = "?}1%g,ga8";
      int int0 = 45;
      HttpUrl.percentEncoded("https", 0, 0);
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("fooexample");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPassword("fooexample");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      URI uRI1 = MockURI.normalize(uRI0);
      URL uRL1 = MockURI.toURL(uRI1);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl1);
      
      httpUrl_Builder2.removeAllEncodedQueryParameters("fooexample");
      httpUrl_Builder2.parse(httpUrl1, "c]IJ57(I");
      httpUrl_Builder0.encodedPassword("=%2e.");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("utf-16le");
      HttpUrl httpUrl2 = httpUrl_Builder3.build();
      httpUrl0.equals(httpUrl_Builder1);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      
      String string0 = httpUrl2.encodedPassword();
      assertEquals("=..", httpUrl2.password());
      assertEquals("%3D%2e.", string0);
      assertEquals(1, httpUrl2.pathSize());
      assertEquals(80, httpUrl2.port());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("Es%7BL%7DN$p%7F");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegment("}<S#");
      URL uRL0 = MockURL.getHttpExample();
      httpUrl_Builder3.addEncodedQueryParameter("}<S#", "");
      URI uRI0 = MockURL.toURI(uRL0);
      URL uRL1 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("/rQ%22f");
      String string0 = httpUrl0.redact();
      assertEquals("http://www.somefakebutwellformedurl.org/...", string0);
      
      httpUrl_Builder0.encodedQueryNamesAndValues = list0;
      httpUrl_Builder3.parse(httpUrl0, "Z0Y,");
      assertEquals(1, httpUrl0.pathSize());
      
      httpUrl_Builder2.addPathSegments("}<S#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      httpUrl1.newBuilder();
      assertEquals(80, httpUrl1.port());
      assertEquals("http://www.somefakebutwellformedurl.org/Z0Y,/%7D%3CS%23?", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.queryStringToNamesAndValues("@Fvn");
      HttpUrl.percentEncoded(".vbxy!6aDri%25'|q", (-97), (-97));
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.get(uRI0);
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "~D?&Z/D<Jmq ~=LdKQ!", (-97), (-3878), false);
      String string0 = "%7 %7fp%20vevfay";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("~D?&Z/D<Jmq ~=LdKQ!");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment(":@");
      String string1 = "encodedNam  == null";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedQueryParameter((String) null, "encodedNam  == null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "/rQ%22f";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("/rQ%22f", "0i8Fo");
      httpUrl_Builder1.port(32);
      httpUrl_Builder0.encodedQuery("Nns");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("Nns");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: Nns
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("VHW0zO,U  N", (String) null);
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = httpUrl_Builder0.parse(httpUrl0, "O4OC_W");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("H:dY1oGmSAd7z");
      httpUrl_Builder2.host("O4OC_W");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("");
      httpUrl_Builder2.encodedPassword("O4OC_W");
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult1 = httpUrl_Builder3.parse(httpUrl0, "H:dY1oGmSAd7z");
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotSame(httpUrl_Builder_ParseResult1, httpUrl_Builder_ParseResult0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder3);
      List<String> list0 = httpUrl1.queryParameterValues("VHW0zO,U  N");
      assertFalse(list0.isEmpty());
      
      httpUrl1.equals("H:dY1oGmSAd7z");
      assertEquals("H:dY1oGmSAd7z", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://H%3AdY1oGmSAd7z:O4OC_W@o4oc_w/O4OC_W?VHW0zO,U%20%20N", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("*`");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment(",>u=hY4");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("HmacSHA1", "*`");
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URI uRI1 = MockURL.toURI(uRL0);
      MockURI.parseServerAuthority(uRI1);
      URL uRL1 = MockURL.URL(uRL0, "http:");
      HttpUrl.get(uRL1);
      httpUrl_Builder1.parse((HttpUrl) null, "'5");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(3734);
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword(",>u=hY4");
      httpUrl_Builder2.encodedQuery("http:");
      httpUrl_Builder5.addEncodedPathSegments("?L82x3K4[`Czj");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath(" < ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath:  < 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[faxBuZferL/ze < 1: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[faxBuZferL/ze < 1: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [faxBuZferL/ze < 1: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "Oiy");
      HttpUrl.get(uRL1);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("Oiy", (String) null, true, false, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }
}
