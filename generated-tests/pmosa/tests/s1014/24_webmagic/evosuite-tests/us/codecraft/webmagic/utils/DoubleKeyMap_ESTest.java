/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 03:57:48 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(hashMap0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>(class0);
      Integer integer0 = new Integer(698);
      Integer integer1 = new Integer(698);
      doubleKeyMap1.remove(integer0, integer1);
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer2 = new Integer(3069);
      hashMap1.put(doubleKeyMap1, integer2);
      // Undeclared exception!
      try { 
        doubleKeyMap2.put("", (Map<Object, Object>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.get((Object) "_dzUbz>0oUy=P`Z", "");
      HashMap<String, Map<Integer, String>> hashMap1 = new HashMap<String, Map<Integer, String>>();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap2 = new DoubleKeyMap<String, Integer, String>(hashMap1, class1);
      Map<Object, Map<String, Object>> map0 = doubleKeyMap2.newMap();
      hashMap1.clear();
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>(map0);
      doubleKeyMap2.newMap();
      Integer integer0 = new Integer((-533));
      doubleKeyMap2.remove("", integer0);
      DoubleKeyMap<String, Integer, Object> doubleKeyMap4 = new DoubleKeyMap<String, Integer, Object>(class1);
      doubleKeyMap4.remove("");
      doubleKeyMap4.put("", (Integer) null, (Object) "_dzUbz>0oUy=P`Z");
      Integer integer1 = new Integer((-2761));
      doubleKeyMap3.remove((Object) doubleKeyMap2);
      doubleKeyMap4.get("", integer1);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap5 = new DoubleKeyMap<Object, Object, Object>(class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap5.get((Object) "_dzUbz>0oUy=P`Z", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      String string0 = null;
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put((String) null, hashMap1);
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      doubleKeyMap0.remove((String) null, (String) null);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(class0);
      Object object0 = new Object();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(class0);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Integer, Object, String>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put((String) null, hashMap1);
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      doubleKeyMap0.remove((String) null, (String) null);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(class0);
      Object object0 = new Object();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(class0);
      HashMap<String, Map<Object, Object>> hashMap2 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>(hashMap2);
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap3.newMap();
      Map<Object, Object> map1 = doubleKeyMap2.remove((Object) map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(505);
      doubleKeyMap0.put(integer0, integer1, "");
      doubleKeyMap0.remove(integer0, integer0);
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", "", integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      doubleKeyMap0.put("", "", (Integer) null);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
