/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:52:04 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(2, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      realBufferedSource0.indexOf((byte)19, 0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      segmentedByteString0.rangeEquals((-1), byteArray0, 1, 224);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)0);
      // Undeclared exception!
      try { 
        segmentedByteString1.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      String string0 = "D2zq\\;?u_7dSG+z";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)22;
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, (-3295));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1272L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.md5();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(280375465082880L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(8, byteArray0, (-2), (-2));
      assertEquals(8, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      buffer0.indexOf((byte)3);
      ByteString.decodeBase64("xpr_U(,8KrG[");
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      boolean boolean0 = segmentedByteString0.equals(buffer0);
      assertFalse(boolean0);
      
      segmentedByteString0.hashCode();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      segmentedByteString1.equals((Object) null);
      // Undeclared exception!
      try { 
        segmentedByteString1.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      segmentedByteString0.write(outputStream0);
      segmentedByteString0.rangeEquals(7, (byte[]) null, 2972, 48);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      segmentedByteString0.write(pipedOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 3);
      assertEquals(3, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(2, (ByteString) segmentedByteString0, 2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.rangeEquals(31, (ByteString) segmentedByteString0, 2, 528);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1222L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      segmentedByteString0.write(buffer0);
      assertEquals(5L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1222L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      Object object0 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      segmentedByteString0.write(buffer0);
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = 0;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString2.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      segmentedByteString0.rangeEquals((-1006), (ByteString) segmentedByteString1, 0, (-1006));
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString((byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)2;
      boolean boolean0 = segmentedByteString0.rangeEquals(7, byteArray0, (-366), (int) (byte) (-117));
      assertEquals(2, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte byte0 = segmentedByteString0.getByte(1);
      assertEquals(2, segmentedByteString0.size());
      assertEquals((byte)100, byte0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)2;
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)1, byteArray0, 2705, (-3129));
      assertEquals(2, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)1, byteArray0, 2705, (-3129));
      assertTrue(boolean0);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      ByteString byteString0 = segmentedByteString0.sha1();
      buffer2.write(byteString0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer2, 2);
      segmentedByteString1.rangeEquals(60, (byte[]) null, 2972, 2394);
      ByteString byteString1 = ByteString.EMPTY;
      segmentedByteString0.equals(byteString1);
      segmentedByteString1.hashCode();
      segmentedByteString1.asByteBuffer();
      // Undeclared exception!
      try { 
        segmentedByteString1.substring(60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertEquals(2, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-735L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      byte byte0 = ObjectStreamConstants.TC_RESET;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)121;
      byteArray0[8] = (byte)121;
      boolean boolean0 = segmentedByteString0.rangeEquals(3, byteArray0, 3, (int) (byte)4);
      assertFalse(boolean0);
      assertEquals(8, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer1, 2);
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString2);
      assertEquals(2, segmentedByteString2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = segmentedByteString0.toString();
      assertEquals("[text=4d]", string0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString.decodeBase64("h");
      segmentedByteString0.rangeEquals(2, (ByteString) null, (-2331), (-1460));
      segmentedByteString0.toByteArray();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      ByteString byteString0 = segmentedByteString0.sha1();
      buffer2.write(byteString0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)69;
      int int0 = 0;
      segmentedByteString0.rangeEquals((-3758), byteArray0, 0, (int) (byte)23);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = segmentedByteString0.hmacSha256(byteString0);
      byteString2.startsWith(byteArray0);
      segmentedByteString0.equals(buffer1);
      segmentedByteString0.hashCode();
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("=7y[tF_wTId7SA#Gy", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1236L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.rangeEquals(2, (byte[]) null, 991, 31);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.equals(byteString1);
      segmentedByteString0.hashCode();
      segmentedByteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(2852);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }
}
