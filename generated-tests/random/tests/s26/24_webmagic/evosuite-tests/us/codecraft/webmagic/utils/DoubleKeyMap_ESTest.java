/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 10:36:40 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Map<Integer, String>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, String>();
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, "", "S! 0Ow31I");
      Map<String, String> map0 = doubleKeyMap0.remove((Map<Integer, String>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Integer>, Map<Integer, String>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Map<Integer, String>, Object>((Map<HashMap<String, Integer>, Map<Map<Integer, String>, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2833);
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0, class0);
      Map<String, Integer> map0 = doubleKeyMap0.get(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Map<Integer, String>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, String>();
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, "", "S! 0Ow31I");
      String string0 = doubleKeyMap0.remove((Map<Integer, String>) hashMap0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Map<Map<Integer, Object>, String>> hashMap0 = new HashMap<Integer, Map<Map<Integer, Object>, String>>();
      DoubleKeyMap<Integer, Map<Integer, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, Object>, String>(hashMap0);
      Integer integer0 = new Integer(0);
      HashMap<Map<Integer, String>, Map<Map<Map<Integer, Object>, String>, Object>> hashMap1 = new HashMap<Map<Integer, String>, Map<Map<Map<Integer, Object>, String>, Object>>();
      DoubleKeyMap<Map<Integer, String>, Map<Map<Integer, Object>, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, String>, Map<Map<Integer, Object>, String>, Object>(hashMap1);
      Map<Map<Integer, Object>, String> map0 = doubleKeyMap1.newMap();
      hashMap0.put(integer0, map0);
      HashMap<Integer, Map<String, Integer>> hashMap2 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Integer>(hashMap2);
      Map<Integer, Object> map1 = doubleKeyMap2.newMap();
      doubleKeyMap0.remove(integer0, map1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Map<Integer, String>, Object>, Map<Object, Integer>>, Object, HashMap<String, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Map<Integer, String>, Object>, Map<Object, Integer>>, Object, HashMap<String, Map<Integer, String>>>();
      Map<HashMap<Map<Integer, String>, Object>, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Map<Integer, String>, Object>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Integer, String>, Object>, Object, Integer>(map0);
      DoubleKeyMap<Object, String, HashMap<Integer, Object>> doubleKeyMap2 = new DoubleKeyMap<Object, String, HashMap<Integer, Object>>();
      HashMap<Integer, Object> hashMap0 = doubleKeyMap2.get((Object) doubleKeyMap1, "*h1");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0);
      Map<Integer, Object> map0 = doubleKeyMap0.newMap();
      HashMap<HashMap<Map<Integer, String>, String>, Map<Map<Integer, Object>, Object>> hashMap1 = new HashMap<HashMap<Map<Integer, String>, String>, Map<Map<Integer, Object>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Map<Integer, String>, String>, Map<Integer, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Integer, String>, String>, Map<Integer, Object>, Object>(hashMap1, class0);
      HashMap<Map<Integer, String>, String> hashMap2 = new HashMap<Map<Integer, String>, String>();
      HashMap<Map<Integer, Object>, Object> hashMap3 = new HashMap<Map<Integer, Object>, Object>();
      hashMap1.put(hashMap2, hashMap3);
      Object object0 = doubleKeyMap1.get(hashMap2, map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Map<Integer, Map<Integer, String>>, Map<Integer, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, Map<Integer, String>>, Map<Integer, Map<Integer, String>>>();
      Map<Integer, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>(map0);
      Map<Object, Map<Integer, String>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, String>(map1, class0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap2.remove((Object) hashMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Integer, String>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, String>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Map<Integer, String>, Object>, Map<Object, Integer>>, Object, HashMap<String, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Map<Integer, String>, Object>, Map<Object, Integer>>, Object, HashMap<String, Map<Integer, String>>>();
      Map<HashMap<Map<Integer, String>, Object>, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Map<Integer, String>, Object>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Integer, String>, Object>, Object, Integer>(map0);
      HashMap<Map<Integer, String>, Object> hashMap0 = new HashMap<Map<Integer, String>, Object>();
      Map<Object, Integer> map1 = doubleKeyMap1.remove(hashMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, String, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, HashMap<String, Integer>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      doubleKeyMap0.put((HashMap<Object, Object>) null, (String) null, hashMap0);
      HashMap<String, Integer> hashMap1 = doubleKeyMap0.put((HashMap<Object, Object>) null, "wrong proto type map ", (HashMap<String, Integer>) null);
      assertNull(hashMap1);
  }
}
