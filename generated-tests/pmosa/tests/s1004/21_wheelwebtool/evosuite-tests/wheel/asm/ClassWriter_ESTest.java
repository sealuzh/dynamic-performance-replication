/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 01:41:14 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2158));
      String string0 = "A@y'pU6j";
      classWriter0.visitInnerClass((String) null, (String) null, "A@y'pU6j", 0);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 7);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-303));
      classWriter0.visitSource("/", "/");
      // Undeclared exception!
      try { 
        classWriter0.newMethod("/", "/", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-589));
      classWriter0.newDouble((-589));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newFloat((-1.0F));
      classWriter0.thisName = "";
      double double0 = 216.0384090069996;
      Item item0 = classWriter0.newDouble(216.0384090069996);
      int int0 = 0;
      item0.hashCode = 285;
      item0.set(0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newClass("/_Ll]*dnmPki");
      Character character0 = new Character(';');
      Character.compare('Y', 'Y');
      Character.isSurrogate('C');
      classWriter0.newConst(character0);
      classWriter0.newMethodItem("r tdZ9C62sTIwA_Eg'", "r tdZ9C62sTIwA_Eg'", "r tdZ9C62sTIwA_Eg'", true);
      classWriter0.newDouble((-2027.989140072456));
      classWriter0.visitSource("/_Ll]*dnmPki", "r tdZ9C62sTIwA_Eg'");
      classWriter0.visitSource("r tdZ9C62sTIwA_Eg'", "/_Ll]*dnmPki");
      Integer integer0 = new Integer((-1268));
      classWriter0.visitField(0, "SourceFile", "/_Ll]*dnmPki", "/_Ll]*dnmPki", integer0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("SourceFile", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(9, (-1571));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-2555);
      ClassWriter classWriter0 = new ClassWriter((-2555));
      Item item0 = classWriter0.key3;
      Item item1 = classWriter0.key;
      // Undeclared exception!
      try { 
        classWriter0.newConst(item1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@2
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(503);
      classWriter0.newNameType("d\"o9{p%#E5yK}T", "d\"o9{p%#E5yK}T");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.toByteArray();
      System.setCurrentTimeMillis(9);
      Item item0 = classWriter0.newClassItem(",KJ`J_{J&");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-589));
      Item item0 = classWriter0.newLong(2854L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1002));
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-1002), "", "", "tv?peji{", (String[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitOuterClass("-", (String) null, "The filters must not be null");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("-", "-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '-.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3208);
      classWriter0.toByteArray();
      int int0 = classWriter0.newField("The FilenameFilter must not be null", "The FilenameFilter must not be null", "The FilenameFilter must not be null");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2027);
      classWriter0.visitEnd();
      classWriter0.visitOuterClass("%h$2nb,1SH", "%h$2nb,1SH", "%h$2nb,1SH");
      classWriter0.newField("%h$2nb,1SH", "", "");
      Character character0 = new Character('A');
      classWriter0.visitField(6, "wheel.asm.MethodWriter", "wheel.asm.MethodWriter", "T'Pd|TiXGk'Ms'>", character0);
      classWriter0.visitOuterClass("boolean", "%h$2nb,1SH", "");
      classWriter0.newClassItem("%h$2nb,1SH");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ":>55gB+:Tm$Z!+7J4";
      stringArray0[3] = "xB8]X3o2S o>49";
      stringArray0[4] = "%h$2nb,1SH";
      stringArray0[5] = "%h$2nb,1SH";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(6, "T'Pd|TiXGk'Ms'>", "", ":>55gB+:Tm$Z!+7J4", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(998);
      classWriter0.visitOuterClass("Al_}F8\"Y?^", "Al_}F8\"Y?^", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(916);
      classWriter0.visitField(916, "9SypA+^", "7+h#6/F{O|cF@t^^", "9SypA+^", "9SypA+^");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9SypA+^";
      stringArray0[1] = "";
      classWriter0.visitMethod(916, "", "9SypA+^", "7+h#6/F{O|cF@t^^", stringArray0);
      classWriter0.visitEnd();
      classWriter0.newNameType("9SypA+^", "7+h#6/F{O|cF@t^^");
      Item item0 = classWriter0.newFloat(916);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = "";
      Item[] itemArray0 = new Item[4];
      int int1 = 0;
      classWriter0.newInteger(0);
      Item item0 = classWriter0.key3;
      itemArray0[0] = item0;
      Item item1 = classWriter0.newDouble((-1358.393823925156));
      itemArray0[1] = item1;
      Item item2 = classWriter0.newDouble(0);
      itemArray0[2] = item2;
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1746);
      Item[] itemArray0 = new Item[9];
      Item item0 = classWriter0.newDouble(0.0);
      itemArray0[0] = item0;
      Item item1 = classWriter0.newFieldItem("", "", "hMWpM");
      itemArray0[1] = item1;
      Item item2 = classWriter0.newDouble(0.0);
      itemArray0[2] = item2;
      Item item3 = new Item(0);
      itemArray0[3] = item3;
      Item item4 = classWriter0.key2;
      itemArray0[4] = item4;
      Item item5 = classWriter0.newMethodItem("", "1:+i~i\"]2P", "1:+i~i\"]2P", true);
      itemArray0[5] = item5;
      Item item6 = classWriter0.newClassItem("");
      itemArray0[6] = item6;
      Item item7 = classWriter0.newMethodItem("", "suqQc`? *<;i", "", false);
      itemArray0[7] = item7;
      Character character0 = new Character('k');
      Item item8 = classWriter0.newConstItem(character0);
      itemArray0[8] = item8;
      classWriter0.typeTable = itemArray0;
      String string0 = null;
      String string1 = "Class not found";
      // Undeclared exception!
      try { 
        classWriter0.newMethod("Nclz8a{(e;Qd", (String) null, "Class not found", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      classWriter0.visitEnd();
      classWriter0.visitInnerClass("The list of names must not be null", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", 3583);
      classWriter0.index = 3583;
      classWriter0.newMethod("", "NKYNS1'jP4Kht$WN{", "NKYNS1'jP4Kht$WN{", true);
      Item[] itemArray0 = new Item[6];
      Item item0 = classWriter0.newLong(1635L);
      itemArray0[0] = item0;
      Item item1 = classWriter0.newLong(3583);
      itemArray0[1] = item1;
      Item item2 = classWriter0.key2;
      itemArray0[2] = item2;
      Item item3 = classWriter0.key3;
      itemArray0[3] = item3;
      Item item4 = classWriter0.key;
      itemArray0[4] = item4;
      Item item5 = classWriter0.newFloat(1635L);
      itemArray0[5] = item5;
      classWriter0.typeTable = itemArray0;
      classWriter0.visitSource("}", "}");
      classWriter0.newLong(3583);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3208);
      classWriter0.index = 3208;
      Item item0 = classWriter0.newFloat(3056.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4627);
      System.setCurrentTimeMillis(4627);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "Depeck]ed";
      stringArray0[2] = null;
      stringArray0[3] = "Depeck]ed";
      stringArray0[4] = null;
      stringArray0[6] = null;
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        classWriter0.visit(4627, 2, "Depeck]ed", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-843));
      classWriter0.newMethodItem("wheel.asm.ClassWriter", "", "Signature", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "wax=`P";
      stringArray0[3] = "'b";
      stringArray0[4] = "Signature";
      stringArray0[5] = "Deprecated";
      classWriter0.visit(0, 0, "wax=`P", "Deprecated", "'b", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1283);
      classWriter0.typeTable = null;
      String string0 = "RuntimeInvisibleAnnotations";
      classWriter0.addUninitializedType("RuntimeInvisibleAnnotations", 1283);
      classWriter0.newInteger(0);
      String string1 = "pF";
      // Undeclared exception!
      try { 
        classWriter0.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3197);
      classWriter0.toByteArray();
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newInteger(0);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newFloat(509.97F);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3208);
      Type type0 = Type.DOUBLE_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1283);
      classWriter0.typeTable = null;
      Item item0 = classWriter0.key3;
      Item item1 = classWriter0.key;
      Type type0 = Type.LONG_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      Item item2 = classWriter0.newFloat(5);
      assertNotNull(item2);
      assertNotSame(item2, item0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-3539);
      ClassWriter classWriter0 = new ClassWriter((-3539));
      Attribute attribute0 = null;
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3219);
      classWriter0.toByteArray();
      classWriter0.visitAnnotation("", true);
      Item item0 = classWriter0.newInteger(3219);
      Item item1 = classWriter0.newFloat(513.4638F);
      Item item2 = classWriter0.newInteger(3219);
      assertSame(item2, item0);
      assertNotSame(item2, item1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2158));
      classWriter0.visitSource("H7pwp5", (String) null);
      classWriter0.visitInnerClass((String) null, (String) null, "", 0);
      Item item0 = classWriter0.newInteger(0);
      classWriter0.visitSource((String) null, (String) null);
      Item item1 = classWriter0.newClassItem("=qd,8):Qy=7GwNDl;%");
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.addType("Leod}(}i*");
      assertEquals(1, int0);
      
      int int1 = classWriter0.newMethod("Leod}(}i*", "Leod}(}i*", "Leod}(}i*", false);
      assertEquals(4, int1);
      
      classWriter0.addType("Leod}(}i*");
      int int2 = classWriter0.newConst("Leod}(}i*");
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-953));
      Boolean boolean0 = new Boolean("double");
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3208);
      classWriter0.newUTF8("");
      classWriter0.newFloat(3208);
      Item item0 = classWriter0.newFloat(3208);
      Item item1 = classWriter0.newClassItem("");
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassWriter classWriter0 = new ClassWriter((-589));
      String[] stringArray0 = new String[0];
      classWriter0.visit(3058, (byte)6, "=G@L", (String) null, (String) null, stringArray0);
      Item item0 = classWriter0.newConstItem("/");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter((-549));
      classWriter0.visitSource("/", "/");
      classWriter0.newConst("/");
      classWriter0.newField("/", "/", "/");
      classWriter0.visitOuterClass("/", "/", "");
      classWriter0.visitOuterClass("/", "/", "/");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1283);
      classWriter0.typeTable = null;
      classWriter0.visitInnerClass("\"e0ov)0eXzof", "double", "\"e0ov)0eXzof", 42);
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.newConst("QruDl");
      classWriter0.visitInnerClass("Deprecated", "Ljava/lang/Synthetic;", "EnclosingMethod", 1);
      Item item0 = classWriter0.newInteger(220);
      Item item1 = new Item(101, item0);
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-589));
      int int0 = classWriter0.newMethod("?:", "?:", "value ", true);
      assertEquals(5, int0);
      
      classWriter0.addUninitializedType("", (-589));
      int int1 = classWriter0.addUninitializedType("value ", 5);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      String[] stringArray0 = new String[0];
      classWriter0.visit((-1), (-1), "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", stringArray0);
      classWriter0.visitOuterClass("", "~ _=g<", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3833));
      classWriter0.visit((-3833), (-3833), "", "", "SourceFile", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3208);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.valueOf("RuntimeVisibleAnnotations");
      classWriter0.newConstItem(boolean1);
      classWriter0.visitOuterClass("RuntimeVisibleAnnotations", "", "n7^ ++Oz#");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter((-549));
      classWriter0.visitSource("/", "/");
      classWriter0.newConst("/");
      classWriter0.newField("/", "/", "/");
      classWriter0.visitOuterClass("/", "/", "");
      classWriter0.visitOuterClass("Synthetic", (String) null, "/");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3208);
      classWriter0.getCommonSuperClass("wheel.asm.MethodWriter", "wheel.asm.MethodWriter");
      classWriter0.newUTF8("8R+i:EV");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-953));
      Item item0 = classWriter0.newConstItem("The list of names must not be null");
      Item item1 = classWriter0.newConstItem("The list of names must not be null");
      assertSame(item1, item0);
      
      int int0 = classWriter0.addUninitializedType("", (-403));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.newFieldItem("", "", "EnclosingMethod");
      classWriter0.getCommonSuperClass("wheel.asm.Label", "wheel.asm.MethodWriter");
      ClassWriter classWriter1 = new ClassWriter(47);
      // Undeclared exception!
      try { 
        classWriter1.getMergedType(1032, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3196);
      classWriter0.newMethod(",':", ",':", ",':", true);
      classWriter0.newMethod(",':", ",':", ",':", true);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(4, "RuntimeVisibleAnnotations", "", "", ",':");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3208);
      classWriter0.firstField = null;
      classWriter0.getCommonSuperClass("wheel.asm.MethodWriter", "wheel.asm.MethodWriter");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      int int0 = classWriter0.newUTF8("8R+i:EV");
      int int1 = classWriter0.addUninitializedType("", 3208);
      assertTrue(int1 == int0);
      
      Item item0 = classWriter0.newFieldItem("D(R5#I]V5q", "g`)z", "oc`");
      assertNotNull(item0);
      
      int int2 = classWriter0.addUninitializedType("", 3208);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2867));
      classWriter0.addType("org.apache.commons.io.filefilter.CanReadFileFilter");
      String[] stringArray0 = new String[0];
      classWriter0.visit((-985), (-985), "", "", "f,Ck3?b.ac6p`5/t]~", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@5f40d597
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.newFieldItem("wheel.asm.MethodWriter", "wheel.asm.MethodWriter", "wheel.asm.MethodWriter");
      classWriter0.newFieldItem("wheel.asm.MethodWriter", "wheel.asm.MethodWriter", "wheel.asm.MethodWriter");
      classWriter0.getCommonSuperClass("wheel.asm.Label", "wheel.asm.MethodWriter");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2586, (-2438));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(25);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "wheel.asm.ClassReader");
      assertEquals("java/lang/Object", string0);
  }
}
