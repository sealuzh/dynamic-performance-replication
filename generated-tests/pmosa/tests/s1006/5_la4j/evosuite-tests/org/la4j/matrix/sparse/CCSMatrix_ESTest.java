/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:51:35 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(68, 68);
      cCSMatrix0.nonZeroIteratorOfColumn(68);
      cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.minInColumn((-1158));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(28, (-959));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 28x-959
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 169;
      doubleArray0[1] = (double) 169;
      CCSMatrix cCSMatrix0 = new CCSMatrix(169, 169, 10, doubleArray0, (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfColumns(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 4378;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4378, 0);
      cCSMatrix0.setAll((-1805.0));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformColumn(4378, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4378
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(21, 21);
      Matrix matrix0 = cCSMatrix0.copyOfRows(21);
      cCSMatrix0.columnMajorIterator();
      assertTrue(cCSMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(Double.POSITIVE_INFINITY);
      org.evosuite.runtime.Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-258L));
      mockRandom0.setSeed(0L);
      mockRandom0.longs(2373L);
      // Undeclared exception!
      try { 
        CCSMatrix.random(2710, 2710, (double) 2710, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 277;
      doubleArray0[1] = (double) 277;
      doubleArray0[2] = (double) 277;
      doubleArray0[3] = (double) 2438;
      int[] intArray0 = new int[1];
      intArray0[0] = 277;
      int[] intArray1 = new int[4];
      intArray1[0] = 2438;
      intArray1[1] = 2438;
      intArray1[2] = 277;
      intArray1[3] = 2438;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2438, 277, 2438, doubleArray0, intArray0, intArray1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.each(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-34);
      byteArray0[0] = (byte) (-34);
      byte byte1 = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byte byte2 = (byte)3;
      byteArray0[2] = (byte)3;
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte4 = (byte) (-24);
      byteArray0[4] = (byte) (-24);
      byte byte5 = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-4231));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2214, 2214, 0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroIteratorOfColumn(2214);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      int int0 = (-2862);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2862);
      doubleArray0[4] = (double) (-2862);
      doubleArray0[5] = (double) (-2862);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        cCSMatrix0.set(0, 2396, (-2862.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[1];
      MockRandom mockRandom0 = new MockRandom((-136L));
      Matrix.randomSymmetric(0, mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix1.setAll(0.0);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[2];
      intArray0[0] = 598;
      intArray0[1] = 598;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '598' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4399);
      cCSMatrix0.minInColumn(24);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(4399, 24);
      cCSMatrix1.toBinary();
      int[] intArray0 = new int[5];
      intArray0[0] = 1297;
      intArray0[1] = 4399;
      intArray0[2] = 24;
      intArray0[3] = 4399;
      intArray0[4] = 4399;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2214;
      int int1 = 5370;
      int int2 = 1;
      double double0 = (-2838.8973255105);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(5370, 1, (-2838.8973255105));
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix1 = DenseMatrix.identity(1);
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix1, denseMatrix1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix1.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix1, denseMatrix0, denseMatrix0, denseMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(78, 13, 13);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 41;
      doubleArray1[1] = (double) 78;
      doubleArray1[2] = (double) 13;
      Matrix.from2DArray(doubleArray0);
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 13;
      doubleArray2[1] = (double) 41;
      doubleArray2[2] = (double) 78;
      doubleArray2[3] = (double) 41;
      doubleArray2[4] = (double) 13;
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix1.infinityNorm();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(1878, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1878
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-2862);
      doubleArray1[4] = (double) (-2862);
      doubleArray1[5] = (double) (-2862);
      doubleArray1[6] = (double) (-2862);
      doubleArray1[7] = (double) (-2862);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix1.setAll((-98.85));
      cCSMatrix1.toDenseMatrix();
      cCSMatrix0.setAll(2261.65917392);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn((-2862), (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2862
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 12;
      int int1 = 1;
      int int2 = 262;
      int int3 = 448;
      SparseVector sparseVector0 = SparseVector.zero(262, 448);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 262);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, 0.0);
      Matrix matrix1 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, matrix1, matrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 8);
      cCSMatrix0.setAll(8);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32, 32);
      Matrix matrix0 = cCSMatrix0.copyOfShape(32, 3);
      assertEquals(3, matrix0.columns());
      assertEquals(32, matrix0.rows());
      assertEquals(32, cCSMatrix0.columns());
      assertEquals(32, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, (-5350));
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(1, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      int int0 = (-2862);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2862);
      doubleArray0[4] = (double) (-2862);
      doubleArray0[5] = (double) (-2862);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        cCSMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2337, 2337);
      Object object0 = new Object();
      cCSMatrix0.iteratorOfColumn(2337);
      cCSMatrix0.toSparseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1564, vectorProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("");
      cCSMatrix1.select((int[]) null, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero((int) (byte)48, 2723);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.maxInColumn((byte)48);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(3, 9);
      sparseVector0.toDiagonalMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 12;
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 12;
      intArray0[3] = 12;
      CCSMatrix cCSMatrix0 = new CCSMatrix(9, 12, 7, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2337, 2337);
      Object object0 = new Object();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(326);
      cCSMatrix1.getRow(2733);
      cCSMatrix0.blankOfShape(2693, (-2539));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 5;
      int int1 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 8, 5);
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)5).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow((-312), vectorAccumulator0);
      mockRandom0.longs(142L);
      mockRandom0.nextInt();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorAccumulator1).accumulate();
      cCSMatrix0.foldNonZeroInRow(0, vectorAccumulator1);
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 2, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)5).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow((-312), vectorAccumulator0);
      cCSMatrix0.toBinary();
      mockRandom0.longs(142L);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertEquals(10, cCSMatrix1.rows());
      
      cCSMatrix0.setAll(Double.POSITIVE_INFINITY);
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 248, 2);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(248, 2, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[11];
      intArray0[0] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom((-136L));
      Matrix.randomSymmetric(0, mockRandom0);
      cCSMatrix0.copyOfRows(0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      int int0 = 891;
      cCSMatrix0.toDenseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInRow(Integer.MAX_VALUE, vectorProcedure0);
      cCSMatrix0.updateAt(891, 9, matrixFunction0);
      cCSMatrix0.blankOfShape(0, 9);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(9, 834, matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 834
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2732);
      Double double0 = new Double(2732);
      cCSMatrix0.nonZeroIteratorOfColumn(1530);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2710;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2261.65917392;
      doubleArray0[3] = (double) 2710;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 2710, doubleArray0);
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(0, 0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      cCSMatrix1.toRowVector();
      DenseVector.zero(1);
      cCSMatrix1.iteratorOrNonZeroColumns();
      cCSMatrix1.min();
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(2710);
      cCSMatrix2.getRow(0);
      cCSMatrix2.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2290, 2);
      cCSMatrix0.setAll(2);
      cCSMatrix0.getRow(1031);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(8.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(8.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      VectorIterator vectorIterator0 = cCSMatrix0.iteratorOfColumn(8);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(8.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2732);
      Double double0 = new Double(2732);
      cCSMatrix0.equals((Object) double0);
      cCSMatrix0.maxInColumn(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZeroInRow(71, vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 71);
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double double1 = (-1.0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator1).accumulate();
      double double2 = cCSMatrix0.foldNonZeroInRow(71, vectorAccumulator1);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      int int1 = 2;
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 2, (-1805.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2214, 2214, 18);
      assertEquals(2214, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(2214, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.nonZeroIteratorOfColumn(2214);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(9, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 7, 5);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)5).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZeroInRow((-312), vectorAccumulator0);
      assertEquals(5.0, double0, 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      LongStream longStream0 = mockRandom0.longs((long) 5);
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorAccumulator1).accumulate();
      double double1 = cCSMatrix0.foldNonZeroInRow(0, vectorAccumulator1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      double double2 = cCSMatrix0.maxInColumn(5);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(917, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 917
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(142L);
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)0, (byte)48);
      assertEquals(48, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZeroInRow(3, vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(48, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      int int1 = (-1734);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1734), 2173, (double) (byte)0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1734x2173
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4385);
      cCSMatrix0.minInColumn(1308);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4352).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(4352, 1308, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      assertNotNull(cCSMatrix0);
      
      doubleArray0[0] = (double) 2383;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2383;
      doubleArray0[3] = (double) 2211;
      doubleArray0[4] = (double) 2211;
      doubleArray0[5] = (double) 2211;
      doubleArray0[6] = (double) 2211;
      doubleArray0[7] = (double) 2383;
      doubleArray0[8] = (double) 0;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      assertEquals(9, cCSMatrix1.columns());
      assertEquals(2383.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.7777777777777778, cCSMatrix1.density(), 0.01);
      assertEquals(35, cCSMatrix1.cardinality());
      assertEquals(5, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotNull(cCSMatrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix1.foldNonZeroInRow(1, vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, cCSMatrix1.columns());
      assertEquals(2383.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.7777777777777778, cCSMatrix1.density(), 0.01);
      assertEquals(35, cCSMatrix1.cardinality());
      assertEquals(5, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(1);
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertEquals(1.0, cCSMatrix2.density(), 0.01);
      assertEquals(1, cCSMatrix2.cardinality());
      assertEquals(1, cCSMatrix2.columns());
      assertEquals(1.0, cCSMatrix2.max(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(1, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotNull(cCSMatrix2);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        cCSMatrix2.blankOfShape((-1946), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1946x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(78, 13, 13);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(78, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(13, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfShape(41, 0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(78, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(13, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(41, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      ColumnMajorSparseMatrix.diagonal(59, 13);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(214.4547078590332, (double)78, 969.0052697163, (double)41, (double)13).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.blankOfShape(13, 1703);
      cCSMatrix0.copyOfShape(13, 41);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3794, 676.4758601475854);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(24, 24, matrixFunction0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      LinearSystemSolver linearSystemSolver0 = cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.cardinality());
      assertEquals(5, linearSystemSolver0.unknowns());
      assertEquals(5, linearSystemSolver0.equations());
      assertNotNull(linearSystemSolver0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom0.nextInt();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0, int0);
      assertNotSame(mockRandom0, mockRandom1);
      
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.cardinality());
      assertNotNull(iterator0);
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.cardinality());
      
      double double1 = cCSMatrix0.max();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(78);
      RowMajorSparseMatrix.zero(78, 78, 78);
      cCSMatrix0.setColumn(4, 24.0);
      CCSMatrix.fromMatrixMarket("lX/+<I<D9*");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(78);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.setColumn(26, (double) 26);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      CCSMatrix cCSMatrix1 = new CCSMatrix(26, 13);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 12);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toDiagonalMatrix();
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 17, 17);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1, vectorFunction0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 40);
      assertEquals(1, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toDiagonalMatrix();
      assertEquals(1, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(1, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-503.2278889138003), 0.5).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1, vectorFunction0);
      assertEquals(1, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals((-503.2278889138003), cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(0.5, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2732);
      Double double0 = new Double(2732);
      cCSMatrix0.maxInColumn(860);
      cCSMatrix0.eachInColumn(860, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      int int0 = 2469;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(33, 2469, doubleArray0);
      cCSMatrix0.toRowMajorSparseMatrix();
      double double0 = Double.POSITIVE_INFINITY;
      int int1 = 22;
      cCSMatrix0.setColumn(int1, double0);
      double double1 = 3223.369867586673;
      Double double2 = new Double(double1);
      int int2 = 17;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int2, int0);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4385, 4385, 4385);
      cCSMatrix0.minInColumn(8);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(35);
      cCSMatrix0.minInColumn(12);
      int[] intArray0 = new int[9];
      intArray0[0] = 12;
      intArray0[1] = 35;
      intArray0[2] = 35;
      intArray0[3] = 35;
      intArray0[4] = 77;
      intArray0[5] = 35;
      intArray0[6] = 12;
      intArray0[7] = 35;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(8, vectorAccumulator0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(277);
      cCSMatrix1.blankOfShape(35, (-1147));
      int int0 = (-413);
      CCSMatrix.identity(int0);
      String string0 = "14\\G%rnOiXu";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(736);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.copyOfShape(736, 8);
      cCSMatrix0.minInColumn(1172);
      double[][] doubleArrayArray0 = null;
      CCSMatrix.from2DArray(doubleArrayArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 12);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      MockRandom mockRandom0 = new MockRandom(12);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      Matrix matrix1 = cCSMatrix0.insert(matrix0);
      CCSMatrix.block(matrix1, cCSMatrix0, cCSMatrix0, matrix1);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(1, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 12;
      int int1 = 35;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(35);
      cCSMatrix0.minInColumn(12);
      cCSMatrix0.rank();
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRow(intArray0[0], vectorAccumulator0);
      intArray0[1] = int1;
      intArray0[2] = int1;
      intArray0[3] = int1;
      int int2 = 77;
      intArray0[4] = int2;
      intArray0[5] = int1;
      intArray0[6] = int0;
      int int3 = 75;
      cCSMatrix0.getRow(int3);
      intArray0[7] = int1;
      cCSMatrix0.select(intArray0, intArray0);
      int int4 = (-2729);
      cCSMatrix0.getColumn(int4);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(78);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.setColumn(26, (double) 26);
      cCSMatrix0.maxInColumn(4);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2383;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2383;
      doubleArray0[3] = (double) 2211;
      doubleArray0[4] = (double) 2211;
      doubleArray0[5] = (double) 2211;
      doubleArray0[6] = (double) 2211;
      doubleArray0[7] = (double) 2383;
      doubleArray0[8] = (double) 2383;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.rank();
      Matrix.unit(2383, (-1505));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRows(vectorAccumulator0);
      Double double0 = new Double(doubleArray0[1]);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SparseMatrix.diagonal(3, 3);
      cCSMatrix0.forEach(consumer0);
      int int1 = 17;
      cCSMatrix0.blankOfColumns(17);
      int int2 = Integer.MAX_VALUE;
      cCSMatrix0.getRow(Integer.MAX_VALUE);
      org.evosuite.runtime.Random.setNextRandom(3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfRows(1679);
      cCSMatrix0.eachNonZeroInColumn(Integer.MAX_VALUE, vectorProcedure0);
      int int3 = 1;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, int3);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInRow(int0, vectorProcedure1);
      int[] intArray0 = new int[3];
      int int4 = 1203;
      intArray0[0] = int4;
      intArray0[1] = int2;
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix2 = cCSMatrix0.to(matrixFactory0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.foldColumns(vectorAccumulator0);
      cCSMatrix0.columnMajorIterator();
      intArray0[2] = int1;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(78, 78, 78);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.setColumn(26, (double) 26);
      CCSMatrix.fromMatrixMarket("Can not remove from this iterator.");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4399);
      cCSMatrix0.minInColumn(12);
      Matrix matrix0 = cCSMatrix0.copyOfRows(1171);
      cCSMatrix0.insert(matrix0, (-996), 4399);
      int int0 = 4422;
      CCSMatrix.identity(int0);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 19;
      int int1 = 17;
      SparseVector sparseVector0 = SparseVector.zero(19, 17);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2383;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2383;
      doubleArray0[3] = (double) 2383;
      doubleArray0[5] = (double) 2383;
      doubleArray0[6] = (double) 2383;
      doubleArray0[8] = (double) 2383;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.rank();
      Matrix.unit(2383, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte byte0 = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2723);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2723;
      doubleArray0[1] = (double) (byte)48;
      doubleArray0[2] = (double) (byte)48;
      doubleArray0[3] = (double) (-1890);
      doubleArray0[4] = (double) (-1890);
      doubleArray0[5] = (double) (byte)48;
      doubleArray0[6] = (double) (byte)48;
      doubleArray0[7] = (double) (byte)48;
      doubleArray0[8] = (double) (byte)48;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, sparseVector0);
      cCSMatrix0.setRow((-1890), vector0);
      byteArray0[3] = byte0;
      CCSMatrix.fromBinary(byteArray0);
      int int0 = 4370;
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(36);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(36, 36);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 36;
      doubleArray0[4] = (-1313.5308948683753);
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(37, 36, doubleArray0);
      CCSMatrix.block(matrix0, rowMajorSparseMatrix0, cCSMatrix1, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)48;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4399);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(13, vectorFunction0);
      double double0 = new Integer(24);
      CCSMatrix.zero(4399, 24);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 24;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4385);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.minInColumn(int0);
      int int1 = 102;
      int int2 = 1496;
      CCSMatrix.zero(int1, int2, int1);
      int int3 = 1104;
      cCSMatrix0.getColumn(int3);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.set(1, 1, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 24;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4385);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4385, (-98.85), (-98.85), (-98.85)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.minInColumn(int0);
      double[][] doubleArrayArray0 = null;
      CCSMatrix.from2DArray(doubleArrayArray0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(2, 2);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      cCSMatrix0.setAll(6);
      cCSMatrix0.minInColumn(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(3, vectorAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(6, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.setColumn((-583), vector0);
      cCSMatrix0.copyOfShape(1442, 1442);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 12;
      int int1 = 30;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      CCSMatrix cCSMatrix0 = new CCSMatrix(12, 12);
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      SparseVector sparseVector1 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector1.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(7, 7);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 1;
      SparseVector sparseVector0 = SparseVector.zero(1, 23);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 1, 23);
      cCSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '23' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1, 12);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(16, 1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }
}
