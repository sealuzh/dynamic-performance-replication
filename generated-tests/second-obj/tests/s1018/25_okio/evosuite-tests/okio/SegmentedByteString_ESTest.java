/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:47:06 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentedByteString;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null, (-2750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)26;
      segmentedByteString0.rangeEquals((-4720), byteArray0, (int) (byte)26, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 1384);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      buffer1.writeIntLe(2650);
      ByteString.decodeBase64("7^bwc=^s!");
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.rangeEquals((-3678), (ByteString) segmentedByteString0, 0, (-3678));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      segmentedByteString0.write(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer4 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer4, (byte)15);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      segmentedByteString0.rangeEquals((int) (byte)15, byteArray0, (int) (byte)0, (int) (byte)15);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((byte)113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=15 offset=113 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      buffer3.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource0.buffer();
      realBufferedSource0.toString();
      int int0 = 31;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer3, 31);
      byte byte0 = (byte) (-89);
      segmentedByteString0.write(realBufferedSource0.buffer);
      segmentedByteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((Source) realBufferedSource0, (long) 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      buffer3.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource0.buffer();
      realBufferedSource0.toString();
      int int0 = 31;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer3, 31);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      segmentedByteString0.write(realBufferedSource0.buffer);
      segmentedByteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((Source) realBufferedSource0, (long) 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 31);
      byte[] byteArray0 = new byte[6];
      segmentedByteString0.sha256();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = segmentedByteString0.hex();
      assertEquals("587935755f512d68743b356d416821645f37587935755f512d68743b356d41", string0);
      
      byte byte0 = segmentedByteString0.getByte(2);
      assertEquals(31, segmentedByteString0.size());
      assertEquals((byte)53, byte0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 31);
      boolean boolean0 = segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      assertTrue(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = segmentedByteString0.hex();
      assertEquals("587935755f512d68743b356d416821645f37587935755f512d68743b356d41", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource1.buffer;
      Buffer buffer3 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer4 = buffer3.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      realBufferedSource0.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer3, 31);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      segmentedByteString0.hashCode();
      assertEquals(31, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.readUtf8CodePoint();
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource0.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 1);
      ByteString byteString0 = segmentedByteString0.sha256();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.buffer.readString(charset0);
      ByteString.encodeUtf8("Xy5u_Q-ht;5mAh!d_7");
      boolean boolean0 = segmentedByteString0.rangeEquals(724, byteString0, (-565), (-565));
      assertEquals(1, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 31);
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      boolean boolean0 = segmentedByteString0.endsWith(byteString0);
      assertFalse(boolean0);
      
      segmentedByteString0.rangeEquals(31, byteString0, (int) (byte)0, 31);
      String string0 = segmentedByteString0.hex();
      assertEquals("587935755f512d68743b356d416821645f37587935755f512d68743b356d41", string0);
      assertEquals(31, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource1.buffer;
      Buffer buffer3 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer4 = buffer3.writeUtf8("Xy5u_Q-ht;s5mAh!d_7");
      realBufferedSource1.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      realBufferedSource0.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer3, 31);
      segmentedByteString0.write(buffer0);
      realBufferedSource0.close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      segmentedByteString0.rangeEquals(1, byteArray0, (int) (byte)41, 13);
      Charset.defaultCharset();
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.equals(buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(31, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer0.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer3 = buffer2.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      buffer3.readShort();
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      String string0 = realBufferedSource0.toString();
      assertEquals("buffer([text=5u_Q-ht;5mAh!d_7Xy5u_Q-ht;5mAh!d_7])", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xy5u_Q-ht;5mAh!d_7");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 1);
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      ByteString byteString0 = ByteString.of(byteBuffer0);
      buffer1.rangeEquals((long) (byte) (-10), byteString0);
      ByteString.encodeUtf8("buffer([text=5u_Q-ht;5mAh!d_7Xy5u_Q-ht;5mAh!d_7])");
      boolean boolean0 = segmentedByteString0.endsWith(byteString0);
      assertEquals(1, byteBuffer0.position());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer2 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource1.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      int int0 = 21;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 21);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource0.close();
      byte byte0 = (byte) (-125);
      byte byte1 = (byte)41;
      Charset.defaultCharset();
      ByteString byteString0 = realBufferedSource1.readByteString();
      segmentedByteString0.equals(byteString0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer0, (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=13
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer3 = buffer2.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource1.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer3);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 31);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      realBufferedSource0.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals(31, byteArrayOutputStream0.size());
      
      segmentedByteString0.hashCode();
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteArray0, 31, (-80));
      Charset.defaultCharset();
      segmentedByteString0.toAsciiUppercase();
      boolean boolean1 = segmentedByteString0.equals("Xy5u_Q-ht;5mAh!d_7");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer3 = buffer2.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer4 = realBufferedSource1.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer3);
      realBufferedSource0.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 31);
      segmentedByteString0.write(buffer0);
      realBufferedSource0.readByte();
      realBufferedSource0.close();
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.hashCode();
      byteArray0[0] = (byte)13;
      segmentedByteString0.rangeEquals(11, byteArray0, (-1), (int) (byte)13);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("8|bi/feWPvVIWjo/S/U", charset0);
      segmentedByteString0.equals(buffer4);
      assertEquals(31L, buffer0.size());
      assertEquals(31, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      Buffer buffer3 = buffer2.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource1.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer3);
      int int0 = 31;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 31);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource0.close();
      byte byte0 = (byte) (-125);
      byte byte1 = (byte)41;
      Charset.defaultCharset();
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.equals(byteString0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=13
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      buffer3.writeUtf8("Xy5u_Q-ht;5mAh!d_7");
      realBufferedSource0.buffer();
      realBufferedSource0.toString();
      buffer3.clone();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer3, 30);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer3, 30);
      segmentedByteString1.write(realBufferedSource0.buffer);
      Buffer buffer4 = new Buffer();
      buffer4.write((Source) buffer0, 0L);
      Buffer buffer5 = realBufferedSource0.buffer;
      OutputStream outputStream0 = buffer5.outputStream();
      buffer1.write((Source) buffer2, (-143L));
      segmentedByteString1.internalArray();
      segmentedByteString0.equals(segmentedByteString1);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      segmentedByteString1.equals("Xy5u_Q-ht;5mAh!d_7");
      segmentedByteString0.write(outputStream0);
      assertEquals(66L, buffer3.completeSegmentByteCount());
      assertEquals(96L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.writeByte(730);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = buffer1.writeUtf8("Xy5u_Q-ht;5mAh!d_G7");
      Segment segment0 = realBufferedSource1.buffer.writableSegment(730);
      buffer2.head = segment0;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      // Undeclared exception!
      try { 
        realBufferedSource2.toString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }
}
