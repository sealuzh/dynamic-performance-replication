/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:47:19 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(890);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1085), ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Label offset position has not been resolved yet", "zMSP?/r", "i[ejYpOA~6E0rDZY", "Label offset position has not been resolved yet");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "a9", (String) null, "}T,QdP7~X", "[4I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-261), "*", "wheel.asm.MethodWriter", (String) null, (Object) null);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(890);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1085), ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", (Object) null);
      fieldWriter0.visitAnnotation(",~r.[Lw6U{cW@s", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(890);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1085), ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", (Object) null);
      fieldWriter0.visitAnnotation(",~r.[Lw6U{cW@s", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1142));
      String[] stringArray0 = new String[0];
      classWriter0.visit((-1142), 67, "", "w/%I}q%", "K>ItZl\">P_:6FgOAK", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2188), "", "", "", "");
      ByteVector byteVector0 = new ByteVector(182);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(890);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1085), ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", (Object) null);
      fieldWriter0.visitAnnotation(",~r.[Lw6U{cW@s", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1289));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2065, "U>Dz", "ConstantValue", (String) null, (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(55, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1142));
      String[] stringArray0 = new String[0];
      classWriter0.visit((-1142), 67, "", "w/%I}q%", "K>ItZl\">P_:6FgOAK", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2188), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(890);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1085), ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", ",~r.[Lw6U{cW@s", (Object) null);
      fieldWriter0.visitAnnotation(",~r.[Lw6U{cW@s", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-41));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-41), "JSR/RET are not supported with computeFrames option", "JSR/RET are not supported with computeFrames option", "JSR/RET are not supported with computeFrames option", "JSR/RET are not supported with computeFrames option");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.visitField(276, "JSR/RET are not supported with computeFrames option", "JSR/RET are not supported with computeFrames option", "Fn", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@461f0fbb
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2107);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "dw:YCo'", "dw:YCo'", "(]mly[.vTN@t", "(]mly[.vTN@t");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2107);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "dw:YCo'", "dw:YCo'", "(]mly[.vTN@t", "(]mly[.vTN@t");
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
