/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 13:42:29 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2+Ao/k<4>ULpI");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken(2941);
      jSONReaderScanner0.pos = 2941;
      jSONReaderScanner0.info();
      jSONReaderScanner0.integerValue();
      char[] charArray0 = new char[1];
      jSONReaderScanner0.isBlankInput();
      charArray0[0] = 'V';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = 69;
      jSONReaderScanner0.charAt(69);
      jSONReaderScanner0.charAt(78);
      jSONReaderScanner0.charAt(120);
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = new JSONScanner("", 69);
      jSONScanner0.bytesValue();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'A';
      int int0 = 76;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76, 533);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.next();
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.scanDecimal('A');
      jSONReaderScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-XT?,<");
      char[] charArray0 = new char[7];
      char char0 = 'O';
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = ' ';
      charArray0[3] = 'K';
      charArray0[4] = '\\';
      jSONScanner0.scanNumber();
      charArray0[5] = '1';
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yntax");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1084);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      char char0 = ']';
      jSONReaderScanner0.scanLong(']');
      JSONScanner jSONScanner0 = new JSONScanner("yntax", (-1));
      SymbolTable symbolTable0 = new SymbolTable(1084);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone(']', ']', ']');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MQkC");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 78);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'J';
      charArray0[2] = 'X';
      charArray0[3] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.scanLong('2');
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanInt('X');
      jSONReaderScanner0.scanDate('*');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("O$iw{|8v>beYo");
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'T');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a");
      SymbolTable symbolTable0 = new SymbolTable(83);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '3');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DisableCheckSpecialChar");
      jSONScanner0.pos = 9;
      jSONScanner0.close();
      jSONScanner0.bytesValue();
      Feature feature0 = Feature.CustomMapDeserializer;
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '\\';
      charArray0[2] = '-';
      charArray0[3] = 'b';
      charArray0[4] = '^';
      charArray0[5] = '%';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.nextToken(9);
      jSONScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'v';
      charArray0[2] = '\\';
      charArray0[3] = 'L';
      charArray0[4] = '_';
      charArray0[5] = 'G';
      int int0 = 1284;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1284);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s(", (-64));
      jSONReaderScanner0.token = 854;
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[7];
      char[] charArray1 = new char[9];
      charArray1[0] = 'T';
      charArray1[1] = 'm';
      charArray1[2] = 'w';
      charArray1[3] = '}';
      charArray1[4] = 'H';
      charArray1[5] = 'E';
      charArray1[6] = '*';
      charArray1[7] = ']';
      charArray1[8] = 'l';
      jSONReaderScanner0.matchField(charArray1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("PQ8zKqR:#", objectArray0);
      jSONReaderScanner0.nextToken();
      charArray0[0] = ',';
      jSONReaderScanner0.setToken((-2005458110));
      charArray0[1] = '[';
      charArray0[2] = 'N';
      charArray0[3] = '+';
      charArray0[4] = 'o';
      charArray0[5] = 'G';
      charArray0[6] = '_';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = '0';
      charArray0[2] = 'P';
      charArray0[3] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 97, (-1101));
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yntax", 62);
      jSONReaderScanner0.features = 62;
      jSONReaderScanner0.eofPos = 83;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.stringDefaultValue = null;
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int0 = 60;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 62, 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8", 102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal(':');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 't';
      charArray0[0] = 't';
      int int0 = 3678080;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanLong('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@type");
      char[] charArray0 = new char[9];
      char char0 = '@';
      jSONReaderScanner0.scanBoolean('@');
      charArray0[0] = '@';
      int int0 = 612;
      SymbolTable symbolTable0 = new SymbolTable(612);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '?');
      charArray0[1] = 'E';
      charArray0[2] = 'k';
      charArray0[3] = '%';
      charArray0[4] = 'f';
      jSONReaderScanner0.pos = 38;
      charArray0[5] = 'd';
      charArray0[6] = '}';
      charArray0[7] = 'R';
      char char1 = '3';
      int int1 = 8192;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - t, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.pos = 100;
      jSONReaderScanner0.scanBoolean('-');
      JSONScanner jSONScanner0 = new JSONScanner("", 100);
      char char0 = 'A';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('A', 'g', 'g');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'q';
      charArray0[2] = 'I';
      charArray0[3] = 'R';
      charArray0[4] = 'E';
      charArray0[5] = '^';
      charArray0[6] = 'G';
      charArray0[7] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1820, 1820);
      jSONReaderScanner0.charAt(998);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(1820);
      jSONReaderScanner0.scanUUID('[');
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.config(feature0, false);
      assertEquals('I', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76, 533);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.next();
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.scanDecimal('A');
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanBoolean('/');
      jSONReaderScanner0.scanLong('S');
      jSONReaderScanner0.setToken(76);
      jSONReaderScanner0.putChar('*');
      assertEquals(76, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = 'D';
      charArray0[2] = 'X';
      charArray0[3] = 'k';
      charArray0[4] = ']';
      charArray0[5] = 'S';
      charArray0[6] = 'n';
      charArray0[7] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      jSONReaderScanner0.scanLong('{');
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.setToken(123);
      assertEquals(123, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 65);
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = ']';
      charArray0[2] = '*';
      charArray0[3] = '$';
      charArray0[4] = '&';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'F');
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[1];
      charArray1[0] = '5';
      jSONScanner0.scanFieldInt(charArray1);
      String string0 = jSONScanner0.tokenName();
      assertEquals("Unknown", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "false";
      int int0 = 2252;
      JSONScanner jSONScanner0 = new JSONScanner("false", 2252);
      jSONScanner0.scanIdent();
      char char0 = 't';
      jSONScanner0.scanInt('t');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = ';';
      charArray0[2] = '2';
      charArray0[3] = '4';
      charArray0[4] = '%';
      charArray0[5] = 'D';
      charArray0[6] = '8';
      charArray0[7] = 'r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.close();
      Feature feature0 = Feature.SupportNonPublicField;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.isEOF();
      Locale locale0 = new Locale("a,cwx2u&DNE*1Y{i1");
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanUUID('2');
      boolean boolean0 = jSONReaderScanner0.isEnabled((-3109), 717);
      assertEquals(2, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "3@cT:Sk3|K\\Q";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3@cT:Sk3|KQ");
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'q';
      charArray0[2] = 'Y';
      charArray0[3] = '\\';
      charArray0[4] = '@';
      int int0 = 108;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.tokenName();
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '4';
      jSONReaderScanner0.scanDecimal('|');
      charArray0[2] = 'p';
      charArray0[3] = 'X';
      charArray0[5] = '|';
      charArray0[6] = 's';
      charArray0[7] = 'h';
      charArray0[8] = '9';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("33ovi", 101);
      jSONScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(101);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3pos 0, json : 33ovi
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '\"';
      charArray0[2] = 'w';
      int int0 = 4367;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4367, 4367);
      int int1 = 47;
      int int2 = 115;
      SymbolTable symbolTable0 = new SymbolTable(115);
      String string0 = "( gbxf\"OWw";
      int int3 = 110;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = 'Z';
      charArray0[2] = 'D';
      int int0 = 1947;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1947, (-155));
      jSONReaderScanner0.np = (-155);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-155));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", (-962));
      jSONReaderScanner0.nextToken((-962));
      jSONReaderScanner0.features = 256;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$ref");
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      charArray0[0] = 'P';
      charArray0[1] = '\'';
      charArray0[2] = '/';
      charArray0[3] = 'W';
      charArray0[4] = '5';
      charArray0[5] = '/';
      charArray0[6] = '0';
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("}y-qUhAX");
      int int0 = 748;
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&.kwLQ7H93Dm");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanString('=');
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      jSONReaderScanner0.scanFieldString(charArray0);
      char char0 = '.';
      jSONReaderScanner0.scanInt('.');
      JSONScanner jSONScanner0 = new JSONScanner("&.kwLQ7H93Dm", 116);
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.getISOLanguages();
      jSONScanner0.scanStringArray(set0, 'X');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{K\u0000kc(X");
      char char0 = 'F';
      int int0 = 66;
      jSONScanner0.nextToken(66);
      char char1 = 'h';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-4774));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '-';
      charArray0[2] = 'c';
      charArray0[3] = 'W';
      charArray0[4] = 'F';
      charArray0[5] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.setToken(16);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      JSONScanner.charArrayCompare("c", 55, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "33ovi";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("33ovi", 34);
      SymbolTable symbolTable0 = new SymbolTable(34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 91);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(91, 91, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "fastjson.properties";
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.properties");
      Feature feature0 = Feature.UseBigDecimal;
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      char char0 = '&';
      int int0 = (-214748364);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 92;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yntax", 92);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      char char0 = 'l';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '<';
      charArray0[2] = 'p';
      charArray0[3] = 'S';
      charArray0[4] = 'T';
      charArray0[5] = '+';
      charArray0[6] = '_';
      charArray0[7] = 'g';
      charArray0[8] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2, 2);
      jSONReaderScanner0.nextToken(2);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'R';
      charArray0[2] = 'q';
      charArray0[3] = 'D';
      charArray0[4] = '&';
      charArray0[5] = ',';
      charArray0[6] = 'O';
      charArray0[7] = 'e';
      charArray0[8] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '_');
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteDateUseDateFormat", (-2909));
      Class<Object> class0 = Object.class;
      boolean boolean0 = jSONScanner0.scanBoolean(']');
      assertFalse(boolean0);
      
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.isRef();
      assertEquals((-2909), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 122, (-2040316679));
      jSONReaderScanner0.scanFieldDouble(charArray0);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      jSONReaderScanner0.config(feature0, true);
      TimeZone timeZone0 = TimeZone.getTimeZone("ju@xt0XBS");
      TimeZone timeZone1 = TimeZone.getDefault();
      TimeZone.setDefault(timeZone1);
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.charAt(122);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 106, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '(';
      charArray0[0] = '(';
      char char1 = 'q';
      charArray0[1] = 'q';
      int int0 = 3132;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3132);
      Locale locale0 = Locale.KOREA;
      Locale.forLanguageTag("{#");
      locale0.getDisplayVariant();
      locale0.getExtension('U');
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.charAt(3132);
      jSONReaderScanner0.scanFloat('q');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.ch = 'q';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      jSONReaderScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("33ovi");
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'h';
      charArray0[2] = 'o';
      charArray0[3] = 'b';
      charArray0[4] = ']';
      charArray0[5] = 'b';
      charArray0[6] = '\'';
      jSONScanner0.scanDouble('!');
      charArray0[7] = 'M';
      charArray0[8] = 'S';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.token();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("int", (-361));
      char[] charArray0 = new char[7];
      jSONScanner0.scanString('2');
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.indexOf('2', 1353);
      jSONScanner0.getCalendar();
      jSONScanner0.nextToken(1353);
      Feature feature0 = Feature.AllowSingleQuotes;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hp.JL");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 95);
      SymbolTable symbolTable0 = new SymbolTable(5);
      jSONReaderScanner0.addSymbol(95, 95, 4158, symbolTable0);
      jSONReaderScanner0.indexOf('d', 95);
      jSONReaderScanner0.stringVal();
      SymbolTable symbolTable1 = new SymbolTable(681);
      jSONReaderScanner0.scanSymbol(symbolTable1);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.SymbolTable", (-1492));
      jSONReaderScanner0.scanInt('}');
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '}';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[2] = '}';
      jSONReaderScanner0.timeZone = null;
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      jSONReaderScanner0.scanDouble('}');
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 62;
      JSONScanner jSONScanner0 = new JSONScanner("true", 62);
      char char0 = '9';
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = '%';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = '9';
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = '&';
      charArray0[2] = '!';
      charArray0[3] = '2';
      charArray0[4] = '[';
      charArray0[5] = 'V';
      charArray0[6] = '4';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[1] = 'T';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '#');
      charArray0[2] = '@';
      charArray0[3] = 'h';
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".:", 87);
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '?';
      charArray0[5] = '6';
      charArray0[6] = '6';
      charArray0[7] = '6';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.indexOf('6', 87);
      jSONReaderScanner0.eofPos = 87;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 4502;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y", 4502);
      jSONReaderScanner0.scanUUID('H');
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.tokenName();
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '4';
      charArray0[2] = 'p';
      charArray0[3] = 'X';
      charArray0[4] = ' ';
      charArray0[5] = '|';
      charArray0[6] = 's';
      charArray0[7] = 'h';
      charArray0[8] = '9';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o 8#");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 4337);
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      jSONReaderScanner0.isEnabled(976);
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = 'j';
      charArray0[2] = '{';
      charArray0[3] = '>';
      charArray0[4] = 'W';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yntax", 62);
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      jSONReaderScanner0.eofPos = 83;
      charArray0[1] = '|';
      charArray0[2] = '8';
      jSONReaderScanner0.matchField(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      String string0 = null;
      jSONReaderScanner0.stringDefaultValue = null;
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      int int0 = 60;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 62, 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = ';';
      charArray0[2] = 'y';
      charArray0[3] = 'J';
      charArray0[4] = 'b';
      charArray0[5] = 'R';
      charArray0[6] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(26, "illegal state. ");
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.timeZone = (TimeZone) simpleTimeZone0;
      jSONReaderScanner0.charAt(26);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.indexOf('\"', 26);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        simpleTimeZone0.getDisplayName(false, (-2040427041));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -2040427041
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 74, 112);
      jSONReaderScanner0.scanDouble('7');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-125), 766);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONLexerBase.isWhitespace('R');
      JSONScanner jSONScanner0 = new JSONScanner("'P:7N=n-Xp?CP*e=|'");
      jSONScanner0.resetStringPosition();
      jSONScanner0.stringVal();
      jSONScanner0.matchStat();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) jSONScanner0;
      objectArray0[3] = (Object) "!.k N*ken@[Z#7r}}w";
      jSONScanner0.lexError("!.k N*ken@[Z#7r}}w", objectArray0);
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONScanner0.config(feature0, true);
      jSONScanner0.isEOF();
      jSONScanner0.getTimeZone();
      jSONScanner0.skipWhitespace();
      Feature feature1 = Feature.SupportArrayToBean;
      jSONScanner0.isEnabled(feature1);
      System.setCurrentTimeMillis(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = '\'';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'l';
      charArray0[2] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 122, 513);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      char[] charArray1 = new char[7];
      charArray1[0] = '&';
      charArray1[1] = 'B';
      charArray1[2] = 'B';
      charArray1[3] = 'B';
      charArray1[4] = '&';
      charArray1[5] = 'l';
      charArray1[6] = 'B';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@");
      jSONScanner0.scanFloat('A');
      jSONScanner0.getCurrent();
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-888), charArray0, (-888), (-1262));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("q");
      jSONReaderScanner0.scanIdent();
      Locale locale0 = new Locale("unterminated json string, ", "q", "unterminated json string, ");
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.tokenName();
      assertEquals(18, jSONReaderScanner0.token());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("33OvI");
      jSONScanner0.stringVal();
      jSONScanner0.scanInt('a');
      jSONScanner0.scanIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str", 33);
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'h');
      jSONScanner0.scanDate('a');
      assertEquals(18, jSONScanner0.token());
      
      jSONReaderScanner0.bytesValue();
      char[] charArray1 = new char[7];
      charArray1[0] = 'a';
      charArray1[1] = 'a';
      charArray1[2] = 'a';
      charArray1[3] = 'a';
      charArray1[4] = 'a';
      charArray1[5] = 't';
      charArray1[6] = 'a';
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      jSONReaderScanner0.nextToken(5);
      jSONReaderScanner0.bytesValue();
      assertEquals(33, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("disablecheckspecialchar");
      jSONReaderScanner0.scanLong('>');
      jSONReaderScanner0.scanInt('N');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.matchStat();
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = '>';
      charArray0[2] = 'N';
      charArray0[3] = '>';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = '>';
      jSONReaderScanner0.scanFloat('N');
      charArray0[7] = '>';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 1486;
      JSONScanner jSONScanner0 = new JSONScanner("new", 1486);
      jSONScanner0.scanIdent();
      char char0 = '5';
      jSONScanner0.np = 1486;
      jSONScanner0.scanLong('5');
      Class<Object> class0 = Object.class;
      char char1 = 'c';
      jSONScanner0.scanDouble('c');
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.info();
      jSONScanner0.charAt(1486);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Odiu1;n");
      jSONScanner0.scanFloat('+');
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      jSONScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Odiu1;n");
      int int0 = 1610;
      SymbolTable symbolTable0 = new SymbolTable(2);
      int int1 = (-1186);
      char[] charArray1 = new char[6];
      charArray1[0] = '+';
      charArray1[1] = '+';
      charArray1[2] = '+';
      charArray1[3] = '+';
      charArray1[4] = '+';
      charArray1[5] = '+';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray1, (-2), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("q");
      jSONReaderScanner0.features = (-621);
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = '\"';
      charArray0[2] = '3';
      charArray0[3] = 'T';
      charArray0[4] = 'D';
      charArray0[5] = 'L';
      charArray0[6] = 'M';
      charArray0[7] = 'k';
      charArray0[8] = 'N';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.setToken(70);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.bytesValue();
      char[] charArray1 = new char[6];
      charArray1[0] = 'N';
      charArray1[1] = 'Y';
      Feature feature0 = Feature.AllowComment;
      jSONReaderScanner0.config(feature0, false);
      charArray1[2] = '!';
      charArray1[3] = 'V';
      charArray1[4] = 'W';
      charArray1[5] = ':';
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      JSONScanner jSONScanner0 = new JSONScanner("Hhq2-X");
      jSONScanner0.scanFieldFloatArray2(charArray1);
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanFieldBoolean(charArray1);
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.isEnabled((-1240));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      char char0 = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = '2';
      char char1 = '3';
      charArray0[3] = '3';
      char char2 = '[';
      charArray0[4] = '[';
      charArray0[5] = 't';
      charArray0[6] = 'C';
      char char3 = 'i';
      charArray0[7] = 'i';
      int int0 = 34;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      char char4 = '%';
      jSONReaderScanner0.scanLong('%');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?91 *rXxvVhSw]d]K");
      char[] charArray0 = new char[1];
      char char0 = 'O';
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 3420;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rG4 :\"TZjjC", 3420);
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = 'Z';
      charArray0[2] = 'd';
      jSONReaderScanner0.token = (-2005458110);
      jSONReaderScanner0.setLocale((Locale) null);
      charArray0[3] = 's';
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(3420);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - r, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'l';
      charArray0[2] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 122, 513);
      char[] charArray1 = new char[7];
      charArray1[0] = '&';
      charArray1[1] = 'B';
      charArray1[2] = 'B';
      charArray1[3] = 'B';
      charArray1[4] = '&';
      charArray1[5] = 'l';
      charArray1[6] = 'B';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, 42);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"g", 69);
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = 'r';
      charArray0[2] = ' ';
      charArray0[3] = ',';
      charArray0[4] = 'K';
      charArray0[5] = '';
      charArray0[6] = 'F';
      charArray0[7] = 'w';
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('O');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-633);
      JSONScanner jSONScanner0 = new JSONScanner("%;O6-", (-633));
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '>';
      charArray0[2] = ';';
      charArray0[3] = 'Y';
      charArray0[4] = 'y';
      charArray0[5] = 'N';
      charArray0[6] = '&';
      charArray0[7] = '5';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanDate('B');
      jSONScanner0.longValue();
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.getFeatures();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "setter not found, class ";
      int int0 = 9;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("setter not found, class ", 9);
      jSONReaderScanner0.stringDefaultValue();
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      jSONReaderScanner0.isRef();
      charArray0[1] = 'I';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      char[] charArray1 = new char[1];
      int int1 = (-5133);
      jSONReaderScanner0.np = (-5133);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("setter not found, class ");
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '9');
      jSONReaderScanner0.sbuf = charArray1;
      charArray1[0] = '9';
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      jSONReaderScanner0.skipWhitespace();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-5133));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.getTimeZone();
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '|';
      charArray0[3] = 'c';
      charArray0[4] = 'r';
      charArray0[5] = 'm';
      charArray0[6] = '=';
      charArray0[7] = 'L';
      charArray0[8] = '-';
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('<');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "aqsRsW)#%mI05fh";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aqsRsW)#%mI05fh");
      jSONReaderScanner0.charAt(1831);
      jSONReaderScanner0.getLocale();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0000';
      charArray0[1] = '\u0000';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[4] = '\u0000';
      charArray0[5] = '\u0000';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 2105, 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DisableCheckSpecialChar");
      jSONScanner0.stringVal();
      System.setCurrentTimeMillis(0);
      char char0 = '_';
      jSONScanner0.scanFloat('_');
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('T');
      char char1 = 'e';
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'e');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h<I}H-0]U['~\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1), (-604));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -604
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.LocalTime");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanIdent();
      jSONScanner0.scanString(',');
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = 'N';
      charArray0[3] = ',';
      charArray0[4] = ',';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.close();
      jSONScanner0.stringDefaultValue = null;
      jSONScanner0.isEOF();
      char char0 = '[';
      jSONScanner0.scanString('[');
      jSONScanner0.setToken(36);
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar(',');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match , - ., info : pos 4, json : java.time.LocalTime
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 63);
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'd';
      charArray0[2] = ',';
      charArray0[3] = 'X';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.sub_chars(63, 361);
      jSONReaderScanner0.stringVal();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'R';
      charArray0[2] = 'Q';
      charArray0[3] = '$';
      charArray0[4] = 's';
      charArray0[5] = 'r';
      int int0 = 128;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 128);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanString('e');
      jSONReaderScanner0.indexOf('$', 128);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'i';
      charArray0[2] = '7';
      charArray0[3] = '/';
      charArray0[4] = 'g';
      charArray0[5] = 'u';
      charArray0[6] = 'U';
      charArray0[7] = 'n';
      jSONScanner0.scanFieldLong(charArray0);
      System.setCurrentTimeMillis(0L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      char[] charArray1 = new char[9];
      charArray1[0] = '/';
      charArray1[1] = 'g';
      charArray1[2] = 'u';
      charArray1[3] = 'n';
      charArray1[4] = 'U';
      charArray1[5] = '/';
      charArray1[6] = 'O';
      charArray1[7] = 'O';
      charArray1[8] = '/';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%dX%cOoz{4mK");
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      charArray0[2] = 'E';
      charArray0[3] = 'w';
      charArray0[4] = 'n';
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 1;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[(]wxyx#7vxjeN,)>gX");
      char char0 = '~';
      jSONReaderScanner0.scanDate('~');
      int int0 = 43;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '%';
      charArray0[2] = '?';
      charArray0[3] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1268, 1268);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.google.common.collect.ArrayListMultimap");
      int int0 = 12;
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      charArray0[1] = ')';
      charArray0[2] = '`';
      charArray0[3] = '@';
      jSONScanner0.scanFieldDouble(charArray0);
      int int1 = 2292;
      SymbolTable symbolTable0 = new SymbolTable(2292);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 12, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 555, 555);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFloat('@');
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.subString(106, 555);
      jSONReaderScanner0.close();
      char[] charArray1 = new char[5];
      charArray1[0] = ',';
      charArray1[1] = '@';
      charArray1[2] = '@';
      charArray1[3] = '@';
      charArray1[4] = '@';
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ");
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, ");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      int int0 = 21;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '_';
      charArray0[2] = 'F';
      charArray0[3] = '9';
      charArray0[4] = 'a';
      charArray0[5] = '7';
      charArray0[6] = 'l';
      charArray0[7] = '6';
      charArray0[8] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65);
      Locale locale0 = Locale.JAPANESE;
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullNumberAsZero");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84, 36);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = 'M';
      charArray0[2] = 'K';
      charArray0[3] = '.';
      charArray0[4] = 'a';
      charArray0[5] = '|';
      charArray0[6] = 'V';
      int int0 = 14;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 14, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 742, 742);
      jSONReaderScanner0.nextToken(660);
      assertEquals('8', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ", 9);
      jSONReaderScanner0.scanLong('a');
      jSONReaderScanner0.putChar('a');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 99, 99);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.subString(289, 99);
      assertEquals(99, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      jSONScanner0.stringVal();
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.timeZone = timeZone0;
      int int0 = 3523;
      jSONScanner0.scanNumber();
      jSONScanner0.eofPos = 3523;
      int int1 = (-2392);
      jSONScanner0.isEnabled((-2392), (-2392));
      jSONScanner0.pos();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 790);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N5F5hhP:");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(106, 106, 34, 54, 0);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      char[] charArray0 = jSONReaderScanner0.sub_chars(106, 110);
      mockGregorianCalendar0.clear();
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.pos = (-1885);
      char char0 = '*';
      jSONReaderScanner0.token = 120;
      jSONReaderScanner0.scanType("");
      char[] charArray1 = new char[6];
      charArray1[0] = 'T';
      charArray1[1] = '*';
      charArray1[2] = '*';
      charArray1[3] = '*';
      charArray1[4] = '!';
      charArray1[5] = '*';
      jSONReaderScanner0.scanFieldDate(charArray1);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.setTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = '2';
      charArray0[2] = 'y';
      charArray0[3] = 'W';
      charArray0[4] = 'G';
      charArray0[5] = 'x';
      charArray0[6] = '+';
      charArray0[7] = '[';
      charArray0[8] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 70);
      char[] charArray1 = new char[4];
      charArray1[0] = '+';
      charArray1[1] = '+';
      charArray1[2] = 'r';
      charArray1[3] = 'x';
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MR:'NX", 4096);
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      Class<Object> class0 = Object.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'T');
      jSONScanner0.scanFloat('T');
      boolean boolean0 = jSONScanner0.isEnabled(1621);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "java.time.LocalDateTime";
      int int0 = (-398);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalDateTime", (-398));
      jSONReaderScanner0.intValue();
      int int1 = 623;
      SymbolTable symbolTable0 = new SymbolTable(623);
      boolean boolean0 = false;
      int int2 = 55232;
      int int3 = (-292);
      String string1 = "";
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("<NMq2S9Jk?2iAo", 5, (-126), (-1369));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t+");
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '4';
      charArray0[2] = '2';
      charArray0[3] = '=';
      charArray0[4] = 'Y';
      charArray0[5] = 'h';
      charArray0[6] = 'p';
      charArray0[7] = '}';
      charArray0[8] = '=';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'E';
      charArray0[2] = 'z';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 49);
      jSONReaderScanner0.info();
      int int1 = 0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.SymbolTable", (-1492));
      jSONReaderScanner0.scanInt('}');
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "=[{kUgnbX lS6SmQ'";
      JSONScanner jSONScanner0 = new JSONScanner("=[{kUgnbX lS6SmQ'", 108);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. =
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = '0';
      charArray0[2] = 'm';
      charArray0[3] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4132, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate(',');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'O';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 77);
      jSONReaderScanner0.scanFieldString(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("UTF-8", 77);
      jSONReaderScanner0.scanLong('7');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('5', '5', '%');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'J';
      charArray0[2] = 'x';
      charArray0[3] = ':';
      charArray0[4] = '=';
      charArray0[5] = '0';
      charArray0[6] = '`';
      charArray0[7] = '0';
      charArray0[8] = 'G';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1789, 1789);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 44;
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullBooleanAsFalse", 44);
      jSONScanner0.scanDecimal('W');
      char char0 = 'q';
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('#');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match # - W, info : pos 0, json : WriteNullBooleanAsFalse
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 3500);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = ']';
      charArray0[4] = 'S';
      charArray0[5] = 'f';
      charArray0[6] = '<';
      charArray0[7] = '$';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2258), (-2258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]ZV", 5317);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("]ZV");
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '\'';
      charArray0[2] = 'r';
      charArray0[3] = ',';
      charArray0[4] = 'W';
      charArray0[5] = 'y';
      charArray0[6] = 'i';
      charArray0[7] = '\\';
      charArray0[8] = '$';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 588);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
