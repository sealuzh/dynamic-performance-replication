/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:51:39 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = null;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("~i6ncrjiMr6!QV1N_", (ClassLoader) aSMClassLoader0);
      int int0 = 186;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("~i6ncrjiMr6!QV1N_", "n-DyfVB/d(?0", 186, (Throwable) null);
      TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.get(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("66NX", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      IllegalAccessError illegalAccessError0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(illegalAccessError0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.isKotlin(class0);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(jSONPDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<NullPointerException> class0 = NullPointerException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      TypeUtils.isGenericParamType(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Color");
      TypeUtils.getClassFromMapping("Ljava.awt.Color");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Ljava.awt.Color");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Color\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZoneId zoneId0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@52bcb138
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("0j>Qlw)_", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.deny", class1, class2, class1, (Field) null, 41, 0, (byte) (-78));
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) byte0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Locale locale0 = Locale.CHINESE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ha
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Color");
      TypeUtils.getClassFromMapping("Ljava.awt.Color");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ljava.awt.Color");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.fnv1a_64("j");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.get(class0);
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, parameterizedTypeImpl0);
      parameterizedTypeImpl0.getTypeName();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ParserConfig parserConfig0 = new ParserConfig();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.get(class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.NoSuchFieldError -> com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      TypeUtils.loadClass("sh0%y]Z");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.keySet();
      linkedHashMap0.values();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      weakHashMap1.get(illegalAccessError0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Date> class0 = Date.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [B", class1.toString());
      
      Class<DataTruncation> class2 = DataTruncation.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      boolean boolean0 = TypeUtils.isKotlin(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      TypeUtils.castToJavaBean((Object) "LTEA;+L\"", class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("LTEA;+L\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Color");
      TypeUtils.getClassFromMapping("Ljava.awt.Color");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Ljava.awt.Color");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockRuntimeException0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockRuntimeException1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<Locale> class1 = Locale.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.fnv1a_64_lower("bO`aj&Qh\"&wDs?_[Y");
      Locale locale0 = Locale.CHINESE;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TypeUtils.castToSqlDate((Object) null);
      Class<TimeUnit> class1 = TimeUnit.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Float> class0 = Float.class;
      TypeUtils.isProxy(class0);
      Boolean boolean0 = new Boolean(false);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TimeDeserializer timeDeserializer0 = TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap0, class1, parserConfig0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Properties properties0 = new Properties();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JavaBeanInfo.getBuilderClass((JSONType) null);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToInt((Object) null);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(class1);
      assertEquals("class [D", class1.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      TypeUtils.loadClass("~i6ncrjiMr6!QV1N_", (ClassLoader) aSMDeserializerFactory0.classLoader);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("~i6ncrjiMr6!QV1N_", "~i6ncrjiMr6!QV1N_", 186, (Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLFeatureNotSupportedException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Ljava.awt.Point");
      noSuchMethodError0.getStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchMethodError: Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Constructor<MockJapaneseDate>[] constructorArray0 = (Constructor<MockJapaneseDate>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<Float> class0 = Float.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Locale> class1 = Locale.class;
      Locale locale0 = TypeUtils.castToJavaBean((Object) "LTEA;+L\"", class1);
      assertEquals("ltea;+l\"", locale0.toString());
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      boolean boolean1 = TypeUtils.isHibernateInitialized(concurrentHashMap0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.loadClass("org.springframework.security.core.userdetails.User");
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.toLocale("org.springframework.security.core.userdetails.User");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[Z", "[Z");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[Z", ")", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionException0.setNextException(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Class<?> class0 = TypeUtils.loadClass("[Z");
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isNumber("null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.toLocale("c(S[;WCKFJ5eZ]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.fnv1a_64_lower("Ljava.awt.Font");
      Class<Currency> class0 = Currency.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "fastjson.parser.autoTypeAccept", fieldArray0);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("66NX", classLoader0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("X qYP7u6$]Lv");
      TypeUtils.isNumber("java/util/List");
      TypeUtils.castToString(classLoader1);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Float> class0 = Float.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isHibernateInitialized("Av%eelIW&Si`|WD");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap1, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("null");
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Byte byte0 = new Byte((byte) (-78));
          Class<String> class0 = String.class;
          ParserConfig parserConfig0 = ParserConfig.global;
          WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
          weakHashMap0.get(parserConfig0);
          Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
          hashtable0.entrySet();
          SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, (PropertyNamingStrategy) null);
          assertNotNull(serializeBeanInfo0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Av%eelIW&Si`|WD");
      Class<Float> class0 = Float.class;
      TypeUtils.isProxy(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Locale locale0 = TypeUtils.castToJavaBean((Object) "LTEA;+L\"", class0);
      assertEquals("ltea;+l\"", locale0.getLanguage());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class2);
      assertEquals("class java.lang.Object", class2.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.loadClass("Ljava.awt.Color");
      TypeUtils.isNumber("0A}<9U");
      TypeUtils.castToString((Object) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class [B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class [B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      Type type0 = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      String string0 = File.separator;
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "in", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      TypeUtils.fnv1a_64_lower(">");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("0j>Qlw)_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0j>Qlw)_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.fnv1a_64_lower("hashCode");
      TypeUtils.decapitalize((String) null);
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.loadClass("", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Type) null).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      TypeUtils.createCollection(parameterizedTypeImpl0);
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToByte("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-1742), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1742
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      LinkedHashSet<RenderingHints> linkedHashSet0 = new LinkedHashSet<RenderingHints>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      parameterizedTypeImpl0.getTypeName();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.util.ParameterizedTypeImpl@481", "com.alibaba.fastjson.util.ParameterizedTypeImpl@481", 56, sQLTransientConnectionException0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (Type) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = (byte) (-78);
      Byte byte1 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      MockThread mockThread0 = new MockThread("java.nio.file.Paths");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(true);
      Class<Float> class1 = Float.TYPE;
      JavaBeanInfo.getBuilderClass((JSONType) null);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      JavaBeanInfo.getBuilderClass((JSONType) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class1);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.unwrapOptional(type0);
      TypeUtils.getGenericParamType(class1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Color");
      TypeUtils.isNumber("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Date> class0 = Date.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("getNextException", "getNextException");
      weakHashMap0.put("getNextException", (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      ClassLoader.getSystemClassLoader();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build(class1, (Type) class1, propertyNamingStrategy0);
      Float float0 = new Float((-3429.832F));
      LinkedHashSet<RenderingHints> linkedHashSet0 = new LinkedHashSet<RenderingHints>();
      TypeUtils.getCollectionItemClass(class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Type[] typeArray0 = new Type[9];
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      ParserConfig parserConfig0 = ParserConfig.global;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = File.separator;
      TypeUtils.decapitalize("dU\"0bDru!%d~XR");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("dU\"0bDru!%d~XR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : dU\"0bDru!%d~XR
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Integer> class0 = Integer.TYPE;
      Class<Float> class1 = Float.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.loadClass("oracle.sql.DATE");
      TypeUtils.getClassFromMapping("oracle.sql.DATE");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("oracle.sql.DATE");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockRuntimeException0);
      mockRuntimeException1.printStackTrace();
      TypeUtils.isHibernateInitialized(mockRuntimeException1);
      TypeUtils.castToBigDecimal((Object) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = (byte) (-78);
      TypeUtils.castToFloat((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.get(class0);
      TypeUtils.decapitalize((String) null);
      TypeUtils.castToChar((Object) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong((-3480L));
      atomicLong0.getAndSet((-3480L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -3480
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.toLocale("c(S[;WCKFJ5eZ]");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.values();
      linkedHashMap0.put("Ljava.awt.Rectangle", "c(S[;WCKFJ5eZ]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Type[] typeArray0 = new Type[3];
      Class<Integer> class0 = Integer.TYPE;
      typeArray0[0] = (Type) class0;
      Class<Float> class1 = Float.TYPE;
      typeArray0[1] = (Type) class1;
      Class<java.sql.Date> class2 = java.sql.Date.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(jSONType0);
      typeArray0[2] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class3);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, typeArray0[2], parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.fnv1a_64_lower("bO`aj&Qh\"&wDs?_[Y");
      Locale locale0 = Locale.CHINESE;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Float float0 = new Float(2579.1F);
      LinkedHashSet<RenderingHints> linkedHashSet0 = new LinkedHashSet<RenderingHints>();
      Properties properties0 = new Properties();
      TypeUtils.cast((Object) null, (Type) javaBeanInfo0.clazz, (ParserConfig) null);
      TypeUtils.isTransient((Method) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = "javax.persistence.OneToMany";
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("javax.persistence.OneToMany", class0, 38);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. javax.persistence.OneToMany -> java.awt.GridBagConstraints
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      Class<Long> class1 = Long.TYPE;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      Class<AtomicLong> class2 = AtomicLong.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy0, false);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<InternalError> class3 = InternalError.class;
      parserConfig0.checkAutoType((String) null, class3, 1232);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeAccept");
      TypeUtils.decapitalize("toLocalDate");
      TypeUtils.getCollectionItemType(typeArray0[2]);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      DateFormatSymbols.getInstance(locale1);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, propertyNamingStrategy0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy1, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : DAYS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      Class<Method> class1 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.alibaba.fastjson.util.ParameterizedTypeImpl@401";
      TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.util.ParameterizedTypeImpl@401");
      TypeUtils.decapitalize("com.alibaba.fastjson.util.ParameterizedTypeImpl@401");
      // Undeclared exception!
      try { 
        JavaBeanInfo.getDefaultConstructor(class1, (Constructor<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.isKotlin(class0);
      System.setCurrentTimeMillis(0L);
      Class<Object> class1 = Object.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Function<Object, DecimalFormat> function0 = (Function<Object, DecimalFormat>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, DecimalFormat, DecimalFormat> biFunction0 = (BiFunction<Object, DecimalFormat, DecimalFormat>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys(0L, (Function<? super String, ? extends DecimalFormat>) function0, (BiFunction<? super DecimalFormat, ? super DecimalFormat, ? extends DecimalFormat>) biFunction0);
      concurrentHashMap0.mappingCount();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils.toLocale("c(S[;WCKFJ5eZ]");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.values();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.TYPE;
      Class<Float> class1 = Float.TYPE;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[0]);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, typeArray0[0], parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Color");
      String string0 = "0A}<9U";
      TypeUtils.isNumber("0A}<9U");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) identityHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.fnv1a_64_lower("J4])q");
      TypeUtils.decapitalize("getParameterCount");
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.loadClass((String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Color");
      TypeUtils.getClassFromMapping("Ljava.awt.Color");
      AtomicInteger atomicInteger0 = new AtomicInteger(2468);
      atomicInteger0.addAndGet(2468);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 4936
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Point point0 = new Point();
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Rectangle rectangle0 = new Rectangle(point0, dimension1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.Rectangle[x=0,y=0,width=0,height=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "deserialze";
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("deserialze");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : deserialze
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Float> class0 = Float.TYPE;
      Class<java.sql.Date> class1 = java.sql.Date.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.fnv1a_64_lower("F");
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.decapitalize("F");
      Type type0 = TypeUtils.getCollectionItemType(class1);
      TypeUtils.unwrapOptional(type0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      String string0 = "_<&";
      Type[] typeArray0 = null;
      Type type0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer((ParserConfig) null, javaBeanInfo0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "c(S[;WCKFJ5eZ]";
      TypeUtils.toLocale("c(S[;WCKFJ5eZ]");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.values();
      linkedHashMap0.put("Ljava.awt.Rectangle", "c(S[;WCKFJ5eZ]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Type[] typeArray0 = new Type[6];
      Class<Integer> class0 = Integer.TYPE;
      typeArray0[0] = (Type) class0;
      Class<Float> class1 = Float.TYPE;
      typeArray0[1] = (Type) class1;
      Class<MockCalendar> class2 = MockCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(jSONType0);
      typeArray0[2] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class3);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, typeArray0[2], parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.decapitalize("com.alibaba.fastjson.util.ParameterizedTypeImpl@0");
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      FieldInfo fieldInfo0 = new FieldInfo("[", class0, class0, type0, (Field) null, 2147483645, 677, (-127));
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      Map<String, String> map0 = null;
      TypeUtils.castToShort((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Constructor<MockJapaneseDate>[] constructorArray0 = (Constructor<MockJapaneseDate>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Float> class0 = Float.TYPE;
      Class<java.sql.Date> class1 = java.sql.Date.class;
      Type[] typeArray0 = new Type[6];
      typeArray0[1] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.loadClass("~$6S'DVI");
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      TypeUtils.fnv1a_64_lower("hashCode");
      Class<HttpCookie> class2 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap0, (PropertyNamingStrategy) null, false);
      TypeUtils.decapitalize("~$6S'DVI");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      TypeUtils.isNumber("can not cast to long, value : ");
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TypeUtils.toLocale("c(S[;WCKFJ5eZ]");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.values();
      linkedHashMap0.put("Ljava.awt.Rectangle", "c(S[;WCKFJ5eZ]");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Type[] typeArray0 = new Type[6];
      Class<Integer> class0 = Integer.TYPE;
      typeArray0[0] = (Type) class0;
      Class<Float> class1 = Float.TYPE;
      typeArray0[1] = (Type) class1;
      Class<MockCalendar> class2 = MockCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(jSONType0);
      typeArray0[2] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class3);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class3, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      TypeUtils.castToSqlDate(calendar0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        concurrentHashMap0.put("JV*%;Zh[Bj_P<'4<@", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Float> class0 = Float.TYPE;
      Class<java.sql.Date> class1 = java.sql.Date.class;
      Type[] typeArray0 = new Type[6];
      typeArray0[1] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      TypeUtils.fnv1a_64_lower("hashCode");
      Class<HttpCookie> class2 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap0, (PropertyNamingStrategy) null, false);
      TypeUtils.decapitalize("~$6S'DVI");
      TypeUtils.getCollectionItemType(typeArray0[5]);
      int[] intArray0 = new int[2];
      intArray0[0] = 942;
      intArray0[1] = 942;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";", "fastjson.parser.deny", intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeAccept", "azep(;@|I", 1);
      Long long0 = new Long(1);
      java.sql.Date date0 = TypeUtils.castToSqlDate(long0);
      TypeUtils.castToSqlDate(date0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double(2195.47023);
      Double.min((-2449.4264846), 0.0);
      TypeUtils.castToFloat(double0);
      String string0 = "+}u[3q;mbASCZ|uD";
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("+}u[3q;mbASCZ|uD", decimalFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \"+}u[3q;mbASCZ|uD\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.fnv1a_64_lower("F");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.ITALY;
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToBytes("r,r}eb:v6B");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("s&{m0_(76S*[XK2#");
      Class<Float> class0 = Float.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isHibernateInitialized("s&{m0_(76S*[XK2#");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("RZa\u0004_e", linkedHashMap0);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      FieldInfo fieldInfo0 = new FieldInfo("s&{m0_(76S*[XK2#", class1, class1, class0, (Field) null, 41, 5, 41);
      Class<String> class2 = String.class;
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "s&{m0_(76S*[XK2#", class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils.toLocale("c(S[;WCKFJ5eZ]");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.values();
      linkedHashMap0.put("$E^~|R_623L:n<y01i", "Ljava.awt.Rectangle");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.TYPE;
      classLoader0.setDefaultAssertionStatus(true);
      Class<Float> class1 = Float.TYPE;
      JavaBeanInfo.getBuilderClass((JSONType) null);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      Class<PropertyProcessable> class2 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class2);
      TypeUtils.castToDate(typeArray0[0]);
      StackOverflowError stackOverflowError0 = new StackOverflowError("Ljava.awt.Rectangle");
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedHashMap0.put(".w`NR:,){gi{gQ.", "null");
      linkedHashMap0.values();
      ClassLoader.getSystemClassLoader();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      TypeUtils.castToDouble((Object) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("s&{m0_(76S*[XK2#");
      ThreadGroup threadGroup0 = new ThreadGroup("istoLowerCase");
      MockThread mockThread0 = new MockThread(threadGroup0, "%fZK[pFC;^X2");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      TypeUtils.loadClass("istoLowerCase");
      TypeUtils.isNumber("%fZK[pFC;^X2");
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      TypeUtils.castToString(numberDeserializer0);
      TypeUtils.getCollectionItemClass((Type) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TypeUtils.toLocale("Ls&{m0_(76S*[XK2#");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.values();
      linkedHashMap0.put("ge", "Ls&{m0_(76S*[XK2#");
      Class<Integer> class0 = Integer.TYPE;
      Class<Float> class1 = Float.TYPE;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      TypeUtils.castToString(propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.fnv1a_64_lower("bO`aj&Qh\"&wDs?_[Y");
      TypeUtils.fnv1a_64_lower("F");
      TypeUtils.getCollectionItemType(class0);
      Locale locale0 = Locale.CHINESE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.castToTimestamp((Object) null);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(8192);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StringIndexOutOfBoundsException: String index out of range: 8192
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Float> class0 = Float.TYPE;
      Class<java.sql.Date> class1 = java.sql.Date.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.fnv1a_64_lower("F");
      TypeUtils.getCollectionItemType(class1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("?d'?WpN[7?^'nwD;&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ?d'?WpN[7?^'nwD;&
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.getParserFeatures(class0);
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      Locale.getISOLanguages();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class1);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.castToString(serializeBeanInfo0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.getGenericParamType(typeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("d+me", "d+me", 1039);
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLRecoverableException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'i';
      charArray0[2] = 'k';
      charArray0[3] = 'B';
      charArray0[4] = '4';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      TypeUtils.castToBoolean((Object) null);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-530));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.castToSqlTime((Object) null);
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.getParserFeatures(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(0);
      Class<TimeZone> class1 = TimeZone.class;
      TypeUtils.isPath(class1);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      TypeUtils.isProxy(class1);
      TypeUtils.getGenericParamType(class0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.ITALY;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("]lqOe", classLoader0, false);
      AtomicLong atomicLong0 = new AtomicLong((-3480L));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -3480
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("}Tr`XfA'yYWI");
      TypeUtils.fnv1a_64_lower("WU|2_-II");
      TypeUtils.decapitalize("isVarArgs");
      TypeUtils.getCollectionItemType((Type) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.get(class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      TypeUtils.fnv1a_64_lower("Ljava.awt.Color");
      Class<Character> class1 = Character.TYPE;
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.decapitalize((String) null);
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Av%eelIW&Si`|WD");
      TypeUtils.isHibernateInitialized("Av%eelIW&Si`|WD");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("LTEA;+L\"", "LTEA;+L\"", 2);
      Timestamp timestamp0 = new Timestamp(2);
      VerifyError verifyError0 = new VerifyError("LTEA;+L\"");
      timestamp0.setNanos(97);
      Dimension dimension0 = new Dimension();
      TypeUtils.castToDate(timestamp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("jsonpath error, path ", "AL_.SH&ZFnC7`}Gx");
      WeakHashMap<java.sql.Date, SQLInvalidAuthorizationSpecException> weakHashMap0 = new WeakHashMap<java.sql.Date, SQLInvalidAuthorizationSpecException>();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "AL_.SH&ZFnC7`}Gx", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<NullPointerException> class1 = NullPointerException.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.isGenericParamType(class1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<java.sql.Date> class0 = java.sql.Date.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.getCollectionItemType(class0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getKoltinConstructorParameters(class1);
  }
}
