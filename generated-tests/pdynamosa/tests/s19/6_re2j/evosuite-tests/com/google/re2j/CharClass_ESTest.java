/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 05:08:57 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1300;
      intArray0[1] = 0;
      int int0 = (-1575);
      intArray0[2] = (-1575);
      int int1 = 1990;
      intArray0[3] = 1990;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {1300, 0, (-1575), 1990}, intArray0);
      assertEquals("[]", string0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {1300, 0, (-1575), 1990}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass1.appendRange(1651, 1651);
      assertArrayEquals(new int[] {1300, 0, (-1575), 1990}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      
      CharClass charClass3 = charClass0.appendTable(intArray1);
      assertEquals(6, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      
      CharClass charClass4 = charClass2.appendRange((-1575), 65513);
      assertArrayEquals(new int[] {1300, 0, (-1575), 1990}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      
      CharClass charClass5 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {1300, 0, (-1575), 1990}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 5098);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendFoldedRange(234, 234);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendRange(234, 234);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 5098;
      intArray2[1] = 5098;
      intArray2[2] = 5098;
      intArray2[3] = 234;
      intArray2[4] = 234;
      intArray2[5] = 234;
      intArray2[6] = 234;
      intArray2[7] = (-1850);
      intArray2[8] = 234;
      intArray1[2] = intArray2;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendLiteral(66639, 66639);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1008);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2412;
      intArray0[1] = 0;
      intArray0[2] = (-3353);
      intArray0[3] = 0;
      intArray0[4] = 202;
      intArray0[5] = (-1);
      intArray0[6] = (-437);
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {2412, 0, (-3353), 0, 202, (-1), (-437)}, intArray0);
      assertEquals("[]", string0);
      assertEquals(7, intArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-545);
      intArray0[0] = (-545);
      intArray0[1] = 8128;
      intArray0[2] = (-836);
      intArray0[3] = 2812;
      intArray0[4] = 660;
      intArray0[5] = 2;
      intArray0[6] = 6;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-545), 8128, (-836), 2812, 660, 2, 6}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(3680, (-4877));
      assertArrayEquals(new int[] {(-545), 8128, (-836), 2812, 660, 2, 6}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {(-545), 8128, (-836), 2812, 660, 2, 6}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign((int[][]) null, (-877));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = CharClass.charClassToString((int[]) null, (-246));
      assertEquals("[]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2646);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass0.appendFoldedRange((-823), 0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass5.negateClass();
      assertNotNull(charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      
      int[] intArray1 = charClass6.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass7 = charClass3.negateClass();
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      
      CharClass charClass8 = charClass2.cleanClass();
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      
      CharClass charClass9 = charClass6.appendClassWithSign(intArray0, (-2646));
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      
      CharClass charClass10 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass3);
      
      CharClass charClass11 = charClass10.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass11);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass11);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      
      CharClass charClass12 = charClass11.appendClassWithSign(intArray0, (-823));
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass12);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass12);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass11);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      
      CharClass charClass13 = charClass9.appendRange((-591), 2729);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass13);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass13);
      assertSame(charClass5, charClass12);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass13);
      assertSame(charClass6, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass13);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass12);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass3);
      
      CharClass charClass14 = charClass6.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(charClass14);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass12);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass6);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass14);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass13);
      assertSame(charClass5, charClass12);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass14);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass13);
      assertSame(charClass6, charClass0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 8332;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 0;
      intArray3[1] = 992;
      intArray3[2] = 0;
      intArray3[3] = 8332;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = 0;
      intArray3[8] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2646);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass0.appendFoldedRange((-823), 0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass5.negateClass();
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      
      int[] intArray1 = charClass6.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass7 = charClass1.appendRange((-2538), 7392);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      
      int[][] intArray2 = new int[1][0];
      intArray2[0] = intArray1;
      // Undeclared exception!
      try { 
        charClass4.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(904, 1521);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 904;
      intArray0[1] = 1521;
      intArray0[2] = 904;
      CharClass charClass3 = charClass0.appendFoldedRange(1521, 1521);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      String string0 = charClass1.toString();
      assertEquals("[0x388 0x3ad 0x5f1]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      intArray0[3] = 904;
      intArray0[4] = 1521;
      intArray0[5] = 904;
      CharClass charClass4 = charClass1.appendClassWithSign(intArray0, 904);
      assertArrayEquals(new int[] {904, 1521, 904, 904, 1521, 904}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass3.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      
      String string1 = charClass5.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x0-0x387 0x389-0x3ac 0x5f2-0x10ffff]", string1);
      assertNotNull(string1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass5.appendFoldedRange(904, 1521);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass0.appendLiteral((-1539), 904);
      assertNotNull(charClass7);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3249;
      intArray0[3] = 0;
      intArray0[4] = (-4122);
      intArray0[5] = 4;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 1343;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 3249, 0, (-4122), 4, 0, 0, 1343}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 93);
      assertArrayEquals(new int[] {0, 0, 3249, 0, (-4122), 4, 0, 0, 1343}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertArrayEquals(new int[] {0, 0, 3249, 0, (-4122), 4, 0, 0, 1343}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      try { 
        charClass2.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 65;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 3016;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(0, (-3521));
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass0.appendRange((-2081), (-3799));
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      
      String string0 = charClass5.toString();
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertEquals("[0x0-0x40 0xfffff240-0x10ffff 0xfffff7df-0xfffff129]", string0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      
      String string1 = CharClass.charClassToString(intArray0, (-1646));
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertEquals(4, intArray0.length);
      assertNotNull(string1);
      
      int[][] intArray1 = new int[6][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass6 = charClass5.appendTable(intArray1);
      assertArrayEquals(new int[] {65, 0, 1, 3016}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 364;
      intArray0[1] = 65;
      intArray0[2] = (-601);
      intArray0[3] = (-2358);
      intArray0[4] = 520;
      intArray0[5] = (-1105);
      intArray0[6] = 11798;
      intArray0[7] = 1352;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {364, 65, (-601), (-2358), 520, (-1105), 11798, 1352}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {364, 65, (-601), (-2358), 520, (-1105), 11798, 1352}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 65);
      assertArrayEquals(new int[] {364, 65, (-601), (-2358), 520, (-1105), 11798, 1352}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {364, 65, (-601), (-2358), 520, (-1105), 11798, 1352}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {364, 65, (-601), (-2358), 520, (-1105), 11798, 1352}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass5.negateClass();
      assertArrayEquals(new int[] {364, 65, (-601), (-2358), 520, (-1105), 11798, 1352}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      
      int[] intArray1 = charClass3.toArray();
      assertArrayEquals(new int[] {(-2357), 519, (-1104), 11797, (-2357), 519}, intArray1);
      assertArrayEquals(new int[] {364, 65, (-601), (-2358), 520, (-1105), 11798, 1352}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 81;
      intArray0[1] = 215;
      intArray0[2] = 1456;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {81, 215, 1456}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[5][2];
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1456;
      intArray2[1] = 215;
      intArray2[2] = 215;
      intArray2[3] = 1456;
      intArray2[4] = 81;
      intArray2[5] = 215;
      intArray2[6] = 81;
      intArray2[7] = 1456;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {81, 215, 1456}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      
      int int0 = (-5795939);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 43302);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1313);
      intArray0[2] = 93;
      intArray0[3] = 0;
      intArray0[4] = 66639;
      intArray0[5] = (-4578);
      intArray0[6] = (-947);
      int int0 = 0;
      intArray0[7] = 0;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {0, (-1313), 93, 0, 66639, (-4578), (-947), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(3009, 3009);
      assertArrayEquals(new int[] {0, (-1313), 93, 0, 66639, (-4578), (-947), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign((int[][]) null, 65500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(904, 1521);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 904;
      intArray0[1] = 904;
      intArray0[2] = 904;
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {904, 904, 904, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {904, 904, 904, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      int int0 = (-18);
      // Undeclared exception!
      charClass4.appendFoldedRange((-18), 8220);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-2013);
      intArray2[1] = 2046;
      intArray2[2] = (-3517);
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[0][1];
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[0][9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, (-1179));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 0;
      CharClass charClass2 = charClass1.appendLiteral(0, (-6081));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      String string0 = CharClass.charClassToString(intArray0, (-568));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass3 = charClass0.appendFoldedRange((-568), 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.appendNegatedTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass4.appendFoldedRange((-568), 0);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass1.negateClass();
      assertNotNull(charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      
      CharClass charClass8 = charClass7.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      
      CharClass charClass9 = charClass0.negateClass();
      assertNotNull(charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      
      CharClass charClass10 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      
      CharClass charClass11 = charClass2.appendNegatedTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass4);
      
      int[] intArray2 = charClass0.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray2, intArray0);
      
      CharClass charClass12 = charClass6.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(0, intArray0.length);
      assertNotNull(charClass12);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass12);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass11);
      
      CharClass charClass13 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(0, intArray0.length);
      assertNotNull(charClass13);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass12);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass10);
      assertNotSame(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(732, 732);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendFoldedRange(3286, 732);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass4.appendRange(732, 2002);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      String string0 = charClass5.toString();
      assertEquals("[0x0-0x2db 0x2dc-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[2];
      intArray1[0] = 2002;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 3286;
      intArray2[1] = 3286;
      intArray2[2] = 3286;
      intArray2[3] = 732;
      intArray2[4] = 732;
      intArray2[5] = 732;
      intArray2[6] = 732;
      intArray2[7] = 3286;
      intArray2[8] = 2002;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 2002;
      intArray3[1] = 732;
      intArray3[2] = 732;
      intArray3[3] = 3286;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 732;
      intArray4[1] = 2002;
      intArray4[2] = 2002;
      intArray4[3] = 868;
      intArray4[4] = 3286;
      intArray4[5] = 3286;
      intArray4[6] = 2002;
      intArray4[7] = 732;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 0;
      intArray5[1] = 732;
      intArray5[2] = 3286;
      intArray5[3] = 868;
      intArray5[4] = (-322);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 2002;
      intArray6[1] = 868;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 732;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 868;
      intArray7[1] = 3286;
      intArray7[2] = 0;
      intArray7[3] = 2002;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(904, 1521);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[6];
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendFoldedRange((-1183), 1521);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.appendLiteral((-1183), 2152);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass5.negateClass();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      
      CharClass charClass7 = charClass0.appendClassWithSign(intArray0, 4226);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      
      CharClass charClass8 = charClass0.cleanClass();
      assertNotNull(charClass8);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      
      CharClass charClass9 = charClass0.appendClassWithSign(intArray0, 1521);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 1190;
      intArray0[3] = (-2668);
      intArray0[4] = (-1768);
      intArray0[5] = 0;
      intArray0[6] = (-1455);
      intArray0[7] = 3105;
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      String string0 = CharClass.charClassToString(intArray0, (-568));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass2.appendFoldedRange(3105, (-2668));
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass3.appendClassWithSign(intArray0, 3294);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass6.appendTable(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      
      // Undeclared exception!
      try { 
        charClass2.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1231;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 1231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 66639;
      int int0 = (-1480);
      intArray0[1] = (-1480);
      int int1 = 93;
      intArray0[2] = 93;
      int int2 = 7211;
      intArray0[3] = 7211;
      intArray0[4] = (-2922);
      intArray0[5] = 0;
      int int3 = 298;
      intArray0[6] = 298;
      intArray0[7] = (-1043);
      intArray0[8] = 1258;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1258);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 43188;
      int int0 = 68410;
      intArray0[1] = 68410;
      int int1 = (-1686);
      intArray0[2] = (-1686);
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-817);
      intArray0[1] = (-1941);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-817), (-1941)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      int int0 = (-1494);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, (-1494));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 6987;
      intArray0[2] = 1012;
      intArray0[3] = 0;
      intArray0[4] = 846;
      intArray0[5] = 3390;
      intArray0[6] = 0;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 6987, 1012, 0, 846, 3390, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {1, 845, 1, 1114111, 846, 3390, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[5][7];
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3390;
      intArray2[1] = 846;
      intArray2[2] = 0;
      intArray2[3] = 6987;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertArrayEquals(new int[] {1, 845, 1, 1114111, 846, 3390, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass2.toString();
      assertArrayEquals(new int[] {1, 845, 1, 1114111, 846, 3390, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals("[0x1-0x34d 0x1-0x10ffff]", string0);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(string0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2646);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 8);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass0.appendFoldedRange(494, 8);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertArrayEquals(new int[] {(-2645), 1114111}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass5 = charClass1.appendRange(125, 732);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      
      int[][] intArray2 = new int[5][8];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(904, 1521);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 904;
      CharClass charClass3 = new CharClass(intArray0);
      assertArrayEquals(new int[] {904, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendLiteral(0, (-2502));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendFoldedRange(904, 904);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      
      int[][] intArray1 = new int[1][3];
      intArray1[0] = intArray0;
      CharClass charClass6 = charClass5.appendNegatedTable(intArray1);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass3));
      assertEquals(1, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass6.negateClass();
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass3));
      assertEquals(1, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      
      CharClass charClass8 = charClass7.cleanClass();
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass3));
      assertEquals(1, intArray1.length);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      
      CharClass charClass9 = charClass1.appendClassWithSign(intArray0, (-2502));
      assertArrayEquals(new int[] {904, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass3));
      assertEquals(6, intArray0.length);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      
      CharClass charClass10 = charClass9.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {904, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass10.equals((Object)charClass3));
      assertEquals(6, intArray0.length);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass3);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertNotSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      
      CharClass charClass11 = charClass5.appendRange(20, 1036);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass11.equals((Object)charClass3));
      assertNotNull(charClass11);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass9);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass11);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass11);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass6);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass1);
      assertNotSame(charClass11, charClass3);
      assertSame(charClass11, charClass9);
      
      CharClass charClass12 = charClass8.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {904, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass12.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass3));
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass12);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass11);
      assertNotSame(charClass12, charClass3);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass9);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass11);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass12);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass3);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass4);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass9);
      assertNotSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass10);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2780);
      intArray0[1] = 1034;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2780), 1034}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-2780), 1034}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1034;
      intArray1[1] = 2652;
      intArray1[2] = 0;
      intArray1[3] = (-2780);
      intArray1[4] = (-2780);
      intArray1[5] = (-2780);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray1, 0);
      assertArrayEquals(new int[] {(-2780), 2652}, intArray0);
      assertArrayEquals(new int[] {1034, 2652, 0, (-2780), (-2780), (-2780)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, 8413);
      assertArrayEquals(new int[] {(-2780), 2652}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.appendRange((-2780), 1964);
      assertArrayEquals(new int[] {(-2780), 2652}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 8413;
      intArray2[1] = 8413;
      intArray2[2] = 1034;
      intArray2[3] = 8413;
      intArray2[4] = (-2780);
      intArray2[5] = (-2780);
      String string0 = CharClass.charClassToString(intArray2, 0);
      assertArrayEquals(new int[] {8413, 8413, 1034, 8413, (-2780), (-2780)}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals("[]", string0);
      assertEquals(6, intArray2.length);
      assertNotNull(string0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertArrayEquals(new int[] {(-2780), 2652}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass6 = charClass4.appendClass(intArray0);
      assertArrayEquals(new int[] {(-2780), 2652}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2646);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendFoldedRange(0, 0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass1.appendFoldedRange(1834, 0);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {(-2645), 1114111}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass6 = charClass1.appendRange(7392, 1834);
      assertArrayEquals(new int[] {0, (-2646)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      
      int[][] intArray2 = new int[4][0];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass6.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = CharClass.charClassToString(intArray0, (-601));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass2 = charClass0.appendFoldedRange((-601), 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendFoldedRange((-601), 0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass3.appendRange(0, 0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass3.appendFoldedRange((-130), 353);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1420);
      intArray0[1] = 117390;
      intArray0[2] = 3840;
      intArray0[3] = 7168;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1420), 117390, 3840, 7168}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[1][3];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {(-1420), 117390, 3840, 7168}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-1420), 117390, 3840, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {(-1420), 1114111, 3840, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass2.appendTableWithSign(intArray1, (-1));
      assertArrayEquals(new int[] {(-1420), 1114111, 3840, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2460;
      intArray0[1] = 43793;
      intArray0[2] = 91;
      intArray0[3] = 1709;
      intArray0[4] = 2343;
      intArray0[5] = 2586;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1910));
      assertArrayEquals(new int[] {2460, 43793, 91, 1709, 2343, 2586}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[4][8];
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 8332;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray1[1] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray4[1] = 992;
      intArray4[2] = 0;
      intArray4[3] = 8332;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray4[7] = 0;
      intArray4[8] = 0;
      intArray1[2] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 0;
      intArray5[1] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray4, 4365);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(904, 1521);
      charClass0.cleanClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 904;
      intArray0[1] = 1521;
      intArray0[2] = 904;
      CharClass charClass2 = charClass0.appendFoldedRange(1521, 1521);
      intArray0[3] = 904;
      intArray0[4] = 1521;
      intArray0[5] = 904;
      charClass1.appendClassWithSign(intArray0, 904);
      CharClass charClass3 = charClass2.negateClass();
      charClass3.toString();
      charClass3.appendFoldedRange(904, 1521);
      CharClass charClass4 = charClass0.appendLiteral((-1539), 904);
      assertSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass1.negateClass();
      CharClass.charClassToString(intArray0, (-568));
      CharClass charClass3 = charClass0.appendFoldedRange((-568), 0);
      CharClass charClass4 = charClass3.cleanClass();
      charClass4.appendNegatedTable(intArray1);
      charClass4.appendFoldedRange((-568), 0);
      CharClass charClass5 = charClass1.negateClass();
      charClass5.appendFoldedClass(intArray0);
      CharClass charClass6 = charClass0.negateClass();
      charClass0.appendClassWithSign(intArray0, 0);
      charClass2.appendNegatedTable(intArray1);
      charClass6.appendLiteral(1, 0);
      // Undeclared exception!
      charClass4.appendFoldedRange(65, 1924);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 91;
      intArray0[3] = (-2663);
      intArray0[4] = 1691;
      intArray0[5] = 93;
      intArray0[6] = 1114111;
      intArray0[7] = 0;
      intArray0[8] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray1);
      int[][] intArray2 = new int[6][6];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      intArray2[5] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray2, 637);
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray0, (-4245));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass.charClassToString(intArray0, (-794));
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      charClass0.appendLiteral((-794), (-794));
      CharClass charClass3 = charClass0.appendFoldedRange(209, (-2740));
      charClass3.cleanClass();
      charClass2.appendClassWithSign(intArray0, 209);
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      CharClass.charClassToString(intArray0, (-2421));
      charClass0.appendFoldedRange(1393, 1393);
      CharClass charClass3 = charClass0.cleanClass();
      CharClass charClass4 = charClass3.appendFoldedRange(1393, 1393);
      CharClass charClass5 = charClass2.negateClass();
      charClass3.appendFoldedClass(intArray0);
      CharClass charClass6 = charClass5.cleanClass();
      charClass6.appendFoldedClass(intArray0);
      charClass6.negateClass();
      charClass1.appendClassWithSign(intArray0, 1669);
      int[] intArray2 = charClass3.toArray();
      CharClass charClass7 = charClass4.appendClassWithSign(intArray2, (-2421));
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 1393;
      intArray3[2] = (-2421);
      intArray3[3] = 1393;
      intArray3[4] = 1669;
      intArray3[5] = 1393;
      intArray3[6] = 1393;
      intArray3[7] = (-2421);
      charClass7.appendClass(intArray3);
      CharClass charClass8 = new CharClass(intArray2);
      CharClass charClass9 = charClass8.cleanClass();
      charClass9.appendClass(intArray3);
      assertArrayEquals(new int[] {(-2421), 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(904, 1521);
      charClass0.cleanClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 904;
      intArray0[1] = 1521;
      intArray0[2] = 904;
      CharClass charClass2 = charClass0.appendFoldedRange(1521, 1521);
      intArray0[3] = 904;
      intArray0[4] = 1521;
      intArray0[5] = 904;
      charClass1.appendClassWithSign(intArray0, 904);
      charClass2.negateClass();
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign((int[][]) null, 10240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 1391;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 1391;
      intArray2[1] = 4;
      intArray2[2] = 494;
      intArray2[3] = 2;
      intArray2[4] = 2;
      intArray2[5] = 96;
      intArray2[6] = 1391;
      intArray2[7] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 96;
      intArray3[1] = 1391;
      intArray3[2] = 2248;
      intArray3[3] = 96;
      intArray3[4] = 96;
      intArray3[5] = 2;
      intArray3[6] = 494;
      intArray3[7] = 494;
      intArray0[2] = intArray3;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 589;
      int int0 = 197;
      intArray0[1] = 197;
      intArray0[2] = (-52);
      int int1 = 1916;
      intArray0[3] = 1916;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      int int2 = 1088;
      intArray0[7] = 1088;
      int int3 = 1710;
      intArray0[8] = 1710;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(904, 1521);
      CharClass charClass2 = charClass0.cleanClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 904;
      intArray0[1] = 1521;
      intArray0[2] = 904;
      CharClass charClass3 = charClass0.appendFoldedRange(1521, 1521);
      intArray0[3] = 904;
      intArray0[4] = 1521;
      intArray0[5] = 904;
      charClass3.negateClass();
      charClass2.appendClassWithSign(intArray0, (-3112688));
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[] intArray2 = new int[3];
      intArray2[0] = 904;
      intArray2[1] = 904;
      intArray2[2] = (-1915);
      intArray1[7] = intArray2;
      intArray1[8] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[7][9];
      int[] intArray1 = new int[4];
      intArray1[0] = (-677);
      intArray1[1] = (-308);
      intArray1[2] = 1877;
      intArray1[3] = (-1689);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = (-308);
      intArray2[1] = 1877;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 1877;
      intArray3[1] = (-677);
      intArray3[2] = (-1208);
      intArray3[3] = (-1689);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 1877;
      intArray4[1] = (-1689);
      intArray4[2] = (-1208);
      intArray4[3] = 1877;
      intArray4[4] = (-1208);
      intArray4[5] = (-1689);
      intArray4[6] = (-677);
      intArray4[7] = (-677);
      intArray4[8] = (-1208);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = (-677);
      intArray5[1] = 1877;
      intArray5[2] = (-677);
      intArray5[3] = (-677);
      intArray5[4] = (-1689);
      intArray5[5] = (-1208);
      intArray5[6] = 1877;
      intArray5[7] = (-1208);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      intArray6[0] = (-1208);
      intArray6[1] = (-677);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = (-1689);
      intArray7[1] = (-1208);
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int int0 = 40960;
      charClass1.appendLiteral(40960, 0);
      int[] intArray0 = null;
      int[][] intArray1 = new int[4][0];
      intArray1[0] = null;
      int[] intArray2 = new int[6];
      intArray2[0] = 40960;
      intArray2[1] = 40960;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = null;
      intArray1[3] = null;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1912);
      intArray0[1] = 700;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2668);
      intArray0[4] = 1106;
      intArray0[5] = 167;
      intArray0[6] = 0;
      intArray0[7] = 32;
      int int1 = (-894);
      intArray0[8] = (-894);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-2668), 40980);
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = (-1157);
      intArray0[2] = (-1157);
      int int3 = 0;
      intArray0[3] = 0;
      int int4 = 64;
      int[][] intArray1 = new int[0][0];
      charClass1.appendNegatedTable(intArray1);
      intArray0[4] = 64;
      int int5 = (-309);
      intArray0[5] = (-309);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      charClass2.appendFoldedRange(66640, 66640);
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2266;
      int int0 = 4241;
      intArray0[2] = 4241;
      intArray0[3] = 0;
      intArray0[4] = (-2096);
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int1 = 0;
      intArray0[7] = 0;
      intArray0[8] = 64;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-927), (-927));
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
