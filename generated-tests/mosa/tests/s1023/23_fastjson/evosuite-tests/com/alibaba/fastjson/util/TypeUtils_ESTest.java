/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:32:49 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.Point;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.JapaneseEra;
import java.util.BitSet;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils typeUtils0 = new TypeUtils();
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      TypeUtils.castToBytes("<");
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      String string0 = "";
      treeMap1.put("", "I)V");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Point point0 = new Point((-55675502), (-55675502));
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.awt.Point[x=-55675502,y=-55675502]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.createCollection(parameterizedTypeImpl0);
      TypeUtils.createCollection(parameterizedTypeImpl0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        JavaBeanInfo.getDefaultConstructor(class0, (Constructor<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      LinkageError linkageError0 = new LinkageError("getName", noClassDefFoundError0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(linkageError0);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockIllegalStateException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.LinkageError: getName
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.clearDeserializers();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      parserConfig0.getDeserializer((Type) class0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<SQLException> class0 = SQLException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@9b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "{", fieldArray0);
      Class<NumberFormat> class1 = NumberFormat.class;
      Class<Annotation> class2 = Annotation.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      Type[] typeArray0 = new Type[7];
      typeArray0[5] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[4], typeArray0[5]);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@f8811532
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("kotlin.reflect.KFunction", (Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLDataException: kotlin.reflect.KFunction
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isNumber("1~<T*F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.getClassFromMapping("kotlin.reflect.KParameter");
      boolean boolean0 = TypeUtils.isNumber("RLIKE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0, true);
      TypeUtils.getGenericParamType((Type) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.isPath(class0);
      Class<?> class1 = TypeUtils.loadClass("Ljava.awt.Font", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?", classLoader1, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(";;{d}!B{cQ\u0006DeQ^V?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";;{d}!B{cQ\u0006DeQ^V?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("B");
      TypeUtils.castToString(noSuchMethodError0);
      Class<Byte> class0 = Byte.class;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer((ParserConfig) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.loadClass("L");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeSet<TimeDeserializer> treeSet0 = new TreeSet<TimeDeserializer>();
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Ljava.util.concurrent.ConcurrentSkipListSet
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      TypeUtils.isHibernateInitialized(interruptedException0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SimpleDateFormat>[] classArray0 = (Class<SimpleDateFormat>[]) Array.newInstance(Class.class, 1);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      classArray0[0] = class0;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      StackTraceElementDeserializer stackTraceElementDeserializer0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class1, parserConfig0);
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(45);
      JSONObject jSONObject1 = jSONObject0.fluentPut("EQ", "EQ");
      jSONObject1.put("1.2.46", (Object) jSONObject0);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Random.setNextRandom((-30733247));
      Point point0 = new Point((-30733247), (-942));
      Point point1 = new Point(point0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(point1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Point[x=-30733247,y=-942]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.getCollectionItemType(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      TypeUtils.isHibernateInitialized(interruptedException0);
      ParserConfig parserConfig0 = new ParserConfig();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("198)mTDJGD~i", treeMap0);
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.getSerializeFeatures(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      TypeUtils.isHibernateInitialized(interruptedException0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SimpleDateFormat>[] classArray0 = (Class<SimpleDateFormat>[]) Array.newInstance(Class.class, 1);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      classArray0[0] = class0;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(classArray0, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      Class<Timestamp> class0 = Timestamp.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[1], (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.class;
      TypeUtils.isPath(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "scanStringArray");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.nio.file.Paths");
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.nio.file.Paths");
      sQLTransientException0.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLTransientException: java.nio.file.Paths
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("0000-00-00T00:00:00.000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 0000-00-00T00:00:00.000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("i/ ;hA*)P<F{q", "i/ ;hA*)P<F{q");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLTimeoutException: i/ ;hA*)P<F{q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      BufferCapabilities bufferCapabilities1 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bufferCapabilities0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.isNumber("%Ad?");
      TypeUtils.decapitalize("%Ad?");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, treeMap0);
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.getCollectionItemType(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(linkedHashMap0);
      TypeUtils.getClassFromMapping("/4t'$9");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) sQLClientInfoException0, (Type) class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : -
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isGenericParamType(class0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.getSerializeFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(40);
      atomicInteger0.decrementAndGet();
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intBinaryOperator0).applyAsInt(anyInt() , anyInt());
      atomicInteger0.accumulateAndGet(40, intBinaryOperator0);
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      atomicInteger0.updateAndGet(intUnaryOperator0);
      atomicInteger0.getAndDecrement();
      Class<Byte> class0 = Byte.class;
      TypeUtils.castToJavaBean((Object) atomicInteger0, class0);
      TypeUtils.fnv1a_64("Ljava.util.concurrent.ConcurrentSkipListMap");
      String string0 = "}'wR";
      TypeUtils.decapitalize("}'wR");
      SecurityException securityException0 = new SecurityException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("bGbRmRDK+)xHDp6x ,");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("}'wR", "Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap", 23);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("]S(?f]'93#", "bGbRmRDK+)xHDp6x ,", "]S(?f]'93#", 40);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Ljava.awt.Point", "Lorg.springframework.util.LinkedMultiValueMap", "com.alibaba.fastjson.JSONPathException", 23);
      stackTraceElementArray0[2] = stackTraceElement2;
      securityException0.setStackTrace(stackTraceElementArray0);
      securityException0.addSuppressed(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass("=j9-7V@<?[F15]g");
      TypeUtils typeUtils0 = new TypeUtils();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.loadClass("#0");
      TypeUtils.castToBigDecimal((Object) null);
      ThreadGroup threadGroup0 = new ThreadGroup("M64yNhd8A");
      ThreadGroup threadGroup1 = new ThreadGroup((String) null);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<Currency> class0 = Currency.class;
      TypeUtils.castToJavaBean((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockThread.interrupted();
      ClassLoader.getSystemClassLoader();
      Class<JobAttributes> class0 = JobAttributes.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(serializeBeanInfo0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.al\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.awt.Rectangl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Rectangl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      TypeUtils.isHibernateInitialized(interruptedException0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SimpleDateFormat>[] classArray0 = (Class<SimpleDateFormat>[]) Array.newInstance(Class.class, 1);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      classArray0[0] = class0;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      parserConfig1.putDeserializer(class0, numberDeserializer0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(classArray0, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      TypeUtils.castToSqlTime(byte0);
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?", classLoader1, true);
      TypeUtils.getClassFromMapping(";;{d}!B{cQ\u0006DeQ^V?");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      TypeUtils.castToSqlTime(byte0);
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      boolean boolean0 = true;
      TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?", classLoader1, true);
      TypeUtils.getClassFromMapping(";;{d}!B{cQ\u0006DeQ^V?");
      Class<InstantiationException> class1 = InstantiationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = null;
      try {
        linkedHashMap0 = new LinkedHashMap<String, Field>((byte)48, 0.0F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.loadClass("#0");
      TypeUtils.castToBigDecimal((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ThreadGroup threadGroup0 = new ThreadGroup("M64yNhd8A");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      Class<Annotation> class1 = Annotation.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Type[] typeArray0 = new Type[7];
      typeArray0[5] = (Type) class1;
      ThreadGroup threadGroup0 = new ThreadGroup("<init>");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "getgetCurrency");
      threadGroup1.destroy();
      MockThread mockThread0 = new MockThread((Runnable) null, "getgetInternationalCurrencySymbol");
      ThreadGroup threadGroup2 = new ThreadGroup("<init>");
      ThreadGroup threadGroup3 = new ThreadGroup(threadGroup2, "internationalCurrencySymbol");
      MockThread mockThread1 = new MockThread(threadGroup3, mockThread0, "getgetInternationalCurrencySymbol");
      MockThread.interrupted();
      mockThread1.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.clearClassMapping();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(typeArray0[5]).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("getgetCurrency");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : getgetCurrency
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.loadClass("");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Type[] typeArray0 = new Type[2];
      Class<Timestamp> class0 = Timestamp.class;
      Class<Object> class1 = Object.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "cZR", fieldArray0);
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("originalNumberFormat", (Method) null, (Field) null, class2, class2, 60, 3927, 3927, (JSONField) null, (JSONField) null, "cZR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ParserConfig parserConfig0 = new ParserConfig(true);
          Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
          ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
          String string0 = "Kj:Wvk0Nb";
          Type[] typeArray0 = new Type[4];
          typeArray0[0] = (Type) class0;
          typeArray0[1] = (Type) class0;
          typeArray0[2] = (Type) class0;
          parserConfig0.getDeserializer((Type) class0);
          typeArray0[3] = (Type) class0;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[2]);
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) throwableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // create asm serializer error, class class com.alibaba.fastjson.util.FieldInfo
             //
             verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      StringReader stringReader0 = new StringReader("scanFieldFloatArray");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1854));
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      ThreadGroup threadGroup0 = new ThreadGroup("scanFieldFloatArray");
      MockThread.interrupted();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.JSONReaderScanner@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, treeMap0);
      MockThread mockThread0 = new MockThread("w#KM");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("kotlin.ranges.CharRange", classLoader0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      TreeSet<TimeDeserializer> treeSet0 = new TreeSet<TimeDeserializer>();
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Ljava.awt.Rectangle", "Ljava.awt.Rectangle", intArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.BatchUpdateException: Ljava.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<Short> class0 = Short.class;
      TypeUtils.isPath(class0);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      TypeUtils.clearClassMapping();
      Locale locale0 = Locale.KOREA;
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<VerifyError> class0 = VerifyError.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass((String) null);
      TypeUtils typeUtils0 = new TypeUtils();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class1, identityHashMap0, true, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("");
      TypeUtils.decapitalize("");
      Class<Short> class0 = Short.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.NoSuchMethodError: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WEEK_OF_MONTH_FIELD");
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("G");
      TypeUtils.decapitalize("G");
      TypeUtils typeUtils0 = new TypeUtils();
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangl");
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      mockGregorianCalendar0.getGregorianChange();
      Boolean.valueOf("Ljava.awt.Rectangl");
      TypeUtils.castToDate((Object) null);
      TypeUtils.toLocale("Ljava.awt.Rectangl");
      TypeUtils.clearClassMapping();
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      TypeUtils.loadClass("");
      TypeUtils.getKoltinConstructorParameters((Class) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangl");
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      ThreadGroup threadGroup0 = new ThreadGroup("~VX.#f.v&");
      MockThread.interrupted();
      ClassLoader.getSystemClassLoader();
      Class<JobAttributes> class0 = JobAttributes.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("~VX.#f.v&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("B");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Class<String> class0 = String.class;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializeConfig0.setAsmEnable(false);
      serializeConfig0.config(class0, serializerFeature0, false);
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<NumberFormat> class2 = NumberFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      Class<Annotation> class1 = Annotation.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Type[] typeArray0 = new Type[7];
      typeArray0[5] = (Type) class1;
      ThreadGroup threadGroup0 = new ThreadGroup("<init>");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "getgetCurrency");
      threadGroup1.destroy();
      Class<Double> class2 = Double.TYPE;
      MockDate mockDate0 = new MockDate(93, 93, 93);
      Class<Double> class3 = Double.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockDate0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : Mon Jan 01 00:00:00 GMT 2001
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      parserConfig0.setDefaultClassLoader(aSMClassLoader0);
      TypeUtils.getClassFromMapping("can not cast to byte, value : ");
      TypeUtils.isNumber("%Ad?");
      TypeUtils.decapitalize((String) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.fnv1a_64("syntax error, expect [, actual ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("can not cast to float, value : ", classLoader1, false);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      ClassLoader.getSystemClassLoader();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      ParserConfig.getGlobalInstance();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("vendorCode", numberFormatException0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@160a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.isNumber("%Ad?");
      TypeUtils.castToChar((Object) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      MockThread mockThread0 = new MockThread("fastjson.parser.autoTypeAccept");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      classLoader0.setDefaultAssertionStatus(true);
      WeakHashMap<MockHijrahDate, Method> weakHashMap0 = new WeakHashMap<MockHijrahDate, Method>();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      TypeUtils.castToSqlTime(byte0);
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      TypeUtils.clearClassMapping();
      TypeUtils.isNumber("K[YP}HzVH_U}q-ug");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils.loadClass("#0");
      TypeUtils.castToLong((Object) null);
      Class<NumberFormatException> class0 = NumberFormatException.class;
      TypeUtils.isKotlin(class0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      Class<Annotation> class1 = Annotation.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Type[] typeArray0 = new Type[7];
      typeArray0[5] = (Type) class1;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("198)mTDJGD~i", treeMap0);
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      TypeUtils.getSerializeFeatures(class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("198)mTDJGD~i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"198)mTDJGD~i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int[] intArray0 = new int[7];
      intArray0[0] = 23;
      TypeUtils typeUtils0 = new TypeUtils();
      InterruptedException interruptedException0 = new InterruptedException("java.awt.Font");
      interruptedException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("java.awt.Font");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "#0";
      TypeUtils.loadClass("#0");
      TypeUtils.castToBigDecimal((Object) null);
      ThreadGroup threadGroup0 = new ThreadGroup("M64yNhd8A");
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      mockGregorianCalendar0.toZonedDateTime();
      mockGregorianCalendar0.getGregorianChange();
      Boolean boolean0 = new Boolean("G!$t'sGV-K");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("G!$t'sGV-K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : G!$t'sGV-K
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      TypeUtils.clearClassMapping();
      TypeUtils.isNumber("3]*7");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("writeAsArrayNonContext", "writeAsArrayNonContext");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      InterruptedException interruptedException0 = new InterruptedException((String) null);
      InterruptedException interruptedException1 = new InterruptedException((String) null);
      interruptedException1.getLocalizedMessage();
      TypeUtils.castToFloat((Object) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("F", treeMap0);
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.castToInt((Object) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("getgetCurrencSymbol");
      interruptedException0.addSuppressed(noSuchFieldException0);
      TypeUtils.isHibernateInitialized(interruptedException0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SimpleDateFormat>[] classArray0 = (Class<SimpleDateFormat>[]) Array.newInstance(Class.class, 1);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      classArray0[0] = class0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("L;", classLoader0, false);
      TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      TypeUtils.clearClassMapping();
      TypeUtils.clearClassMapping();
      TypeUtils.isNumber("BM=");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.getCollectionItemType(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      String[] stringArray0 = ParserConfig.DENYS;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.getCollectionItemType(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, treeMap0);
      treeMap0.floorEntry("(I)Ljava/lang/Object;");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TypeUtils.cast((Object) null, (Type) class0, (ParserConfig) null);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class0);
      Point point0 = new Point(18, 1071);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[2] = 1532;
      intArray0[3] = 1051;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) intArray0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("java.time.Instant", (ClassLoader) aSMClassLoader0, false);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      ParserConfig.getGlobalInstance();
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.castToDate(date0);
      TypeUtils.toLocale("com.alibaba.fastjson.serializer.EnumerationSerializer");
      TypeUtils.clearClassMapping();
      TypeUtils.clearClassMapping();
      TypeUtils.isNumber("getAnnotations");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("writeAsArrayNonContext", "writeAsArrayNonContext");
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      TypeUtils.getCollectionItemClass(class0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.castToSqlDate((Object) null);
      ClassLoader.getSystemClassLoader();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int[] intArray0 = new int[7];
      intArray0[0] = 48;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("com.alibaba.fastjson.util.IdentityHashMap", classLoader0, true);
      TypeUtils.toLocale("isNotWriteDefaultValue");
      TypeUtils.clearClassMapping();
      TypeUtils.clearClassMapping();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(mockHijrahDate0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      ParserConfig parserConfig0 = new ParserConfig(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      WeakHashMap<ChoiceFormat, JobAttributes> weakHashMap0 = new WeakHashMap<ChoiceFormat, JobAttributes>();
      LinkedHashSet<MessageFormat> linkedHashSet0 = new LinkedHashSet<MessageFormat>();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
      linkedHashSet0.contains(mockNullPointerException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass("=j9-7V@<?[F15]g");
      TypeUtils typeUtils0 = new TypeUtils();
      Boolean boolean0 = new Boolean("=j9-7V@<?[F15]g");
      BigDecimal bigDecimal0 = new BigDecimal(3572L);
      TypeUtils.castToDate(bigDecimal0);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      TypeUtils.getGenericParamType(propertyProcessableDeserializer0.type);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      imageCapabilities0.clone();
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(true);
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities1, bufferCapabilities_FlipContents0);
      BufferCapabilities bufferCapabilities1 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ClassLoader.getSystemClassLoader();
      Class<JobAttributes> class0 = JobAttributes.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      TypeUtils.castToBigInteger((Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      Class<Annotation> class1 = Annotation.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Type[] typeArray0 = new Type[7];
      typeArray0[5] = (Type) class1;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<TimeDeserializer> class2 = TimeDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      Short short0 = new Short((short)1399);
      TypeUtils.castToBoolean(short0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("B", "UPnrL*X>4m!");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      Class<?> class2 = TypeUtils.getRawClass(typeArray0[1]);
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAsmEnable(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "B", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class java.lang.String, [B cannot be cast to [Ljava.lang.Object;
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      treeMap1.put("", "I)V");
      Class<MockDate> class0 = MockDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("#0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : #0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int[] intArray0 = new int[7];
      intArray0[0] = 48;
      TypeUtils typeUtils0 = new TypeUtils();
      JSON.DEFAULT_TYPE_KEY = "Dl~341a";
      TypeUtils.getGenericParamType(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeUtils.loadClass("#0");
      TypeUtils.castToBigDecimal((Object) null);
      ThreadGroup threadGroup0 = new ThreadGroup("M64yNhd8A");
      MockThread mockThread0 = new MockThread((Runnable) null, "M64yNhd8A");
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<NumberFormat> class0 = NumberFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TypeUtils.castToBoolean((Object) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("[int", (ClassLoader) aSMDeserializerFactory0.classLoader);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockThread.interrupted();
      ClassLoader.getSystemClassLoader();
      MockThread mockThread0 = new MockThread((Runnable) null, "isbyteValue");
      TypeUtils.isNumber("");
      Locale locale0 = Locale.KOREA;
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Float> class1 = Float.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, false);
      String string0 = "getMetaClass";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("B", "getMetaClass");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TypeUtils.getClass((Type) class0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TypeUtils.loadClass("#0");
      TypeUtils.fnv1a_64_lower("can not cast to long, value : ");
      Boolean boolean0 = Boolean.TRUE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1753), (-1753), 17);
      TypeUtils.castToDate(mockGregorianCalendar0);
      TypeUtils.toLocale("#0");
      TypeUtils.clearClassMapping();
      TypeUtils.clearClassMapping();
      TypeUtils.isNumber("can not cast to long, value : ");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass("=j9-7V@<?[F15]g");
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Method> class1 = Method.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<MockDate> class2 = MockDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class2, identityHashMap0, false, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.loadClass("#0");
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      TypeUtils.cast((Object) null, class1, parserConfig0);
      Class<Locale> class2 = Locale.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      TypeUtils.buildBeanInfo(class0, map0, (PropertyNamingStrategy) null, false);
      TypeUtils.isGenericParamType(class3);
      TypeUtils.castToShort((Object) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getClass((Type) class1);
      Class<Integer> class4 = Integer.TYPE;
      TypeUtils.unwrapOptional(class2);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("kotlin.Metadata", "fastjson.parser.deny", intArray0);
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      String string0 = "4*~>B)^;jn`3<l";
      TypeUtils.loadClass("4*~>B)^;jn`3<l", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      TypeUtils.toLocale("S*F_ZI+}nQDK");
      TypeUtils.clearClassMapping();
      Class<Currency> class0 = Currency.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "4*~>B)^;jn`3<l", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[ZTY=^R;cjKc_/Y;YXv", "UPnrL*X>4m!");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      TypeUtils.getRawClass(typeArray0[1]);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("UPnrL*X>4m!", decimalFormatSymbols0);
      TypeUtils.castToDouble((Object) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangl");
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      ThreadGroup threadGroup0 = new ThreadGroup("~VX.#f.v&");
      MockThread.interrupted();
      ParserConfig parserConfig0 = new ParserConfig(false);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("_SK'Pca", concurrentHashMap0);
      Class<Dimension> class0 = Dimension.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Double double0 = new Double(1.0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("false");
      TypeUtils typeUtils0 = new TypeUtils();
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 3);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "currency";
      TypeUtils.loadClass("currency");
      TypeUtils.getCollectionItemType((Type) null);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      parserConfig0.clearDeserializers();
      parserConfig0.checkAutoType("currency", class0, (-4616));
      parserConfig0.getDeserializer((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "currency", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.loadClass("#0");
      TypeUtils.castToBigDecimal((Object) null);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("K|_?", treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("");
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<NumberFormat> class0 = NumberFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TypeUtils.castToBoolean("");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TypeUtils.loadClass("currency");
      TypeUtils.getCollectionItemType((Type) null);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("currency");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"currency\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      TypeUtils.decapitalize("Z");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getClass((Type) class0);
      Point point0 = new Point((-55675502), (-55675502));
      Long long0 = new Long((-5L));
      TypeUtils.castToInt(long0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("kD", "I)V", (-55675502));
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLRecoverableException: kD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangl");
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      ThreadGroup threadGroup0 = new ThreadGroup("~VX.#f.vH&");
      MockThread.interrupted();
      ClassLoader.getSystemClassLoader();
      TypeUtils.toLocale("null");
      TypeUtils.clearClassMapping();
      Class<Currency> class0 = Currency.class;
      TypeUtils.castToJavaBean((Object) "null", class0);
      TypeUtils.loadClass("Ljava.awt.Rectangl");
  }
}
