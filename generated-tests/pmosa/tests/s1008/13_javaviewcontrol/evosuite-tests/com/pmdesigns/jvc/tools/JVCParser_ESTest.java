/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:06:53 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/13_javaviewcontrol/7e0b[B~r*~JzS");
      linkedHashSet0.add("\"[[!\"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\"[[!\"");
      JVCParser jVCParser0 = new JVCParser("7e0b[B~r*~JzS", linkedHashSet0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      StringReader stringReader0 = new StringReader("))");
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((Reader) stringReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      Token token0 = jVCParser0.getToken((-1714));
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      Token token1 = Token.newToken(4373, ">Br}*Gu(p*8hX");
      Token token2 = Token.newToken(5364);
      token0.specialToken = token2;
      token2.specialToken = token1;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      token0.next = token1;
      JVCParser.main(stringArray0);
      JVCParser.main(stringArray0);
      jVCParser0.getNextToken();
      jVCParser0.ReInit((Reader) null);
      jVCParser0.enable_tracing();
      jVCParser0.disable_tracing();
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      jVCParser0.ReInit((Reader) null);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      assertEquals(100, jVCParser0.debugColumn);
      
      StringReader stringReader0 = new StringReader("))");
      JVCParser jVCParser1 = new JVCParser(stringReader0);
      Token token0 = jVCParser1.getNextToken();
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals(1, token0.endColumn);
      
      jVCParser1.disable_tracing();
      assertEquals(100, jVCParser1.debugColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = jVCParser0.jj_input_stream;
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      dataInputStream0.skipBytes((-1713));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      jVCParser0.ReInit(jVCParserTokenManager0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4999);
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.ReInit((JVCParserTokenManager) null);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 8);
      JVCParser jVCParser0 = new JVCParser(pushbackInputStream0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jk-YT";
      stringArray0[1] = "Include file (";
      stringArray0[2] = "\"T$ `4h_m76wbx9=";
      JVCParser.main(stringArray0);
      String string0 = jVCParser0.parse();
      assertEquals("", string0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      jVCParser0.getToken((-1714));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.spliterator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      JVCParser jVCParser1 = null;
      try {
        jVCParser1 = new JVCParser("zpAz!&g)r", linkedHashSet0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 8);
      JVCParser jVCParser0 = new JVCParser(pushbackInputStream0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jk-YT";
      stringArray0[1] = "Include file (";
      stringArray0[2] = "\"T$ `4h_m76wbx9=";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "jk-YT";
      stringArray1[1] = "\"T$ `4h_m76wbx9=";
      try { 
        JVCParser.main(stringArray1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 109);
      PipedInputStream pipedInputStream1 = new PipedInputStream(109);
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-debug";
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/13_javaviewcontrol/(b9m>}w!g~Q01r.p");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\n");
      StringReader stringReader0 = new StringReader("(b9m>}w!g~Q01r.p");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(b9m>}w!g~Q01r.p";
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jk-YT";
      stringArray0[1] = "Include file (";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/13_javaviewcontrol/jk-YT");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "n}PEg1UT,#/EKR");
      stringArray0[2] = "\"T$ `4h_m76wbx9=";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "jk-YT";
      stringArray1[1] = "\"T$ `4h_m76wbx9=";
      JVCParser.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader(")");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = new Token();
      jVCParser0.jj_nt = token0;
      String string0 = jVCParser0.parse();
      assertEquals("_sb.append(\")\");", string0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.getToken(1673);
      String string0 = jVCParser0.parse();
      assertEquals("", string0);
      
      jVCParser0.generateParseException();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/13_javaviewcontrol/(b9m>}w!g~Q01r.p");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\n");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(b9m>}w!g~Q01r.p";
      Locale locale0 = Locale.forLanguageTag("-debug");
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      JVCParser jVCParser0 = new JVCParser("(b9m>}w!g~Q01r.p", set0, true);
      String string0 = jVCParser0.parse();
      assertEquals("_sb.append(\"\\n\");                                                                                  \t// (b9m>}w!g~Q01r.p (1)\n", string0);
  }
}
