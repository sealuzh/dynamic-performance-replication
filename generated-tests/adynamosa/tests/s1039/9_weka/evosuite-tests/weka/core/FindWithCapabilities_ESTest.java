/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 16:22:44 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "la6st";
      stringArray0[1] = "S;FN";
      stringArray0[2] = "Installed\tRepository\tPackage\n";
      stringArray0[3] = "[";
      stringArray0[4] = ">=";
      FindWithCapabilities.main(stringArray0);
      stringArray0[5] = "-numeric-atts";
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      stringArray0[6] = "[BVzZ";
      stringArray0[7] = "6?c";
      stringArray0[8] = "http://en.wikipedia.org/wiki/Euclidean_distance";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("'B HyTO+j!~x$w6<");
      findWithCapabilities0.m_Misses = vector0;
      SingleIndex singleIndex0 = new SingleIndex();
      String string0 = "weka/core/Capabilitie.props";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      String string1 = "cvslKj";
      stringArray0[4] = "cvslKj";
      stringArray0[5] = "weka/core/Capabilitie.props";
      String string2 = "-not-no-class";
      stringArray0[6] = "-not-no-class";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("a");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "F#E7^";
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities2 = (FindWithCapabilities)findWithCapabilities0.m_Handler;
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances0.m_MultiInstance = false;
      testInstances0.getHandler();
      findWithCapabilities0.getOptions();
      capabilities1.m_MinimumNumberInstances = (-2263);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities1.setFilename("F#E7^");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities3.getCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities3.isEnabled(capabilities_Capability0);
      findWithCapabilities3.setClassIndex("]$P4'<%k>Dw69%mx");
      try { 
        findWithCapabilities3.setOptions(testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      findWithCapabilities0.m_Superclass = "F#E7^";
      findWithCapabilities0.setFilename("F#E7^");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "F#E7^");
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.getClassCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("F#E7^");
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "F#E7^";
      findWithCapabilities0.setFilename("F#E7^");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("F#E7^");
      Instances.test(testInstances0.DEFAULT_WORDS);
      Instances instances1 = new Instances(instances0, (-2058380127));
      Capabilities capabilities0 = Capabilities.forInstances(instances1);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setCapabilities(capabilities2);
      findWithCapabilities0.setClassIndex(".0");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("ux($bEL/USU<pjL:");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      findWithCapabilities0.m_Superclass = "F#E7^";
      findWithCapabilities0.setFilename("F#E7^");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enableAllAttributes();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setOptions(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      Random.setNextRandom((-2078405495));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.handles((Capabilities.Capability) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "F#E7^";
      findWithCapabilities0.setFilename("F#E7^");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.dependencies();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "last";
      stringArray0[1] = "fV8*w";
      stringArray0[2] = "lGzUr";
      stringArray0[3] = "-unary-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "v:F|8-";
      stringArray0[1] = "XNNI sA%(\"UAU";
      stringArray0[2] = "-numeric-class";
      stringArray0[3] = "=wkxpI^";
      stringArray0[4] = "]C6<uz?RgJN";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.isEnabledNot((Capabilities.Capability) null);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.toSource("");
      capabilities0.enableAll();
      findWithCapabilities0.setCapabilities(capabilities0);
      Random.setNextRandom(1111);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      Attribute attribute0 = new Attribute("DZZw", vector0);
      attribute0.copy();
      capabilities2.testWithFail(attribute0);
      capabilities2.enableAllClassDependencies();
      findWithCapabilities0.setClassIndex("khR");
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.handles(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.handles(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      assertFalse(findWithCapabilities0.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-missing-class-values";
      stringArray0[1] = "8,Lphc\"&n@}V^mldV(G";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1";
      stringArray0[1] = "-relational-atts";
      stringArray0[2] = "only-multiinstance";
      stringArray0[3] = "t/(";
      stringArray0[4] = "t";
      stringArray0[5] = ".0";
      stringArray0[6] = "VAV[}Eg0xkcR8oX";
      stringArray0[7] = "*:b8+pwbNccnJ%Ngo";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nThere are conflicting dependencies:\n");
      stringArray0[0] = "S%@:vfnGfI}";
      stringArray0[1] = "";
      stringArray0[2] = "-relational-atts";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Random.setNextRandom(1002);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.m_MinimumNumberInstances = (-1843911961);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1002);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      try { 
        capabilities0.testWithFail((Instances) null, 28, 6);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.core.FindWithCapabilities: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.m_Misses.add("*:b8+pwbNccnJ%Ngo");
      findWithCapabilities0.setFilename("t!4T|XCd+.JbGAsx(o");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabled((Capabilities.Capability) null);
      System.setCurrentTimeMillis(0L);
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(1.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("'B HyTO+j!~x$w6<");
      findWithCapabilities0.m_Misses = vector0;
      SingleIndex singleIndex0 = new SingleIndex();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      stringArray0[3] = "f+6";
      stringArray0[4] = "cvslKj";
      stringArray0[5] = "weka/core/Capabilitie.props";
      stringArray0[6] = "-not-no-class";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.disable(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities1.getMatches();
      assertTrue(vector1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      SingleIndex singleIndex0 = new SingleIndex();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.getNotCapabilities();
      findWithCapabilities2.enable(capabilities_Capability0);
      try { 
        findWithCapabilities2.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      SingleIndex singleIndex0 = new SingleIndex("nominal-atts");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      vector0.add("-superclass");
      findWithCapabilities0.setFilename("-superclass");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-superclass";
      stringArray0[1] = "-superclass";
      stringArray0[2] = "nominal-atts";
      stringArray0[3] = "nominal-atts";
      stringArray0[4] = "-superclass";
      stringArray0[5] = "\n";
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities0.getCapabilities();
      Random.setNextRandom(0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAll();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getNotCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      HashSet<GlobalInfoJavadoc> hashSet0 = new HashSet<GlobalInfoJavadoc>();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities0.getAttributeCapabilities();
      vector0.containsAll(hashSet0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zgV9@C7T~");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_NotCapabilities = null;
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "~M";
      stringArray0[1] = "6+]Ni";
      stringArray0[2] = "-date-class";
      stringArray0[3] = "\tMust handle multi-instance data.";
      stringArray0[4] = ")d^/X";
      stringArray0[5] = " doesn't seem to exist!";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.setFilename("*lUU'k");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("Not enough training instances with class labels (required: ");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getMatches();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\tMust handle string attributes.";
      stringArray0[1] = "-numeric-class";
      stringArray0[2] = "";
      stringArray0[3] = "_W3K<c8LJ~.VIA";
      stringArray0[4] = "H/";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[5] = "PpF>";
      stringArray0[6] = "&FkHmFW'BZ!d+9m}'C";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "EQmvD_+%<NY3U";
      stringArray1[1] = "PpF>";
      stringArray1[2] = "H/";
      stringArray1[3] = "PpF>";
      stringArray1[4] = "woWZ^HhZZ(+3EOy&";
      stringArray1[5] = "_W3K<c8LJ~.VIA";
      FindWithCapabilities.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      capabilities0.enableAll();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getHandler();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.getHandler();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.setClassIndex("-only-multiinstance");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      Random.setNextRandom(116);
      System.setCurrentTimeMillis(116);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAll();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.setClassIndex("$6");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      testInstances0.setRelationalClassFormat((Instances) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.setFilename("S%@:vfnGfI}");
      testInstances0.setNumRelationalDate((-1));
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities1.m_NotCapabilities = capabilities0;
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities2.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities2.m_Superclass = " ";
      FindWithCapabilities findWithCapabilities3 = (FindWithCapabilities)findWithCapabilities2.m_Handler;
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities2);
      testInstances1.getHandler();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      findWithCapabilities2.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setClassIndex("S%@:vfnGfI}");
      findWithCapabilities0.enable(capabilities_Capability0);
      Random.setNextRandom(0);
      System.setCurrentTimeMillis((-2));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "v:F|8-");
      findWithCapabilities0.setClassIndex("$6");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      testInstances0.setRelationalClassFormat((Instances) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.setFilename("S%@:vfnGfI}");
      testInstances0.setNumRelationalDate((-1));
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities1.m_NotCapabilities = capabilities0;
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities2.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities2.m_Superclass = " ";
      FindWithCapabilities findWithCapabilities3 = (FindWithCapabilities)findWithCapabilities2.m_Handler;
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities2);
      testInstances1.getHandler();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      findWithCapabilities2.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setClassIndex("S%@:vfnGfI}");
      findWithCapabilities0.enable(capabilities_Capability0);
      Random.setNextRandom(0);
      System.setCurrentTimeMillis((-2));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#>.Fs;2u;knk?6");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setFilename(" ");
      findWithCapabilities3.getOptions();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances.forCapabilities(capabilities1);
      findWithCapabilities2.setHandler(findWithCapabilities4);
      findWithCapabilities4.getOptions();
      capabilities1.getClassCapabilities();
      findWithCapabilities4.listOptions();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-unary-class";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("\nOriginal dataset:\n");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("last");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      stringArray0[0] = "not-numeric-atts";
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities1.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.m_Packages = null;
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getMatches();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      vector0.add("8034");
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities1.getHandler();
      findWithCapabilities0.getMatches();
      findWithCapabilities1.find();
      findWithCapabilities0.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("*lUU'k");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("Not enough training instances with class labels (required: ");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getMatches();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities2.m_Handler;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities2);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      findWithCapabilities2.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities3.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      TestInstances testInstances1 = new TestInstances();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities4.setFilename(" ");
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities7.getOptions();
      FindWithCapabilities.main(stringArray0);
      CapabilitiesHandler capabilitiesHandler1 = testInstances0.m_Handler;
      Capabilities capabilities2 = new Capabilities((CapabilitiesHandler) null);
      capabilities1.getOtherCapabilities();
      TestInstances.forCapabilities(capabilities1);
      findWithCapabilities7.setHandler(findWithCapabilities4);
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities8.getNotCapabilities();
      findWithCapabilities4.listOptions();
      try { 
        findWithCapabilities3.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("*lUU'k");
      EvoSuiteFile evoSuiteFile0 = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Filename = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      FindWithCapabilities.main(stringArray0);
      boolean boolean1 = findWithCapabilities0.handles(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-not-string-atts");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "-not-string-atts";
      stringArray0[3] = "-not-string-atts";
      stringArray0[4] = "";
      stringArray0[5] = "-not-string-atts";
      stringArray0[7] = "-not-string-atts";
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#?_9S}O5-+QTv1LO.?";
      stringArray0[1] = "5";
      stringArray0[2] = "-not-numeric-atts";
      stringArray0[3] = "WJsCFpuE7Kwj7";
      stringArray0[4] = "E{W[O&OC*,4,,$D3{b|";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("*lUU'k");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.setFilename(";QT2x");
      findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String[] stringArray1 = new String[7];
      stringArray1[0] = ";QT2x";
      stringArray1[1] = "*lUU'k";
      stringArray1[2] = "*lUU'k";
      stringArray1[3] = "*lUU'k";
      stringArray1[4] = "*lUU'k";
      stringArray1[5] = ";QT2x";
      stringArray1[6] = ";QT2x";
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setFilename("*lUU'k");
      FindWithCapabilities.main(stringArray0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities3.m_Handler;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities2);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.getHandler();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      String[] stringArray2 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getNotCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3u?W\"gPAl\"4h02");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_Words = stringArray0;
      findWithCapabilities0.setClassIndex("$6");
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setFilename("$6");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      try { 
        findWithCapabilities1.setOptions(testInstances0.m_Words);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-not-string-atts");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "-not-string-atts";
      stringArray0[2] = "-not-string-atts";
      stringArray0[3] = "-not-string-atts";
      stringArray0[4] = "";
      stringArray0[5] = "-not-string-atts";
      stringArray0[6] = "-not-string-atts";
      stringArray0[7] = "-not-string-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      vector0.add("");
      findWithCapabilities0.getMatches();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7N'Z5a!u,X";
      stringArray0[1] = ",Ic57tf,d6;WKP~}N";
      stringArray0[2] = "bBJAgVi<g0*!)P*7";
      stringArray0[3] = "-mC=~}pmuBhq";
      stringArray0[4] = "X";
      stringArray0[5] = "63&NEXyymSE[Z=w";
      String string0 = "-not-nominal-atts";
      stringArray0[6] = "-not-nominal-atts";
      stringArray0[7] = "4+?";
      stringArray0[8] = "I>+Ey1Q^JsD{\"";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_MultiInstance = false;
      findWithCapabilities0.setClassIndex("$6");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.find();
      vector0.add("-not-numeric-atts");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Instances instances0 = testInstances0.generate("-not-numeric-atts");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities1.find();
      findWithCapabilities2.setFilename("N=Ovy@c>x7");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Pji`I";
      stringArray0[1] = "weka/core/Capabilitie.props";
      stringArray0[2] = "weka/core/Capabilitie.props";
      stringArray0[3] = "[";
      stringArray0[4] = ";R8rY*~LM '=:";
      stringArray0[5] = "[";
      stringArray0[6] = "G!pPXj65>3|{dR +";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("*lUU'k");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("Not enough training instances with class labels (required: ");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getMatches();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("*lUU'k");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("*lUU'k", findWithCapabilities0.getFilename());
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) arrayList1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.setClassIndex(";6KiOTDJ#Fy");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename(";,7]>xbv");
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.getClassCapabilities();
      capabilities0.getOtherCapabilities();
      capabilities0.getAttributeCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities2.setNotCapabilities(capabilities2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities4);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("*lUU'k");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("*lUU'k", findWithCapabilities0.getFilename());
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("-not-string-atts");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.setClassIndex("$6");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$6");
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities2.getHandler();
      findWithCapabilities1.setFilename("$6");
      findWithCapabilities2.find();
      Capabilities capabilities0 = findWithCapabilities2.m_Capabilities;
      findWithCapabilities2.setCapabilities(capabilities0);
      assertFalse(findWithCapabilities2.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "-not-string-class";
      stringArray0[7] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getFilename();
      findWithCapabilities3.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getNotCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1'{X*3a");
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.getOptions();
      singleIndex0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      singleIndex0.setSingleIndex("M=S#V-Q<zt.b#)[Mg[");
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":;~ygw:NR#O@}1~5U";
      stringArray0[1] = ":;~ygw:NR#O@}1~5U";
      stringArray0[2] = ":;~ygw:NR#O@}1~5U";
      stringArray0[3] = ":;~ygw:NR#O@}1~5U";
      stringArray0[4] = ":;~ygw:NR#O@}1~5U";
      stringArray0[5] = ":;~ygw:NR#O@}1~5U";
      stringArray0[6] = ":;~ygw:NR#O@}1~5U";
      stringArray0[7] = "-string-class";
      stringArray0[8] = ":;~ygw:NR#O@}1~5U";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("*lUU'k");
      findWithCapabilities0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      assertEquals("*lUU'k", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("*lUU'k");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      assertEquals("*lUU'k", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
      
      findWithCapabilities0.getMisses();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "-only-multiinstance";
      TestInstances testInstances0 = new TestInstances();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "missing-att-values";
      stringArray0[1] = "_y";
      stringArray0[2] = "j?L7Et]";
      stringArray0[3] = "!V&w?W& 5hGT 7_";
      stringArray0[4] = "!s'7xvj_?;m1?#a%B:;";
      stringArray0[5] = "\"C%SH[3?sE S";
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom(99);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "_y";
      stringArray1[1] = "-not-missing-class-values";
      stringArray1[2] = "\"C%SH[3?sE S";
      stringArray1[3] = "a+ 1_";
      stringArray1[4] = "_y";
      stringArray1[5] = "_y";
      stringArray1[6] = "'>Bi";
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(660L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom((-2055));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("-not-string-atts");
      Vector<String> vector1 = findWithCapabilities0.find();
      vector1.add("-not-string-atts");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "-not-string-atts";
      stringArray0[2] = " ";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      Vector<String> vector0 = findWithCapabilities1.find();
      vector0.add("[*7Kk+q");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities4);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities2.getFilename();
      CapabilitiesHandler capabilitiesHandler1 = findWithCapabilities1.m_Handler;
      String[] stringArray0 = findWithCapabilities4.getOptions();
      findWithCapabilities3.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector1 = findWithCapabilities4.m_Misses;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities5.disable(capabilities_Capability1);
      findWithCapabilities0.setFilename("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      try { 
        findWithCapabilities7.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add((String) null);
      vector0.add("0-not-string-atts");
      findWithCapabilities0.listOptions();
      Vector<String> vector1 = findWithCapabilities0.find();
      vector1.add("0-not-string-atts");
      vector1.add("0-not-string-atts");
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getFilename();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray1.length);
      
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector2 = findWithCapabilities0.m_Misses;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector3 = findWithCapabilities2.m_Misses;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities2.m_Capabilities;
      capabilities0.getOtherCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities1);
      findWithCapabilities3.listOptions();
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.enable((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      capabilities1.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.setClassIndex("-1");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("BI");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.add("snsC%[U~>_-");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      findWithCapabilities3.setFilename("rcAC2]y`4E_XL");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities1.enable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("BI");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      vector0.add(">_7pkZ5TC3C>_");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.getCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities3.getNotCapabilities();
      findWithCapabilities1.listOptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "BI";
      stringArray0[3] = "TygZ";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "BI";
      stringArray0[6] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      capabilities1.enableAll();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities2.enable(capabilities_Capability1);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Capabilities capabilities2 = findWithCapabilities2.getNotCapabilities();
      assertNotSame(capabilities2, capabilities0);
      
      findWithCapabilities2.getHandler();
      Vector<String> vector1 = findWithCapabilities3.getMatches();
      findWithCapabilities2.find();
      Vector<String> vector2 = findWithCapabilities3.getMisses();
      assertNotSame(vector2, vector1);
      
      String[] stringArray1 = findWithCapabilities2.getOptions();
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
      
      testInstances0.setNumRelationalNumeric((-306));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      testInstances0.m_Relation = "f-URSs\"$njF\"";
      capabilities0.enableAll();
      findWithCapabilities0.enable(capabilities_Capability0);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Vector<String> vector1 = findWithCapabilities0.find();
      Vector<String> vector2 = findWithCapabilities0.getMisses();
      assertTrue(vector2.equals((Object)vector0));
      assertNotSame(vector2, vector1);
      
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertEquals(21, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Filename = "8034";
      findWithCapabilities0.setClassIndex("8034");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4ba*u~]~4ajJ;w";
      stringArray0[1] = "Cancel";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      findWithCapabilities0.getMatches();
      findWithCapabilities0.m_ClassIndex = null;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      vector0.add("-not-string-atts");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      capabilities0.getAttributeCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Pji`I";
      stringArray0[1] = "weka/core/Capabilitie.props";
      stringArray0[2] = "weka/core/Capabilitie.props";
      stringArray0[3] = "[";
      stringArray0[4] = ";R8rY*~LM '=:";
      stringArray0[5] = "[";
      stringArray0[6] = "G!pPXj65>3|{dR +";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      findWithCapabilities1.setFilename(" ");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "Capabilities:";
      stringArray1[1] = "[";
      stringArray1[2] = "Pji`I";
      stringArray1[3] = "-binary-class";
      stringArray1[4] = "Pji`I";
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = null;
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setClassIndex("f-URSs\"$njF\"");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
      
      testInstances0.setNumRelationalNumeric((-306));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      testInstances0.m_Relation = "f-URSs\"$njF\"";
      capabilities0.enableAll();
      findWithCapabilities0.enable(capabilities_Capability1);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      assertTrue(capabilities1.hasDependencies());
      assertNotSame(capabilities1, capabilities0);
      
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Vector<String> vector1 = findWithCapabilities0.find();
      Vector<String> vector2 = findWithCapabilities0.getMisses();
      assertNotSame(vector2, vector1);
      assertTrue(vector2.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q+K";
      stringArray0[1] = "\"6P:Np`v0'%bbeOe";
      stringArray0[2] = "-nominal-atts";
      stringArray0[3] = "[WekaPackageManager] unable to find a version of package ";
      stringArray0[4] = "|";
      stringArray0[5] = "@end";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Packages = vector0;
      vector0.add("HU3-NU 1'Vw");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.m_Misses = null;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@end";
      stringArray0[1] = "f-URSs\"$njF\"";
      stringArray0[2] = "E5RAgwLm6Ng~\"9?kqk/";
      stringArray0[3] = "f@$\"R2*?NA%";
      stringArray0[4] = "-unary-atts";
      stringArray0[5] = "weka/core/Capabilitie.props";
      stringArray0[6] = "rg-8";
      stringArray0[7] = "a";
      stringArray0[8] = "f+6";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("Expected comma in range, found: ");
      TestInstances testInstances0 = new TestInstances();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("Expected comma in range, found: ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setFilename("Expected comma in range, found: ");
      String[] stringArray0 = new String[3];
      findWithCapabilities0.m_Misses = null;
      stringArray0[0] = "Expected comma in range, found: ";
      stringArray0[1] = "Expected comma in range, found: ";
      findWithCapabilities0.getMisses();
      assertEquals("Expected comma in range, found: ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Random.setNextRandom((-1455357352));
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability2);
      assertFalse(capabilities_Capability2.equals((Object)capabilities_Capability0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "weka.core.Range";
      findWithCapabilities0.setFilename("weka.core.Range");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getNotCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("");
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      vector0.add("$+5?lHTUQ");
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getHandler();
      Random.setNextRandom(944);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Packages = vector0;
      vector0.add("HU3-NU 1'Vw");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.m_Misses = null;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("weka.core.Range");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities1;
      findWithCapabilities0.m_Filename = "Mk_2B#*9\"";
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      String string0 = findWithCapabilities0.m_Filename;
      Vector<String> vector1 = findWithCapabilities0.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "not-string-class";
      stringArray0[1] = "-c";
      stringArray0[2] = "X";
      stringArray0[3] = "plaintext";
      stringArray0[4] = "<f?Q;;#C c|)EZoF)~]";
      stringArray0[5] = "GQs-YgBCp+~%cHJ&_";
      stringArray0[6] = "weka/core/Capabilities.props";
      String string0 = "";
      stringArray0[7] = "";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.listOptions();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.find();
      Vector<String> vector0 = findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector1 = findWithCapabilities1.find();
      findWithCapabilities1.find();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      Vector<String> vector2 = findWithCapabilities0.m_Misses;
      vector0.clone();
      Vector<String> vector3 = findWithCapabilities0.m_Matches;
      Attribute attribute0 = new Attribute("weka.core.Range", vector1);
      boolean boolean0 = capabilities0.test(attribute0);
      capabilities0.clone();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-nominal-atts";
      stringArray0[1] = "weka.core.Range";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.handles(capabilities_Capability3);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.setFilename("O|\"Jn)l=");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.getRevision();
      singleIndex0.setSingleIndex(" classes that matched the criteria:\n");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename(" classes that matched the criteria:\n");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities2.handles(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities1 = new Capabilities(capabilities0.m_Owner);
      capabilities0.getOtherCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities0.setCapabilities(capabilities1);
      assertEquals("O|\"Jn)l=", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities1;
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      capabilities0.m_Owner = null;
      findWithCapabilities0.setFilename("O|\"Jn)l=");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "O|\"Jn)l=";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "O|\"Jn)l=";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[0] = "O|\"Jn)l=";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%hgQ/-v";
      stringArray0[1] = "# Relational: ";
      stringArray0[2] = ")GJ}caZuSK(9A{";
      stringArray0[3] = ",s94!;wP:a";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = null;
      FindWithCapabilities.main((String[]) null);
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.createMessage("\tMust handle string attributes.");
      capabilities0.enableAll();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability1);
      assertFalse(boolean0);
      
      findWithCapabilities0.enable(capabilities_Capability1);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2JD~rB6*q>";
      stringArray0[1] = "not-nominal-class";
      stringArray0[2] = "9yLhA";
      stringArray0[3] = "\tRetrieves the package list from the GenericPropertiesCreator\n\tfor the given superclass. (overrides -packages <list>).";
      stringArray0[4] = "silent";
      stringArray0[5] = "binary-atts";
      stringArray0[6] = "-not-date-atts";
      stringArray0[7] = "g^4MhE";
      stringArray0[8] = "dL0!13q5aB";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.m_MissingClassValuesTest = false;
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities1.disableAllClasses();
      capabilities1.enableAllClassDependencies();
      capabilities0.assign(capabilities1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E>odsWU";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "-not-unary-atts";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "weka/core/Capabilities.props";
      capabilities0.m_MissingClassValuesTest = true;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("@end");
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertTrue(vector0.isEmpty());
      
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.handles(capabilities_Capability0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w~^aTG";
      FindWithCapabilities.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      ClassDiscovery.m_ClassCache = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.m_Capabilities.disableAll();
      findWithCapabilities0.m_Capabilities.disableDependency(capabilities_Capability0);
      capabilities0.or(findWithCapabilities0.m_Capabilities);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      capabilities0.disableDependency(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.setFilename("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.listOptions();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      singleIndex0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      singleIndex0.getRevision();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      singleIndex0.setSingleIndex("\tSuperclass to look for in the packages.\n");
      findWithCapabilities0.setFilename("Gk<=Q,)6rU-4sH");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.disableDependency(capabilities_Capability0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      assertEquals("Gk<=Q,)6rU-4sH", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      instances1.m_RelationName = "";
      Instances instances2 = new Instances(instances1);
      instances2.deleteAttributeType(11);
      instances2.remove((Object) instances0);
      Capabilities capabilities0 = Capabilities.forInstances(instances2, false);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.m_InstancesTest = false;
      findWithCapabilities0.setNotCapabilities(capabilities1);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      capabilities0.m_MissingValuesTest = false;
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      stringArray0[1] = "KA7^sIons:Nu1*Q8D";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("-nominal-atts");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Filename = "8034";
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Packages = vector0;
      vector0.add("HU3-NU 1'Vw");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.m_Misses = null;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("weka.core.Range");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("");
      vector0.add("");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.find();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.disableAllClasses();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      capabilities0.disableAll();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.listOptions();
      boolean boolean0 = true;
      capabilities0.m_MinimumNumberInstancesTest = true;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      String string0 = null;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.147483647E9;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.147483647E9, doubleArray0);
      Attribute attribute0 = new Attribute("^>+GA RUV@|5PcI", 6);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "not-unary-class";
      stringArray0[2] = "`";
      stringArray0[3] = "xD&L3!M";
      stringArray0[4] = "UL?7<vT~~C3L";
      stringArray0[5] = "Default options: ";
      stringArray0[6] = "M8e,JW?:";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "e8s=drMx";
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.getRevision();
      StringReader stringReader0 = new StringReader("!WiK_e");
      findWithCapabilities0.getOptions();
      stringReader0.reset();
      int int0 = (-1242);
      // Undeclared exception!
      try { 
        stringReader0.mark((-1242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        TestInstances.forCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      capabilities0.enableAllAttributes();
      findWithCapabilities0.listOptions();
      try { 
        Capabilities.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q|pblnDPfJ:";
      stringArray0[1] = "-numeric-atts";
      stringArray0[2] = "";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("Expected comma in range, found: ");
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("Expected comma in range, found: ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "generic";
      stringArray0[1] = "R]?-";
      stringArray0[2] = "";
      stringArray0[3] = "gp!gPMi6K9'?5=";
      stringArray0[4] = "<";
      stringArray0[5] = "&";
      stringArray0[6] = "j}7 vIGX";
      String string0 = "*`6|\\u}Y<Rq";
      stringArray0[7] = string0;
      FindWithCapabilities.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
