/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:01:38 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50703, 50703, fieldTypeFloat0, 50703, 50703, byteArray0, byteOrder0, 50703);
      tiffField0.getValueDescription();
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(34025, ".HO3O");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeByte0, 4L, 2514L, byteArray0, byteOrder0, (-1199));
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@4e93e08b for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((-378), "CFAPlaneColor");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("w");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField((-378), (-378), fieldTypeAscii0, (-378), 1L, byteArray0, byteOrder0, 3964);
      fieldTypeAscii0.writeData("CFAPlaneColor", byteOrder0);
      tiffField0.getDescriptionWithoutValue();
      tiffField0.getDirectoryType();
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(50721, 50721, fieldTypeFloat0, 50721, 50721, byteArray0, byteOrder0, 50721);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(50721, 50721);
      String string1 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(50721, tiffField0.getOffset());
      assertEquals(50721L, tiffField0.getCount());
      assertEquals(50721, tiffField0.getTag());
      assertNull(string1);
      assertEquals(50721, tiffField0.getDirectoryType());
      assertEquals(202884, tiffField0.getBytesLength());
      assertEquals(50721, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50703, 50703, fieldTypeFloat0, 50703, 50703, byteArray0, byteOrder0, 50703);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      String string0 = tiffField0.getValueDescription();
      assertEquals(50703, tiffField0.getDirectoryType());
      assertEquals(50703, tiffField0.getSortHint());
      assertEquals(50703, tiffField0.getTag());
      assertEquals(202812, tiffField0.getBytesLength());
      assertEquals(50703L, tiffField0.getCount());
      assertEquals(50703, tiffField0.getOffset());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[0];
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(33446, "");
      TiffField tiffField0 = new TiffField((-2474), (-2474), fieldTypeLong0, 33446, (-2474), byteArray0, byteOrder0, (-2474));
      tiffField0.getIntValueOrArraySum();
      assertEquals(33446L, tiffField0.getCount());
      assertEquals(133784, tiffField0.getBytesLength());
      assertEquals((-2474), tiffField0.getSortHint());
      assertEquals((-2474), tiffField0.getDirectoryType());
      assertEquals((-2474), tiffField0.getTag());
      assertEquals((-2474), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 293, fieldTypeLong0, 293, (-871L), byteArray0, byteOrder0, 0);
      tiffField0.getIntValueOrArraySum();
      tiffField0.getIntArrayValue();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string0 = null;
      try { 
        MockURI.URI("'", (String) null, (String) null, "org.apache.commons.io.filefilter.SuffixFileFilter", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: ':?org.apache.commons.io.filefilter.SuffixFileFilter
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2326, 2326, fieldTypeByte0, 2326, 2326, byteArray0, byteOrder0, (byte) (-110));
      fieldTypeByte0.getValue(tiffField0);
      ByteOrder.nativeOrder();
      tiffField0.dump();
      tiffField0.getDescriptionWithoutValue();
      tiffField0.getCount();
      ByteOrder.nativeOrder();
      tiffField0.getCount();
      tiffField0.getByteArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)46, (byte)22, fieldTypeRational0, 9988L, 9988L, byteArray0, byteOrder0, 65535);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(65535, tiffField0.getSortHint());
      assertEquals(0, int0);
      assertEquals(79904, tiffField0.getBytesLength());
      assertEquals(9988, tiffField0.getOffset());
      assertEquals(46, tiffField0.getTag());
      assertEquals(9988L, tiffField0.getCount());
      assertEquals(22, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)119;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1804), 0, fieldTypeRational0, 0, 0, byteArray0, byteOrder0, 502);
      tiffField0.getValue();
      tiffField0.getTagInfo();
      tiffField0.getOffset();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("-1804 (0xfffff8f4: Unknown Tag): ", string0);
      
      String string1 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0xfffff8f4)", string1);
      
      int int0 = tiffField0.getDirectoryType();
      tiffField0.getTagInfo();
      String string2 = tiffField0.getValueDescription();
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertTrue(int1 == int0);
      
      tiffField0.getFieldType();
      assertEquals(502, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(50730, "");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50730, 50730, fieldTypeFloat0, 50730, 50730, byteArray0, byteOrder0, 50730);
      int int0 = tiffField0.getSortHint();
      assertEquals(50730, tiffField0.getTag());
      assertEquals(50730, tiffField0.getOffset());
      assertEquals(50730, tiffField0.getDirectoryType());
      assertEquals(50730, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeLong0, 0, 0L, byteArray0, byteOrder0, 0);
      ByteOrder.nativeOrder();
      fieldTypeLong0.getValue(tiffField0);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [I@14bc4ca1
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte) (-110);
      TiffField tiffField0 = new TiffField(1177, (-35), fieldTypeLong0, 1177, 1L, byteArray0, byteOrder0, (byte) (-110));
      fieldTypeLong0.UNDEFINED.getValue(tiffField0);
      ByteOrder.nativeOrder();
      tiffField0.dump();
      tiffField0.getDescriptionWithoutValue();
      tiffField0.getCount();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      TiffField tiffField1 = new TiffField((byte) (-110), (-35), fieldTypeLong0, (byte)50, (byte) (-110), byteArray0, byteOrder1, (byte) (-110));
      tiffField1.getCount();
      tiffField1.getByteArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat((-3266), "n`^r{D($>A");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)29;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-2256), 50, fieldTypeFloat0, 0L, 377L, byteArray0, byteOrder0, 684);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      tiffField0.dump();
      int int0 = tiffField0.getOffset();
      assertEquals(377, int0);
      
      tiffField0.getDoubleArrayValue();
      int int1 = tiffField0.getBytesLength();
      assertEquals(0, int1);
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals((-2256), tiffField0.getTag());
      assertEquals(684, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeLong0, 0, 0L, byteArray0, byteOrder0, 0);
      ByteOrder.nativeOrder();
      fieldTypeLong0.getValue(tiffField0);
      tiffField0.getTagName();
      ByteOrder.nativeOrder();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      tiffField0.getTagInfo();
      tiffField0.getValue();
      ByteOrder.nativeOrder();
      tiffField0.getByteArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(425, (byte)2, fieldTypeRational0, 0L, (-2449L), byteArray0, byteOrder0, (byte)2);
      tiffField0.getDoubleArrayValue();
      assertEquals(2, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(425, tiffField0.getTag());
      assertEquals((-2449), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)26;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(409, (byte)26, fieldTypeRational0, 0L, (-2449L), byteArray0, byteOrder0, 50);
      tiffField0.getDoubleArrayValue();
      assertEquals(409, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals((-2449), tiffField0.getOffset());
      assertEquals(26, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-61);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(345, 50732, fieldTypeRational0, 50732, (-1415L), byteArray0, byteOrder0, (byte) (-61));
      ByteOrder.nativeOrder();
      tiffField0.getValue();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte)12, (-305));
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals("OversizeValueElement, tag: YClipPathUnits, fieldType: Rational", string0);
      assertNotNull(string0);
      
      tiffField0.getValue();
      tiffField0.toString();
      assertEquals((-61), tiffField0.getSortHint());
      assertEquals(50732L, tiffField0.getCount());
      assertEquals(405856, tiffField0.getBytesLength());
      assertEquals((-1415), tiffField0.getOffset());
      assertEquals(50732, tiffField0.getDirectoryType());
      assertEquals(345, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-35), 2112, fieldTypeLong0, (byte)4, (byte) (-86), byteArray0, byteOrder1, 50829);
      tiffField0.getIntArrayValue();
      tiffField0.getDoubleArrayValue();
      assertEquals(2112, tiffField0.getDirectoryType());
      assertEquals((-86), tiffField0.getOffset());
      assertEquals(4L, tiffField0.getCount());
      assertEquals((-35), tiffField0.getTag());
      assertEquals(50829, tiffField0.getSortHint());
      assertEquals(16, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-110);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-2221), (-2030), fieldTypeShort0, 1402L, (-6882L), byteArray0, byteOrder0, 65535);
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      fieldTypeByte0.getValue(tiffField0);
      ByteOrder.nativeOrder();
      tiffField0.dump();
      tiffField0.getDescriptionWithoutValue();
      tiffField0.getCount();
      ByteOrder.nativeOrder();
      tiffField0.getCount();
      tiffField0.getByteArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [S cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeLong0, 0, 0L, byteArray0, byteOrder0, 0);
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      fieldTypeLong0.getValue(tiffField0);
      tiffField0.getTagName();
      ByteOrder.nativeOrder();
      TiffField tiffField1 = new TiffField(65535, 50, fieldTypeLong0, 0L, 65535, byteArray0, byteOrder1, 1);
      tiffField0.getValue();
      tiffField1.getByteArrayValue();
      assertEquals(65535, tiffField1.getTag());
      assertEquals(1, tiffField1.getSortHint());
      assertEquals(50, tiffField1.getDirectoryType());
      assertEquals(65535, tiffField1.getOffset());
      
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0x0)", string0);
      
      tiffField0.getFieldTypeName();
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(50705, (-516), fieldTypeDouble0, 50705, (-516), byteArray0, byteOrder0, 50705);
      tiffField0.getDoubleArrayValue();
      assertEquals((-516), tiffField0.getDirectoryType());
      assertEquals(50705L, tiffField0.getCount());
      assertEquals(405640, tiffField0.getBytesLength());
      assertEquals(50705, tiffField0.getSortHint());
      assertEquals((-516), tiffField0.getOffset());
      assertEquals(50705, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2326, 2326, fieldTypeByte0, 2326, 2326, byteArray0, byteOrder0, (byte) (-86));
      ByteOrder.nativeOrder();
      fieldTypeByte0.getValue(tiffField0);
      ByteOrder.nativeOrder();
      tiffField0.dump();
      tiffField0.getDescriptionWithoutValue();
      fieldTypeByte0.getValue(tiffField0);
      tiffField0.getCount();
      ByteOrder.nativeOrder();
      Byte byte0 = new Byte((byte) (-86));
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@31a01d61 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(50730, "");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)3;
      TiffField tiffField0 = new TiffField(50730, 50730, fieldTypeFloat0, 50730, 50730, byteArray0, byteOrder0, (byte)1);
      fieldTypeFloat0.BYTE.getValue(tiffField0);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      tiffField0.dump();
      tiffField0.getDescriptionWithoutValue();
      Integer integer0 = new Integer(2147467864);
      tiffField0.getTagName();
      Byte byte0 = new Byte((byte)3);
      tiffField0.getTagInfo();
      tiffField0.getValueDescription();
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@2a7d1da8 for: 50730 (0xc62a: BaselineExposure): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FieldType fieldType0 = FieldType.getFieldType(3);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)4;
      TiffField tiffField0 = new TiffField(50730, 2063, fieldType0, 50730, (-2147483648L), byteArray0, byteOrder1, (-1853));
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertArrayEquals(new int[] {54788, 43690, 1194, 1028}, intArray0);
      
      tiffField0.dump();
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertArrayEquals(new double[] {(-10748.0), (-21846.0), 1194.0, 1028.0}, doubleArray0, 0.01);
      
      int int0 = tiffField0.getDirectoryType();
      assertEquals(2063, int0);
      assertEquals(50730L, tiffField0.getCount());
      assertEquals(101460, tiffField0.getBytesLength());
      assertEquals(50730, tiffField0.getTag());
      assertEquals((-1853), tiffField0.getSortHint());
      assertEquals(Integer.MIN_VALUE, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(2, "n`^r{D($>A");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-93);
      TiffField tiffField0 = new TiffField((byte)29, 12, fieldTypeFloat0, 2380L, 0L, byteArray0, byteOrder0, 3269);
      ByteOrder.nativeOrder();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(2147467864, 2166);
      tiffField0.dump();
      tiffField_OversizeValueElement0.getElementDescription(false);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@40e10550 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)2;
      TiffField tiffField0 = new TiffField(50730, (-1686), fieldTypeShort0, 50730, 347L, byteArray0, byteOrder0, 2799);
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0xc62a)", string0);
      
      Byte byte0 = new Byte((byte) (-52));
      tiffField0.getTagInfo();
      String string1 = tiffField0.getValueDescription();
      assertNotNull(string1);
      
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(24918, int0);
      
      TiffField tiffField1 = new TiffField(2147467864, 396, fieldTypeShort0, (-1267L), (byte)50, byteArray0, byteOrder0, (-1686));
      tiffField1.getFieldType();
      assertEquals(50, tiffField1.getOffset());
      assertEquals((-1686), tiffField1.getSortHint());
      assertEquals((-2534), tiffField1.getBytesLength());
      assertEquals(396, tiffField1.getDirectoryType());
      assertEquals((-1267L), tiffField1.getCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1863), 41494, fieldTypeFloat0, 1778L, 1778L, byteArray0, byteOrder2, 2147473064);
      tiffField0.getDoubleArrayValue();
      assertEquals(7112, tiffField0.getBytesLength());
      
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField1 = new TiffField((-1863), 3134, fieldTypeAscii0, 41494, 2381L, byteArray0, byteOrder1, 50730);
      String string0 = tiffField1.getValueDescription();
      assertNotNull(string0);
      
      String string1 = tiffField1.getStringValue();
      assertEquals((-1863), tiffField1.getTag());
      assertEquals(41494L, tiffField1.getCount());
      assertEquals(50730, tiffField1.getSortHint());
      assertEquals(2381, tiffField1.getOffset());
      assertNotNull(string1);
      assertEquals(3134, tiffField1.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(50717, "");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1485), 4082, fieldTypeFloat0, 4082, (-971L), byteArray0, byteOrder0, 0);
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(50717, 6);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tiffField0.dump();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField1 = new TiffField(5630, 0, fieldTypeRational0, 5630, 5630, byteArray0, byteOrder1, 50);
      tiffField1.getIntArrayValue();
      assertEquals(50, tiffField1.getSortHint());
      
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      String string0 = tiffField0.toString();
      assertEquals("-1485 (0xfffffa33: Unknown Tag):  (4082 )", string0);
      assertEquals(4082, tiffField0.getDirectoryType());
      assertEquals(16328, tiffField0.getBytesLength());
      assertEquals((-971), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder.nativeOrder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)105;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeDouble0, 65535, 65535, byteArray0, byteOrder1, 65535);
      String string0 = tiffField0.getValueDescription();
      assertEquals(65535, tiffField0.getOffset());
      assertEquals(65535, tiffField0.getSortHint());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(65535L, tiffField0.getCount());
      assertEquals(65535, tiffField0.getDirectoryType());
      assertEquals(524280, tiffField0.getBytesLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder.nativeOrder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)105;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeDouble0, 65535, 65535, byteArray0, byteOrder0, 65535);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(65535, tiffField0.getOffset());
      assertEquals(524280, tiffField0.getBytesLength());
      assertEquals(65535, tiffField0.getSortHint());
      assertEquals(65535, tiffField0.getDirectoryType());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(65535L, tiffField0.getCount());
  }
}
