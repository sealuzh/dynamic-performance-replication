/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:07:36 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Random.setNextRandom((-1564));
      int int0 = 37;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(37);
      Matrix matrix0 = columnMajorSparseMatrix0.shuffle();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1564);
      columnMajorSparseMatrix0.blankOfRows(37);
      intArray0[1] = 37;
      intArray0[2] = (-1564);
      intArray0[3] = (-1564);
      intArray0[4] = 37;
      matrix0.equals((Matrix) columnMajorSparseMatrix0, 461.1829540581941);
      intArray0[5] = (-1564);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1564' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 34;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(34, (-963.657637661043));
      columnMajorSparseMatrix0.swapColumns(1000, 1000);
      Matrix matrix0 = columnMajorSparseMatrix0.blank();
      matrix0.toString();
      Matrix matrix1 = columnMajorSparseMatrix0.multiply((-963.657637661043));
      matrix1.equals((Matrix) columnMajorSparseMatrix0, (double) 34);
      // Undeclared exception!
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 48;
      Matrix matrix0 = Matrix.zero(48, 48);
      int int1 = 4;
      matrix0.max();
      double[] doubleArray0 = new double[0];
      Vector vector0 = Vector.fromArray(doubleArray0);
      matrix0.setAll(48);
      // Undeclared exception!
      try { 
        matrix0.insertRow(4, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 48.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2334.99);
      doubleArray1[1] = 6.2172489379008774E-15;
      doubleArray1[2] = 292.9322490741;
      doubleArray1[3] = (-331.5494);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-331.5494);
      doubleArray2[1] = (-2334.99);
      doubleArray2[2] = 6.2172489379008774E-15;
      doubleArray2[3] = 6.2172489379008774E-15;
      doubleArray2[4] = (-2334.99);
      doubleArray2[5] = (-331.5494);
      doubleArray2[6] = (-2334.99);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 64.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 64.0;
      doubleArray4[1] = (-331.5494);
      doubleArray4[2] = 64.0;
      doubleArray4[3] = 64.0;
      doubleArray4[4] = 292.9322490741;
      doubleArray4[5] = (-2334.99);
      doubleArray4[6] = 64.0;
      doubleArray4[7] = 896.4222845;
      doubleArray0[3] = doubleArray4;
      Matrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(796, 796);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(796, 2);
      boolean boolean0 = sparseMatrix0.equals((Matrix) denseMatrix0, (double) 796);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-959.140903836);
      doubleArray0[1] = (-149.64);
      doubleArray0[2] = (-526.780724);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.5;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.removeLastRow();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix1.withInverter(linearAlgebra_InverterFactory0);
      boolean boolean0 = matrix1.equals(matrix0, (-1.0));
      assertFalse(boolean0);
      assertEquals(5, matrix1.rows());
      
      int int0 = (-3627);
      // Undeclared exception!
      try { 
        matrix1.insertColumn((-3627), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3625.222837154554;
      doubleArray2[1] = 0.8085035980634332;
      doubleArray2[2] = 4389.0;
      doubleArray2[3] = 0.8085035980634332;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.8085035980634332;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.8085035980634332;
      doubleArray4[1] = 1.1102230246251565E-14;
      doubleArray4[2] = 3625.222837154554;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 4389.0;
      doubleArray4[5] = 0.8085035980634332;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1.1102230246251565E-14;
      doubleArray5[1] = 3625.222837154554;
      doubleArray5[2] = 0.8085035980634332;
      doubleArray5[3] = 0.8085035980634332;
      doubleArray5[4] = 1.1102230246251565E-14;
      doubleArray5[5] = 1.1102230246251565E-14;
      doubleArray5[6] = (-201.6322);
      doubleArray5[7] = 0.8085035980634332;
      doubleArray5[8] = 4389.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.8085035980634332;
      doubleArray6[1] = 0.8085035980634332;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 4389.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 4389.0;
      doubleArray7[3] = 0.8085035980634332;
      doubleArray7[4] = 0.8085035980634332;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 0.8085035980634332;
      doubleArray8[1] = 0.8085035980634332;
      doubleArray8[2] = (-201.6322);
      doubleArray8[3] = 0.8085035980634332;
      doubleArray0[7] = doubleArray8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = Matrix.unit(6, 6);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, (-2004318070), 8, 10, (-2004318070), Integer.MAX_VALUE, 4178);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 10, -2004318070
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      matrix0.rotate();
      int int0 = 220;
      // Undeclared exception!
      try { 
        matrix0.foldColumn(220, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(184, 184);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.unit(7);
      MockRandom mockRandom0 = new MockRandom((-2357L));
      SparseVector sparseVector0 = SparseVector.random(7, 0.964, (java.util.Random) mockRandom0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow((-1989), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..183
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1328L));
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, 4128.233477483444, (java.util.Random) mockRandom0);
      mockRandom0.setSeed((-1328L));
      sparseMatrix0.spliterator();
      Matrix matrix0 = sparseMatrix0.power(10);
      mockRandom0.ints(0, 10);
      matrix0.toString();
      Matrix.unit(0, 4718);
      matrix0.transpose();
      matrix0.determinant();
      // Undeclared exception!
      try { 
        sparseMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1180, 3534, 1180);
      columnMajorSparseMatrix0.toBinary();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(814, 814);
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 814;
      doubleArray1[1] = 32.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 32.0;
      doubleArray3[1] = (double) 814;
      doubleArray3[2] = (double) 814;
      doubleArray3[3] = (double) 814;
      doubleArray3[4] = (double) 814;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 814;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-720.596539901456);
      doubleArray5[1] = (double) 814;
      doubleArray5[2] = (double) 814;
      doubleArray5[3] = (double) 814;
      doubleArray5[4] = 32.0;
      doubleArray5[5] = (double) 814;
      doubleArray5[6] = (double) 814;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) denseMatrix0, 814, 814, 4, 814, 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 814, 814
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      String string0 = "coordinate";
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(4, mockRandom0);
      denseMatrix0.setColumn(4, 2190.862284949222);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.spliterator();
      matrix0.rank();
      // Undeclared exception!
      try { 
        denseMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 5x5 does not equal to 4x4.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 559.7567384194639;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      denseMatrix0.multiplyByItsTranspose();
      Matrix.from1DArray(0, 0, doubleArray0);
      denseMatrix0.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.updateColumn((-1609), vectorFunction0);
      // Undeclared exception!
      try { 
        Matrix.random((-1609), 0, (java.util.Random) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 719;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(719, 719);
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfRows(719);
      int int1 = 1014;
      int int2 = 4;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 719, 17, 1014, 4, 4, 719);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1014, 4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-52.0);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 100.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.5;
      doubleArray2[1] = (-52.0);
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 100.0;
      doubleArray2[5] = 100.0;
      doubleArray2[6] = 100.0;
      doubleArray2[7] = 0.5;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 0.5;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 100.0;
      doubleArray3[4] = (-52.0);
      doubleArray3[5] = 100.0;
      doubleArray3[6] = 0.5;
      doubleArray3[7] = (-543.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = (-52.0);
      doubleArray4[2] = 100.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 0.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 100.0;
      doubleArray5[3] = (-543.0);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-52.0);
      doubleArray5[6] = 100.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-52.0);
      doubleArray6[1] = (-52.0);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-543.0);
      doubleArray6[5] = 1.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 100.0;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.rotate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(5, 32, 32);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      matrix0.equals((Object) denseMatrix0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 32;
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 5;
      doubleArray1[4] = 554.63;
      doubleArray1[5] = (double) 32;
      doubleArray1[6] = (double) 5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = 554.63;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 32;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 554.63;
      doubleArray5[1] = (double) 32;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (double) 5;
      doubleArray5[4] = (double) 5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (double) 32;
      doubleArray7[1] = 554.63;
      doubleArray7[2] = (double) 5;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 554.63;
      doubleArray7[5] = (double) 5;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = (double) 5;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 554.63;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = (double) 32;
      doubleArray9[1] = 1533.0;
      doubleArray9[2] = (double) 5;
      doubleArray9[3] = 554.63;
      doubleArray9[4] = (double) 5;
      doubleArray9[5] = 0.0;
      doubleArray9[6] = (-338.0);
      doubleArray9[7] = (double) 32;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      matrix0.swapRows(100, 100);
      assertEquals(0.0, matrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 2;
      int int1 = 811;
      Matrix matrix0 = Matrix.unit(2, 811);
      Matrix.constant(2, 2, 2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      matrix0.toDenseMatrix();
      Matrix matrix1 = matrix0.transpose();
      int int2 = 48;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        matrix1.set(int2, int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((-2505.7128), 0.75);
      mockRandom0.doubles(0.75, 4659.355686419012);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(3, 3, 0.75, (java.util.Random) mockRandom0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 4659.355686419012;
      doubleArray0[2] = (-2505.7128);
      doubleArray0[3] = 0.75;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 4659.355686419012;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (-2505.7128);
      doubleArray0[8] = 0.75;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn(3, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix.fromCSV("0.000");
      int int0 = 1479;
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      try { 
        ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 84;
      doubleArray0[1] = (double) 84;
      doubleArray0[2] = (double) 84;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(84, 84, doubleArray0);
      int int0 = (-1023);
      int int1 = (-1971);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, (-1023), 84, 84, (-1023), 84, (-1971));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 84x-1971
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 16;
      DenseVector denseVector0 = DenseVector.zero(16);
      denseVector0.toCSV();
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.copy();
      int int1 = 10;
      matrix0.multiply((Vector) denseVector0);
      // Undeclared exception!
      try { 
        matrix1.insertColumn(10, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 16. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 1280;
      int int1 = 2180;
      Matrix matrix0 = Matrix.unit(1280, 2180);
      Matrix.identity(16);
      int[] intArray0 = new int[1];
      int int2 = (-2246);
      intArray0[0] = (-2246);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      sparseMatrix0.fold(matrixAccumulator0);
      DenseMatrix denseMatrix0 = sparseMatrix0.toDenseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(2918, vectorFunction0);
      Matrix.unit(0, 0);
      matrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        sparseMatrix0.foldColumn(0, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      linkedList0.removeFirstOccurrence(matrix0);
      columnMajorSparseMatrix0.getRow((-1536));
      Matrix matrix1 = columnMajorSparseMatrix0.insert(matrix0);
      assertEquals(0.0, matrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(32, mockRandom0);
      Integer integer0 = new Integer(1836);
      boolean boolean0 = matrix0.equals((Object) integer0);
      assertFalse(boolean0);
      assertEquals(32, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2425.833726);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-382.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 831.956832;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-382.0);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 831.956832;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeRow(796);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.8085035980634332;
      doubleArray2[1] = (-1689.342595613);
      doubleArray2[2] = (-18.843);
      doubleArray2[3] = (-3182.0);
      doubleArray2[4] = (-1959.544227706924);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.1102230246251565E-14;
      doubleArray2[7] = (-337.071);
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1689.342595613);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-3182.0);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 2960.24183;
      doubleArray3[5] = (-337.071);
      doubleArray3[6] = (-3182.0);
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-3182.0);
      doubleArray4[1] = (-1959.544227706924);
      doubleArray4[2] = 0.8085035980634332;
      doubleArray4[3] = 3431.226;
      doubleArray4[4] = (-337.071);
      doubleArray4[5] = (-1959.544227706924);
      doubleArray4[6] = (-1959.544227706924);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-337.071);
      doubleArray5[1] = (-1689.342595613);
      doubleArray5[2] = 1.1102230246251565E-14;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 2960.24183;
      doubleArray6[1] = (-18.843);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-3182.0);
      doubleArray7[1] = 1.0;
      doubleArray7[2] = 1.1102230246251565E-14;
      doubleArray7[3] = (-1959.544227706924);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 1.0;
      doubleArray7[6] = (-1959.544227706924);
      doubleArray7[7] = (-1689.342595613);
      doubleArray7[8] = (-337.071);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (-18.843);
      doubleArray8[1] = 1.0;
      doubleArray8[2] = 0.613777919293081;
      doubleArray8[3] = 3836.365605;
      doubleArray8[4] = 1.1102230246251565E-14;
      doubleArray0[7] = doubleArray8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.updateColumn(19, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '19' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2302, 1713, 1.0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1713, 254);
      // Undeclared exception!
      denseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 699.0;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 908);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn(0, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 908. Should be: 2.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "%%MatrixMarket vector coordinate real\n";
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(666, 666);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) 666);
      // Undeclared exception!
      matrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(37);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 37);
      hashMap0.remove((Object) ooPlaceVectorsSubtraction0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      linkedList0.clone();
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(15, 1417);
      vector0.equals((Object) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(2221, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 17;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17, 17);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(17);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix0.toString();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1185.32198435553);
      doubleArray1[1] = (-2050.84);
      doubleArray1[2] = (-546.5069617970908);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1185.32198435553);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 1918.889;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-546.5069617970908);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-2050.84);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-546.5069617970908);
      doubleArray4[1] = (-546.5069617970908);
      doubleArray4[2] = (-1185.32198435553);
      doubleArray4[3] = (-2050.84);
      doubleArray4[4] = 1918.889;
      doubleArray4[5] = (-1185.32198435553);
      doubleArray4[6] = (-1185.32198435553);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-2050.84);
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(151, (-1185.32198435553));
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) sparseMatrix0, 1712, 1712);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1712 rows and 1712 cols at 0, 0 in a 5x6 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1822.6773;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 3.9009404706419626;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 1822.6773;
      doubleArray3[3] = 1822.6773;
      doubleArray3[4] = 1822.6773;
      doubleArray3[5] = 1822.6773;
      doubleArray3[6] = 1822.6773;
      doubleArray3[7] = 1822.6773;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 3.9009404706419626;
      doubleArray4[1] = 3.9009404706419626;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = 1822.6773;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1406.0669062241955);
      doubleArray5[1] = 1822.6773;
      doubleArray5[2] = 1822.6773;
      doubleArray5[3] = 1822.6773;
      doubleArray0[4] = doubleArray5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2, (-1.0));
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) denseMatrix0, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2 rows and 2 cols at 0, 0 in a 5x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "    ";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("    ");
      columnMajorSparseMatrix0.columnMajorIterator();
      int int0 = (-50);
      int int1 = 48;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-50);
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) (-50);
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) (-50);
      doubleArray0[5] = (double) (-50);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-50), 48, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -50x48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 1000;
      Matrix matrix0 = Matrix.unit(1000, 1000);
      int int1 = 1989;
      Matrix matrix1 = Matrix.zero(1989, 1989);
      int int2 = 48;
      // Undeclared exception!
      matrix1.insert(matrix0, 48, 1000);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 744;
      SparseVector sparseVector0 = SparseVector.zero(744, 744);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      NumberFormat.getInstance();
      // Undeclared exception!
      try { 
        matrix0.setRow(744, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 744. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 6;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(6);
      int int1 = 10;
      sparseMatrix0.toCSV();
      // Undeclared exception!
      try { 
        sparseMatrix0.power((-1320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1320.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(32, 496.922513467);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      assertNotSame(matrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(1151);
      matrix0.trace();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "%%MatrixMarket";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-2245.68044701049);
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1803.952963);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 100.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-2245.68044701049);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-2245.68044701049);
      doubleArray5[3] = (-1803.952963);
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (-2245.68044701049);
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Vector vector0 = matrix0.toRowVector();
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 322;
      MockRandom mockRandom0 = new MockRandom(322);
      mockRandom0.nextBoolean();
      mockRandom0.nextInt();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(322, 322, 0.0, (java.util.Random) mockRandom0);
      mockRandom0.nextInt(322);
      // Undeclared exception!
      try { 
        sparseMatrix0.setColumn(322, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '322' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 654;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(654);
      String string0 = "Op(OJ1C[dl@";
      String string1 = "Unknown symmetry type: ";
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow((-381));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..653
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 590;
      doubleArray0[1] = (double) 590;
      doubleArray0[2] = (double) 590;
      doubleArray0[3] = (double) 590;
      doubleArray0[4] = (double) 590;
      doubleArray0[5] = (double) 590;
      doubleArray0[6] = (double) 590;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(590, 590, doubleArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      // Undeclared exception!
      try { 
        denseMatrix0.mkString(numberFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int0 = 7;
      Map<Integer, Double> map0 = null;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.nonZeroAt(7, 2259);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 9;
      Matrix matrix0 = Matrix.from1DArray(9, 0, doubleArray0);
      matrix0.blankOfRows(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      matrix0.minInRow(9);
      matrix0.rank();
      int int0 = 8;
      Matrix matrix1 = matrix0.blankOfShape(9, 8);
      String string0 = "9";
      int int1 = (-41);
      // Undeclared exception!
      try { 
        matrix1.blankOfColumns((-41));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1585;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1585, 1.0);
      int int1 = (-805);
      sparseMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        sparseMatrix0.blankOfRows((-805));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -805x1585
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1473.811506288;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-264.56532974438);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-264.56532974438);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-264.56532974438);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1473.811506288;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 1473.811506288;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = (-232.444329);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-232.444329);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 1473.811506288;
      doubleArray6[5] = 0.0;
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = denseMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 4871.81292;
      doubleArray2[1] = 928636.0426224621;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 928636.0426224621;
      doubleArray3[1] = 928636.0426224621;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 4871.81292;
      doubleArray4[1] = 928636.0426224621;
      doubleArray4[2] = 928636.0426224621;
      doubleArray4[3] = 4871.81292;
      doubleArray4[4] = 4871.81292;
      doubleArray4[5] = 928636.0426224621;
      doubleArray4[6] = 4871.81292;
      doubleArray4[7] = 928636.0426224621;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 928636.0426224621;
      doubleArray5[1] = 928636.0426224621;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 4871.81292;
      doubleArray6[1] = 928636.0426224621;
      doubleArray6[2] = 928636.0426224621;
      doubleArray6[3] = 4871.81292;
      doubleArray6[4] = 928636.0426224621;
      doubleArray6[5] = 4871.81292;
      doubleArray6[6] = 0.5;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 4871.81292;
      doubleArray7[1] = 2172.24229209;
      doubleArray7[2] = 928636.0426224621;
      doubleArray7[3] = 4871.81292;
      doubleArray7[4] = 4871.81292;
      doubleArray7[5] = 928636.0426224621;
      doubleArray7[6] = 4871.81292;
      doubleArray7[7] = 1188.384;
      doubleArray7[8] = 4871.81292;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.5;
      doubleArray8[1] = 928636.0426224621;
      doubleArray8[2] = 1188.384;
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.setRow((-496), 4871.81292);
      assertEquals(8, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 4;
      SparseVector sparseVector0 = SparseVector.zero(4);
      sparseVector0.toString();
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.subtract((double) 4);
      int int1 = 1786;
      int int2 = 8;
      Matrix.zero(1786, 8);
      matrix1.subtract(matrix0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 9;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(9, 9);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(17, 6028.967);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      int int1 = (-2067947215);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, (-2067947215), 9, 9, 418);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -2067947215, 9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 2203;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2203, 2203);
      int int1 = 0;
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) null, 541, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2325);
      Matrix.diagonal(2325, 2325);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2325, 2325, 2325);
      int int0 = 1037;
      rowMajorSparseMatrix0.maxInColumn(1037);
      int int1 = (-1971);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix.randomSymmetric(12, mockRandom0);
      // Undeclared exception!
      try { 
        sparseMatrix0.iteratorOfRow((-1971));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1971
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom(Integer.MAX_VALUE);
      mockRandom0.doubles(0L, (-2432.9861790357454), 0.0);
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(Integer.MAX_VALUE, (double) Integer.MAX_VALUE, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3);
      columnMajorSparseMatrix0.blankOfColumns(3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-678.679345627262);
      doubleArray1[2] = (-1253.5778092);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1541.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (-1253.5778092);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1253.5778092);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-221.77);
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (-1.0);
      doubleArray7[6] = 1.0;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = 1.0;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.blankOfColumns(138);
      assertEquals(7, matrix0.rows());
      assertEquals(138, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 3987.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = 3987.0;
      doubleArray4[2] = 100.0;
      doubleArray4[3] = 3987.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 3987.0;
      doubleArray4[6] = 100.0;
      doubleArray4[7] = 3987.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 3987.0;
      doubleArray5[6] = 3987.0;
      doubleArray0[4] = doubleArray5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix0 = columnMajorSparseMatrix0.kroneckerProduct(columnMajorSparseMatrix1);
      assertEquals(50, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 169;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(169, 169, 169);
      int int1 = 2046;
      SparseMatrix.zero(2046, 2046);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      columnMajorSparseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 10;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10);
      Matrix matrix0 = rowMajorSparseMatrix0.multiply(0.0);
      matrix0.equals((Object) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3639, 3639);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(9, 9, 9);
      Matrix matrix0 = denseMatrix0.divide((-3209.88));
      assertEquals(9, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(matrix0, denseMatrix0);
      
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3209.88);
      doubleArray1[1] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-3209.88);
      doubleArray2[1] = (double) 9;
      doubleArray2[2] = (double) 9;
      doubleArray2[3] = (-953.4695929866364);
      doubleArray2[4] = (double) 9;
      doubleArray2[5] = (double) 9;
      doubleArray2[6] = (double) 9;
      doubleArray2[7] = (-3209.88);
      doubleArray2[8] = (double) 9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 9;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 9;
      doubleArray4[1] = (-953.4695929866364);
      doubleArray4[2] = (double) 9;
      doubleArray4[3] = (-953.4695929866364);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-953.4695929866364);
      doubleArray4[6] = 86.97533818;
      doubleArray4[7] = (-953.4695929866364);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 86.97533818;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (double) 9;
      doubleArray6[1] = (double) 9;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 86.97533818;
      doubleArray7[1] = 86.97533818;
      doubleArray7[2] = (double) 9;
      doubleArray7[3] = (double) 9;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (double) 9;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 86.97533818;
      doubleArray8[3] = (double) 9;
      doubleArray8[4] = (-1560.6732);
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 0.0;
      doubleArray8[7] = 86.97533818;
      doubleArray8[8] = (-3209.88);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = (-1560.6732);
      doubleArray9[1] = (-772.84387018355);
      doubleArray0[8] = doubleArray9;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      assertEquals(2, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(14);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.minInRow(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 2722;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 2722);
      rowMajorSparseMatrix0.spliterator();
      ooPlaceMatricesAddition0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int2 = (-2826);
      denseMatrix0.add((Matrix) columnMajorSparseMatrix0);
      java.util.Random random0 = null;
      int int3 = 1902;
      Matrix.identity(1902);
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(1902, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(822, 0.0);
      String string0 = sparseMatrix0.toMatrixMarket();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(247);
      double double0 = sparseMatrix0.trace();
      assertEquals(247.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 247.0;
      doubleArray0[1] = 247.0;
      doubleArray0[2] = (double) 247;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 247;
      Matrix matrix0 = Matrix.from1DArray(721, 7, doubleArray0);
      assertEquals(7, matrix0.columns());
      assertEquals(721, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 26;
      int int1 = 35;
      SparseVector sparseVector0 = SparseVector.zero(26, 35);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(26);
      Matrix matrix1 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 26x1 does not equal to 26x26.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(3113, (-4181.3120802));
      // Undeclared exception!
      try { 
        sparseMatrix0.transformColumn(2392, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      int int0 = 2489;
      DenseVector denseVector0 = DenseVector.zero(2489);
      int int1 = (-1324);
      Integer integer0 = new Integer((-1324));
      linkedList0.add(integer0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      matrix0.foldRows((VectorAccumulator) null);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        sparseMatrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(0, 0, 0);
      matrix0.rank();
      matrix0.setAll(0.0);
      matrix0.maxInRow(37);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      MatrixDecompositor matrixDecompositor0 = matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertNotNull(matrixDecompositor0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(433, 433, 0.0);
      // Undeclared exception!
      matrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(37);
      assertEquals(37, matrix0.rows());
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 37;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 37;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 37;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 37;
      doubleArray2[6] = (double) 37;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-319.711017666);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 37;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (double) 37;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 2964.516249675;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-319.711017666);
      doubleArray5[1] = 2964.516249675;
      doubleArray5[2] = 719.56079305;
      doubleArray5[3] = (double) 37;
      doubleArray5[4] = 2964.516249675;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (-319.711017666);
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 2964.516249675;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (-319.711017666);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (double) 37;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-319.711017666);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (double) 37;
      doubleArray9[2] = (double) 37;
      doubleArray0[8] = doubleArray9;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      assertEquals(3, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 1;
      int int1 = 1346;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1346);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.transformRow(1, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1937, 1937);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = (-535);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        sparseMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1070.0;
      doubleArray0[1] = (-2243.9738);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.subtract(1070.0);
      assertEquals(1, matrix1.rows());
      assertEquals(4, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 2542;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2542, 2542, 2542);
      // Undeclared exception!
      columnMajorSparseMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-86.996260220015);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-86.996260220015);
      doubleArray3[3] = (-86.996260220015);
      doubleArray3[4] = (-86.996260220015);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-86.996260220015);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-86.996260220015);
      doubleArray5[1] = 1.0;
      doubleArray5[2] = (-86.996260220015);
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 638;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(638, 638);
      int int1 = 34;
      int int2 = 8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(34, 34, 8);
      columnMajorSparseMatrix0.divide((-1153.1));
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      int int3 = 1;
      int int4 = 10;
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 9;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(9, 9);
      Matrix matrix0 = Matrix.zero(9, 9);
      matrix0.sum();
      int int1 = 795;
      rowMajorSparseMatrix0.product();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      try { 
        numberFormat0.parseObject(":X9");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 8);
      Integer integer0 = new Integer((-891));
      hashMap0.putIfAbsent(integer0, integer0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      assertEquals(8, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 768;
      int int1 = 1000;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1000;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(768, 1000, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.rank();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 2337;
      int int1 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2337, 2337, 6);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1608L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(17, mockRandom0);
      denseMatrix0.blankOfShape(1786, 5);
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn((-642));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(10);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      matrix0.removeLastColumn();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix1.copyOfColumns((-2266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 10x-2266
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-2439);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-2439), (-2439), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2439x-2439
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(6, 6);
      Matrix matrix1 = matrix0.removeLastColumn();
      assertEquals(5, matrix1.columns());
      
      Matrix matrix2 = matrix0.transpose();
      assertTrue(matrix2.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(620, 17, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2388.0040624167104;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      denseMatrix0.fold(matrixAccumulator0);
      Matrix matrix0 = denseMatrix0.transformColumn(0, (VectorFunction) null);
      matrix0.min();
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      matrix0.setColumn(0, 1.0);
      SparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      int int1 = 2503;
      linkedList0.parallelStream();
      int int2 = (-2739);
      // Undeclared exception!
      try { 
        Matrix.unit(2503, (-2739));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2425.0);
      doubleArray1[1] = 3032.2775;
      doubleArray1[2] = (-3038.4064);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-970.4952689);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 1.1102230246251565E-14;
      doubleArray1[7] = (-501.19);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 3032.2775;
      doubleArray2[1] = 1.1102230246251565E-14;
      doubleArray2[2] = (-501.19);
      doubleArray2[3] = (-2425.0);
      doubleArray2[4] = 1.1102230246251565E-14;
      doubleArray2[5] = (-2425.0);
      doubleArray2[6] = 1.1102230246251565E-14;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray2[8] = (-501.19);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-501.19);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-966.0);
      doubleArray4[1] = (-501.19);
      doubleArray4[2] = (-970.4952689);
      doubleArray4[3] = (-501.19);
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      matrix0.mkString("org.la4j.Vectors$18", "org.la4j.operation.VectorMatrixOperation$2");
      matrix0.iteratorOfColumn(0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-52.0);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-52.0);
      doubleArray2[2] = (-52.0);
      doubleArray2[3] = (-52.0);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (-52.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (-52.0);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-52.0);
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-52.0);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-52.0);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-52.0);
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-52.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (-1.0);
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (-1.0);
      doubleArray9[4] = (double) 0;
      doubleArray9[5] = (double) 0;
      doubleArray9[6] = 0.0;
      doubleArray9[7] = 0.0;
      doubleArray0[8] = doubleArray9;
      DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1609;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1609, 1609, 1609);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1609, 1609);
      RowMajorSparseMatrix.diagonal(1324, 850.6715252761);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 1609, (-2998), (-2928), 470);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2928x470
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3122.8;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-4382.96275);
      doubleArray2[1] = 3122.8;
      doubleArray2[2] = 3122.8;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      SparseMatrix sparseMatrix0 = null;
      DenseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1173);
      DenseVector denseVector0 = DenseVector.random(1173, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      assertEquals(1173, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 2;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(2, 2, 0.0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Matrix.randomSymmetric(2, mockRandom0);
      ((Matrix)basic2DMatrix0).ensureDimensionsAreCorrect(2, 2);
      basic2DMatrix0.euclideanNorm();
      basic2DMatrix0.norm();
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInRow(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2156.8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 788.06054;
      doubleArray0[3] = (-3448.0);
      doubleArray0[4] = (-1327.2225704520454);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      assertEquals(7, matrix0.rows());
      assertEquals(7, matrix0.columns());
      
      Matrix matrix1 = matrix0.power(457);
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4);
      Matrix matrix0 = rowMajorSparseMatrix0.removeFirstColumn();
      int int0 = 7;
      Matrix matrix1 = rowMajorSparseMatrix0.power(7);
      Matrix matrix2 = matrix0.removeLastColumn();
      matrix2.euclideanNorm();
      // Undeclared exception!
      try { 
        matrix1.sliceTopLeft(1347, (-1851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..1347][0..-1851].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2463.0057272);
      doubleArray1[1] = 2993.7255187;
      doubleArray1[2] = (-254.578262);
      doubleArray1[3] = (-52.0);
      doubleArray1[4] = (-533.6);
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-533.6);
      doubleArray2[1] = (-533.6);
      doubleArray2[2] = (-52.0);
      doubleArray2[3] = (-533.6);
      doubleArray2[4] = (-52.0);
      doubleArray2[5] = (-254.578262);
      doubleArray2[6] = (-52.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-254.578262);
      doubleArray3[1] = (-1335.23095);
      doubleArray3[2] = (-254.578262);
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 2993.7255187;
      doubleArray4[1] = 2993.7255187;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-254.578262);
      doubleArray4[4] = (-2463.0057272);
      doubleArray4[5] = 2993.7255187;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.toColumnVector();
      assertEquals(4, denseMatrix0.rows());
      assertEquals(6, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(8, (-1.0));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 2862.0);
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.slice(8, 1979, 8, 1979);
      // Undeclared exception!
      try { 
        denseMatrix0.subtract(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 8x8 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 744;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(744, 744);
      int int1 = 464;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapRows(744, 464);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '744' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 25;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(25);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow((-4284), (-601.36285990396));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-4284' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(8, (-1.0));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 2862.0);
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.slice(8, 1979, 8, 1979);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix1.update(matrixFunction0);
      matrix0.mkString("A'0zG@rtbF9}Rdvq", "A'0zG@rtbF9}Rdvq");
      assertEquals(8, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = (-1963);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1963), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply((DenseVector) null, columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.multiply(vector0);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(1, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 17;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(17, 17);
      denseMatrix0.copyOfColumns(17);
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 17;
      doubleArray1[1] = (double) 17;
      doubleArray1[2] = (double) 17;
      doubleArray1[3] = (double) 17;
      doubleArray1[4] = (double) 17;
      doubleArray1[5] = (double) 17;
      doubleArray1[6] = (double) 17;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 17;
      doubleArray2[1] = (double) 17;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 17;
      doubleArray3[1] = (double) 17;
      doubleArray3[2] = (-415.3638);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-415.3638);
      doubleArray4[1] = 1986.613392195556;
      doubleArray4[2] = (-415.3638);
      doubleArray4[3] = (double) 17;
      doubleArray4[4] = (-415.3638);
      doubleArray4[5] = (double) 17;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) 17;
      doubleArray5[1] = (double) 17;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-415.3638);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = (-966.0);
      doubleArray8[1] = (double) 17;
      doubleArray8[2] = (double) 17;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = (-415.3638);
      doubleArray9[1] = 1986.613392195556;
      doubleArray9[2] = 96.95558814;
      doubleArray9[3] = 1986.613392195556;
      doubleArray9[4] = (-966.0);
      doubleArray9[5] = 1986.613392195556;
      doubleArray0[8] = doubleArray9;
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(10, 10);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.getRow(3);
      // Undeclared exception!
      try { 
        matrix0.swapColumns(10, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(7, 30);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      double double0 = matrix0.max();
      assertEquals(0.0, double0, 0.01);
      
      Matrix matrix1 = matrix0.removeLastRow();
      assertEquals(30, matrix0.columns());
      assertEquals(6, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      String string0 = "R:i6N$o#o!J+MGQ\\";
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("R:i6N$o#o!J+MGQ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 21;
      int int1 = Integer.MAX_VALUE;
      int int2 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(21, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = (-287);
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-287), (-287), (-287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -287x-287
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(37);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-7);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 37;
      doubleArray2[4] = (double) 37;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) (-7);
      doubleArray2[7] = (double) (-7);
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-7);
      doubleArray3[1] = (double) (-7);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 37;
      doubleArray4[1] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 100.0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (double) 37;
      doubleArray5[5] = (double) 37;
      doubleArray5[6] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (double) (-7);
      doubleArray6[1] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 1.0;
      doubleArray7[1] = (double) (-7);
      doubleArray7[2] = (double) 37;
      doubleArray7[3] = 100.0;
      doubleArray7[4] = (double) 0;
      doubleArray7[5] = (double) 0;
      doubleArray7[6] = 100.0;
      doubleArray7[7] = (double) (-7);
      doubleArray0[6] = doubleArray7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(0, (-7));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        Matrix.constant(0, (-1), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(4, 4, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.getColumn((-404));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-404' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.unit(4, 4);
      matrix0.diagonalProduct();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int1 = 42;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(42);
      columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      // Undeclared exception!
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(5, 5, 292.291221);
      matrix0.slice(5, 5, 10, 5);
      Matrix matrix1 = matrix0.shuffle();
      matrix1.blankOfShape(10, 10);
      Locale locale0 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      matrix1.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(481, 481);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [481..5][481..5].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.constant((-2708), (-252), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.diagonal((-2624), 167.53362);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(16, 16);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(sparseMatrix0, sparseMatrix0);
      matrix0.determinant();
      sparseMatrix0.isColumnMajor();
      matrix0.mkString("Ap", "EIGEN");
      matrix0.swapColumns(16, 16);
      matrix0.transpose();
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 41;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(41);
      int int1 = 628;
      denseMatrix0.diagonalProduct();
      denseMatrix0.blankOfShape(628, 41);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "G# 0gv#P8h_|eN";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("G# 0gv#P8h_|eN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 32;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(32, 32);
      Matrix matrix0 = sparseMatrix0.removeLastColumn();
      int int1 = 48;
      matrix0.blankOfShape(32, 48);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(3150, 3150);
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1526);
      denseVector0.toString();
      Double double0 = new Double(259.791957215);
      hashMap0.put((Integer) null, double0);
      SparseVector sparseVector0 = SparseVector.zero(17, (-1700));
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      ooPlaceOuterProduct0.ensureApplicableTo(vector0, denseVector0);
      MockRandom mockRandom0 = new MockRandom((-44));
      // Undeclared exception!
      try { 
        SparseVector.random((-44), (double) (-44), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = (-704);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.diagonal((-704), 145.24577);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 1000;
      Matrix matrix0 = Matrix.unit(1000, 1000);
      Matrix.zero(1989, 1989);
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1000;
      doubleArray1[1] = (double) 48;
      doubleArray1[2] = 4.9E-324;
      doubleArray1[3] = (double) 48;
      doubleArray1[4] = (double) 1000;
      doubleArray1[5] = (double) 48;
      doubleArray1[6] = (double) 1989;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 1989;
      doubleArray2[1] = (double) 1989;
      doubleArray2[2] = 4.9E-324;
      doubleArray2[3] = (double) 48;
      doubleArray2[4] = (double) 1000;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 48;
      doubleArray3[1] = (double) 48;
      doubleArray3[2] = (double) 1000;
      doubleArray3[3] = 4.9E-324;
      doubleArray3[4] = (double) 1989;
      doubleArray3[5] = (double) 48;
      doubleArray3[6] = (double) 1989;
      doubleArray3[7] = (double) 1000;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 48;
      doubleArray4[1] = 4.9E-324;
      doubleArray4[2] = (double) 1000;
      doubleArray4[3] = (double) 1989;
      doubleArray4[4] = (double) 1989;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (double) 48;
      doubleArray0[5] = doubleArray6;
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.swapColumns(2398, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2398
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom((-6709L));
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(10, 10, (double) 10, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(9, 1000);
      Matrix matrix1 = matrix0.removeLastRow();
      int int0 = (-2884);
      // Undeclared exception!
      try { 
        matrix1.copyOfRows((-2884));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2884x1000
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
