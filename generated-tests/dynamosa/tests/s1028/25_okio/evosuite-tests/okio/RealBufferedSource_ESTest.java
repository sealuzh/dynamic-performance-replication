/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 20:19:43 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(174L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      buffer0.writeShort(2829);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      realBufferedSource0.read(byteArray0);
      buffer0.write(byteArray0);
      realBufferedSource0.close();
      realBufferedSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (long) (byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.md5();
      boolean boolean0 = realBufferedSource0.rangeEquals((long) (byte)102, byteString0);
      assertFalse(boolean0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.writeShortLe(53);
      ByteString[] byteStringArray0 = new ByteString[7];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource1.readByteString(0L);
      byteStringArray0[0] = byteString1;
      ByteString.decodeBase64("d#z7Gs2 Dv#\"");
      byteStringArray0[1] = null;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1073741823), 53);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)49);
      ByteString byteString2 = ByteString.read(bufferedInputStream0, (byte)0);
      byteStringArray0[2] = byteString2;
      ByteString byteString3 = hashingSource0.hash();
      byteStringArray0[3] = byteString3;
      ByteString byteString4 = ByteString.encodeUtf8("");
      byteStringArray0[4] = byteString4;
      ByteString byteString5 = ByteString.EMPTY;
      byteStringArray0[5] = byteString5;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-602), (-536));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-602 byteCount=-536
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(0L, charset0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read((Buffer) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = false;
      pipe_PipeSource0.close();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.timeout();
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = ByteString.encodeUtf8("l<ED@9_0u");
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.sha256(buffer0);
      realBufferedSource0.readByteString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeShortLe(51);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource2.readDecimalLong();
      Buffer buffer1 = realBufferedSource2.buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (-6121), (-3150));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-6121 byteCount=-3150
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-40));
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readAll(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(12L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)85;
      try { 
        realBufferedSource2.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = ByteString.decodeBase64("MD5");
      realBufferedSource0.rangeEquals((-1766L), byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (-1766L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("l<ED@9_0u");
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals((-1L), long0);
      
      realBufferedSource0.readFully(buffer0, 0L);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeInt(6000);
      realBufferedSource0.rangeEquals((long) 6000, byteString0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource1.rangeEquals(2L, (ByteString) null, 97, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(1000L);
      Charset.defaultCharset();
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      long long0 = realBufferedSource0.indexOfElement(byteString0, 1000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      realBufferedSource0.rangeEquals(1L, byteString0, 13, 13);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      InputStream inputStream0 = realBufferedSource1.inputStream();
      try { 
        ByteString.read(inputStream0, 75);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.indexOf((byte)10, (long) (byte)10);
      realBufferedSource0.close();
      try { 
        realBufferedSource1.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      Buffer buffer2 = new Buffer();
      long long0 = 8L;
      // Undeclared exception!
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)3, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-1 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[2];
      try { 
        realBufferedSource0.readFully(buffer0, 2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "socket == null");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      try { 
        realBufferedSource0.readUtf8LineStrict(1095216660480L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[6];
      byteString0.indexOf(byteArray0);
      byte byte0 = (byte)55;
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)33;
      realBufferedSource0.timeout();
      byteArray0[5] = (byte) (-29);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)97, 76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOfElement((ByteString) null, 4L);
      try { 
        realBufferedSource0.readByteString(1311L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(1651L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(pipe_PipeSink0);
      try { 
        realBufferedSource0.skip(470L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeUtf8("FW?+asF");
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      int int0 = realBufferedSource0.select(options0);
      assertTrue(buffer1.exhausted());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.skip(0L);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = 101L;
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource0.indexOf(byteString0, 0L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      Buffer buffer2 = new Buffer();
      realBufferedSource1.read(buffer2, 8L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource2.read(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString.decodeBase64("getsockname failed");
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(8L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(2795L, (ByteString) null, 121, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pipe pipe0 = new Pipe(23L);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.readAll(buffer_UnsafeCursor0.buffer);
      realBufferedSource1.skip((-1));
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      realBufferedSource0.skip((-1));
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteString((-3142L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3142
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-4006L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4006
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8(8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeShortLe(48);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      realBufferedSource1.readDecimalLong();
      try { 
        realBufferedSource0.readFully(realBufferedSource2.buffer, 1553L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      GzipSink gzipSink0 = new GzipSink(realBufferedSource0.buffer);
      realBufferedSource1.readAll(gzipSink0);
      realBufferedSource0.skip(0L);
      assertNotSame(realBufferedSource0, realBufferedSource1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSink.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = buffer1.readByteArray();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource1.read(byteArray0, 192, 420);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=192 byteCount=420
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(864L, (ByteString) null, 0, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-5);
      int int0 = (-2147221566);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (-1081), (-2147221566));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=-1081 byteCount=-2147221566
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64("Fh");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(10000000000000000L, byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("$Z");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = ByteString.encodeUtf8("$Z");
      byteString0.hmacSha256(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.read(realBufferedSource0.buffer, 0L);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString(" Q#lCGp2_p$$-ocrKts", charset0);
      realBufferedSource0.readShortLe();
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals("#lCGp2_p$$-ocrKts", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeShortLe((-1226));
      long long0 = realBufferedSource0.readDecimalLong();
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSink0.writeInt((-1908874352));
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.readHexadecimalUnsignedLong();
      realBufferedSource0.readAll(realBufferedSink0);
      realBufferedSource0.readUtf8Line();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString.decodeBase64("l<ED@9YR_0u");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l<ED@9YR_0u");
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(10000000L, (ByteString) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      long long0 = realBufferedSource0.indexOf((byte)81, (long) (byte)81, (long) (byte)81);
      assertEquals((-1L), long0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      buffer1.write(byteArray0);
      realBufferedSource0.rangeEquals((-1L), byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null, 8230, 259);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(294L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Source source0 = pipe0.source();
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        realBufferedSource0.request(294L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      ByteString byteString1 = ByteString.encodeUtf8("h@EO-,->3*JR[fpa");
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        ByteString.read(inputStream0, 75);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource1.readFully(byteArray0);
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.closed;
      String string0 = realBufferedSource0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer0.writeTo(outputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      ByteString.of(byteArray0);
      realBufferedSource0.request((byte)102);
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      long long0 = 1002L;
      try { 
        realBufferedSource0.request(1002L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeUtf8("FW?+asF");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.indexOf((byte)81, (long) (byte)81, (long) (byte)81);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x46
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeShortLe((-1226));
      ByteString[] byteStringArray0 = new ByteString[1];
      Options.of(byteStringArray0);
      realBufferedSource0.readDecimalLong();
      byte byte0 = realBufferedSource0.readByte();
      assertEquals((byte) (-5), byte0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeInt(6000);
      realBufferedSource0.readIntLe();
      ByteString.encodeUtf8("F");
      long long0 = realBufferedSource0.indexOfElement(byteString0, (long) 1880555520);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      long long0 = 2830L;
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString(2830L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      realBufferedSink0.writeShortLe(53);
      Options.of(byteStringArray0);
      realBufferedSource0.readDecimalLong();
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOfElement(byteString0, (-839L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteArray(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)74;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.write(byteString0);
      realBufferedSource0.request(1002L);
      long long0 = realBufferedSource0.read(buffer0, 1002L);
      assertEquals(3L, buffer0.size());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      byte byte0 = (byte) (-2);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict(1095216660481L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Pipe pipe0 = new Pipe(2065L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.indexOf((byte)87, 102L);
      realBufferedSink0.buffer.indexOf((byte) (-123), 8L);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer0.writeTo(outputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      ByteString byteString0 = ByteString.of(byteArray0);
      realBufferedSource0.rangeEquals((-247L), byteString0);
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      int int0 = 263;
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(263);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      realBufferedSource0.read(((RealBufferedSink) bufferedSink0).buffer, (long) 263);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource1.indexOfElement(byteString0, (long) 263);
      realBufferedSource0.buffer.readByteArray();
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(2065L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      try { 
        realBufferedSource0.skip(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer1 = buffer0.writeTo(outputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource1.readString((-247L), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -247
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(2065L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte)0;
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource0.readUtf8(1000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeShortLe((-1226));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.readUtf8Line();
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-86), (long) (byte) (-86), (long) (byte) (-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-86 toIndex=-86
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)115;
      ByteString[] byteStringArray0 = new ByteString[4];
      ByteString byteString0 = realBufferedSource2.readByteString();
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = hashingSource0.hash();
      realBufferedSource0.rangeEquals(4L, byteString1, 106, 1158);
      byteStringArray0[1] = byteString1;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString2 = hashingSink0.hash();
      byteStringArray0[2] = byteString2;
      ByteString byteString3 = ByteString.decodeBase64("");
      byteStringArray0[3] = byteString3;
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-24), (long) (byte) (-24), (long) (byte)115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-24 toIndex=115
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray(4L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource1.buffer);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = realBufferedSource0.rangeEquals((-859L), byteString0);
      assertFalse(boolean0);
      
      long long0 = realBufferedSource0.readAll(hashingSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(18L);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)85;
      long long0 = realBufferedSource2.readDecimalLong();
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(2065L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-5);
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(10);
      ByteString.encodeUtf8("l<ED@9_0u");
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.toString();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
      
      realBufferedSource0.exhausted();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      realBufferedSource2.timeout();
      try { 
        realBufferedSource1.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      realBufferedSource0.indexOf((byte)108, 360L, 2174L);
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource0.readString(2L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      
      realBufferedSource0.indexOf((byte)81, (long) (byte)81, (long) (byte)81);
      long long0 = realBufferedSource0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(2065L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte byte0 = (byte) (-4);
      byte byte1 = (byte) (-93);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource2.read((Buffer) null, (-49L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readString(charset0);
      try { 
        realBufferedSource0.readUtf8(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.sha256(buffer0);
      realBufferedSource0.readByteString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeShortLe(64);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x40
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8Line();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.indexOf((byte) (-49), 2147483647L);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSink0.writeShortLe((-1226));
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)105;
      byte byte0 = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-105);
      ByteString byteString2 = ByteString.of(byteArray0);
      byteStringArray0[3] = byteString2;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Options.of(byteStringArray0);
      realBufferedSource1.readDecimalLong();
      try { 
        realBufferedSource1.skip(1355L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString[] byteStringArray0 = new ByteString[3];
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(174L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer1 = buffer0.writeShort(2829);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.readShort();
      ByteString byteString0 = realBufferedSource1.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(9223372036854775807L);
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      gzipSource0.timeout();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: invalid block type
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSink0.writeShortLe(51);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      realBufferedSource3.readShortLe();
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-382L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -382
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(5L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer1 = new Buffer();
      buffer1.writeShort(2423);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((long) 2829);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString.decodeBase64("l<ED@9YR_0u");
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, 0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeInt(6000);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.readFully(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeInt(6000);
      realBufferedSource0.rangeEquals(1L, byteString0, (-753), 6000);
      HashingSink.sha256(buffer1);
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = ByteString.decodeBase64("XZ-g");
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString2;
      String string0 = realBufferedSource0.readUtf8Line();
      assertTrue(buffer1.exhausted());
      assertEquals("\u0000\u0000\u0017p", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("l<ED@9_0u");
      realBufferedSource0.rangeEquals(101L, byteString0, 89, (-1387));
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.decodeBase64("Fh");
      boolean boolean0 = realBufferedSource0.rangeEquals(8L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.buffer.writeByte((byte)85);
      try { 
        realBufferedSource1.readString((long) (byte)85, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeInt(6000);
      realBufferedSource0.request(1L);
      HashingSink.sha256(buffer1);
      hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options options1 = Options.of(byteStringArray1);
      realBufferedSource0.select(options0);
      realBufferedSource0.readByteArray(1L);
      realBufferedSource0.request(1L);
      realBufferedSource0.select(options1);
      String string0 = realBufferedSource0.toString();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals("buffer([size=0])", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeByte(1569);
      long long0 = realBufferedSource0.read(buffer0, 1104L);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString.decodeBase64("Fh");
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-22L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -22
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      InflaterSource inflaterSource1 = new InflaterSource(gzipSource0, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource1);
      try { 
        realBufferedSource1.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeShortLe(5184);
      realBufferedSink0.writeLongLe(5184);
      // Undeclared exception!
      try { 
        realBufferedSource0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.emit();
      realBufferedSink0.buffer();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(10);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      realBufferedSink0.writeIntLe(740);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      int int0 = realBufferedSource0.readInt();
      assertEquals((-469630976), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      buffer0.toString();
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ByteString.decodeBase64("&' ;;d;");
      realBufferedSource0.rangeEquals(2539L, byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null, 2539L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.indexOf((byte)0, (long) (byte)0, (long) (byte)0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.rangeEquals(32L, byteString0);
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      long long0 = realBufferedSource2.readAll(realBufferedSource1.buffer);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeInt(6000);
      realBufferedSource0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      realBufferedSource0.readUtf8();
      // Undeclared exception!
      try { 
        realBufferedSource0.skip(4278190080L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.writeShortLe(Integer.MAX_VALUE);
      realBufferedSource0.select(options0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xff
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)14);
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.skip(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeInt(6000);
      realBufferedSource0.rangeEquals(1L, byteString0, (-753), 6000);
      HashingSink.sha256(buffer1);
      hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options.of(byteStringArray1);
      realBufferedSource0.select(options0);
      realBufferedSource0.readByteArray(1L);
      realBufferedSource0.request(1L);
      realBufferedSource0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-2286L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2286
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(263);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      realBufferedSource0.read(((RealBufferedSink) bufferedSink0).buffer, (long) 263);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource1.indexOfElement(byteString0, (long) 263);
      short short0 = realBufferedSource1.readShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      GzipSource gzipSource0 = new GzipSource(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, 1475L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.closed = true;
      long long0 = (-4039L);
      ByteString.decodeBase64("eAM");
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(3258L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.close();
      realBufferedSource0.toString();
      buffer0.writeIntLe(1431655765);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer1, 0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = new Buffer();
      buffer1.readByteArray();
      realBufferedSource0.read(buffer1, 8L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      ByteString byteString0 = realBufferedSource1.readByteString();
      realBufferedSource1.rangeEquals((-1L), byteString0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSource1.rangeEquals(4L, byteString1);
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ByteString.decodeBase64("*{w");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      long long0 = (-3019L);
      // Undeclared exception!
      try { 
        realBufferedSource1.rangeEquals((-3019L), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.indexOf((byte)81, (long) (byte)81, (long) (byte)81);
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource2.rangeEquals(10L, byteString0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      realBufferedSink0.writeShortLe(Integer.MAX_VALUE);
      short short0 = realBufferedSource0.readShort();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(174L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeShort(2829);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.exhausted();
      realBufferedSource0.readByte();
      realBufferedSource0.readByteArray();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byteCount < 0: ");
      hashingSource1.close();
      hashingSource1.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8LineStrict((-1572L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1572
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.close();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      realBufferedSource2.read(buffer1, 3L);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)117;
      // Undeclared exception!
      try { 
        realBufferedSource3.read(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(10);
      ByteString.encodeUtf8("l<ED@9_0u");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      String string0 = realBufferedSource0.readUtf8LineStrict();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2);
      ByteString.encodeUtf8("l<ED@9_0u");
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.toString();
      realBufferedSource0.readAll(buffer1);
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(buffer1.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("l<ED@9_0u");
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      byteString0.endsWith(byteString0);
      realBufferedSource0.select(options0);
      assertEquals(0L, buffer0.size());
      
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[4];
      realBufferedSink0.writeInt((-1085));
      realBufferedSource1.read(byteArray0);
      Timeout timeout0 = realBufferedSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      
      realBufferedSource0.readString(charset0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong(71776119061217280L);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(174L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer1 = buffer0.writeShort(2829);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.timeout();
      String string0 = realBufferedSource0.readUtf8Line();
      assertTrue(buffer1.exhausted());
      assertEquals("\u000B\r", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource0.readString(8L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString.decodeBase64("Fh");
      Timeout timeout0 = realBufferedSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      int int0 = 263;
      realBufferedSink0.writeInt(263);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer.readByteArray();
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      Source source0 = hashingSource1.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.close();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)104;
      realBufferedSource0.readByteArray();
      ByteString byteString0 = ByteString.of(byteArray0, (int) (byte)0, 0);
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1(buffer0, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-64);
      ByteString byteString0 = new ByteString(byteArray0);
      try { 
        realBufferedSource0.indexOfElement(byteString0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      Timeout timeout0 = realBufferedSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      buffer1.readUtf8();
      byteArray0[2] = (byte) (-15);
      realBufferedSource1.read(byteArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      // Undeclared exception!
      try { 
        realBufferedSource3.readUtf8((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.readAll(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.require(0L);
      realBufferedSource0.exhausted();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource1);
      try { 
        realBufferedSource3.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray((-2297L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2297
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.rangeEquals(9223372036854775807L, byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      
      long long0 = realBufferedSource0.indexOfElement((ByteString) null);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.size = 234L;
      long long0 = 8192L;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.toString();
      assertEquals("buffer([size=0])", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteString.of(byteArray0);
      realBufferedSource0.request((byte)0);
      realBufferedSource0.readByteString();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      hashingSource0.close();
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (int) (byte)0, (int) (byte) (-128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=-128
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.indexOf((byte) (-77));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        realBufferedSource0.readUtf8(4294967295L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeInt(6000);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.encodeUtf8("l<ED@9_0u");
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      realBufferedSource0.toString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readAll(buffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 174L;
      Pipe pipe0 = new Pipe(174L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeShort(2829);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.exhausted();
      realBufferedSource0.readByte();
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.indexOfElement(byteString0);
      realBufferedSource0.readAll(buffer1);
      realBufferedSource0.readUtf8();
      byteString0.indexOf(byteArray0, (int) (byte)11);
      realBufferedSource0.timeout();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(10L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long long0 = 881L;
      Pipe pipe0 = new Pipe(881L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.require(881L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.exhausted();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      realBufferedSource2.timeout();
      try { 
        realBufferedSource0.readString(1016L, (Charset) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte) (-39);
      buffer0.write(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte)0;
      realBufferedSource0.read(byteArray1);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(byteArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeUtf8("FW?+asF");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.indexOf((byte)81, (long) (byte)81, (long) (byte)81);
      realBufferedSource0.readAll(hashingSink0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(realBufferedSource0.buffer, (-922337203685477580L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -922337203685477580
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.require(8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(0L, charset0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.timeout();
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.indexOf((byte) (-126));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-25), 0L, (long) (byte) (-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=0 toIndex=-126
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(174L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeShort(2829);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.exhausted();
      realBufferedSource0.readByte();
      realBufferedSource0.readByteArray();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      hashingSource1.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8LineStrict((-1572L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1572
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-1), 2L, (-265L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=2 toIndex=-265
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, (long) (byte)0, 3377L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource2.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.close();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      // Undeclared exception!
      try { 
        realBufferedSource1.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeDecimalLong(2165L);
      realBufferedSource0.skip(2L);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=3635\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = ByteString.encodeUtf8("F");
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.read(realBufferedSource0.buffer, 0L);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byteString1.startsWith(byteString0);
      realBufferedSource1.rangeEquals(0L, byteString2, 89, 89);
      try { 
        realBufferedSource1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray(4L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      pipe0.sinkClosed = true;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeShort(8230);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Pipe pipe0 = new Pipe(1L);
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)115;
      realBufferedSink1.writeDecimalLong((byte)115);
      byteArray0[3] = (byte) (-92);
      try { 
        realBufferedSource2.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      realBufferedSink0.writeShortLe(53);
      Options.of(byteStringArray0);
      long long0 = realBufferedSource0.readDecimalLong();
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      long long0 = 1840L;
      Pipe pipe0 = new Pipe(1840L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.readByteArray();
      realBufferedSource0.read(buffer0, 8L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteArray();
      ByteString byteString0 = realBufferedSource1.readByteString();
      realBufferedSource1.rangeEquals(4L, byteString0);
      // Undeclared exception!
      try { 
        HashingSink.hmacSha1(buffer2, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = (-3118L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-3118L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -3118
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(realBufferedSource0, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      ByteString[] byteStringArray0 = new ByteString[4];
      try { 
        realBufferedSource1.readByteString(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      HashingSink.hmacSha256(realBufferedSource0.buffer, byteString0);
      realBufferedSink0.writeShortLe((-1226));
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      short short0 = realBufferedSource0.readShortLe();
      assertEquals((short) (-1226), short0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Pipe pipe0 = new Pipe(2065L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte) (-54);
      byte byte1 = (byte) (-101);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(174L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeShort(2829);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer3 = new Buffer();
      realBufferedSource1.read(buffer0, 1427L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = ByteString.encodeUtf8("F");
      byteString0.hmacSha256(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.read(realBufferedSource0.buffer, 0L);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString(" Q#lCGp2_p$$-ocrKts", charset0);
      realBufferedSource1.readUtf8CodePoint();
      String string0 = realBufferedSource0.readUtf8();
      assertEquals("", string0);
      
      String string1 = realBufferedSource0.toString();
      assertEquals("buffer([size=0])", string1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1225L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readLongLe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readFully(buffer0, 8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer1, 0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long0 = realBufferedSource0.indexOfElement(byteString0, 2674L);
      assertEquals((-1L), long0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = realBufferedSource0.rangeEquals((long) 106, byteString0, 665, 255);
      assertFalse(boolean0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString2 = hashingSink0.hash();
      ByteString.decodeBase64("delegate == null");
      ByteString.encodeUtf8("delegate == null");
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = null;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = null;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString2;
      byteStringArray0[6] = byteString1;
      byteStringArray0[7] = byteString1;
      Options.of(byteStringArray0);
      long long0 = realBufferedSource0.indexOf((byte) (-88), 7L, (long) 665);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString2 = hashingSource0.hash();
      realBufferedSource0.rangeEquals(2495L, byteString2, 1158, (-2107715431));
      HashingSink hashingSink1 = HashingSink.sha256(buffer0);
      ByteString byteString3 = hashingSink1.hash();
      ByteString.decodeBase64("F");
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString3;
      byteStringArray0[3] = byteString1;
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)33, 12L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=12 toIndex=2
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Pipe pipe0 = new Pipe(2065L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte byte0 = (byte) (-93);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      Buffer buffer1 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-1714L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1714
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      long long0 = realBufferedSource0.indexOf((byte)85, 1L, 1L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[10];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.close();
      realBufferedSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (long) (byte) (-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -39
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString.decodeBase64("|K{F:k:6");
      realBufferedSource0.rangeEquals(238L, (ByteString) null, (-2146308231), 2136181102);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, (-1627L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.close();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      realBufferedSource2.read(buffer1, 3L);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource1);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-27);
      // Undeclared exception!
      try { 
        realBufferedSource3.readByteArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 1000L;
      realBufferedSource0.request(1000L);
      byte[] byteArray0 = new byte[0];
      buffer0.size = (-662L);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Pipe pipe0 = new Pipe(2076L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-54);
      byteArray0[0] = (byte) (-54);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      realBufferedSink2.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink1.buffer);
      realBufferedSink1.writeShortLe(1789569706);
      realBufferedSource0.readAll(realBufferedSink0);
      try { 
        realBufferedSource1.skip(2967L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      long long0 = 1L;
      Pipe pipe0 = new Pipe(1L);
      pipe0.sinkClosed = true;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeShort(8230);
      Buffer buffer1 = realBufferedSink0.buffer();
      int int0 = 0;
      buffer1.writeAll(buffer0);
      buffer1.writeUtf8CodePoint(0);
      pipe_PipeSource0.read(buffer1, (-1072L));
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.encodeUtf8("timeout < 0: ");
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-14L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -14
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer0.writeTo(outputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.readUtf8Line();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      ByteString.of(byteArray0);
      realBufferedSource0.exhausted();
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)102;
      ByteString.of(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-705L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -705
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((-287L), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -287
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteString byteString0 = ByteString.decodeBase64("Fh");
      boolean boolean0 = realBufferedSource0.rangeEquals(23L, byteString0);
      assertFalse(boolean0);
      
      long long0 = realBufferedSource0.indexOf(byteString0, 23L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.rangeEquals(254L, byteString0, (int) (byte)1, (int) (byte)1);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeByte(525);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-21);
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeByte(2146496299);
      realBufferedSource0.readString(0L, charset0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x2b
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      int int0 = 70;
      buffer0.writeShort(70);
      Pipe.PipeSource pipe_PipeSource1 = pipe0.new PipeSource();
      pipe_PipeSource1.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource1);
      ByteString byteString0 = ByteString.encodeUtf8("?qO&");
      HashingSource hashingSource0 = HashingSource.hmacSha1(pipe_PipeSource0, byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeDecimalLong(1736L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.readUtf8();
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-80);
      byte byte0 = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-119);
      byteString0.indexOf(byteArray0, (int) (byte) (-112));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.timeout();
      realBufferedSource0.buffer.indexOf((byte)22, 100000000000000L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf((byte)0, (long) (byte) (-80));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-80 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSink0.writeInt((-1908874352));
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.readHexadecimalUnsignedLong();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      long long0 = 3L;
      Pipe pipe0 = new Pipe(3L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      buffer0.writeIntLe(1908874353);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, (-623));
      realBufferedSource0.indexOfElement(byteString0);
      realBufferedSource0.readByteString();
      pipe0.sourceClosed = true;
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("F");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeInt((-2102744404));
      int int0 = (-753);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.rangeEquals((long) (-753), byteString0, 2147125793, (-753));
      HashingSink hashingSink1 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink1.hash();
      ByteString[] byteStringArray0 = new ByteString[4];
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      // Undeclared exception!
      try { 
        Charset.forName("F");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // F
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      pipe0.sinkClosed = true;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-49), (long) (byte) (-49));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-49 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
