/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:18:39 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.model.HttpRequestBody;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.start();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(200, threadFactory0);
      scheduledThreadPoolExecutor0.getContinueExistingPeriodicTasksAfterShutdownPolicy();
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1836);
      Spider spider2 = spider1.clearPipeline();
      boolean boolean0 = spider2.isExitWhenComplete();
      assertTrue(boolean0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request("");
      request0.setMethod((String) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request1 = request0.setExtras(hashMap0);
      request1.setPriority(0L);
      Spider spider1 = spider0.setSpawnUrl(false);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" gdA6`{(c,R~;");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " gdA6`{(c,R~;";
      stringArray0[1] = " gdA6`{(c,R~;";
      stringArray0[2] = " gdA6`{(c,R~;";
      stringArray0[3] = " gdA6`{(c,R~;";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" gdA6`{(c,R~;", stringArray0[4]);
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.setUUID("");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider3.get(" gdA6`{(c,R~;");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("emqY9Z4!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(31);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[?zS5j75:X}m\u0001-~p;");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4139, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.setUUID("[?zS5j75:X}m\u0001-~p;");
      Request[] requestArray0 = new Request[1];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider2);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" gdA6`{(c,R~;");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.runAsync();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(" gdA6`{(c,R~;");
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      String string0 = "phantomjs";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(string0);
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      // Undeclared exception!
      try { 
        spider0.scheduler(duplicateRemovedScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" gdA6`{(c,R~;");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.runAsync();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" gdA6`{(c,R~;", " gdA6`{(c,R~;");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(" gdA6`{(c,R~;");
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      String string0 = "phantomjs";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(string0);
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      // Undeclared exception!
      try { 
        spider0.scheduler(duplicateRemovedScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4BA2& !!cd.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) forkJoinPool0, (-599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      String string1 = " stop success!";
      Spider spider2 = spider1.setUUID(" stop success!");
      // Undeclared exception!
      try { 
        spider2.thread((-3281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = (-2247);
      // Undeclared exception!
      try { 
        spider0.thread((-2247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Locale locale0 = Locale.JAPAN;
      locale0.getScript();
      locale0.getScript();
      locale0.getUnicodeLocaleKeys();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[w]+://", "file.separator");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-2060));
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Thread interrupted when sleep");
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      Spider spider3 = spider2.setSpawnUrl(true);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "n@^Pb}8K";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n@^Pb}8K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(452);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider2.pipeline(multiPagePipeline0);
      // Undeclared exception!
      try { 
        spider3.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UTF-8");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", i$4l5&T~uRHy{");
      Spider spider0 = new Spider(simplePageProcessor0);
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request("");
      Request request1 = request0.setMethod((String) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      request1.setExtras(hashMap0);
      Spider spider1 = spider0.setUUID(".cursor.txt");
      spider0.checkIfRunning();
      spider1.getStartTime();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.scheduler(duplicateRemovedScheduler0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" gdA6`{(c,R~;");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " gdA6`{(c,R~;";
      stringArray0[1] = " gdA6`{(c,R~;";
      stringArray0[2] = " gdA6`{(c,R~;";
      stringArray0[3] = " gdA6`{(c,R~;";
      stringArray0[4] = " gdA6`{(c,R~;";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" gdA6`{(c,R~;", " gdA6`{(c,R~;");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Spider spider3 = spider2.startUrls(linkedList1);
      // Undeclared exception!
      try { 
        spider3.get(" gdA6`{(c,R~;");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", i$4l5&T~uRHy{");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("H4l[%kvmbYOID!");
      fileCacheQueueScheduler0.poll(spider0);
      spiderMonitor_MonitorSpiderListener0.onSuccess((Request) null);
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Spider.Status.fromValue(11);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", i$4l5&T~uRHy{");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setMethod("_cycle_tried_times");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)47;
      byteArray0[3] = (byte)28;
      HttpRequestBody httpRequestBody0 = HttpRequestBody.custom(byteArray0, "_cycle_tried_times", "us.codecraft.webmagic.utils.MultiKeyMapBase");
      request1.setRequestBody(httpRequestBody0);
      request1.setPriority(792L);
      spider0.getStatus();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#3PP_I}}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      linkedBlockingQueue0.peek();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      spider1.setEmptySleepTime(1);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      List<Pipeline> list0 = null;
      spider1.setPipelines((List<Pipeline>) null);
      int int0 = 1;
      int int1 = (-599);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = null;
      try {
        priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>((-599), comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.PriorityBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request("");
      Spider spider1 = spider0.setUUID("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      Spider spider3 = spider1.setSpawnUrl(false);
      Spider spider4 = spider2.scheduler(fileCacheQueueScheduler0);
      fileCacheQueueScheduler0.poll(spider4);
      spider0.checkIfRunning();
      spider3.pipeline((Pipeline) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "iTfxO={`UUvDm");
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download("iTfxO={`UUvDm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Request request0 = new Request("");
      request0.setMethod((String) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request1 = request0.setExtras(hashMap0);
      request1.setPriority(0L);
      spider0.getPageCount();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      Spider.Status.fromValue(0);
      String string0 = ", i$4l5Ti~uRHy{";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", i$4l5Ti~uRHy{");
      Spider spider0 = new Spider(simplePageProcessor0);
      Locale locale0 = Locale.JAPAN;
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} closed! {} pages downloaded.");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      Spider spider3 = spider2.setSpawnUrl(true);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider3.addPipeline(resultItemsCollectorPipeline0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Spider {} closed! {} pages downloaded.");
      ResultItems resultItems0 = new ResultItems();
      Request request0 = new Request();
      Request request1 = request0.setMethod("Spider {} closed! {} pages downloaded.");
      Request request2 = request1.setPriority(863L);
      ResultItems resultItems1 = resultItems0.setRequest(request2);
      resultItemsCollectorPipeline0.process(resultItems1, spider2);
      Json json0 = new Json("}B$4{SYZoy");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }
}
