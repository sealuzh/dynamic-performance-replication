/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:18:05 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.manhattanNorm();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(9);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      double double0 = matrix0.product();
      assertEquals(9, denseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      Matrix matrix0 = cCSMatrix0.transpose();
      assertEquals(2, matrix0.columns());
      
      double double0 = cCSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cCSMatrix0.foldColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Vector vector0 = cRSMatrix0.getColumn(17);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(17, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(248, 248, 248);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn(248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeFirstColumn();
      assertEquals(0.03125, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("Zyt/EVUvn~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-21), (-21), (-21));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -21x-21
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(71);
      Matrix.randomSymmetric(71, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(84);
      basic2DMatrix0.sliceTopLeft(84, 84);
      int[] intArray0 = new int[1];
      basic2DMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(2, 2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(243, 243);
      columnMajorSparseMatrix0.sliceBottomRight(243, 243);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4, 4);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInRow(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(6, 6, 6);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(6);
      sparseMatrix0.equals((Matrix) cCSMatrix0, (double) 6);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      rowMajorSparseMatrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.trace();
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copyOfRows(255);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.divide(5.0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("0.000");
      columnMajorSparseMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.divide(5.0);
      cRSMatrix0.insert(matrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0, 37, 37, (-1000), (-409));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1000x-409
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.divide(3023.81954552);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfColumns((-3384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-3384
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = (-1517.9206540416);
      Matrix matrix0 = Matrix.diagonal(258, (-1517.9206540416));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      matrix0.multiply(double0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 6);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      sparseMatrix0.insert((Matrix) cRSMatrix0);
      cRSMatrix0.setColumn(6, (double) 6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.mkString("28W.D6IGJ.", "28W.D6IGJ.");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.subtract(1449.06841);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn(658);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector.fromMap(hashMap0, 5);
      Basic2DMatrix.identity(5);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(5, 5);
      basic2DMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInColumn(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(2476, 0);
      matrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(1);
      Matrix matrix1 = matrix0.removeLastColumn();
      matrix1.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeRow((-2067947215));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.eachInRow(84, vectorProcedure0);
      basic2DMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      cCSMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(4, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [4..4][8..4].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix.zero(3, 3, 3);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(Integer.MAX_VALUE, 4, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(84);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      basic2DMatrix0.updateColumn(4, vectorFunction0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(6, 6, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(6, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        Matrix.zero(3, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.determinant();
      cCSMatrix0.blankOfColumns(2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CCSMatrix.identity(4);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight(4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [4..0][4..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 13;
      Matrix.from1DArray(13, 13, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(16, 16, mockRandom0);
      matrix0.multiply((double) 16);
      // Undeclared exception!
      try { 
        matrix0.get(16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.unit((-3303), (-3303));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.equals((Matrix) cRSMatrix0, 238.64);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("      ");
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(1000, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("    ");
      sparseMatrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SparseMatrix.zero(6, 6);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      SparseMatrix.identity(6);
      basic2DMatrix0.subtract((double) 6);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(84);
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      matrix0.subtract((-1171.822));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 4x4 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(84);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      basic2DMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(72, 72);
      Vector vector0 = basic2DMatrix0.toRowVector();
      basic2DMatrix0.iterator();
      basic2DMatrix0.insertRow(10, vector0);
      basic2DMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 5);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector.zero(5);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-2615), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateRow(32, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(6, 6);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix(6, 6);
      // Undeclared exception!
      try { 
        cCSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(76);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0, 8, 2031);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 8 rows and 2031 cols at 0, 0 in a 32x32 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(21, 21);
      sparseMatrix0.toColumnMajorSparseMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      sparseMatrix0.determinant();
      basic2DMatrix0.insertColumn((-1952257860), (Vector) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.removeLastRow();
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[1];
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(84, 84);
      cRSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(6, 6);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        matrix0.add((Matrix) cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 6x6 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CCSMatrix.zero(6, 6);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(6, 6);
      DenseVector denseVector0 = DenseVector.zero(6);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(6, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cRSMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(84);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 84 rows and 84 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 6);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      sparseMatrix0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        sparseMatrix0.swapRows(1219, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1219' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CCSMatrix.zero(6, 6, 6);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(6);
      // Undeclared exception!
      try { 
        sparseMatrix0.swapColumns(0, (-922));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-922' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1582, 1582);
      int int0 = denseMatrix0.rank();
      denseMatrix0.subtract((double) int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SparseMatrix.zero(0, 0);
      Matrix matrix0 = Matrix.identity(10);
      Matrix matrix1 = matrix0.removeLastColumn();
      Vector vector0 = matrix1.getColumn(10);
      Vector vector1 = vector0.multiply(1.0);
      Vector vector2 = vector1.copy();
      Matrix matrix2 = matrix0.insertColumn(0, vector2);
      matrix0.equals(matrix2, 1.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.determinant();
      CCSMatrix.identity(4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(21, 21);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      double double0 = new Integer(21);
      MatrixOperation<RowMajorSparseMatrix> matrixOperation0 = (MatrixOperation<RowMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix0.apply(matrixOperation0);
      cCSMatrix0.swapRows((-126), (-126));
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      cCSMatrix0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.iteratorOfColumn(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cCSMatrix0, 4, 4, 6, 6, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 6, 6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      CCSMatrix cCSMatrix1 = new CCSMatrix(2, 2);
      cCSMatrix0.insert((Matrix) cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(37);
      sparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(13, 22);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      basic2DMatrix0.updateRow(4, vectorFunction0);
      Locale locale0 = Locale.FRANCE;
      NumberFormat.getCurrencyInstance(locale0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.get(22, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.blank();
      cCSMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.toString();
      cCSMatrix0.determinant();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("1.000 0.000 0.000 0.000\n0.000 1.000 0.000 0.000\n0.000 0.000 1.000 0.000\n0.000 0.000 0.000 1.000\n");
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) cCSMatrix0, 4, 16, 16, 569);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4, 16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      Matrix matrix0 = cCSMatrix0.blank();
      cCSMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(69, 69, 69);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cCSMatrix0.mkString(numberFormat0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseVector denseVector0 = DenseVector.constant(32, 32);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(32, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 32. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2789, 2789);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.iteratorOfColumn(331);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList1);
      DenseVector denseVector0 = sparseVector0.toDenseVector();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      Matrix matrix1 = cRSMatrix0.insert(matrix0);
      sparseMatrix0.divide((-1863.712554456853));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      sparseMatrix0.insert(matrix1, 3, (-1744), 795, 664);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.determinant();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cCSMatrix0.equals((Matrix) cRSMatrix0, 0.0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2072, 2072);
      matrix0.get((-1686), 4);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 84;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(84);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.transformRow(84, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.determinant();
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(9, 9, 9);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(6, 6, 6);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 3761);
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(6, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 3761. Should be: 6.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(10);
      matrix0.removeLastColumn();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(582, 125, 125);
      int int0 = 137;
      Vector vector0 = cRSMatrix0.getColumn(137);
      vector0.multiply((double) 10);
      vector0.copy();
      cRSMatrix0.insertColumn(10, vector0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int1 = 48;
      int int2 = 157;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(int1, int2);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      cRSMatrix0.equals(matrix1, (double) int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      cCSMatrix0.determinant();
      cCSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      ColumnMajorSparseMatrix.fromCSV("     ");
      NumberFormat.getNumberInstance();
      matrix0.shuffle();
      matrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.toString();
      CCSMatrix.identity(4);
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.transformColumn(4, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(2, (double) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2500);
      // Undeclared exception!
      columnMajorSparseMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.toString();
      cCSMatrix0.determinant();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("0.000 0.000\n0.000 0.000\n");
      cCSMatrix0.insert((Matrix) denseMatrix0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.power(472);
      matrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 6);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      sparseMatrix0.toCSV(numberFormat0);
      sparseMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 6);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(3822, 1368);
      sparseMatrix0.setRow(3, (-67.8));
      sparseMatrix1.toColumnMajorSparseMatrix();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      sparseMatrix0.determinant();
      NumberFormat.getNumberInstance();
      basic2DMatrix1.rotate();
      sparseMatrix1.sliceTopLeft(1368, 21);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(1270, vectorFunction0);
      Matrix.identity(1270);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CCSMatrix.identity(87);
      Locale locale0 = Locale.JAPANESE;
      NumberFormat.getPercentInstance(locale0);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(87, mockRandom0);
      // Undeclared exception!
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(84);
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      denseVector0.toRowMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("     ");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.transformRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("R_,8!x:9n[kff/1>;#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[1];
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      basic2DMatrix0.maxInRow(94);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SparseMatrix.zero(6, 6);
      Locale.getISOCountries();
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayScript();
      NumberFormat.getCurrencyInstance(locale0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(6, 6, 6);
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      cRSMatrix0.equals((Object) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      Vector vector0 = cCSMatrix0.getRow(257);
      cCSMatrix0.equals((Object) vector0);
      cCSMatrix0.determinant();
      CCSMatrix.identity(4);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      cCSMatrix0.determinant();
      Integer integer0 = new Integer(5);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(4, 4, 746.10908);
      basic2DMatrix0.infinityNorm();
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      cCSMatrix0.insert(matrix0);
      basic2DMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      matrix0.power(4);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4);
      cCSMatrix0.toString();
      cCSMatrix0.determinant();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("0.000 0.000 0.000 0.000\n0.000 0.000 0.000 0.000\n0.000 0.000 0.000 0.000\n0.000 0.000 0.000 0.000\n");
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) denseMatrix0, 8, (-4959));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 8x-4959
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(6, 6, 6);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(6);
      sparseMatrix0.equals((Matrix) cCSMatrix0, (double) 6);
      cCSMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3108, 3108, 3108);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3108, 3108);
      cRSMatrix0.equals((Object) cCSMatrix0);
      String string0 = "3*yB|2A~6";
      String string1 = "u`?aQ|g\"<#'_fQ O%\\L";
      cRSMatrix0.mkString(string0, string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(7, 7);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.blankOfRows(7);
      cCSMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.determinant();
      cRSMatrix0.swapColumns(3456, 2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(6, 6, 6);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(6);
      sparseMatrix0.equals((Matrix) cCSMatrix0, (double) 6);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.zero(6);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      sparseMatrix0.multiply(vector0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(537);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(537, 1101.817968271032);
      sparseMatrix0.equals((Matrix) rowMajorSparseMatrix0, (-1775.031366539785));
      sparseMatrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cCSMatrix0, (-2117), 53, (-2117), 53, 0, 2572);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -2117, 53
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(537);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(537, 1101.817968271032);
      sparseMatrix0.equals((Matrix) rowMajorSparseMatrix0, 829.4);
      sparseMatrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        matrix0.power((-2568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2568.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      cCSMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.swapColumns(4, 4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(2, 2);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(4, 4);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(19);
      String string0 = cCSMatrix0.toString();
      DenseMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(84);
      basic2DMatrix0.minInRow(48);
      basic2DMatrix0.minInRow(48);
      // Undeclared exception!
      basic2DMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }
}
