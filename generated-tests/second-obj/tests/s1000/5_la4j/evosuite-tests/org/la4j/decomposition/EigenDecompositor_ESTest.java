/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:41:25 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(2);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-1408));
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1408);
      doubleArray1[0] = 1.1102230246251565E-14;
      doubleArray1[2] = 1.1102230246251565E-14;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[1] = (double) (-1387);
      doubleArray2[1] = (double) (-1387);
      doubleArray1[2] = (double) (-1387);
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.add(1.0);
      Random.setNextRandom(160);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) (-1361);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-1361);
      doubleArray1[0] = (double) (-1361);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[20];
      doubleArray3[1] = (double) (-1361);
      doubleArray3[3] = (double) (-1361);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.add(0.0);
      Random.setNextRandom(3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) (-1361);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray1[0] = (double) (-1361);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[20];
      doubleArray3[1] = (double) (-1361);
      doubleArray3[3] = (double) (-1361);
      Random.setNextRandom(3);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) 6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) (-1387);
      doubleArray2[1] = 1.1102230246251565E-14;
      doubleArray1[2] = 1.1102230246251565E-14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[21];
      doubleArray1[2] = (double) 6;
      doubleArray3[1] = (double) (-1387);
      doubleArray3[3] = (double) (-1387);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix1.add(0.0);
      // Undeclared exception!
      try { 
        eigenDecompositor0.fail("r2lvP~.qN7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // r2lvP~.qN7
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom((-1441));
      double[][] doubleArray0 = new double[3][3];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      Matrix matrix0 = denseMatrix0.add((double) (-1361));
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      Random.setNextRandom(3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom((-1408));
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) 6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1387);
      doubleArray2[1] = 1.1102230246251565E-14;
      doubleArray1[2] = 1.1102230246251565E-14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[21];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 6;
      doubleArray3[1] = (double) (-1387);
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      
      Matrix matrix0 = denseMatrix0.add(0.75);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      Random.setNextRandom((-2148));
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) (-1361);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1361);
      doubleArray1[0] = (double) (-1361);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[20];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[1] = (double) (-1361);
      doubleArray3[3] = (double) (-1361);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      
      Matrix matrix0 = denseMatrix0.add(0.0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      Random.setNextRandom(3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertNotNull(eigenDecompositor0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom((-1408));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      assertNotNull(columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(6, columnMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1387);
      doubleArray1[1] = 1.1102230246251565E-14;
      doubleArray1[1] = 1.1102230246251565E-14;
      doubleArray1[3] = (double) (-1408);
      doubleArray1[4] = (double) (-1387);
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      Matrix matrix1 = columnMajorSparseMatrix0.add((double) (-1387));
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(6, columnMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, matrix1.rows());
      assertEquals(6, matrix1.columns());
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)matrix1));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      
      boolean boolean0 = eigenDecompositor0.applicableTo(denseMatrix0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)matrix1));
      assertTrue(boolean0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      
      eigenDecompositor0.matrix = (Matrix) columnMajorSparseMatrix0;
      assertEquals(6, eigenDecompositor0.matrix.rows());
      assertEquals(6, eigenDecompositor0.matrix.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(6, columnMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(5640, 2771);
      assertNotNull(sparseMatrix0);
      assertFalse(sparseMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(5640, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(2771, sparseMatrix0.columns());
      assertNotSame(sparseMatrix0, columnMajorSparseMatrix0);
      
      eigenDecompositor0.matrix = (Matrix) sparseMatrix0;
      assertEquals(2771, eigenDecompositor0.matrix.columns());
      assertEquals(5640, eigenDecompositor0.matrix.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(6, columnMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) (-1361);
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1361);
      doubleArray1[0] = (double) (-1361);
      double[] doubleArray3 = new double[20];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[1] = (double) (-1361);
      doubleArray3[3] = (double) (-1361);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      Matrix matrix0 = denseMatrix0.add(0.0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      Random.setNextRandom(3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertNotNull(eigenDecompositor0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom((-1408));
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) 6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1387);
      doubleArray2[1] = 1.1102230246251565E-14;
      doubleArray1[2] = 1.1102230246251565E-14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[21];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 6;
      doubleArray3[1] = (double) (-1387);
      doubleArray3[3] = (double) (-1387);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix1);
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix1.rows());
      assertEquals(3, denseMatrix1.columns());
      assertNotSame(denseMatrix1, denseMatrix0);
      
      Matrix matrix0 = denseMatrix1.add(6.0);
      assertNotNull(matrix0);
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)denseMatrix1));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix1.rows());
      assertEquals(3, denseMatrix1.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertNotSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix0);
      
      // Undeclared exception!
      try { 
        eigenDecompositor0.fail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) 12;
      doubleArray0[1] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix1);
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix1.rows());
      assertEquals(3, denseMatrix1.columns());
      assertNotSame(denseMatrix1, denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.add(12.0);
      assertNotNull(matrix0);
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      assertFalse(matrix0.equals((Object)denseMatrix1));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertNotSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix0);
      
      Matrix matrix1 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix1);
      assertNotNull(matrix1);
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertFalse(denseMatrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix1.rows());
      assertEquals(3, denseMatrix1.columns());
      assertEquals(3, matrix1.rows());
      assertEquals(3, matrix1.columns());
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix1, matrix1);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertNotSame(matrix1, denseMatrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      assertNotNull(ooPlaceKroneckerProduct0);
      
      Matrix matrix2 = ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix0);
      assertNotNull(matrix2);
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix1));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix2.equals((Object)denseMatrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)denseMatrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(9, matrix2.columns());
      assertEquals(9, matrix2.rows());
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix2);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix2, denseMatrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, denseMatrix0);
      assertNotSame(matrix2, matrix1);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix2);
      assertNotNull(eigenDecompositor0);
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)denseMatrix1));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)denseMatrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)denseMatrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(9, matrix2.columns());
      assertEquals(9, matrix2.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)matrix2));
      assertFalse(matrix0.equals((Object)denseMatrix1));
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)matrix2));
      assertFalse(matrix2.equals((Object)denseMatrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)denseMatrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(9, matrix2.columns());
      assertEquals(9, matrix2.rows());
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix2);
      assertNotSame(matrix0, denseMatrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix2, denseMatrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, denseMatrix0);
      assertNotSame(matrix2, matrix1);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(matrix1, denseMatrix0, matrix1, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1361);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) (-1361);
      doubleArray2[2] = (double) 6;
      doubleArray2[3] = (double) (-1361);
      doubleArray0[2] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      
      Random.setNextRandom(3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      assertNotNull(ooPlaceKroneckerProduct0);
      
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(matrix0);
      assertNotNull(eigenDecompositor1);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(eigenDecompositor1.equals((Object)eigenDecompositor0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor1.decompose();
      assertNotNull(matrixArray0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(eigenDecompositor1.equals((Object)eigenDecompositor0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(eigenDecompositor1, eigenDecompositor0);
      
      Random.setNextRandom((-1361));
      Random.setNextRandom(2145891514);
      Random.setNextRandom(3);
      Random.setNextRandom(6);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Random.setNextRandom((-1441));
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (double) (-1361);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1361);
      doubleArray2[3] = (double) (-1441);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 6;
      doubleArray3[1] = (double) (-1361);
      doubleArray3[2] = (double) 6;
      doubleArray3[3] = (double) (-1361);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      Matrix matrix0 = denseMatrix0.add(0.0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      
      Random.setNextRandom(3);
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      assertNotNull(sparseMatrix0);
      assertEquals(6.0, sparseMatrix0.max(), 0.01);
      assertEquals((-1361.0), sparseMatrix0.min(), 0.01);
      assertEquals(5, sparseMatrix0.cardinality());
      assertEquals(0.5555555555555556, sparseMatrix0.density(), 0.01);
      assertEquals(3, sparseMatrix0.columns());
      assertEquals(3, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      assertNotNull(ooPlaceKroneckerProduct0);
      
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(denseMatrix0, denseMatrix0);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertEquals(9, matrix1.rows());
      assertEquals(9, matrix1.columns());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(6.0, sparseMatrix0.max(), 0.01);
      assertEquals((-1361.0), sparseMatrix0.min(), 0.01);
      assertEquals(5, sparseMatrix0.cardinality());
      assertEquals(0.5555555555555556, sparseMatrix0.density(), 0.01);
      assertEquals(3, sparseMatrix0.columns());
      assertEquals(3, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(matrix1);
      assertNotNull(eigenDecompositor1);
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertFalse(eigenDecompositor1.equals((Object)eigenDecompositor0));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertEquals(9, matrix1.rows());
      assertEquals(9, matrix1.columns());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor1.decompose();
      assertNotNull(matrixArray0);
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertFalse(eigenDecompositor1.equals((Object)eigenDecompositor0));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertEquals(9, matrix1.rows());
      assertEquals(9, matrix1.columns());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(eigenDecompositor1, eigenDecompositor0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      
      Random.setNextRandom((-1389));
  }
}
