/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:21:18 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 6;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(6);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      int int1 = 1792;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(1792, 1792, (double) 1792, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 999;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (double) 999;
      doubleArray2[3] = (double) 999;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.multiply(999.0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.blankOfRows(0);
      SparseMatrix.fromCSV("");
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.transpose();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(cCSMatrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.applicableTo(cRSMatrix0);
      singularValueDecompositor0.applicableTo(cCSMatrix1);
      assertEquals(0.7142857142857143, cCSMatrix0.density(), 0.01);
      assertEquals(5, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(70);
      denseMatrix0.toBinary();
      denseMatrix0.maxInRow(1);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix1.update(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix1);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      org.evosuite.runtime.Random.setNextRandom((-100));
      singularValueDecompositor0.applicableTo(denseMatrix1);
      org.evosuite.runtime.Random.setNextRandom((-1113));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3, 3, 2643.1055597535255);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3, 1.0, 2643.1055597535255).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix0.update(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("org.la4j.decomposition.SingularValueDecompositor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 999;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (double) 999;
      doubleArray2[3] = (double) 999;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(999.0);
      columnMajorSparseMatrix0.blankOfRows(0);
      SparseMatrix.fromCSV("");
      Matrix matrix1 = columnMajorSparseMatrix0.transpose();
      columnMajorSparseMatrix0.nonZeroRowMajorIterator();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix1);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(sparseMatrix0);
      singularValueDecompositor0.decompose();
      boolean boolean0 = singularValueDecompositor0.applicableTo(matrix0);
      boolean boolean1 = singularValueDecompositor0.applicableTo(sparseMatrix0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3, 3, 2643.1055597535255);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3, (double)3, (-15.043885968148153)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix0.update(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("org.la4j.decomposition.SingularValueDecompositor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3, 3, 2643.1055597535255);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3, 1.0, (-15.043885968148153)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix0.update(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("org.la4j.decomposition.SingularValueDecompositor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(11, 11, 11);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)11, (double)11, (double)11, 1.0, 1.2110919546168524).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix0.update(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }
}
