/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:20:54 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FOPx");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      Page.fail();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      long long0 = spider0.getPageCount();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XPath can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1801, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 464);
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      spider0.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStartTime();
      Spider spider1 = spider0.setUUID(" ");
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("crawl.js ");
      spider0.scheduler = (Scheduler) fileCacheQueueScheduler0;
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("F(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider.create(simplePageProcessor0);
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      Spider spider1 = spider0.setSpawnUrl(true);
      spider1.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", skip=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(1256);
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      spider1.setScheduler(duplicateRemovedScheduler0);
      String[] stringArray0 = new String[4];
      String string1 = "";
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-3291));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      spider0.getThreadAlive();
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("crawl.js ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ry%4dN ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("Spider {} closed! {} pages downloaded.");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      spider2.getUUID();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "crawl.js ";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("crawl.js ", "crawl.js ");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FOPx");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("FOPx");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      FilePipeline filePipeline0 = new FilePipeline("FOPx");
      Spider spider3 = spider2.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider3.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      spider0.getThreadAlive();
      Request request0 = null;
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = spider0.setExitWhenComplete(true);
      spider2.setUUID("crawl.js ");
      String[] stringArray0 = new String[0];
      Spider spider3 = spider1.addUrl(stringArray0);
      spider1.getScheduler();
      spider3.stop();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider ", "Spider ");
      Request request0 = new Request("crawl.js ");
      Request request1 = request0.setMethod("crawl.js ");
      request0.getExtras();
      Request request2 = request1.setExtras((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download(request2, (Task) spider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      spider0.getStartTime();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("crawl.js ");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      Spider spider4 = spider3.thread(3);
      Spider spider5 = spider4.setUUID("");
      spider4.setEmptySleepTime((-2608));
      spider5.getSpiderListeners();
      spider5.runAsync();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("F><Px");
      Page.fail();
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.sleep((-756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>(true);
      List<Request> list0 = spider0.getAll((Collection<String>) synchronousQueue0);
      Spider spider3 = spider2.startRequest(list0);
      // Undeclared exception!
      try { 
        spider3.thread((-462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("title");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider2.scheduler(fileCacheQueueScheduler0);
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("");
      List<Request> list0 = page1.getTargetRequests();
      Spider spider4 = spider3.startRequest(list0);
      Spider spider5 = spider4.setSpawnUrl(true);
      spider5.scheduler(fileCacheQueueScheduler0);
      spider3.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider4.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getScheduler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      spider0.stop();
      Page page0 = Page.fail();
      page0.setRawText("");
      spider0.extractAndAddRequests(page0, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      spider0.getScheduler();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      spider1.setEmptySleepTime(356);
      Spider.Status.fromValue(356);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FOPx");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("FOPx");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      FilePipeline filePipeline0 = new FilePipeline("FOPx");
      Spider spider3 = spider2.pipeline(filePipeline0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider3.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Page.fail();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XE~3\"Jj@3\"*o{e~");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("XE~3\"Jj@3\"*o{e~");
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      spider3.getStatus();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>(true);
      List<Request> list0 = spider0.getAll((Collection<String>) synchronousQueue0);
      spider2.startRequest(list0);
      Spider spider3 = spider1.startRequest(list0);
      spider2.isSpawnUrl();
      spider3.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
