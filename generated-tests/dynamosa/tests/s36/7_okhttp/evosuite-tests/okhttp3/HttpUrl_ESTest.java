/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:16:35 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.setEncodedQueryParameter("=P2$H bX6OTi\"+MG", "%s: actual 0x\bx != expected 0x\bx");
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, ".inputStream()", 13, 0, ".inputStream()", false, false, false, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%2f%5c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %2f%5c
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("a9.x9zd-_gKTC:J35+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: a9.x9zd-_gKTC:J35+
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = HttpUrl.canonicalize(",d05% ", "fsn4vbb", true, true, true, true);
      assertEquals(",d05%25 ", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("size=%s offset=%s byteCount=%s", false);
      assertEquals("size=%s offset=%s byteCount=%s", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("@", 4, (-1694), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        HttpUrl.getChecked("b0w");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for b0w
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("httzn::");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        HttpUrl.getChecked("deadline reached");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for deadline reached
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("Z\u0004Z#gNW$ -");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = "A.;@peX#Gj~R";
      HttpUrl httpUrl1 = httpUrl0.resolve(string0);
      assertEquals("http://www.somefakebutwellformedurl.org/A.;@peX#Gj~R", httpUrl1.toString());
      assertNotNull(httpUrl1);
      assertEquals("Gj~R", httpUrl1.fragment());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        HttpUrl.getChecked("z9");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for z9
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "aj6/!%yvm");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"':;<=>@[]^`{}|/?#");
      httpUrl1.newBuilder(" \"':;<=>@[]^`{}|/?#");
      assertEquals("http://www.somefakebutwellformedurl.org/%22':;%3C=%3E@[]%5E%60%7B%7D%7C/?#", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(65535);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("_Gw/FP%e=g)R#fh?ez_");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("gZ2~7Y-{=");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      int int0 = httpUrl_Builder0.effectivePort();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setPathSegment(0, "ee|O");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = httpUrl0.username();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", string0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("6 :?g-(.[", 1, 2, false);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http://www.somefakebutwellformedurl.org/,])%7CN?hX2^[@rlDUn{5%7Fn");
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      assertEquals("http://www.somefakebutwellformedurl.org/,])%7CN?hX2^[@rlDUn{5%7Fn", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:o");
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      assertEquals("http://o/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.isHttps();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/http?http#http");
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("https://http/?http#http", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "::rfTRD?wA,5lxoId");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertEquals("http://www.somefakebutwellformedurl.org/::rfTRD?wA,5lxoId", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:%5cb!bc'@_jywq(knqy$#[vc%250=p:d");
      String string0 = httpUrl0.fragment();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://%5cb!bc%27@_jywq(knqy$/#[vc%250=p:d", httpUrl0.toString());
      assertEquals("[vc%0=p:d", string0);
      assertEquals("\\b!bc'", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "lumd/$vuxd0)Ul1");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      httpUrl1.encodedFragment();
      assertEquals("http://www.somefakebutwellformedurl.org/lumd/$vuxd0)Ul1#", httpUrl1.toString());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = HttpUrl.canonicalize(" \"<>^`{}|/?#", 0, 10, ":", false, true, true, true);
      assertEquals(" \"<>^`{}|/", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(httpUrl1);
      assertEquals(80, httpUrl1.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1541));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded((String) null, 48, (-764));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded(",'l#</<5FF", 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("", 1236, 1236);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "Invalid host: ", 0, 0, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.percentDecode((Buffer) null, "", 6, 6, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-3127));
      HttpUrl.percentDecode(buffer0, "zB|]>", (-77), (-2331), false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = HttpUrl.percentDecode(":", 0, 0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", 64, 133, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(11);
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("VJo+");
      HttpUrl.pathSegmentsToString(stringBuilder0, list0);
      assertEquals("/VJo+/null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.pathSegmentsToString(stringBuilder0, linkedList0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("!bf?e]7BkbgK$q=X", "!bf?e]7BkbgK$q=X", 49, "::", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("okhttp3.internal.Util", "okhttp3.internal.Util", 0, "<#})2*2@^/", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "http", "getsockname failed");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.equals((Object) null);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      Object object0 = new Object();
      httpUrl0.equals(object0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('-');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('6');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('Z');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, (String) null, 4922, 4922, (String) null, true, true, true, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.canonicalize((Buffer) null, "+%3c", (-752), (-752), "", true, false, false, true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "o`1#m@(-<D}j8bl)S", 0, 0, "MISSING_SCHEME", true, false, false, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-3127));
      HttpUrl.canonicalize(buffer0, "TXC7p:q`YZ,gsoe`b)", (-685), (-685), "TXC7p:q`YZ,gsoe`b)", false, false, false, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("tnh_XdMT+;_^~", "", false, false, false, false);
      assertEquals("tnh_XdMT+;_^~", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("", ",d05% ", false, false, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("::", (-914), (-914), (String) null, true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("WUWZ'r7i", (-1), (-1), "", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = HttpUrl.canonicalize(":", 0, 0, ":", false, false, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", 3922, 7, "`C.", false, false, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"':;<=>@[]^`{}|/?#");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(1324);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2649, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("AiF/P5m|yS8zLLUI|]r/", (-612), 53);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded((String) null, (-1424), 2830);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "Stream closed", (-1006), 1361, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, (String) null, 90, 248, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, (-3681), (-3681), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      List<String> list0 = httpUrl0.pathSegments();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((Buffer) null, "1", (-2718), 43, "1", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, (String) null, (-1807), 47, "C22y5wh6V~lZ/lSR{)f", true, true, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 60, 60, "-", true, true, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "o8#9)F/a=WvU");
      assertEquals(80, httpUrl0.port());
      
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://www.somefakebutwellformedurl.org/o8#9)F/a=WvU", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.setEncodedQueryParameter("6{QmZA4,@>t%3t", "6{QmZA4,@>t%3t");
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample?6{QmZA4,@%3Et%3t=6{QmZA4,@%3Et%3t", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("0fn1IB#\"qz>wI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 0fn1IB#\"qz>wI
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username(":");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:%5cb!bc'@_jywq(knqy$#[vc%250=p:d");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("httn:");
      assertNull(httpUrl_Builder0);
      assertEquals("https://%5cb!bc%27@_jywq(knqy$/#[vc%250=p:d", httpUrl0.toString());
      assertEquals("\\b!bc'", httpUrl0.username());
      assertEquals("[vc%0=p:d", httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URI uRI0 = MockURI.create("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder();
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.URL("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:%5cb!bc'@_jywq(knqy$#[vc%250=p:d");
      httpUrl0.encodedFragment();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://%5cb!bc%27@_jywq(knqy$/#[vc%250=p:d", httpUrl0.toString());
      assertEquals("\\b!bc'", httpUrl0.username());
      assertEquals("[vc%0=p:d", httpUrl0.fragment());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedQuery();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "B!bc'@_jYWq(KnQy$", "[vc%0=p:");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals(80, httpUrl0.port());
      assertEquals("B!bc'", httpUrl0.username());
      assertEquals("http://B!bc%27@_jywq(knqy$/#[vc%250=p:", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("[vc%0=p:", httpUrl0.fragment());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("https");
      assertEquals(443, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("http");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedPassword();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals(80, httpUrl0.port());
      assertEquals("", string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "B!bc'@_jYWq(KnQy$", "[vc%0=p:");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals("http://B!bc%27@_jywq(knqy$/#[vc%250=p:", httpUrl0.toString());
      assertEquals("B!bc'", httpUrl0.username());
      assertEquals("[vc%0=p:", httpUrl0.fragment());
      assertEquals("B!bc%27", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.toString();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("+h&K!6X>'j'>6t");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("\n");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("c-?I%G79ar++)_SYr_D");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter(")\u2026]", ")\u2026]");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("rb7[8T'*x|\"Ek");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("\r", "https");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("c-?I%G79ar++)_SYr_D", "c-?I%G79ar++)_SYr_D");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("52LC4vedF*ee", 3, 43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("a9nx9zd-_gKTC:J35+");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("%", false);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("6=j_-BiC6+d#(,Qp", true);
      assertEquals("6=j_-BiC6 d#(,Qp", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::F'_M}e]AwrZw1:<58");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::F'_M}e]AwrZw1:<58
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("e:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: e:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[vc%0=p:d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [vc%0=p:d
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[v#%0|p:d]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [v#%0|p:d]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("htt7-:");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("wB1+GAJqwM");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("xRV4Z!");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("cjA|A|lZ %e(");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        HttpUrl.getChecked("~]");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ~]
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("http:/");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("%2e%2e");
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("_Gw/FP%e=g)R#fh?ez_");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("%2e");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://www.somefakebutwellformedurl.org/", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse(httpUrl0, "#J)");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:///tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("https:/www.somefakebutwellformedurl.org/fooexample");
      assertEquals(80, httpUrl0.port());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl1.toString());
      assertEquals(443, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("!");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("xRV4Z!");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment(")`aMy8BTEwP");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("xRV4Z!");
      httpUrl_Builder0.addQueryParameter("xRV4Z!", "xRV4Z!");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("xRV4Z!", "xRV4Z!");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("ffff0000");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("ffff0000", "ffff0000");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("", "i=yYqWon5vI");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("ffff0000", "ffff0000");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter(" K>~7Y-B{=", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("jxRE", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("%2e%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "?");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(8, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(8, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1154825051), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(64, "oo%v ;<tGQEvEpb6&");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("xG=P>>");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("http:/");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("%2e%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("fU:F");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("fU:F");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.removePathSegment(1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 16711680
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -114
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("Xuwv~");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("Xuwv~");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("htVp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: htVp
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("http");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve(" > ");
      assertNotNull(httpUrl1);
      
      boolean boolean0 = httpUrl1.equals(httpUrl0);
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/%3E", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(boolean0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:::");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http:::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        HttpUrl.getChecked("fU:F");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for fU:F
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("httn::");
      assertNull(httpUrl1);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-2493));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(2520);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 198, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("[");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("http://http/?http#http", httpUrl0.toString());
      assertTrue(set0.contains("http"));
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.queryParameter("http");
      assertEquals("http://http/?http#http", httpUrl0.toString());
      assertNull(string0);
      assertEquals(1, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("xhz?i*8AkS,R_");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("fooExample");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://http/?http#http", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"':;<=>@[]^`{}|/?#");
      int int0 = httpUrl1.querySize();
      assertEquals(80, httpUrl1.port());
      assertEquals("http://www.somefakebutwellformedurl.org/%22':;%3C=%3E@[]%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.querySize();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(0, int0);
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "zEISXL(d,2^1", (String) null, "http", "encodedName == null");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://zeisxl(d,2^1/?http#encodedName%20==%20null", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("encodedName == null", httpUrl0.fragment());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("LtI[&0p&u=ghf%nDjBP");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ":");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("xJ.24&>B^47uyj", ":");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("8l_Oy@>VaS?{i95|S.D", "xJ.24&>B^47uyj");
      List<String> list0 = httpUrl_Builder2.encodedQueryNamesAndValues;
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      assertEquals(":xJ.24%26%3EB%7F^47uyj=:&8l_Oy@%3EVaS?{i95|S.D=xJ.24%26%3EB%7F^47uyj", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals("http://http/?http#http", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("http", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.host();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "B!bc'@_jYWq(KnQy$", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("B!bc'", string0);
      assertEquals("http://B!bc%27@_jywq(knqy$/#http", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, int0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", (String) null, "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      assertEquals("http", httpUrl0.fragment());
      assertEquals("http://http/?http#http", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.scheme();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("/", string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:%5cb!bc'@_jywq(knqy$#[vc%250=p:d");
      httpUrl0.isHttps();
      assertEquals(443, httpUrl0.port());
      assertEquals("\\b!bc'", httpUrl0.username());
      assertEquals("https://%5cb!bc%27@_jywq(knqy$/#[vc%250=p:d", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.fragment();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNull(string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:%5cbbc'@_jywq(knqy$#[vc%250=p:d");
      String string0 = httpUrl0.redact();
      assertEquals("\\bbc'", httpUrl0.username());
      assertEquals("https://_jywq(knqy$/...", string0);
      assertEquals("https://%5cbbc%27@_jywq(knqy$/#[vc%250=p:d", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "B!bc'@_jYWq(KnQy$", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      URI uRI1 = httpUrl0.uri();
      assertEquals("B!bc'", httpUrl0.username());
      assertEquals("http://B!bc%27@_jywq(knqy$/#http", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("htt8n:", "cjA|A|lZ %e(");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }
}
