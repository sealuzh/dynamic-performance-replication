/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:50:48 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      int int0 = (-2751);
      Integer integer0 = new Integer((-2751));
      Object object0 = new Object();
      hashMap0.put(integer0, object0);
      Integer integer1 = new Integer((-2751));
      Integer integer2 = new Integer((-2751));
      hashMap0.put(integer1, integer2);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) "", (Map<Integer, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null);
      Integer integer0 = new Integer((-1237));
      doubleKeyMap0.put((Object) integer0, (Object) null, "");
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>();
      Integer integer1 = new Integer((-1522));
      String string0 = doubleKeyMap1.get(integer1, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>(0);
      Integer integer2 = new Integer(1);
      BiFunction<Object, Map<Object, String>, Map<Object, String>> biFunction0 = (BiFunction<Object, Map<Object, String>, Map<Object, String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(java.util.Map.class));
      hashMap0.compute(integer2, biFunction0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Integer integer3 = new Integer(0);
      String string0 = doubleKeyMap1.get(integer3, (Object) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.remove("", integer0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap1.put("", "", "");
      doubleKeyMap1.get("", "");
      doubleKeyMap1.remove("");
      HashMap<Object, Map<Integer, Object>> hashMap1 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(hashMap1, class0);
      HashMap<Object, Map<Map<Object, String>, Object>> hashMap2 = new HashMap<Object, Map<Map<Object, String>, Object>>();
      DoubleKeyMap<Object, Map<Object, String>, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Map<Object, String>, Object>(hashMap2);
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap3.remove((Object) hashMap3, (Map<Object, String>) hashMap3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      String string0 = "";
      doubleKeyMap0.newMap();
      Integer integer0 = new Integer((-2723));
      doubleKeyMap0.put("", integer0, integer0);
      doubleKeyMap0.remove("", integer0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<String, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer((-2723));
      doubleKeyMap0.put("", integer0, integer0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.remove("", integer1);
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      doubleKeyMap1.newMap();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Map<Object, String>, Map<Map<Object, String>, Object>> hashMap2 = new HashMap<Map<Object, String>, Map<Map<Object, String>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, Map<Object, String>, Object> doubleKeyMap2 = new DoubleKeyMap<Map<Object, String>, Map<Object, String>, Object>(hashMap2, class0);
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      DoubleKeyMap<Integer, Integer, Map<Object, String>> doubleKeyMap3 = new DoubleKeyMap<Integer, Integer, Map<Object, String>>();
      hashMap1.put("", "");
      Map<Map<Object, String>, Object> map0 = doubleKeyMap3.newMap();
      hashMap2.put(hashMap1, map0);
      Object object0 = new Object();
      doubleKeyMap2.put((Map<Object, String>) hashMap1, (Map<Object, String>) hashMap3, object0);
      DoubleKeyMap<Object, Map<Object, String>, Map<Object, String>> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<Object, Map<Object, String>, Map<Object, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
