/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:55:03 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.SegmentedByteString;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        hashingSource0.read(buffer0, (-860L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -860
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8();
      assertNotNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("", string0);
      
      int int0 = 110;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int1 = (-155);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      Buffer buffer1 = buffer0.writeString("newSize < 0: ", charset0);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(13L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer1);
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer1, byteString0);
      assertNotNull(hashingSink1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(13L, buffer1.size());
      assertEquals(64, byteString0.size());
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertEquals(64, byteString1.size());
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString1, byteString0);
      
      long long0 = buffer0.indexOf(byteString1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertEquals(64, byteString1.size());
      assertEquals((-1L), long0);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString1, byteString0);
      
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1095216660480L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1095216660480 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        pipe_PipeSink0.write(buffer0, 10000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      Buffer buffer0 = realBufferedSource0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeShort(248);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      Buffer buffer2 = buffer1.writeLong(280375465082880L);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      String string0 = buffer0.readString(charset0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("\u0000\uFFFD\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000", string0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      
      int int0 = buffer_UnsafeCursor0.seek((-1L));
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      
      OutputStream outputStream0 = realBufferedSource0.buffer.outputStream();
      assertNotNull(outputStream0);
      
      Buffer buffer3 = (Buffer)buffer1.emit();
      assertNotNull(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      long long0 = buffer0.indexOf((byte) (-39), 8192L, 1095216660480L);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      try { 
        buffer0.readUtf8LineStrict(4278190080L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = buffer0.exhausted();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(boolean0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeShort((-932));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = (Buffer)buffer0.emit();
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater(true);
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      
      try { 
        buffer0.write((Source) inflaterSource0, 2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)50, (-569L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-569 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[3];
      Buffer buffer1 = buffer0.writeUtf8("9dQI7~GBS3");
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer0.readInt();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(962875721, int0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.writeString("5E1<r6bD", (-459), 962875721, (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -459
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(3260L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.clone();
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      assertNotNull(buffer2);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      
      Buffer buffer4 = (Buffer)buffer3.emit();
      assertNotNull(buffer4);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(1L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      
      long long0 = buffer2.indexOf((byte)0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Buffer buffer5 = buffer1.writeTo((OutputStream) byteArrayOutputStream0);
      assertNotNull(buffer5);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertNotNull(bufferedSink0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-6)}, byteArray0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      long long0 = realBufferedSink0.buffer.indexOf((byte) (-6), 0L);
      assertEquals(0L, long0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertNotNull(outputStream0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      int int0 = realBufferedSink0.buffer.readInt();
      assertEquals((-84215046), int0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      long long1 = buffer0.size();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(3L, long1);
      assertFalse(long1 == long0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      ByteString byteString0 = buffer0.readByteString();
      assertNotNull(byteString0);
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      pipe0.sinkClosed = false;
      byteArray0[1] = (byte)22;
      Buffer buffer1 = buffer0.write(byteArray0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)22, (byte)22, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.snapshot(57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=0 byteCount=57343
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = null;
      Buffer buffer1 = buffer0.writeInt(9);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      
      String string0 = buffer1.readUtf8((long) 0);
      assertNotNull(string0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals("", string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = buffer1.readByteArray();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)9}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(10008L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      pipe_PipeSink0.close();
      boolean boolean0 = realBufferedSink0.closed;
      assertFalse(boolean0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(4L);
      assertNotNull(buffer1);
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer1, buffer0);
      
      try { 
        buffer1.readUtf8LineStrict(443L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=34\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertNotNull(bufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      buffer1.require(0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=3 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      Buffer buffer1 = realBufferedSink0.buffer.readFrom((InputStream) pushbackInputStream0, 0L);
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeShortLe(2662);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.writeDecimalLong((-1676L));
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream0, 32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(4L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeInt(3);
      assertNotNull(buffer1);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      
      String string0 = buffer1.readUtf8((long) 0);
      assertNotNull(string0);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("", string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)62;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(3, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertNotNull(realBufferedSink0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      byteString0.write(realBufferedSink0.buffer);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString1 = realBufferedSink0.buffer.hmacSha256(byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer1.equals((Object)buffer0));
      
      String string0 = realBufferedSource0.buffer.toString();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals("[size=0]", string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        Charset.forName("[size=0]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [size=0]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Pipe pipe0 = new Pipe(631L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, (-101L), 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      int int1 = buffer_UnsafeCursor0.next();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
      
      try { 
        realBufferedSource0.readUtf8(3125L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotNull(list0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      try { 
        buffer0.readFully(buffer1, 714L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000L);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      short short0 = buffer1.readShort();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((short)12592, short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.buffer();
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(16L);
      assertNotNull(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(10L, buffer3.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLong((-2714L));
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-2714L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -2714
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byteString0.write(realBufferedSink0.buffer);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFrom((InputStream) pushbackInputStream0, (long) (byte) (-70));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -70
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = pipe0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer1.rangeEquals(284L, byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertNotNull(bufferedSink0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      long long0 = buffer1.indexOf((byte)2, 9223372036854775807L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertNotNull(outputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6%]`Z/5j6(");
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeUtf8("");
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      buffer_UnsafeCursor0.close();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer2);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Buffer buffer3 = buffer1.readFrom((InputStream) sequenceInputStream0);
      assertNotNull(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      long long0 = 2L;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeByte(10);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeIntLe(10);
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Buffer buffer3 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      assertNotNull(buffer3);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals("\n\n\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.getByte(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=10 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)62;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(3, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertNotNull(realBufferedSink0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      byteString0.write(realBufferedSink0.buffer);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString1 = realBufferedSink0.buffer.hmacSha256(byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)114, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      try { 
        buffer2.write((Source) buffer1, (long) (byte)62);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      buffer0.require((-261L));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57343);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=3 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      buffer0.require((-261L));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(3070);
      assertNotNull(buffer1);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      String string0 = buffer1.toString();
      assertNotNull(string0);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("[text=\u0BFE]", string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = buffer0.sha512();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      
      try { 
        buffer0.require(4278190080L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      buffer0.require((-261L));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57367);
      assertNotNull(buffer1);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-261L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=-261
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      String string0 = buffer0.toString();
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("[size=0]", string0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertNotNull(outputStream0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      
      String string1 = buffer0.readUtf8Line();
      assertNotNull(string1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      assertNotNull(buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = 14L;
      try { 
        buffer0.readUtf8Line((long) 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = 10000L;
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      pipe_PipeSink0.flush();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-346L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString0 = buffer0.md5();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Pipe pipe0 = new Pipe(6L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("x_4)7*^7iP");
      assertNotNull(bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      ByteString byteString0 = realBufferedSink0.buffer.md5();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      
      String string0 = byteString0.hex();
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals("7fcaee834e8e22ae951049b36acfd100", string0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.getByte(280375465082880L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=10 offset=280375465082880 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1012L);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(1012L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
      assertFalse(buffer0.exhausted());
      assertEquals(1012L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1012L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1012, byteString0.size());
      
      long long1 = buffer_UnsafeCursor0.buffer.indexOf(byteString0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1012, byteString0.size());
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      buffer0.require((-3440L));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1908874353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 71c71c71
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(109L);
      assertNotNull(pipe0);
      
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = realBufferedSource0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[0];
      int int0 = buffer0.read(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      
      long long0 = realBufferedSource0.buffer.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer0.readByteString(11L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=11
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8("");
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      assertNotNull(buffer2);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, int0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      buffer_UnsafeCursor1.end = (int) (byte)111;
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer3 = buffer_UnsafeCursor1.buffer.writeDecimalLong(111);
      assertNotNull(buffer3);
      assertEquals(111, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(111, buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      
      ByteString[] byteStringArray0 = new ByteString[5];
      int int1 = buffer0.readIntLe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(825307647, int1);
      assertFalse(int1 == int0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(5, options0.size());
      
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Buffer buffer4 = buffer1.writeHexadecimalUnsignedLong(111);
      assertNotNull(buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(2L, buffer4.size());
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      
      long long0 = buffer_UnsafeCursor0.buffer.size();
      assertEquals(111, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(2L, long0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      
      Buffer buffer5 = buffer0.writeIntLe(111);
      assertNotNull(buffer5);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(6L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer4);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082879L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byteString == null");
      assertFalse(boolean0);
      
      boolean boolean1 = pipe0.sinkClosed;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeUtf8("u");
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      boolean boolean2 = pipe0.sourceClosed;
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(117, int0);
      assertSame(buffer0, buffer1);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      Buffer buffer2 = pipe0.buffer;
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = buffer0.sha512();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(64, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = pipe0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertSame(buffer1, buffer0);
      
      long long0 = buffer1.readAll(pipe_PipeSink0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, long0);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000L);
      assertNotNull(buffer1);
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotNull(list0);
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byteArray0[1] = (byte) (-111);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-34);
      Buffer buffer2 = buffer1.write(byteArray0);
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-111), (byte)41, (byte) (-34), (byte)0}, byteArray0);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(15L, buffer2.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      ByteString byteString0 = buffer2.sha1();
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-111), (byte)41, (byte) (-34), (byte)0}, byteArray0);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(15L, buffer2.size());
      assertEquals(20, byteString0.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)126);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      
      boolean boolean1 = realBufferedSource0.buffer.rangeEquals((long) (byte) (-34), byteString0);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-111), (byte)41, (byte) (-34), (byte)0}, byteArray0);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(15L, buffer2.size());
      assertEquals(20, byteString0.size());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertNotNull(buffer3);
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      
      ByteString byteString1 = buffer3.hmacSha1(byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-111), (byte)41, (byte) (-34), (byte)0}, byteArray0);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(15L, buffer2.size());
      assertEquals(20, byteString0.size());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(byteString1, byteString0);
      
      // Undeclared exception!
      try { 
        buffer3.indexOf(byteString1, (long) (byte) (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000L);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("iUH.2Wq_mFsa");
      assertNotNull(mockFileOutputStream0);
      
      Buffer buffer2 = buffer0.writeTo((OutputStream) mockFileOutputStream0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(203L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)112, 1295L, 100L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=1295 toIndex=100
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = 6L;
      Pipe pipe0 = new Pipe(6L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.writeString("\"Q", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 10000L;
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, (-316), 101, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(65536L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(65536L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(65536L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(65536L, buffer0.completeSegmentByteCount());
      assertEquals(65538L, buffer0.size());
      assertEquals(65536L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(65538L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(65537L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(65535L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(65535L, buffer1.completeSegmentByteCount());
      assertEquals(65537L, buffer1.size());
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = buffer0.toString();
      assertNotNull(string0);
      assertEquals(65537L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(65535L, buffer0.completeSegmentByteCount());
      assertEquals("[size=65537 hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\u2026]", string0);
      assertSame(buffer0, buffer1);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Pipe pipe0 = new Pipe(286720L);
      assertNotNull(pipe0);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      assertNotNull(realBufferedSource0);
      
      Buffer buffer0 = realBufferedSource0.buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)68;
      Buffer buffer2 = realBufferedSource0.buffer.write(byteArray0);
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte)30, (byte)7, (byte) (-25), (byte) (-66), (byte)68}, byteArray0);
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertNotNull(list0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeDecimalLong((-1));
      assertNotNull(buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(45, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(1L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Pipe pipe0 = new Pipe(3260L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.clone();
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      assertNotNull(buffer2);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer3);
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(45, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, long0);
      assertSame(buffer0, buffer1);
      
      ByteString byteString0 = buffer1.sha512();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0, (-1358L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(280375465082875L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = buffer_UnsafeCursor0.buffer.read(buffer0, (long) 1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long0);
      
      int int1 = buffer_UnsafeCursor0.next();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      byteString0.utf8 = "f! /#7";
      assertEquals(1, byteString0.size());
      
      Buffer buffer1 = buffer0.writeUtf8("");
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      int int0 = buffer_UnsafeCursor1.seek((-1));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(1627L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1261);
      assertNotNull(buffer1);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.getByte(1261);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=1261 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      buffer_UnsafeCursor0.close();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(45, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      long long0 = buffer0.readDecimalLong();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, long0);
      assertSame(buffer0, buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000L);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotNull(list0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte byte0 = (byte) (-111);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      
      long long0 = buffer1.readDecimalLong();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(1000000000L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=999999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      
      Buffer buffer1 = buffer0.write(byteString0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(2, options0.size());
      
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, options0.size());
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      pipe0.sourceClosed = false;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      assertNotNull(buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      InputStream inputStream0 = buffer1.inputStream();
      assertNotNull(inputStream0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer0.readLongLe();
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7378697629483820646L, long0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(1427L);
      assertNotNull(bufferedSink0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotNull(buffer2);
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertNotNull(buffer3);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      
      ByteString byteString0 = buffer3.snapshot();
      assertNotNull(byteString0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      assertEquals(8, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.write(byteString0);
      assertNotNull(buffer4);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(10L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(8L, buffer3.size());
      assertEquals(8, byteString0.size());
      assertFalse(buffer4.exhausted());
      assertEquals(10L, buffer4.size());
      assertEquals(10L, buffer4.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      
      long long0 = buffer2.readLong();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(10L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(1427L, long0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-MJbPlr'GoWc_Q/}}9");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = null;
      Buffer buffer1 = buffer0.writeLongLe(40L);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, 40L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(9987L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0, 2L);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      short short0 = buffer1.readShort();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((short)0, short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeDecimalLong(3134L);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J:HcY`RF>'>m!D");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, (-8L), 100000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = 280375465082908L;
      Pipe pipe0 = new Pipe(280375465082908L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(3143L);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(3143L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      assertNull(byteArray0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.clone();
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3143L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3143L, buffer1.completeSegmentByteCount());
      assertEquals(3143L, buffer1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      long long2 = 108L;
      Segment segment0 = new Segment((byte[]) null, (-1), (-1), true, true);
      assertNotNull(segment0);
      
      buffer1.head = segment0;
      assertFalse(buffer0.exhausted());
      assertEquals(3143L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3143L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((Source) buffer1, 108L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = buffer0.sha1();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      
      byte byte0 = (byte) (-23);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("iY", (int) (byte) (-23), 2358);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -23
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeInt(9);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      
      String string0 = buffer1.readUtf8((long) 0);
      assertNotNull(string0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals("", string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte byte0 = buffer0.readByte();
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((byte)0, byte0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null, (-2593L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = null;
      Buffer buffer1 = buffer0.writeInt((-8));
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(65533, int0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8((long) 65533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=65533
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(10000L);
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = ((RealBufferedSink) bufferedSink0).buffer.readInt();
      assertEquals(825241648, int0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      long long0 = realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      assertEquals(0L, long0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.copyTo(realBufferedSink0.buffer, 255L, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=255 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString1 = realBufferedSink0.buffer.snapshot();
      assertNotNull(byteString1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(byteString1, byteString0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer2 = buffer0.clone();
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      ByteString byteString2 = buffer_UnsafeCursor0.buffer.sha256();
      assertNotNull(byteString2);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(32, byteString2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, long1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(long1 == long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLongLe(255L);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeDecimalLong((-229L));
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000L);
      assertNotNull(pipe0);
      
      Sink sink0 = pipe0.sink();
      assertNotNull(sink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      assertNotNull(realBufferedSink0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = realBufferedSink0.buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      buffer0.flush();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString0 = buffer0.snapshot();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(10000L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.exhausted());
      assertEquals(10000L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer2 = buffer0.clone();
      assertNotNull(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(10000L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(10000L, buffer2.completeSegmentByteCount());
      assertEquals(10000L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      boolean boolean1 = buffer_UnsafeCursor0.buffer.rangeEquals(16711680L, byteString0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.exhausted());
      assertEquals(10000L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertFalse(boolean1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer3 = buffer0.writeByte((-1));
      assertNotNull(buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(10001L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(10001L, buffer3.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      
      Buffer buffer4 = realBufferedSink0.buffer;
      assertNotNull(buffer4);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      
      Buffer buffer5 = buffer4.clone();
      assertNotNull(buffer5);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertFalse(buffer0.exhausted());
      assertEquals(10001L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertTrue(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      assertNotNull(byteString1);
      
      try { 
        buffer_UnsafeCursor0.buffer.write((Source) buffer4, 2894L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082876L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(3140L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(3140L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
      
      Buffer buffer1 = pipe0.buffer;
      assertNotNull(buffer1);
      assertEquals(3140L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer1, buffer0);
      
      long long1 = buffer0.indexOf((byte) (-51));
      assertEquals(3140L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.clone();
      assertNotNull(buffer2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(3140L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3140L, buffer2.completeSegmentByteCount());
      assertEquals(3140L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      try { 
        buffer2.write((Source) buffer0, 280375383261180L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-921));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1095216660472L);
      assertNotNull(buffer1);
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer2 = buffer0.writeDecimalLong((-1));
      assertNotNull(buffer2);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long0 = buffer_UnsafeCursor0.buffer.readDecimalLong();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1095216660472L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      
      Buffer buffer3 = buffer2.writeByte((-1841));
      assertNotNull(buffer3);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(9987L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource0);
      
      Buffer buffer0 = realBufferedSource0.buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000000L);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(14L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = realBufferedSource0.buffer.readUtf8CodePoint();
      assertEquals(49, int0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      long long0 = realBufferedSource0.buffer.readDecimalLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeDecimalLong(71776119061217280L);
      assertNotNull(realBufferedSink2);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      byteString0.write(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      Buffer buffer1 = pipe0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = realBufferedSink2.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.exhausted());
      assertEquals(17L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      buffer0.hashCode();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      
      short short0 = buffer2.readShort();
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((short)14129, short0);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      ByteString byteString1 = realBufferedSink1.buffer.sha1();
      assertNotNull(byteString1);
      assertEquals(20, byteString1.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      assertNotNull(bufferedSink0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString1 = realBufferedSink0.buffer.snapshot();
      assertNotNull(byteString1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString1, byteString0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer2 = buffer0.clone();
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(1L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      ByteString byteString2 = buffer_UnsafeCursor0.buffer.sha256();
      assertNotNull(byteString2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString2.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(2905L);
      assertNotNull(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      String string0 = realBufferedSink0.toString();
      assertNotNull(string0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("buffer([size=0])", string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotNull(buffer2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer3 = buffer2.writeIntLe((-1));
      assertNotNull(buffer3);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, long1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(long1 == long0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      
      int int1 = buffer3.readUtf8CodePoint();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(65533, int1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(int1 == int0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)13;
      Pipe pipe0 = new Pipe((byte)13);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)0);
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      String string0 = "&,3*Q'3C8";
      int int0 = 703;
      // Undeclared exception!
      try { 
        Charset.forName("bytes is empty");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // bytes is empty
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Buffer buffer2 = buffer1.copyTo((OutputStream) pipedOutputStream0);
      assertNotNull(buffer2);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = (byte) (-6);
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      
      String string0 = buffer0.readString(charset0);
      assertNotNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(28037546L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, (-689L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong((byte)62);
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      byte[] byteArray0 = buffer1.readByteArray();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)50}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteString0.size());
      
      Buffer buffer1 = buffer0.writeUtf8("");
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteString1.size());
      assertTrue(byteString1.equals((Object)byteString0));
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Buffer buffer2 = buffer1.writeDecimalLong(10000000000L);
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(11L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      String string0 = byteString0.utf8;
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString2 = buffer1.hmacSha1(byteString0);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertEquals(20, byteString2.size());
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      long long0 = buffer0.indexOf(byteString1, (long) 57);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4, byteString1.size());
      assertEquals((-1L), long0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(11L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(11L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertNotNull(byteString3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteString3.size());
      assertTrue(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString1));
      
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000L);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)95;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-111), (byte)41, (byte) (-34), (byte)95}, byteArray0);
      assertEquals(5, byteString0.size());
      
      long long0 = buffer0.indexOfElement(byteString0, 1000000000L);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-111), (byte)41, (byte) (-34), (byte)95}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      
      int int0 = (-921);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-921));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.clone();
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(71776119061217280L);
      assertNotNull(bufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink1);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      Buffer buffer2 = realBufferedSink2.buffer;
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      ByteString byteString0 = realBufferedSink2.buffer.snapshot();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      
      long long0 = realBufferedSink2.writeAll(buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, long0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      Buffer buffer3 = realBufferedSink2.buffer.clone();
      assertNotNull(buffer3);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      
      String string0 = buffer3.readUtf8Line();
      assertNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      
      Buffer buffer4 = buffer0.writeHexadecimalUnsignedLong(6L);
      assertNotNull(buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer4.exhausted());
      assertEquals(1L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 1, 117);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertNotNull(bufferedSink0);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      long long0 = realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      assertEquals(14L, long0);
      assertSame(realBufferedSink0, bufferedSink0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = realBufferedSink0.buffer.sha256();
      assertNotNull(byteString0);
      assertEquals(32, byteString0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      byteString0.utf8 = "f! /#7";
      assertEquals(1, byteString0.size());
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      Buffer buffer1 = buffer0.writeUtf8("");
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotNull(list0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOf((byte)111);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1L), long0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("f! /#7");
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString2.size());
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(0, options0.size());
      
      int int0 = realBufferedSink0.buffer.selectPrefix(options0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, options0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString1);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      
      ByteString byteString3 = hashingSink0.hash();
      assertNotNull(byteString3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(32, byteString3.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      
      List<Integer> list1 = realBufferedSink0.buffer.segmentSizes();
      assertNotNull(list1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(list1, list0);
      
      long long1 = buffer_UnsafeCursor1.buffer.indexOf(byteString0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals((-1L), long1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(long1 == long0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.snapshot(126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=126
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(3133L);
      assertNotNull(pipe0);
      
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      Buffer buffer0 = realBufferedSource0.buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)88;
      Buffer buffer1 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-1031L));
      assertNotNull(buffer1);
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer1, buffer0);
      
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-50);
      buffer0.readFully(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(3132L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertEquals(0L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer2.equals((Object)buffer0));
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertNotNull(buffer3);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      
      ByteString byteString0 = buffer3.snapshot();
      assertNotNull(byteString0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      
      Segment segment1 = new Segment();
      assertNotNull(segment1);
      assertFalse(segment1.equals((Object)segment0));
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      int int2 = buffer_UnsafeCursor0.next();
      assertEquals(3132, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertEquals(3132, int2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(1);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(3132L, long1);
      assertFalse(long1 == long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      
      Buffer buffer4 = buffer2.clone();
      assertNotNull(buffer4);
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer3));
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      
      ByteString byteString1 = buffer4.sha256();
      assertNotNull(byteString1);
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(32, byteString1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer4));
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(byteString1, byteString0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-2925L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -2925
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteString0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-298L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("_[Dp(TV't$");
      assertNotNull(bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      boolean boolean0 = realBufferedSink0.closed;
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.writableSegment(1789569706);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)62;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-117), (byte)62}, byteArray0);
      assertEquals(3, byteString0.size());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      BufferedSink bufferedSink0 = realBufferedSink1.writeDecimalLong(10000000L);
      assertNotNull(bufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink1);
      assertNotSame(bufferedSink0, realBufferedSink0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotNull(buffer2);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      ByteString byteString1 = realBufferedSink2.buffer.readByteString();
      assertNotNull(byteString1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink0.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = realBufferedSink1.buffer.snapshot();
      assertNotNull(byteString2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(8, byteString2.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = realBufferedSink1.buffer.readInt();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(825241648, int0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink0);
      
      long long0 = realBufferedSink1.buffer.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)30;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)30, (byte) (-90), (byte)30, (byte)0, (byte)30, (byte)62, (byte)30}, byteArray0);
      assertEquals(9, byteString0.size());
      
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)62);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)30, (byte) (-90), (byte)30, (byte)0, (byte)30, (byte)62, (byte)30}, byteArray0);
      assertEquals(9, byteString0.size());
      assertEquals(0, int0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink1, byteString0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)30, (byte) (-90), (byte)30, (byte)0, (byte)30, (byte)62, (byte)30}, byteArray0);
      assertEquals(9, byteString0.size());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      
      String string0 = byteString0.toString();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)30, (byte) (-90), (byte)30, (byte)0, (byte)30, (byte)62, (byte)30}, byteArray0);
      assertEquals(9, byteString0.size());
      assertEquals("[hex=1e1e1ea61e001e3e1e]", string0);
      
      long long0 = buffer0.indexOf(byteString0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)30, (byte) (-90), (byte)30, (byte)0, (byte)30, (byte)62, (byte)30}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9, byteString0.size());
      assertEquals((-1L), long0);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer2 = realBufferedSink1.buffer();
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      Buffer buffer3 = buffer2.writeDecimalLong(1000000L);
      assertNotNull(buffer3);
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(7L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = buffer0.equals(pipe0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteString0.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(71776119061217280L);
      assertNotNull(bufferedSink0);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink1);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      assertNotNull(realBufferedSink2);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString1 = realBufferedSink1.buffer.snapshot();
      assertNotNull(byteString1);
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString1.size());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(byteString1, byteString0);
      
      long long0 = realBufferedSink1.writeAll(buffer1);
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, long0);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(buffer1, buffer0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 71776119061217280
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082876L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = pipe0.sinkClosed;
      assertFalse(boolean0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(3132L);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3132L, buffer0.size());
      assertEquals(0L, long0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.clone();
      assertNotNull(buffer1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3132L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3132L, buffer1.completeSegmentByteCount());
      assertEquals(3132L, buffer1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4B.&/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      segment0.owner = false;
      pipe0.sourceClosed = false;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.clone();
      assertNotNull(buffer2);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3132L, buffer0.size());
      assertEquals(3132L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(3132L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        buffer0.readUtf8LineStrict(2707L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2707 content=0000000000000000000000000000000000000000000000000000000000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      long long0 = buffer0.indexOf((byte)2, 9223372036854775807L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65536);
      assertNotNull(buffer1);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      boolean boolean0 = buffer1.request(1627L);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(boolean0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)119;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)119}, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString1 = new ByteString(byteArray1);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)119}, byteArray1);
      assertEquals(2, byteString1.size());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteString1.equals((Object)byteString0));
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString2 = hashingSink0.hash();
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(32, byteString2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      long long0 = realBufferedSink0.buffer.indexOf(byteString0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertEquals((-1L), long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      Buffer buffer3 = buffer2.writeDecimalLong(100000L);
      assertNotNull(buffer3);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      assertFalse(buffer3.exhausted());
      assertEquals(6L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer2.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".inputStream()");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong((-1L));
      assertNotNull(bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      InputStream inputStream0 = buffer_UnsafeCursor0.buffer.inputStream();
      assertNotNull(inputStream0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      
      short short0 = buffer1.readShortLe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((short) (-1), short0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = realBufferedSink0.buffer.readFrom(inputStream0);
      assertNotNull(buffer2);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      ByteString byteString0 = buffer2.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(6, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotNull(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = realBufferedSink0.toString();
      assertNotNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("buffer([size=0])", string0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(byteArray0);
      assertNotNull(realBufferedSink1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("['6$d]");
      assertNotNull(mockPrintStream0);
      
      buffer0.skip((byte) (-124));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_T<aWqPt>]WK:m)N4");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = realBufferedSink1.closed;
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      ByteString byteString0 = realBufferedSink1.buffer.sha256();
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      
      int int0 = buffer2.readInt();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0, int0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      ByteString byteString1 = realBufferedSink0.buffer.hmacSha512(byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals(64, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)62;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)10, (byte)104, (byte) (-75), (byte)118, (byte)62}, byteArray0);
      assertEquals(5, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)10, (byte)104, (byte) (-75), (byte)118, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(5, byteString0.size());
      
      hashingSource0.close();
      assertArrayEquals(new byte[] {(byte)10, (byte)104, (byte) (-75), (byte)118, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(5, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)10, (byte)104, (byte) (-75), (byte)118, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(5, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = buffer0.hmacSha1(byteString1);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)10, (byte)104, (byte) (-75), (byte)118, (byte)62}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(5, byteString0.size());
      assertEquals(32, byteString1.size());
      assertEquals(20, byteString2.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("i.", (int) (byte)104, 1944);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1944 > 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000L);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("iUH.2WF]q_mFsU");
      assertNotNull(mockFileOutputStream0);
      
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      byteString0.utf8 = "MD5";
      assertEquals(1, byteString0.size());
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      byte byte0 = (byte)111;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        buffer_UnsafeCursor1.buffer.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeDecimalLong((-1L));
      assertNotNull(buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NOmL");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Buffer buffer2 = buffer_UnsafeCursor1.buffer.writeDecimalLong((-1));
      assertNotNull(buffer2);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer2.readUtf8CodePoint();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(45, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      long long0 = buffer2.readHexadecimalUnsignedLong();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.snapshot();
      assertNotNull(byteString0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(2, byteString0.size());
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      
      long long1 = realBufferedSource0.buffer.indexOf(byteString0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082908L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(3143L);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(3143L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      assertNull(byteArray0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.clone();
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3143L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3143L, buffer1.size());
      assertEquals(3143L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Segment segment0 = buffer1.head;
      assertNotNull(segment0);
      
      buffer1.head = segment0;
      assertFalse(buffer0.exhausted());
      assertEquals(3143L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3143L, buffer1.size());
      assertEquals(3143L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = (Buffer)buffer_UnsafeCursor0.buffer.write((Source) buffer1, 108L);
      assertNotNull(buffer2);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3251L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3035L, buffer1.size());
      assertEquals(3035L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(3251L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 108L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString0 = buffer1.snapshot();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(3132L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertEquals(0L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.clone();
      assertNotNull(buffer2);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(3132L, buffer2.size());
      assertEquals(3132L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      byte[] byteArray0 = buffer2.readByteArray();
      assertNotNull(byteArray0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      segment0.owner = true;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.clone();
      assertNotNull(buffer3);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3132L, buffer0.size());
      assertEquals(3132L, buffer3.completeSegmentByteCount());
      assertEquals(3132L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      
      SegmentPool.next = segment0;
      buffer3.write((Source) buffer_UnsafeCursor0.buffer, 5L);
      buffer_UnsafeCursor0.buffer.segmentSizes();
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082876L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = pipe0.sourceClosed;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = new ByteString((byte[]) null);
      Segment segment0 = new Segment();
      buffer_UnsafeCursor0.resizeBuffer(3131L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.clone();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      pipe0.sourceClosed = true;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, buffer_UnsafeCursor0.data);
      buffer1.sha1();
      buffer1.snapshot(44);
      buffer1.hashCode();
      buffer0.exhausted();
      buffer_UnsafeCursor0.buffer.readInt();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("{YjXV");
      ByteString byteString0 = buffer1.snapshot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      hashingSink0.hash();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.rangeEquals((long) (-1), byteString0);
      hashingSink0.close();
      buffer2.emit();
      buffer1.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x7b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)62;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("size < 4: ");
      Buffer buffer1 = bufferedSink0.buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(bufferedSink0, byteString0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = new Buffer();
      buffer2.size = 9223372036854775807L;
      ByteString byteString1 = realBufferedSink1.buffer.readByteString();
      ByteString byteString2 = buffer1.hmacSha256(byteString0);
      HashingSink.hmacSha512(realBufferedSink1, byteString0);
      hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString2;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer0.sha1();
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readUtf8Line(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=9223372036854775806 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(9996L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer buffer0 = realBufferedSink0.buffer.readFrom((InputStream) byteArrayInputStream0, 2L);
      ByteString byteString0 = buffer0.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      boolean boolean0 = realBufferedSink0.closed;
      buffer0.indexOf(byteString0, 2L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSink0.buffer.writableSegment(192);
      realBufferedSink0.buffer.indexOfElement(byteString0);
      buffer1.writeDecimalLong(1069L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8(2311L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=2311
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(9987L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeLong((byte)0);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)realBufferedSink0.buffer.snapshot();
      HashingSink.md5(realBufferedSink0);
      realBufferedSink1.buffer.indexOf((ByteString) segmentedByteString0);
      Charset.defaultCharset();
      realBufferedSink1.buffer.indexOfElement((ByteString) segmentedByteString0, 6L);
      Buffer buffer0 = realBufferedSink1.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = realBufferedSink1.buffer;
      realBufferedSink1.buffer.clear();
      realBufferedSink0.buffer.emitCompleteSegments();
      buffer2.sha512();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString0 = buffer1.snapshot();
      Segment segment0 = new Segment();
      long long0 = buffer_UnsafeCursor0.offset;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer3 = buffer2.writeByte((-1061));
      buffer_UnsafeCursor0.buffer.writeShortLe(1952257861);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      byteString0.base64();
      buffer0.segmentSizes();
      buffer0.readUtf8CodePoint();
      buffer0.indexOfElement(byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        buffer3.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[1];
      MockFile mockFile0 = new MockFile("Hm248B!0}v&*M");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hm248B!0}v&*M");
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(pipe_PipeSink0);
      byteString0.lastIndexOf(byteArray0, 7);
      Buffer buffer1 = realBufferedSink0.buffer;
      byteString0.hashCode = 65;
      Buffer buffer2 = buffer1.writeDecimalLong(10000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer2.indexOf(byteString0);
      HashingSource.hmacSha256(buffer2, byteString0);
      Buffer buffer3 = new Buffer();
      buffer0.indexOfElement(byteString0);
      buffer1.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[2];
      realBufferedSource0.timeout();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options.of(byteStringArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      realBufferedSource0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = (Buffer)buffer0.write((Source) null, (-1254L));
      int int0 = (-1311);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals((long) 3070, byteString0, (-1311), 3070);
      // Undeclared exception!
      try { 
        buffer1.writableSegment((-1311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = (-3289L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.rangeEquals((long) (byte)0, byteString0);
      String string0 = byteString0.utf8;
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-3289L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3289
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("{YjXV");
      buffer1.snapshot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer_UnsafeCursor1.buffer.readUtf8CodePoint();
      Buffer buffer2 = new Buffer();
      MockFile mockFile0 = new MockFile("{YjXV", "{YjXV");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      try { 
        buffer0.copyTo((OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.writeUtf8("5|\"<Pv~U");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      Charset.defaultCharset();
      realBufferedSink0.buffer.hashCode();
      Buffer buffer1 = pipe0.buffer;
      buffer1.toString();
      MockFile mockFile0 = new MockFile("okio.SegmentPool", "okio.SegmentPool");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      realBufferedSink0.buffer.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082876L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Segment segment0 = new Segment();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer_UnsafeCursor0.buffer, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byte byte0 = (byte)106;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x72
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8("x_4)7*^7iP");
      realBufferedSink0.buffer.readAll(buffer0);
      boolean boolean0 = pipe0.sourceClosed;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe_PipeSink0.flush();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(10000L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer.sha512();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = realBufferedSource0.closed;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink1);
      Buffer buffer0 = realBufferedSink0.buffer;
      ((RealBufferedSink) bufferedSink0).buffer.writeDecimalLong(100000000000000000L);
      realBufferedSink3.buffer.segmentSizes();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSink2.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = buffer_UnsafeCursor0.offset;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      buffer2.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 10000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = 7177611L;
      Pipe pipe0 = new Pipe(7177611L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("3RWM|kuT97R{T", 50, (-1932735282), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1932735282 < 50
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeInt(3);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer1.readUtf8((long) 2);
      buffer0.readByte();
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer1.snapshot(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = 10000L;
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer.readAll(pipe_PipeSink0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(byteArray0);
      realBufferedSink1.buffer.hashCode();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
      buffer0.writeShort(2147268921);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(10000L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      GzipSink gzipSink0 = new GzipSink(buffer1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(gzipSink0);
      BufferedSink bufferedSink1 = realBufferedSink2.writeLong((byte)22);
      realBufferedSink0.buffer.toString();
      Buffer buffer2 = realBufferedSink2.buffer;
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer2.snapshot();
      buffer0.indexOfElement((ByteString) segmentedByteString0, (long) (byte)22);
      Buffer buffer3 = realBufferedSink1.buffer;
      segmentedByteString0.write(((RealBufferedSink) bufferedSink1).buffer);
      Buffer buffer4 = pipe0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(((RealBufferedSink) bufferedSink1).buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.readByteString();
      buffer3.writeUtf8("Z 9fko");
      realBufferedSource0.buffer.writeUtf8CodePoint((byte)22);
      realBufferedSource1.buffer();
      ((RealBufferedSink) bufferedSink0).buffer.writableSegment((byte)22);
      buffer2.hmacSha1(byteString0);
      try { 
        realBufferedSource0.readUtf8LineStrict(10000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=16\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeDecimalLong(71776119061217280L);
      realBufferedSink0.writeHexadecimalUnsignedLong(10000L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-86);
      byteArray0[0] = (byte)57;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)59;
      Buffer buffer0 = realBufferedSink1.buffer;
      Buffer buffer1 = realBufferedSink2.buffer;
      realBufferedSink2.buffer.indexOf((byte)59, (long) (byte)20);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.utf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      realBufferedSink0.buffer.clone();
      buffer0.hashCode();
      realBufferedSink1.buffer.indexOf(byteString0, 1444L);
      realBufferedSink1.buffer.writeHexadecimalUnsignedLong(71776119061217280L);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.writeAll(realBufferedSource0.buffer);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(byteArray0);
      realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer0 = realBufferedSink1.buffer;
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.hashCode();
      buffer0.readShort();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink2.buffer.readUnsafe();
      buffer_UnsafeCursor0.seek((short)0);
      realBufferedSink1.buffer.writeIntLe((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer_UnsafeCursor1.next();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer_UnsafeCursor1.buffer.writeDecimalLong(1);
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.toString();
      buffer_UnsafeCursor1.end = (int) (byte)111;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer_UnsafeCursor1.buffer.writeDecimalLong(111);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = buffer_UnsafeCursor1.readWrite;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = buffer_UnsafeCursor0.offset;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeByte((-1061));
      Buffer buffer3 = buffer2.writeShortLe((-2743));
      buffer0.segmentSizes();
      buffer3.readUtf8CodePoint();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer_UnsafeCursor0.buffer.writeLongLe((-1L));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[1];
      MockFile mockFile0 = new MockFile("Hm248B!0}v&*M");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hm248B!0}v&*M");
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(pipe_PipeSink0);
      byteString0.lastIndexOf(byteArray0, 7);
      Buffer buffer1 = realBufferedSink0.buffer;
      byteString0.hashCode = 51;
      Buffer buffer2 = buffer1.writeDecimalLong(10000000000L);
      buffer2.writeDecimalLong(0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)125);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)125;
      buffer0.read(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("already attached to a buffe", 1114111, (-2050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2050 < 1114111
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.outputStream();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("{YjXV");
      buffer1.snapshot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeDecimalLong((-1L));
      buffer_UnsafeCursor1.buffer.readUtf8CodePoint();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer_UnsafeCursor1.buffer.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x59
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.writeUtf8("5|\"<Pv~U");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(pipe_PipeSink0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = realBufferedSink0.buffer;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      BufferedSink bufferedSink0 = realBufferedSink1.writeByte(3373);
      buffer0.indexOf(byteString0, 10000L);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.readShort();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteString byteString1 = buffer0.md5();
      buffer0.readInt();
      realBufferedSink1.buffer.readUtf8Line();
      ((RealBufferedSink) bufferedSink0).buffer.readAll(realBufferedSink1);
      buffer1.rangeEquals(4L, byteString1, (int) (short)13692, (-186));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("", 607, 607, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 607 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size=%s offset=%s bteCount=%s");
      byteArrayInputStream0.markSupported();
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0, 2L);
      ByteString byteString0 = buffer1.snapshot();
      buffer0.indexOfElement(byteString0, 4119L);
      buffer1.writeDecimalLong(4119L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GzipSink gzipSink0 = new GzipSink(buffer1);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(gzipSink0);
      BufferedSink bufferedSink0 = realBufferedSink3.writeLong((byte)22);
      realBufferedSink0.buffer.toString();
      Buffer buffer2 = realBufferedSink3.buffer;
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer2.snapshot();
      buffer0.indexOfElement((ByteString) segmentedByteString0, (long) (byte)22);
      realBufferedSink2.buffer();
      segmentedByteString0.write(((RealBufferedSink) bufferedSink0).buffer);
      ((RealBufferedSink) bufferedSink0).buffer.snapshot();
      realBufferedSink1.writeLong((byte)22);
      Buffer buffer3 = realBufferedSink2.buffer;
      buffer0.snapshot();
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Pipe pipe0 = new Pipe(1041L);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe_PipeSink0.close();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      boolean boolean0 = realBufferedSink1.closed;
      long long0 = 2L;
      realBufferedSink0.buffer.writeDecimalLong(100000000000L);
      long long1 = 443L;
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readUtf8LineStrict((-2228L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -2228
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OutputStream outputStream0 = buffer_UnsafeCursor0.buffer.outputStream();
      buffer0.writeUtf8("{YjXV");
      buffer_UnsafeCursor0.buffer.snapshot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer_UnsafeCursor1.buffer.writeTo(outputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor2.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer.writeShort((-1));
      realBufferedSink0.buffer();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.buffer.readUtf8Line(1095216660L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=1095216659 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8 = "MD5";
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      Buffer buffer1 = buffer0.writeUtf8("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString1);
      buffer_UnsafeCursor1.start = (int) (byte)111;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer0.indexOf(byteString1);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer.writeDecimalLong((-1));
      buffer_UnsafeCursor1.buffer.indexOf(byteString0);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      ByteString byteString3 = hashingSink0.hash();
      byteStringArray0[1] = byteString3;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer_UnsafeCursor1.buffer, byteString0);
      ByteString byteString4 = hashingSource0.hash();
      byteStringArray0[2] = byteString4;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      buffer1.writeHexadecimalUnsignedLong((-1));
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString2, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.skip((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(1444L);
      bufferedSink0.writeDecimalLong((-988L));
      ((RealBufferedSink) bufferedSink0).buffer.indexOf((byte)72);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      ByteString byteString0 = buffer3.snapshot();
      buffer_UnsafeCursor0.buffer.write(byteString0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, byteString0);
      Integer integer0 = new Integer((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      Integer integer1 = new Integer((-1));
      Buffer buffer4 = realBufferedSink0.buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer4.select(options0);
      hashingSink0.hash();
      buffer1.writeByte(3);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Pipe pipe0 = new Pipe(9987L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe0.sourceClosed = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)114;
      byteArray0[4] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong((byte)114);
      bufferedSink0.buffer();
      realBufferedSink0.buffer.snapshot();
      HashingSink.md5(realBufferedSink0);
      ((RealBufferedSink) bufferedSink0).buffer.indexOf(byteString0);
      Charset.defaultCharset();
      ((RealBufferedSink) bufferedSink0).buffer.hashCode();
      realBufferedSink0.buffer.toString();
      MockFile mockFile0 = new MockFile("beginIndex < 0: ", "[hex=0000000000000072]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      realBufferedSink0.buffer.copyTo((OutputStream) mockFileOutputStream0);
      realBufferedSink0.buffer.readInt();
      try { 
        realBufferedSink0.buffer.readAll(pipe_PipeSink0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // source is closed
         //
         verifyException("okio.Pipe$PipeSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.toString();
      realBufferedSink0.write(buffer_UnsafeCursor0.data);
      MockPrintStream mockPrintStream0 = new MockPrintStream("[n:2os5npBI/l");
      buffer_UnsafeCursor0.buffer.skip((-1249L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interrupted");
      boolean boolean0 = realBufferedSink0.closed;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.sha256();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      Segment segment0 = new Segment();
      long long0 = buffer_UnsafeCursor0.offset;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeByte((-1061));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      byteString0.base64();
      buffer0.segmentSizes();
      try { 
        buffer3.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffdb)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082879L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      bufferedSink0.writeDecimalLong(1000000000000000L);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.writeHexadecimalUnsignedLong((byte)109);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe_PipeSink0.close();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink1.buffer;
      Buffer buffer4 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.sha1();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer5 = pipe0.buffer;
      long long0 = 3L;
      long long1 = buffer_UnsafeCursor0.offset;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082876L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer_UnsafeCursor0.buffer.snapshot();
      Segment segment0 = new Segment();
      buffer_UnsafeCursor0.resizeBuffer(3131L);
      buffer_UnsafeCursor0.buffer.clone();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer_UnsafeCursor0.buffer, 0L, 280375465082876L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3131 offset=0 byteCount=280375465082876
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.snapshot();
      Segment segment0 = new Segment();
      long long0 = buffer_UnsafeCursor0.offset;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink1.buffer;
      realBufferedSink0.buffer.snapshot();
      Segment segment1 = new Segment();
      buffer_UnsafeCursor0.resizeBuffer(3132L);
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.clone();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink1.write((Source) buffer0, 1539L);
      Buffer buffer5 = realBufferedSource0.buffer();
      buffer5.readByteArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4B.&/");
      realBufferedSink1.buffer.indexOf((byte) (-59));
      buffer_UnsafeCursor0.buffer.clone();
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer5.write((Source) buffer_UnsafeCursor0.buffer, (-1L));
      Buffer buffer6 = realBufferedSink0.buffer;
      realBufferedSource0.buffer.hashCode();
      buffer4.readShort();
      buffer1.sha1();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.skip((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeLong(1444L);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer3.snapshot();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.write((ByteString) segmentedByteString0);
      HashingSink hashingSink0 = HashingSink.md5(buffer3);
      realBufferedSink0.buffer.indexOf((ByteString) segmentedByteString0);
      Charset.defaultCharset();
      hashingSink0.hash();
      buffer3.hashCode();
      Buffer buffer5 = realBufferedSink1.buffer;
      buffer4.rangeEquals((-3489L), (ByteString) segmentedByteString0);
      realBufferedSink1.buffer.emit();
      buffer5.indexOf((ByteString) segmentedByteString0);
      realBufferedSink0.write((ByteString) segmentedByteString0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      boolean boolean0 = pipe0.sinkClosed;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Segment segment0 = buffer0.head;
      long long0 = buffer_UnsafeCursor0.offset;
      Buffer buffer2 = buffer1.writeByte((-1));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink1.writeLong((-1L));
      ByteString[] byteStringArray0 = new ByteString[20];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink1.buffer.selectPrefix(options0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.readByteString();
      realBufferedSource0.readByteString();
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        bufferedSink0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8 = "MD5";
      Buffer buffer1 = buffer0.writeUtf8("MD5");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      ByteString byteString1 = new ByteString(byteArray0);
      HashingSink.hmacSha256(buffer1, byteString0);
      buffer_UnsafeCursor1.start = (int) (byte)111;
      buffer0.indexOf(byteString0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer.writeDecimalLong((-1));
      buffer_UnsafeCursor1.buffer.indexOf(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer2.readUtf8CodePoint();
      buffer2.readHexadecimalUnsignedLong();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      realBufferedSource0.buffer();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Pipe pipe0 = new Pipe(9987L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong((byte)0);
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink0);
      Charset.defaultCharset();
      hashingSink0.hash();
      hashingSink0.hash();
      realBufferedSink0.buffer.rangeEquals((long) (byte)0, byteString0);
      hashingSink0.close();
      ((RealBufferedSink) bufferedSink0).buffer.emit();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Pipe pipe0 = new Pipe(9987L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)114;
      byteArray0[4] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong((byte)114);
      realBufferedSink0.buffer.toString();
      Buffer buffer0 = realBufferedSink0.buffer;
      ByteString byteString1 = realBufferedSink0.buffer.snapshot();
      realBufferedSink0.close();
      buffer0.indexOfElement(byteString0, 717761L);
      HashingSink hashingSink0 = HashingSink.hmacSha256(bufferedSink0, byteString1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]$_/WhPiy+cj_");
      buffer0.indexOf(byteString1);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer.hmacSha512(byteString0);
      Charset.defaultCharset();
      ((RealBufferedSink) bufferedSink0).buffer.hashCode();
      buffer1.readShort();
      Buffer buffer2 = bufferedSink0.buffer();
      hashingSink0.hash();
      buffer2.rangeEquals((long) (byte)0, byteString1);
      buffer2.readShortLe();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-2111085619));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=12 offset=0 byteCount=-2111085619
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(999999997L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      buffer1.segmentSizes();
      byteArray0[1] = (byte) (-111);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)41;
      buffer0.readUtf8Line();
      try { 
        buffer1.write((Source) buffer0, 1255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Pipe pipe0 = new Pipe(9979L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      buffer0.indexOfElement(byteString0, (long) (byte)29);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer3 = new Buffer();
      buffer2.equals(buffer1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeLong(1444L);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer();
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer3.snapshot();
      buffer_UnsafeCursor0.buffer.write((ByteString) segmentedByteString0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, segmentedByteString0);
      Integer integer0 = new Integer((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      Integer integer1 = new Integer((-1));
      realBufferedSink0.buffer();
      ByteString byteString0 = hashingSink0.hash();
      buffer2.rangeEquals((-1343L), byteString0);
      buffer0.readUtf8(1L);
      Buffer buffer4 = realBufferedSource0.buffer;
      Buffer buffer5 = realBufferedSink1.buffer;
      realBufferedSink0.buffer.equals(buffer4);
      try { 
        buffer0.skip(1095216660480L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.readWrite = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeByte((-1047));
      Buffer buffer3 = buffer2.writeShortLe((-1));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      buffer3.readUtf8CodePoint();
      HashingSink.sha512(realBufferedSink1);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8Line(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=9223372036854775806 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.writeAll(realBufferedSink0.buffer);
      realBufferedSink0.writeDecimalLong((-2336L));
      buffer_UnsafeCursor0.next();
      buffer0.readByte();
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSink0.buffer.rangeEquals((long) (byte)45, byteString0, (-419), (-1));
      realBufferedSink0.buffer.sha512();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo(realBufferedSink0.buffer, (long) (-419), 3602L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-419 byteCount=3602
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.toString();
      byte[] byteArray0 = new byte[4];
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ((RealBufferedSink) bufferedSink0).buffer.snapshot();
      Buffer buffer3 = buffer2.write(byteString1);
      HashingSink hashingSink0 = HashingSink.hmacSha256(bufferedSink0, byteString0);
      realBufferedSink0.buffer.indexOf(byteString0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer3, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Charset.defaultCharset();
      buffer3.hashCode();
      bufferedSink0.buffer();
      hashingSink0.hash();
      buffer0.rangeEquals(10000000000000L, byteString0);
      // Undeclared exception!
      try { 
        buffer1.readUtf8(2L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size=%s offset=%s bteCount=%s");
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0, 2L);
      ByteString byteString0 = buffer1.snapshot();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.writeByte(10);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      Buffer buffer4 = buffer2.writeTo((OutputStream) byteArrayOutputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.copyTo(buffer1, (long) 0, (long) 2);
      buffer3.rangeEquals(42L, byteString0);
      // Undeclared exception!
      try { 
        buffer4.readUtf8LineStrict((-612L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -612
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)62;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink.hmacSha256(realBufferedSink1, byteString0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink2.buffer;
      buffer1.size = 9223372036854775807L;
      // Undeclared exception!
      try { 
        realBufferedSink2.buffer.readByteString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount > Integer.MAX_VALUE: 9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.toString();
      byte[] byteArray0 = new byte[4];
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint((-1037));
      realBufferedSink0.buffer.readShort();
      ByteString byteString0 = buffer1.sha512();
      realBufferedSink0.buffer.readShortLe();
      HashingSink hashingSink0 = HashingSink.hmacSha512(bufferedSink0, byteString0);
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeByte(60);
      buffer0.indexOf(byteString0, (long) 60);
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 2 (to read code point prefixed 0xfffffff3)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeDecimalLong((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(1427L);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer();
      ByteString byteString0 = buffer2.snapshot();
      buffer_UnsafeCursor0.buffer.write(byteString0);
      realBufferedSink0.buffer.indexOf(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      realBufferedSink0.buffer.hashCode();
      realBufferedSink0.buffer();
      bufferedSink0.buffer();
      buffer_UnsafeCursor0.buffer.readLong();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writableSegment((-1616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected code point: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe();
      long long0 = buffer_UnsafeCursor1.offset;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeByte((-1));
      Segment segment0 = new Segment((byte[]) null, 5, (-1730), false, true);
      buffer1.head = segment0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aJI");
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(buffer_UnsafeCursor0.buffer, byteString0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected code point: ");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.indexOf(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeShortLe(2474);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.readUtf8Line(1L);
      Buffer buffer3 = buffer0.writeDecimalLong(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.rangeEquals(9223372036854775807L, byteString0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      buffer0.writeLongLe(2474);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(filterOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream1);
      buffer3.writeTo((OutputStream) filterOutputStream0, (long) 2);
      buffer2.toString();
      // Undeclared exception!
      try { 
        buffer3.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OutputStream outputStream0 = buffer_UnsafeCursor0.buffer.outputStream();
      buffer_UnsafeCursor0.buffer.writeUtf8("{YjXV");
      buffer0.snapshot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer_UnsafeCursor1.buffer.writeTo(outputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor2.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x7b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Pipe pipe0 = new Pipe(1041L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeShortLe((-109));
      buffer2.readUtf8CodePoint();
      Integer integer0 = new Integer((-1));
      buffer1.segmentSizes();
      buffer0.readUtf8Line();
      buffer2.outputStream();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer0.writeUtf8("\uFFFD");
      buffer_UnsafeCursor0.buffer.snapshot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.readUtf8CodePoint();
      Buffer buffer4 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8(32L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=32
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long long0 = 1041L;
      Pipe pipe0 = new Pipe(1041L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeShortLe((-109));
      buffer2.readUtf8CodePoint();
      Integer integer0 = new Integer((-1));
      buffer1.segmentSizes();
      buffer0.readUtf8Line();
      buffer2.outputStream();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer buffer4 = buffer0.writeUtf8("\uFFFD");
      buffer_UnsafeCursor0.buffer.snapshot();
      // Undeclared exception!
      try { 
        buffer4.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffef
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Pipe pipe0 = new Pipe(9983L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeShortLe(2672);
      buffer0.readUtf8CodePoint();
      Integer integer0 = new Integer(112);
      buffer1.segmentSizes();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer1.outputStream();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer buffer4 = buffer2.writeUtf8("");
      buffer4.snapshot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        buffer3.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Pipe pipe0 = new Pipe(9983L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[4];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      Buffer buffer0 = realBufferedSink0.buffer.readFrom((InputStream) byteArrayInputStream0, 2L);
      ByteString byteString0 = buffer0.snapshot();
      realBufferedSink0.buffer.indexOfElement(byteString0, 2L);
      Buffer buffer1 = buffer0.writeDecimalLong(2L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSink0.buffer.indexOf(byteString0, 2L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      realBufferedSink0.buffer.readShort();
      Pipe pipe1 = new Pipe(2L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      buffer1.clear();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      try { 
        realBufferedSource2.readByteString(9983L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
