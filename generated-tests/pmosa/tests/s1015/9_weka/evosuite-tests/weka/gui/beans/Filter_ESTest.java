/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:01:02 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.ScrollPane;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ComponentListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseWheelListener;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.beans.beancontext.BeanContextSupport;
import java.io.File;
import java.io.PrintStream;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JApplet;
import javax.swing.JEditorPane;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.ChebyshevDistance;
import weka.core.CheckOptionHandler;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.converters.JSONLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassAssignerCustomizer;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      dataVisualizer0.getUI();
      filter0.addTrainingSetListener(dataVisualizer0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      BeanVisual beanVisual0 = serializedModelSaver0.m_visual;
      filter0.setVisual(beanVisual0);
      filter0.getVisual();
      filter0.removeTrainingSetListener(dataVisualizer0);
      assertEquals("SerializedModelSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      filter0.addComponentListener((ComponentListener) null);
      filter0.getCustomName();
      filter0.getRootPane();
      filter0.getWrappedAlgorithm();
      TextViewer textViewer0 = new TextViewer();
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(keyListener0, keyListener0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      textViewer0.addKeyListener((KeyListener) null);
      textViewer0.addVetoableChangeListener(beanContextSupport0);
      filter0.addDataSourceListener(textViewer0);
      filter0.removeTrainingSetListener(textViewer0);
      Class<TextViewer> class0 = TextViewer.class;
      Class<ClassValuePicker> class1 = ClassValuePicker.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "AllFilter";
      stringArray0[1] = "AllFilter";
      stringArray0[2] = "Lism9m:'";
      stringArray0[3] = "AllFilter";
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "yH7,~$", class1, stringArray0, "Lism9m:'", "");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found: AllFilter on class weka.gui.beans.ClassValuePicker
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Color color0 = saver0.getBackground();
      filter0.isValidateRoot();
      MockFile mockFile0 = new MockFile((File) null, "bx{&2j~3}isIG:3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "bx{&2j~3}isIG:3";
      objectArray0[1] = (Object) color0;
      objectArray0[2] = (Object) color0;
      objectArray0[3] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.printf("bx{&2j~3}isIG:3", objectArray0);
      saver0.list(printStream0);
      filter0.addDataSourceListener(saver0);
      filter0.requestFocus();
      saver0.isPaintingForPrint();
      filter0.getWrappedAlgorithm();
      filter0.addTestSetListener(saver0);
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      StringSelection stringSelection0 = new StringSelection("{X.jtU9)WZU'=");
      // Undeclared exception!
      try { 
        filter0.performRequest("UYo4X+m~r4H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // UYo4X+m~r4H not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getContainerListeners();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      filter0.scrollRectToVisible(rectangle0);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.setAutoscrolls(true);
      TextViewer textViewer0 = new TextViewer();
      textViewer0.setInheritsPopupMenu(true);
      filter0.addTestSetListener(textViewer0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.removeTestSetListener(flowByExpression0);
      filter0.removeTrainingSetListener(textViewer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      associator0.requestFocus();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      filter0.useDefaultVisual();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      associator0.addMouseWheelListener((MouseWheelListener) null);
      stringArray0[4] = "@relation";
      Instances.test(stringArray0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(associator0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.setCustomName((String) null);
      filter0.removeDataSourceListener(associator0);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.addInstanceListener(flowByExpression0);
      filter0.addTestSetListener(flowByExpression0);
      filter0.removeTrainingSetListener(associator0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("instance", (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getCapabilities();
      filter0.setFilter(multiFilter0);
      filter0.connectionAllowed("");
      filter0.removeInstanceListener((InstanceListener) null);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      // Undeclared exception!
      try { 
        appender0.add("dataSet", (Component) filter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot add to layout: unknown constraint: dataSet
         //
         verifyException("java.awt.BorderLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      Logger logger0 = sorter0.m_log;
      filter0.setLog((Logger) null);
      filter0.connectionNotification("UYo4X+m~r4H", sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFocusTraversalKeys(0);
      filter0.globalInfo();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getParagraphElement(0);
      AsyncBoxView asyncBoxView0 = new AsyncBoxView(element0, 2836);
      // Undeclared exception!
      try { 
        asyncBoxView0.getGraphics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.View", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus((-2059));
      filter0.acceptInstance(instanceEvent0);
      filter0.removeDataSourceListener(substringLabeler0);
      filter0.getWrappedAlgorithm();
      GraphViewer graphViewer0 = new GraphViewer();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getStructure();
      classValuePicker0.getAccessibleContext();
      DataSetEvent dataSetEvent0 = new DataSetEvent(graphViewer0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeInstanceListener(substringLabeler0);
      JEditorPane jEditorPane0 = new JEditorPane(".bsi", "@data");
      jEditorPane0.modelToView(0);
      ScrollPane scrollPane0 = null;
      try {
        scrollPane0 = new ScrollPane();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Locale locale0 = Locale.CANADA_FRENCH;
      saver0.setLocale(locale0);
      filter0.disconnectionNotification("3{{M3^8'cvnY=<);", saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MetaBean metaBean0 = new MetaBean();
      Vector vector0 = metaBean0.m_outputs;
      instances0.retainAll(vector0);
      instances0.sort(0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getFilter();
      filter0.removeInstanceListener((InstanceListener) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      // Undeclared exception!
      try { 
        filter0.performRequest("X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeInstanceListener(flowByExpression0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      Appender appender0 = new Appender();
      filter0.addInstanceListener(appender0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      SimpleKMeans simpleKMeans1 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TestSetEvent testSetEvent0 = new TestSetEvent(checkOptionHandler0, (Instances) null, 0, 7, 0, (-319));
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.connectionNotification("DQ8{E", "DQ8{E");
      filter0.acceptInstance((InstanceEvent) null);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.removeDataSourceListener(dataVisualizer0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appender appender0 = new Appender();
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("UYo4X+m~r4H");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appender appender0 = new Appender();
      Filter filter0 = new Filter();
      filter0.addInstanceListener(appender0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      Filter filter1 = new Filter();
      filter1.acceptDataSet(dataSetEvent0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      AllFilter allFilter0 = new AllFilter();
      filter0.setWrappedAlgorithm(allFilter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appender appender0 = new Appender();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      appender0.setLog(logPanel0);
      Filter filter0 = new Filter();
      filter0.addInstanceListener(appender0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      AllFilter allFilter0 = new AllFilter();
      filter0.setWrappedAlgorithm(allFilter0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Filter filter0 = new Filter();
      filter0.addComponentListener((ComponentListener) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.connectionNotification("pYpB*1l", crossValidationFoldMaker0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Sorter sorter0 = new Sorter();
      BeanVisual beanVisual0 = sorter0.getVisual();
      filter0.setVisual(beanVisual0);
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      filter0.connectionNotification("pYpB*1l", mockJapaneseDate0);
      filter0.addTestSetListener(crossValidationFoldMaker0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.connectionNotification("jXh>d3Btlt?Hd\"U?gs", classAssigner0);
      boolean boolean0 = filter0.eventGeneratable("jXh>d3Btlt?Hd\"U?gs");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      testSetMaker0.getBorder();
      filter0.remove((Component) testSetMaker0);
      filter0.addComponentListener((ComponentListener) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      filter0.connectionNotification("pYpB*1l", mockJapaneseDate0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Sorter sorter0 = new Sorter();
      BeanVisual beanVisual0 = sorter0.getVisual();
      filter0.setVisual(beanVisual0);
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      filter0.connectionNotification("weka/gui/beans/icons/", chebyshevDistance0);
      boolean boolean0 = filter0.eventGeneratable("pYpB*1l");
      assertEquals("ClassOrder", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataSetEvent dataSetEvent0 = new DataSetEvent(textDirectoryLoader0, instances0);
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, instances0, 200, 200);
      filter0.acceptTestSet(testSetEvent0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Logger logger0 = trainingSetMaker0.m_logger;
      filter0.setLog((Logger) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      dataVisualizer0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      filter0.addTestSetListener(dataVisualizer0);
      filter0.useDefaultVisual();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      ClassAssignerCustomizer classAssignerCustomizer0 = new ClassAssignerCustomizer();
      classValuePicker0.removeDataFormatListener(classAssignerCustomizer0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getOptions();
      TestSetEvent testSetEvent0 = new TestSetEvent(classValuePicker0, instances0, 1065, 32000);
      filter0.acceptTestSet(testSetEvent0);
      boolean boolean0 = filter0.connectionAllowed("Eibe Frank and Ian H. Witten");
      Random.setNextRandom((-1));
      filter0.acceptTestSet(testSetEvent0);
      boolean boolean1 = filter0.isBusy();
      assertFalse(boolean1 == boolean0);
      
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.connectionNotification("instance", trainingSetMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(modelPerformanceChart0, instances0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      DataSetEvent dataSetEvent1 = new DataSetEvent(globalInfoJavadoc0, instances0);
      filter0.acceptDataSet(dataSetEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      logPanel0.getContainerListeners();
      logPanel0.getKeyListeners();
      filter0.setLog(logPanel0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      Thread thread0 = MockThread.currentThread();
      filter0.m_filterThread = thread0;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      filter0.useDefaultVisual();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeInstanceListener(flowByExpression0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      filter0.useDefaultVisual();
      ImageSaver imageSaver0 = new ImageSaver();
      filter0.connectionNotification("instance", imageSaver0);
      Sorter sorter0 = new Sorter();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus(1118);
      filter0.acceptInstance(instanceEvent0);
      Class<Classifier> class0 = Classifier.class;
      String string0 = "]Nwp8s2<5%,7 W#T.`";
      Class<ManhattanDistance> class1 = ManhattanDistance.class;
      filter0.isFocusOwner();
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "]Nwp8s2<5%,7 W#T.`", class1, "Center");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found: Center on class weka.core.ManhattanDistance
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
      
      Filter filter1 = new Filter();
      filter1.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, (-4273));
      instanceEvent0.setInstance(binarySparseInstance0);
      instanceEvent0.setStatus(3159);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter1.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler1.m_ie;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instanceEvent0.setInstance(binarySparseInstance0);
      instanceEvent0.setStatus(2);
      filter1.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 2);
      instanceEvent0.setInstance(binarySparseInstance0);
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Thread thread0 = MockThread.currentThread();
      filter0.m_filterThread = thread0;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0, 2);
      instanceEvent0.setStructure(instances1);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Thread thread0 = MockThread.currentThread();
      filter0.m_filterThread = thread0;
      Associator associator0 = new Associator();
      associator0.setIgnoreRepaint(false);
      associator0.getStructure("%K]uOQB[4=ts%T5+");
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.addDataSourceListener(scatterPlotMatrix0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      Random.setNextRandom(10000);
  }
}
