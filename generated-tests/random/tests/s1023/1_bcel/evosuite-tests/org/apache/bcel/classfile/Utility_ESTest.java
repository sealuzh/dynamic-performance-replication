/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:31:30 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      Utility.getSignature("):\n");
      Utility.isJavaIdentifierPart('[');
      String string0 = " = ";
      // Undeclared exception!
      try { 
        Utility.signatureToString(" = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-6), (-1956788410));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1956788410), (-1996150543));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      Constant constant0 = constantMethodHandle0.copy();
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload\t\t%250", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = ".t7]6L&pg]\\";
      try { 
        Utility.typeOfSignature(".t7]6L&pg]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .t7]6L&pg]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.compactClassName(".class", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (int) (byte) (-26), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-11);
      Utility.encode(byteArray0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6$W$f5");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "6$W$f5");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) (byte)22;
      Utility.printArray(printWriter0, objectArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1072, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-125);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("new", "Gug[Q[g", false);
      Utility.setBit((byte)63, (byte)104);
      Utility.fillup("K5^e^]Op<WnZn", (byte) (-2), false, 'D');
      try { 
        Utility.typeOfSignature("Gug[Q[g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gug[Q[g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = (-2054);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.fillup("org.apache.bcel.classfile.ConstantUtf8$1", (-2054), true, 'F');
      try { 
        Utility.decode("org.apache.bcel.classfile.ConstantUtf8$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byte byte0 = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-128);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)17, (-363));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("Unreachable default case reached!");
      constantInterfaceMethodref0.clone();
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-128), (byte) (-70));
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-70));
      constantArray0[4] = (Constant) constantMethodType0;
      constantInvokeDynamic0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInterfaceMethodref1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 31, (-462));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-68);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-68);
      Utility.printArray(objectArray0, true);
      String string0 = Utility.printArray(objectArray0, false, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte) (-49);
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte) (-68);
      byteArray1[5] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)7;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)7, (byte)82);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (-926));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 62992. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.isSet(2048, 662);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte) (-110);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2048, 1692);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-127);
      Constant[] constantArray0 = new Constant[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      constantArray0[0] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-3646), 25, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_2
         // 1:    iflt\t\t#4634
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 746, (int) (byte) (-108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.signatureToString("T>!\"4x]j>|@;4hs=do");
      try { 
        Utility.methodSignatureReturnType(">!\"4x]j>|@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>!\"4x]j>|@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "UMxcu]lx&:F0V";
      try { 
        Utility.typeOfSignature("UMxcu]lx&:F0V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UMxcu]lx&:F0V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.replace("newarray", "newarray", "newarray");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "newarray";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "newarray";
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0);
      Utility.replace("{newarray, null, null, newarray, null}", "{newarray, null, null, newarray, null}", "%~2rjSpx~:k0W[");
      byte[] byteArray0 = Utility.decode("%~2rjSpx~:k0W[", false);
      Utility.printArray(objectArray0, true, true);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 41, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.replace("native", "void", "native");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-72);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-3767), (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 61. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("?4ijT", true);
      Utility.isSet(85, 85);
      String string0 = "!S\"x#%oJ*j`4nZUZs";
      Utility.typeOfSignature("!S\"x#%oJ*j`4nZUZs");
      String string1 = "iload_0";
      // Undeclared exception!
      try { 
        Utility.signatureToString("iload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iload_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)45;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-85), (byte)43);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)45, (byte)43);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("Q{Bie\"A6m>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q{Bie\"A6m>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString("checkcast");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "checkcast");
      try { 
        Utility.typeOfSignature("*~_q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~_q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-59);
      byte byte0 = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)41;
      byte byte1 = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      byteSequence0.close();
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("]j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)75;
      byteArray0[0] = (byte)75;
      byte byte1 = (byte)42;
      byteArray0[1] = (byte)42;
      byte byte2 = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byte byte3 = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)99;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U*B@");
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)74;
      Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte)74);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      Utility.setBit((-2534), (-372));
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      stringArray0[7] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "x";
      Utility.fillup("x", 51, false, 'I');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)117, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)10;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(31, (byte)31);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1123, (int) (byte) (-26));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E0kB1[we1nN5=aPe");
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)69;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-49), (int) (byte) (-31), false);
      assertEquals("0:    aload_3\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    fstore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "L<,";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("K)ydhXV=3= ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K)ydhXV=3= 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-92), 168, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("jsr_w", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HK:QV?.?P&k_)");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1310);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dneg", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid method signature: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "dneg");
      Utility.printArray(printWriter0, (Object[]) constantArray0);
      String string1 = Utility.replace("HK:QV?.?P&k_)", "op#vRA", "goto_w");
      assertEquals("HK:QV?.?P&k_)", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-119);
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-125);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = "\t";
      try { 
        Utility.methodSignatureReturnType("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-71);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("^bzp(AMb(C![w\"U");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)13, (byte)78);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2452, (int) (byte) (-61), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.searchOpcode(";");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)46;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, (-1283));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jj7gwpsP#sHk8/7u^!");
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)16;
      objectArray0[1] = (Object) (byte)53;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) "Jj7gwpsP#sHk8/7u^!";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) byteSequence0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) (byte)12;
      objectArray0[8] = (Object) (byte) (-113);
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.format(2726, 2726, false, 'W');
      Utility.classOrInterface(2726);
      Utility.format(36, 121, false, 'W');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)93;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(206);
      constantArray0[0] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(52);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)96, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, (-666));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iconst_5");
      Utility.convertString("iconst_5");
      Utility.accessToString((-647), false);
      try { 
        Utility.typeOfSignature("<,*yPzt>z};F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <,*yPzt>z};F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)81;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)15);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFloat0.accept(emptyVisitor0);
      ConstantLong constantLong0 = new ConstantLong((byte)81);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1);
      int int0 = Utility.clearBit(3, 821);
      assertEquals(3, int0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = Utility.decode("Y", false);
      assertArrayEquals(new byte[] {(byte)89}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 890, (-2635), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.isJavaIdentifierPart('H');
      Utility.compactClassName("Qd=", false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Qd=";
      objectArray0[1] = (Object) "Qd=";
      objectArray0[2] = (Object) "Qd=";
      objectArray0[3] = (Object) "Qd=";
      objectArray0[4] = (Object) "Qd=";
      objectArray0[5] = (Object) "Qd=";
      Object object0 = new Object();
      objectArray0[6] = object0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("Qd=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qd=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = Utility.clearBit((-32768), (-32768));
      assertEquals((-32768), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("goto_w\t\t#1640425613", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(656);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, 97, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-112);
      byte byte0 = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byte byte1 = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte) (-67);
      Utility.toHexString(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-67), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2f
         // 1:    areturn
         // 2:    <illegal opcode>
         // 3:    iconst_4
         // 4:    <illegal opcode>
         // 5:    lconst_1
         // 6:    iaload
         // 7:    lstore_3
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.classOrInterface((-3641));
      Utility.compactClassName("Unreachable default case reached!", "org.apache.bcel.classfile.ConstantInterfaceMethodref", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Unreachable default case reached!";
      objectArray0[1] = (Object) "Unreachable default case reached!";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)76;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 77, 34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = Utility.clearBit(97, (-3908));
      assertEquals(97, int0);
      
      String string0 = Utility.format((-3908), 97, true, 't');
      assertEquals("-3908tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-1), 97);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-63));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("wide\t(wide)", string1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.typeOfSignature("C6p");
      Utility.accessToString((int) (byte)5);
      Utility.getSignature("return");
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "HMLJYy][W*HY";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HMLJYy][W*HY");
      boolean boolean0 = true;
      Utility.compactClassName("The FileFilter must not be null", true);
      Utility.clearBit((byte)5, (byte)5);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.compactClassName("java.lang.Short", "):\n", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, 53, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(1155, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)85;
      ConstantPool constantPool0 = null;
      int int0 = (-4248);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4248), 89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("0:    bastore\n1:    i2b\n2:    castore\n", "0:    bastore\n1:    i2b\n2:    castore\n", "[2:5");
      Utility.fillup("[2:5", (byte)85, false, '?');
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private transient abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private transient abstract'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Utility.replace("glZo,e", "glZo,e", "glZo,e");
      assertEquals("glZo,e", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("lE@ t8", stringArray0);
      assertEquals("()LlE@;", string1);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.compactClassName("GaP4");
      String string2 = Utility.fillup("hq", 711, true, 'S');
      assertEquals("hqstring2);
      
      short short0 = Utility.searchOpcode("glZo,e");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.methodSignatureToString("()LlE@;", "()LlE@;", "org.apache.bcel.classfile.LocalVariableTypeTable");
      assertEquals("org.apache.bcel.classfile.LocalVariableTypeTable lE@ ()LlE@;()", string3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)116;
      byte byte0 = (byte)36;
      byteArray0[2] = (byte)36;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "\t";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.typeOfSignature("D?Q2F*$");
      Utility.signatureToString("D?Q2F*$");
      Utility.compactClassName("Z~]1(T|>", "D?Q2F*$", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Z~]1(T|>";
      objectArray0[1] = (Object) "Z~]1(T|>";
      objectArray0[2] = (Object) "Z~]1(T|>";
      objectArray0[3] = (Object) "Z~]1(T|>";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "\t";
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      Utility.isSet((byte)7, 7453);
      try { 
        Utility.typeOfSignature("A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = Utility.convertString("{6]5H_%UJ");
      assertEquals("{6]5H_%UJ", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)36;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1846428230), (-1846428230), true);
      assertEquals("0:    newarray\t\t<<illegal type>>\n2:    fconst_0\n3:    ishl\n4:    fload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "@";
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.compactClassName("iD`fS");
      assertEquals("iD`fS", string0);
      
      Utility.getSignature("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iD`fS";
      String string1 = Utility.methodTypeToSignature("iD`fS", stringArray0);
      assertEquals("(LiD`fS;)LiD`fS;", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)90;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-82));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-82));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-2484), 14, true);
      assertEquals("0:    freturn\n1:    dup\n2:    <illegal opcode>\n3:    dup_x1\n", string2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(86);
      Utility.format(86, (-834), false, 'a');
      try { 
        Utility.typeOfSignature("86");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 86
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(112, 112);
      String string0 = "(JhIl8ny,NjD4b-~";
      String string1 = "(";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(JhIl8ny,NjD4b-~", "(", "(JhIl8ny,NjD4b-~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `hIl8ny,NjD4b-~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-95);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 248, 251, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.accessToString(1269);
      Utility.replace("p%;FE0r%c;x0yl,=Y", "9@g:^')bGp", "9@g:^')bGp");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("Expected class `", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-54);
      byte byte0 = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)9;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X3F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X3F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "iconst_4";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("iconst_4", false);
      int int0 = 93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 93, 93, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte) (-11);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1, 216, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22625. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("areturn", (-2309), false, 'e');
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)106;
      byte byte1 = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-14);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 3170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.getSignature("wide");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Lwide;";
      objectArray0[1] = (Object) "wide";
      objectArray0[2] = (Object) "wide";
      objectArray0[3] = (Object) "Lwide;";
      objectArray0[4] = (Object) "wide";
      objectArray0[5] = (Object) "wide";
      objectArray0[6] = (Object) "Lwide;";
      objectArray0[7] = (Object) "Lwide;";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.format(85, 11, false, '-');
      Utility.typeOfSignature("FMQxL");
      Utility.signatureToString("FMQxL");
      try { 
        Utility.methodSignatureArgumentTypes("---------85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ---------85
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("u[|-uzZa]");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)6;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)6;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true, true);
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-116);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1798, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "'~.7F3$^My_wk4qFh\\";
      try { 
        Utility.typeOfSignature("'~.7F3$^My_wk4qFh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '~.7F3$^My_wk4qFh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.compactClassName("U){IbWS", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)113;
      byteArray0[0] = (byte) (-93);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      assertEquals("0:    if_icmpgt\t\t#16066\n3:    lrem\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      Utility.accessToString(91, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)44;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)70, 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 208. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-50);
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0$7c$b9$fdML$3c$ce";
      Utility.methodTypeToSignature("0$7c$b9$fdML$3c$ce", stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2877), (int) (byte)60, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, 18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ret\t\t%18", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.convertString(" methods:\n");
      int int0 = 176;
      int int1 = 186;
      Utility.setBit(176, 186);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes(" methods:\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  methods:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 360, (int) (byte) (-65));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ifne\t\t#-13549", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte)6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)42;
      byte byte0 = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)42, (byte)42);
      Utility.encode(byteArray0, false);
      Utility.clearBit((byte)33, (-338));
      Utility.clearBit(361, (byte)42);
      String string0 = "OFX$T\"K4n~oZ3ocev";
      try { 
        Utility.typeOfSignature("OFX$T\"K4n~oZ3ocev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OFX$T\"K4n~oZ3ocev
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = " arg";
      boolean boolean0 = true;
      Utility.compactClassName(" arg", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 133, 84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(175, 175);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)105;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)105, (-40));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 103, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((-339));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "public protected static synchronized transient interface abstract strictfp synthetic annotation enum");
      Utility.compactClassName("public protected static synchronized transient interface abstract strictfp synthetic annotation enum", "return", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-57);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (-2456), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    sastore
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F2-iyR:YXgEZ'", false);
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)11;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)110;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("4c a3 aa 0b 41 6e", string1);
      
      Utility.compactClassName("org.apache.bcel.classfile.ConstantString", "invokestatic", false);
      String string2 = Utility.compactClassName("j");
      assertEquals("j", string2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-93), (int) (byte)110);
      assertEquals("0:    astore_1\n1:    if_icmpgt\t\t#-22004\n4:    lstore_2\n5:    fdiv\n", string3);
      
      boolean boolean0 = Utility.isSet((byte) (-86), 669);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.compactClassName(":8rgP$X");
      MockPrintStream mockPrintStream0 = new MockPrintStream(":8rgP$X");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ":8rgP$X");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) ":8rgP$X";
      objectArray0[2] = (Object) ":8rgP$X";
      objectArray0[3] = (Object) ":8rgP$X";
      objectArray0[4] = (Object) ":8rgP$X";
      objectArray0[5] = (Object) ":8rgP$X";
      objectArray0[6] = (Object) ":8rgP$X";
      Utility.printArray(printStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.decode("f]sjv$c-`3+", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "%";
      String string1 = "?/OOFE @{";
      String string2 = "=9Dl$^?@dt(CL&)%s";
      Utility.replace("%", "?/OOFE @{", "=9Dl$^?@dt(CL&)%s");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "%";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("=9Dl$^?@dt(CL&)%s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =9Dl$^?@dt(CL&)%s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte)40;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7883, (-1518));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.accessToString(103);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)51;
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong((byte)82);
      constantArray0[1] = (Constant) constantLong1;
      ConstantClass constantClass0 = new ConstantClass(428);
      constantArray0[2] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble(1762.424742955056);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)82, (byte)88);
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.compactClassName("U){IbWS", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpl
         // 1:    istore_3
         // 2:    ireturn
         // 3:    lneg
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)75;
      byteArray0[0] = (byte)75;
      byte byte1 = (byte)42;
      byteArray0[1] = (byte)42;
      byte byte2 = (byte)7;
      byteArray0[2] = (byte)7;
      byte byte3 = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)92;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$nQ$ss7$3d$92i$5c", string0);
      
      Utility.fillup("ifnonnull", (-735), false, '2');
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-110));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(76, 36);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-860));
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-995), (int) (byte)81, false);
      assertEquals("0:    lload_3\n1:    fastore\n2:    dload_0\n3:    drem\n4:    lstore\t\t%61\n6:    i2c\n7:    lmul\n8:    dup2\n", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)45;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-85), (byte)43);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)45, (byte)43);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("", false);
      String string1 = "Z2HUzX`odZ0rvD*w";
      Utility.getSignature("Z2HUzX`odZ0rvD*w");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte)104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    imul
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 500, true);
      assertEquals("0:    nop\n1:    fconst_0\n2:    fstore\t\t%148\n4:    lload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("[]");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[]", "K", "[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.compactClassName("instanceof", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)122;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((-2766), (-573));
      Utility.accessToString((int) (byte)1, true);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$B$5e$H$ff$B$e5$Az");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $B$5e$H$ff$B$e5$Az
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.compactClassName("N", "N", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-95);
      Constant[] constantArray0 = new Constant[7];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-18), 45);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-71));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("N");
      constantArray0[3] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[4] = (Constant) constantString0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[5] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-34), 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 60967. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ie;<HG1}", "Ie;<HG1}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[6];
      mockPrintStream0.print(false);
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "Ie;<HG1}";
      objectArray0[5] = (Object) mockPrintWriter0;
      Utility.printArray(objectArray0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "org.evosuite.runtime.mock.java.io.MockPrintWriter@3c3190e1, org.evosuite.runtime.mock.java.io.MockPrintStream@59e17d94, org.evosuite.runtime.mock.java.io.MockPrintWriter@3c3190e1, /tmp/Ie;<HG1}0Ie;<HG1}, Ie;<HG1}, org.evosuite.runtime.mock.java.io.MockPrintWriter@6df05340");
      Utility.printArray(printWriter0, objectArray0);
      Utility.isSet(1941, 1483);
      Utility.replace("", "checkcast", ")");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "G'b{e^r/U:+E(c Re`]";
      try { 
        Utility.methodSignatureReturnType("G'b{e^r/U:+E(c Re`]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'b{e^r/U:+E(c Re`]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      ConstantPool constantPool0 = null;
      int int0 = 512;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, 512, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.compactClassName("getfield");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(85);
      Utility.format(115, 85, false, ':');
      Object[] objectArray0 = new Object[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::115";
      objectArray0[1] = (Object) "getfield";
      objectArray0[2] = (Object) "getfield";
      objectArray0[3] = (Object) "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::115";
      objectArray0[4] = (Object) "getfield";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getfield");
      objectArray0[5] = (Object) "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::115";
      Utility.printArray(objectArray0, true, true);
      Utility.format(1165, 3585, false, ':');
      Utility.setBit(115, (-3521));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.convertString("\"ATp");
      Utility.accessToString(1);
      Utility.isJavaIdentifierPart('@');
      Utility.decode("x3%$*H", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -120
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.replace("<illegal opcode>", "<illegal opcode>", "<illegal opcode>");
      assertEquals("<illegal opcode>", string0);
      
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)95;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("4$40$c8$3e$e9$j_", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("BootstrapMethods(");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "byte";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "byte";
      Object object1 = new Object();
      objectArray0[3] = object1;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 171;
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(class_index = ");
      char char0 = 'z';
      Utility.format(171, 171, true, 'z');
      try { 
        Utility.typeOfSignature("171zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 171zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "XK<K)EF-";
      Utility.replace("' at index ", "' at index ", "XK<K)EF-");
      Utility.accessToString((-2379));
      Utility.typeOfSignature("Limpdep2;V");
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.typeOfSignature("The wildcard array must not be null");
      Utility.convertString("WvtwV(");
      Utility.compactClassName("The wildcard array must not be null", "The wildcard array must not be null", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "int";
      // Undeclared exception!
      try { 
        Utility.signatureToString("int", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.convertString(")=");
      assertEquals(")=", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) ")=";
      objectArray0[2] = (Object) ")=";
      Utility.printArray(objectArray0, true, true);
      int int0 = Utility.clearBit(885, 219);
      assertEquals(885, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      String string1 = Utility.classOrInterface(108);
      assertEquals("class", string1);
      
      Utility.clearBit(108, 233);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("if_icmpeq\t\t#10335", string2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      Utility.accessToString(192);
      Utility.isSet(91, (-2475));
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble((byte)125);
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble1);
      constantArray0[2] = (Constant) constantDouble2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "/Y}";
      try { 
        Utility.typeOfSignature("/Y}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Y}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte)50;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, 196, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool1.accept(descendingVisitor0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)40;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2803), 358);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(90, 90);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 84, (-1453));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokespecial");
      try { 
        Utility.methodSignatureReturnType("The filter must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)1, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    lload_2
         // 2:    aconst_null
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 68, (-1373));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "mO)&FcA";
      String[] stringArray0 = new String[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qX(J");
      stringArray0[0] = "3*(T";
      stringArray0[1] = "mO)&FcA";
      Utility.methodTypeToSignature("mO)&FcA", stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      byteArray0[0] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 97;
      Utility.accessToString(97);
      try { 
        Utility.typeOfSignature("3*(T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3*(T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.classOrInterface(1084);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-51);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-28), 1796, true);
      try { 
        Utility.typeOfSignature("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "{(h:f$";
      try { 
        Utility.decode("{(h:f$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "RuntimeInvisibleParameterAnnotations";
      Utility.compactClassName("RuntimeInvisibleParameterAnnotations");
      try { 
        Utility.typeOfSignature("RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("lookupswitch", "lookupswitch", false);
      try { 
        Utility.methodSignatureReturnType("KM(+K\"N2/NC,bI,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KM(+K\"N2/NC,bI,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.isSet(2563, 2563);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MrO0 CNM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MrO0 CNM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.typeOfSignature("Bogus");
      Utility.clearBit((byte)8, 32);
      Utility.searchOpcode("Bogus");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9b&=.da";
      stringArray0[1] = "9b&=.da";
      stringArray0[2] = "Bogus";
      stringArray0[3] = "9b&=.da";
      stringArray0[4] = "Bogus";
      stringArray0[5] = "Bogus";
      stringArray0[6] = "9b&=.da";
      Utility.methodTypeToSignature("9b&=.da", stringArray0);
      Utility.classOrInterface((-1417));
      Utility.printArray((Object[]) stringArray0, false);
      Utility.isSet(8, (-3072));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Bogus", "Bogus", "Lr#uT8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Bogus
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-1);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1257, (byte)45);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 48, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.getSignature("wide");
      assertEquals("Lwide;", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Lwide;";
      objectArray0[1] = (Object) "wide";
      objectArray0[2] = (Object) "wide";
      objectArray0[3] = (Object) "Lwide;";
      objectArray0[4] = (Object) "wide";
      objectArray0[5] = (Object) "wide";
      objectArray0[6] = (Object) "Lwide;";
      objectArray0[7] = (Object) "Lwide;";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("Lwide;, wide, wide, Lwide;, wide, wide, Lwide;, Lwide;", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("f2d", string2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)107;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2123), (int) (byte)84, false);
      String string0 = "ifle";
      Utility.fillup("ifle", (byte) (-118), false, 'g');
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-2888));
      Utility.compactClassName("&{,n7", false);
      Utility.searchOpcode("static final synchronized transient abstract synthetic annotation enum");
      Utility.compactClassName("\t\t<", "&{,n7", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(16);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)85;
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)40;
      byte byte1 = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("\t(wide)");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-123), (byte)1);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature("cuGE");
      String string0 = "dup2_x2";
      boolean boolean0 = false;
      int int0 = (-2652);
      int int1 = 57;
      Attribute[] attributeArray0 = new Attribute[2];
      int int2 = (-298);
      int int3 = 84;
      CodeException[] codeExceptionArray0 = new CodeException[2];
      CodeException codeException0 = new CodeException(byteSequence0);
      codeExceptionArray0[0] = codeException0;
      CodeException codeException1 = null;
      try {
        codeException1 = new CodeException(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[bG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "U!/g*c27jZu?D=2L\\";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U!/g*c27jZu?D=2L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U!/g*c27jZu?D=2L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      String string0 = "NewObject";
      try { 
        Utility.typeOfSignature("NewObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NewObject
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-58));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(744, (byte)71);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifnull\t\t#18233", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)63;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 81, false);
      try { 
        Utility.methodSignatureReturnType("0:    ior\n1:    <illegal opcode>\n2:    istore_2\n3:    lstore_3\n4:    lstore_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    ior
         // 1:    <illegal opcode>
         // 2:    istore_2
         // 3:    lstore_3
         // 4:    lstore_0
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x/yM~_F9Sf0up|N";
      stringArray0[1] = "ret";
      stringArray0[2] = "ret";
      stringArray0[3] = "ret";
      stringArray0[4] = "g^k{.wCHtF_q";
      String string0 = Utility.methodTypeToSignature("ret", stringArray0);
      assertEquals("(Lx/yM~_F9Sf0up|N;Lret;Lret;Lret;Lg^k{/wCHtF_q;)Lret;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)11;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.classOrInterface((byte)76);
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("WGPfQ#,U~", true);
      assertEquals("WGPfQ#,U~", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-521), (int) (byte) (-24));
      assertEquals("0:    lload_2\n1:    bipush\t\t0\n3:    areturn\n4:    astore_1\n5:    <illegal opcode>\n6:    fconst_0\n", string3);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.classOrInterface(91);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("##");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ##
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.searchOpcode("GE)hSfn:&KCg N,w");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)93;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 255, (int) (byte)93, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "(2 J!h";
      try { 
        Utility.typeOfMethodSignature("(2 J!h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (2 J!h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "(Z,|ACDWuzFEL.Y";
      try { 
        Utility.methodSignatureArgumentTypes("(Z,|ACDWuzFEL.Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,|ACDWuzFEL.Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = Utility.compactClassName("org.apache.commons.io.filefilter.DelegateFileFilter", "", true);
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)31;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("41 10 ac 8d 3c 1f", string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("XYhZMV^zI}909k", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XYhZMV^zI}909k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.format(4387, 4387, false, 'T');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)113;
      Utility.encode(byteArray0, false);
      Utility.setBit((byte)58, (-507));
      Utility.compactClassName("$c9$c6$e5$86$S$3a$e9q", true);
      Utility.signatureToString("I$F");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("jsr_w\t\t#-958036462", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((-925));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-65));
      constantDouble0.clone();
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.accessToString(7, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)123, 512, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[0] = (Constant) constantUtf8_0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantClass constantClass0 = new ConstantClass(40);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(70, (byte) (-118));
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.accessToString(201);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-47);
      byte byte0 = (byte)126;
      byteArray0[2] = (byte)126;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-106);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte)89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)83;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)83, (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-67);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte)73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    lshr
         // 2:    dreturn
         // 3:    fcmpg
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[A(X/";
      stringArray0[1] = "[A(X/";
      stringArray0[2] = "[A(X/";
      stringArray0[3] = "[A(X/";
      stringArray0[4] = "[A(X/";
      stringArray0[5] = "[A(X/";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[A(X/", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [A(X/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)80;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-3);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      byteSequence0.mark((byte)0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      constantFloat0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 48;
      Utility.classOrInterface(48);
      int int1 = (-1);
      Utility.isSet(48, (-1));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "class";
      stringArray0[1] = "long";
      String string0 = "SnjyG8\"aK>/]PL%";
      stringArray0[2] = "SnjyG8\"aK>/]PL%";
      Utility.methodTypeToSignature("long", stringArray0);
      String string1 = "Rg~)Xq`/P";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rg~)Xq`/P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rg~)Xq`/P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.clearBit(57, 57);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)126;
      byteArray0[0] = (byte)126;
      byte byte1 = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "final";
      Utility.methodTypeToSignature("final", stringArray0);
      Utility.isJavaIdentifierPart('w');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(170, 123);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "LD";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LD", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.signatureToString("SourceFile: ", false);
      int int0 = Utility.setBit(1, 67);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      Utility.searchOpcode("{java.lang.Object@7c4fc8f3, java.lang.Object@750d52f8}");
      Utility.classOrInterface((-2583));
      Utility.isSet((-2583), (short) (-1));
      Utility.classOrInterface((-2583));
      Utility.isJavaIdentifierPart('');
      Utility.searchOpcode("if_icmpgt");
      Utility.searchOpcode("if_icmpge");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-13);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 2160, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "(bytes = ";
      Utility.replace("(bytes = ", "arraylength", "<-");
      Utility.isSet(255, 255);
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.isJavaIdentifierPart('=');
      // Undeclared exception!
      try { 
        Utility.signatureToString("W5'a#H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W5'a#H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "9`*E73:m2";
      try { 
        Utility.typeOfSignature("9`*E73:m2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9`*E73:m2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('*');
      int int0 = 79;
      Utility.isSet(79, 79);
      Utility.accessToString(35, false);
      String string0 = "We)31+R";
      Utility.compactClassName("We)31+R", false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    lstore_2
         // 2:    dload_2
         // 3:    aload_2
         // 4:    aload_2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("NJ+", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NJ+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NJ+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-20);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 229, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")UNk><8 Qrd\"Na26:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )UNk><8 Qrd\"Na26:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("athrow");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "athrow");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)68;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) printStream0;
      objectArray0[3] = (Object) (byte)68;
      Utility.printArray(printStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-jvOaes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -jvOaes
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('~');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, true, false);
      Utility.compactClassName("float");
      try { 
        Utility.methodSignatureReturnType("P&#I/7,A#Pm5A@or2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P&#I/7,A#Pm5A@or2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.signatureToString("DeQ^V?_}[G5bh><=H1", false);
      assertEquals("double", string0);
      
      Utility.compactClassName("java.lang.f2i", "java.lang.f2i", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "double";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("DeQ^V?_}[G5bh><=H1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[G5bh><=H1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "(),|A>DWuzFYL.Y";
      Utility.methodSignatureArgumentTypes("(),|A>DWuzFYL.Y");
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.convertString("double");
      Utility.clearBit((-1650), (-1650));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-744), (-821), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dsub
         // 1:    idiv
         // 2:    lload_2
         // 3:    dload_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-1984512878), (-1984512878), true, 'W');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, 1695);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "ZGrOV#L{k@I";
      String string1 = "static";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ZGrOV#L{k@I", "ZGrOV#L{k@I", "static", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ZGrOV#L{k@I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.compactClassName("zk-/D", false);
      Utility.format(187, 191, true, '.');
      try { 
        Utility.typeOfSignature("%j`'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %j`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(2043);
      Utility.isJavaIdentifierPart('@');
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("YO^@YmaR!>vQ:;` ]^\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YO^@YmaR!>vQ:;` ]^\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)91;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte) (-116);
      byteArray1[4] = (byte) (-116);
      byteArray1[5] = (byte) (-116);
      byteArray1[6] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray1, constantPool0, (-1845700615), (-975));
      assertEquals("0:    f2l\n1:    istore_3\n2:    dastore\n3:    f2l\n4:    f2l\n5:    f2l\n6:    dup_x2\n", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.compactClassName("instanceof");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "instanceof";
      Utility.printArray(objectArray0, true);
      Utility.isJavaIdentifierPart('\'');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "instanceof";
      stringArray0[1] = "{instanceof}";
      stringArray0[2] = "instanceof";
      stringArray0[3] = "instanceof";
      stringArray0[4] = "instanceof";
      Utility.methodTypeToSignature("instanceof", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)72;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-85));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodType0.copy();
      constantMethodType0.setDescriptorIndex((byte) (-85));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 238, 96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char char0 = 'P';
      Utility.format(6, (-3133), true, 'P');
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.getSignature("7OLzsbvO!@MM%*!'GF");
      Utility.isSet(1195, 3132);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L7OLzsbvO!@MM%*!'GF;");
      Utility.isJavaIdentifierPart('3');
      Utility.clearBit(992, 2705);
      try { 
        Utility.typeOfSignature("7OLzsbvO!@MM%*!'GF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7OLzsbvO!@MM%*!'GF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.compactClassName("athrow");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "athrow";
      objectArray0[2] = (Object) "athrow";
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2f", string1);
      
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
      
      Utility.replace("java.lang.Object@50cd6ab3, athrow, athrow", "i2f", "J");
      String string2 = Utility.compactClassName("Warning: Padding byte != 0 in ", "J", false);
      String string3 = Utility.classOrInterface((byte) (-122));
      assertEquals("interface", string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      String string4 = Utility.replace("Warning: Padding byte != 0 in ", "java.lang.@9:!oG", "jmH]");
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"'3_v|2URi[\"VxxK|d=");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-3);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("lstore");
      Utility.isJavaIdentifierPart('4');
      Utility.methodSignatureReturnType("F>tk");
      Utility.isSet(102, 102);
      Utility.compactClassName("lstore", true);
      Utility.fillup("lstore", 102, false, '|');
      Utility.format((byte) (-3), 95, true, '4');
      // Undeclared exception!
      try { 
        Utility.signatureToString("-!p#h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-!p#h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.accessToString(1317, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)12;
      Utility.encode(byteArray0, false);
      Utility.decode("$L$P$o$a5$99H$dd$88$M", false);
      Utility.compactClassName("^/$w@[IZv}c~2edi4~@", "ifnull", false);
      try { 
        Utility.typeOfMethodSignature("^.$w@[IZv}c~2edi4~@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^.$w@[IZv}c~2edi4~@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "M'u[L&6'h*SuATNyc]'";
      try { 
        Utility.typeOfSignature("M'u[L&6'h*SuATNyc]'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M'u[L&6'h*SuATNyc]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "(W";
      Utility.replace("(W", "(W", "(W");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[1] = (byte) (-13);
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("28 f3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 28 f3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      String string0 = "OK6RKDnRQV&5";
      // Undeclared exception!
      try { 
        Utility.signatureToString("OK6RKDnRQV&5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OK6RKDnRQV&5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)65;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte)65);
      Utility.compactClassName("class", false);
      String string0 = "?>...";
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.searchOpcode("java.lang.");
      Utility.replace("java.lang.", "java.lang.", "java.lang.");
      Utility.isSet((short) (-1), 325);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-45);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(1173);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantLong constantLong0 = new ConstantLong((-3270L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(122, (byte) (-40));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 572, (int) (byte) (-62), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = ")\t";
      Utility.getSignature(")\t");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Utility.signatureToString("JuGqR^GU");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("long", stringArray0);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("p1+'x]'nBg*B*", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&[YD&hP5!5i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &[YD&hP5!5i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      MockFile mockFile0 = new MockFile("o},xZ7f#Y\"e");
      mockFile0.toURI();
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print("{\"java.lang.Object@7dfdac4\", \"java.lang.Object@7320e717\", \"java.lang.Object@53d28bcb\", \"java.lang.Object@71108288\", \"java.lang.Object@8e07f94\", \"java.lang.Object@7c0c29c0\", \"java.lang.Object@3b477959\"}");
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      short short0 = Utility.searchOpcode("V");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (short) (-1));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      int int0 = Utility.clearBit((short) (-1), (-1264));
      assertEquals((-65537), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-90);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "H=jwZQ?in2";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H=jwZQ?in2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H=jwZQ?in2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.compactClassName("lor", "lor", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte) (-12), false);
      assertEquals("0:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.convertString("8(P+3'WU3dV.`");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)42;
      Utility.toHexString(byteArray0);
      String string0 = "h{l.4*7GeN";
      // Undeclared exception!
      try { 
        Utility.signatureToString("h{l.4*7GeN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `h{l.4*7GeN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "Y?OY4(rG8z";
      try { 
        Utility.typeOfSignature("Y?OY4(rG8z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y?OY4(rG8z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.compactClassName("java.lang.=adQe");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = " arg";
      String[] stringArray0 = new String[4];
      stringArray0[0] = " arg";
      stringArray0[1] = " arg";
      stringArray0[2] = " arg";
      stringArray0[3] = " arg";
      Utility.methodTypeToSignature(" arg", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)40;
      byte byte0 = (byte) (-48);
      byteArray0[4] = (byte) (-48);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((ConstantMethodHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.convertString("?\"NJo_72m#-%~8E");
      String string0 = "5+^R%u`D#/fYOT";
      String string1 = "byte";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("5+^R%u`D#/fYOT", "?\"NJo_72m#-%~8E", "byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5+^R%u`D#/fYOT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("o45|s?o-SR|M");
      // Undeclared exception!
      try { 
        Utility.signatureToString("o45|s?o-SR|M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `o45|s?o-SR|M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "java.lang.WGaa6&";
      Utility.convertString("java.lang.WGaa6&");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.WGaa6&");
      byteArray0[0] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = 85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 193, 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid method signature: ", true);
      assertEquals("int", string0);
      
      boolean boolean0 = Utility.isSet(1587, 1264);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('9');
      assertFalse(boolean1 == boolean0);
      
      int int0 = Utility.clearBit(970, 1264);
      assertEquals(970, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "E\"\"Dh:G2?Sa^";
      // Undeclared exception!
      try { 
        Utility.signatureToString("E\"\"Dh:G2?Sa^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E\"\"Dh:G2?Sa^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "BiZr~N(RT[aN";
      byte[] byteArray0 = Utility.decode("BiZr~N(RT[aN", false);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string1 = "EYmWcQ3";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("EYmWcQ3", ")mw?wM~S-@4`sp^F46", "BiZr~N(RT[aN", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EYmWcQ3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = (-1344);
      Utility.accessToString((-1344), true);
      String string0 = ", low = ";
      String string1 = "lconst_1";
      boolean boolean0 = false;
      int int1 = 1062;
      int int2 = 189;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-114);
      byte byte0 = (byte)116;
      byteArray0[4] = (byte)116;
      byte byte1 = (byte)119;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-80);
      CodeException[] codeExceptionArray0 = new CodeException[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)116, (byte)116);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.typeOfSignature("Signature");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Signature", "\t\t%", "\t\t%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_2", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.signatureToString("CONSTANT_Methodref", false);
      Utility.isJavaIdentifierPart('!');
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.compactClassName("f]'93#Y _+U2R'D");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "f]'93#Y _+U2R'D";
      objectArray0[1] = (Object) "f]'93#Y _+U2R'D";
      objectArray0[2] = (Object) "f]'93#Y _+U2R'D";
      objectArray0[3] = (Object) "f]'93#Y _+U2R'D";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "f]'93#Y _+U2R'D";
      objectArray0[6] = (Object) "f]'93#Y _+U2R'D";
      objectArray0[7] = (Object) "f]'93#Y _+U2R'D";
      objectArray0[8] = (Object) "f]'93#Y _+U2R'D";
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-5269));
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("P&#I/7,A#Pm5A@or2", "P&#I/7,A#Pm5A@or2", true);
      Utility.clearBit(89, 89);
      try { 
        Utility.typeOfSignature("P&#I.7,A#Pm5A@or2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P&#I.7,A#Pm5A@or2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "invokespecial";
      try { 
        Utility.typeOfSignature("invokespecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokespecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((-2853), 1892);
      Utility.isSet(1464, 1892);
      Utility.compactClassName("@9:!oG", true);
      Utility.isSet(212, (-897));
      String string0 = "9";
      Utility.getSignature("9");
      Utility.compactClassName("invokestatic", false);
      try { 
        Utility.typeOfSignature("(descriptor_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (descriptor_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      short short0 = Utility.searchOpcode("lxor");
      assertEquals((short)131, short0);
      
      String string0 = Utility.accessToString((-1540));
      assertEquals("protected static final synchronized volatile transient native strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.compactClassName("lxor", false);
      assertEquals("lxor", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lxor";
      stringArray0[1] = "lxor";
      stringArray0[2] = "protected static final synchronized volatile transient native strictfp synthetic annotation enum";
      stringArray0[3] = "protected static final synchronized volatile transient native strictfp synthetic annotation enum";
      stringArray0[4] = "protected static final synchronized volatile transient native strictfp synthetic annotation enum";
      stringArray0[5] = "protected static final synchronized volatile transient native strictfp synthetic annotation enum";
      stringArray0[6] = "lxor";
      stringArray0[7] = "lxor";
      stringArray0[8] = "lxor";
      String string2 = Utility.methodTypeToSignature("protected static final synchronized volatile transient native strictfp synthetic annotation enum", stringArray0);
      assertEquals("(Llxor;Llxor;Lprotected;Lprotected;Lprotected;Lprotected;Llxor;Llxor;Llxor;)Lprotected;", string2);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$JavaReader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fconst_2", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "putfield";
      Utility.methodTypeToSignature("putfield", (String[]) null);
      try { 
        Utility.typeOfMethodSignature("KH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = Utility.clearBit(93, 93);
      assertEquals(93, int0);
      
      String string0 = Utility.fillup("", 238, false, 'R');
      String string1 = Utility.replace("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "Synthetic attribute with length > 0", " ZB_,SC");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString(238);
      assertEquals("private protected static synchronized volatile transient", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-121);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string3 = Utility.methodTypeToSignature("", (String[]) null);
      assertEquals("()L;", string3);
      
      String string4 = Utility.compactClassName("WGaa6&", true);
      assertEquals("WGaa6&", string4);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.isSet(1024, 1024);
      Utility.searchOpcode("u");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -6
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$]f0z%.6oZ;");
      String string0 = "H}/2g}n{";
      Utility.searchOpcode("H}/2g}n{");
      Utility.replace("$]f0z%.6oZ;", "$]f0z%.6oZ;", "$]f0z%.6oZ;");
      try { 
        Utility.methodSignatureArgumentTypes("H}/2g}n{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H}/2g}n{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)118, 29, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 56694. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WGPfQ#,U~M~C~");
      Utility.accessToString(104, true);
      Utility.format(104, 104, false, ':');
      Utility.compactClassName("WGPfQ#,U~M~C~", true);
      Utility.isSet((-288), 21);
      MockFile mockFile0 = new MockFile("java.lang.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      char[] charArray0 = new char[0];
      mockPrintStream2.print(charArray0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        mockPrintStream2.format(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('C');
      Utility.searchOpcode("=kQE?ec");
      // Undeclared exception!
      try { 
        Utility.signatureToString("=kQE?ec", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=kQE?ec'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.methodTypeToSignature("o},xZ7f#Y\"e", (String[]) null);
      String string0 = "aECRTNj#R`\\\"$[>[?ek";
      // Undeclared exception!
      try { 
        Utility.getSignature("aECRTNj#R`\"$[>[?ek");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[>[?ek
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)45;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      constantPool1.toString();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-2), (int) (byte)57);
      Utility.convertString("ufs~@");
      try { 
        Utility.decode("_6", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.setBit(138, 138);
      boolean boolean0 = true;
      try { 
        Utility.decode("$`z/2>KG4(-lY", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.fillup("P]9b<rN|Nd", (byte)10, true, 'B');
      assertEquals("P]9b<rN|Nd", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "P]9b<rN|Nd";
      objectArray0[1] = (Object) "P]9b<rN|Nd";
      objectArray0[2] = (Object) "Illegally nested brackets:";
      objectArray0[3] = (Object) "P]9b<rN|Nd";
      objectArray0[4] = (Object) "P]9b<rN|Nd";
      objectArray0[5] = (Object) "Illegally nested brackets:";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertEquals("P]9b<rN|Nd, P]9b<rN|Nd, Illegally nested brackets:, P]9b<rN|Nd, P]9b<rN|Nd, Illegally nested brackets:", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "class", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "java.lang.";
      Utility.searchOpcode("java.lang.");
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.getSignature("java.lang.");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Ljava/lang/;";
      objectArray0[1] = (Object) "java.lang.";
      objectArray0[2] = (Object) "Ljava/lang/;";
      objectArray0[3] = (Object) "java.lang.";
      objectArray0[4] = (Object) "Ljava/lang/;";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "java.lang.";
      objectArray0[7] = (Object) "java.lang.";
      Utility.printArray(objectArray0, true);
      Utility.classOrInterface(83);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      Utility.compactClassName("interface");
      String string0 = ".1i|J!R!7]D?4]>=J";
      boolean boolean0 = true;
      Utility.compactClassName(".1i|J!R!7]D?4]>=J", "Ljava/lang/;", true);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("interface", 438, true, 'i');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte) (-11);
      Utility.toHexString(byteArray0);
      Utility.format((byte)86, 16, false, 'w');
      Utility.convertString("n=/zOW3$gT^kx-");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 75
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = 1918;
      Utility.accessToString(1918);
      try { 
        Utility.methodSignatureArgumentTypes("private protected static final synchronized volatile native interface abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static final synchronized volatile native interface abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `return'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "\t";
      MockPrintStream mockPrintStream0 = new MockPrintStream("\t");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "\t";
      objectArray0[4] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.compactClassName("WvNG||<;e}~Mb'^,o'");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)8;
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString((byte)0);
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Synthetic");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(dataInputStream0);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-88), (-1859));
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantString constantString1 = new ConstantString(dataInputStream0);
      constantArray0[4] = (Constant) constantString1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("WvNG||<;e}~Mb'^,o'");
      constantArray0[5] = (Constant) constantUtf8_2;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte)8, (byte) (-7));
      constantArray0[6] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3711, (-88), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)94;
      byteArray0[0] = (byte)94;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-87);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      String string0 = "";
      Utility.compactClassName("", "", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "impdep2";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = "$l$8b$I$A$A$A$A$A$A$A";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.accessToString((int) (byte)94);
      Utility.methodSignatureToString("(Limpdep2;L$l$8b$I$A$A$A$A$A$A$A;L$l$8b$I$A$A$A$A$A$A$A;)L;", "$l$8b$I$A$A$A$A$A$A$A", "impdep2", false);
      Utility.printArray((Object[]) stringArray0, false, false);
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("impdep2  $l$8b$I$A$A$A$A$A$A$A(impdep2 arg1, $l$8b$I$A$A$A$A$A$A$A arg2, $l$8b$I$A$A$A$A$A$A$A arg3)", "private protected static final volatile", "$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2  $l$8b$I$A$A$A$A$A$A$A(impdep2 arg1, $l$8b$I$A$A$A$A$A$A$A arg2, $l$8b$I$A$A$A$A$A$A$A arg3)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = ", ";
      Utility.replace(">[>|^1k", ", ", ", ");
      String string1 = "VV";
      Utility.typeOfSignature("VV");
      Utility.methodSignatureReturnType("VV");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.accessToString(182, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)77;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)87;
      Utility.encode(byteArray0, true);
      MockFile mockFile0 = new MockFile("invokeinterface", "$l$8b$I$A$A$A$A$A$A$A");
      String string0 = "java.lang.";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "java.lang.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // java.lang.
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.accessToString(68);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-113);
      objectArray0[1] = (Object) (byte)60;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte) (-113);
      objectArray0[4] = (Object) (byte)59;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (byte)59;
      objectArray0[7] = (Object) (byte) (-62);
      objectArray0[8] = (Object) (byte)30;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)65;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5IbN433=~");
      byteArray0[3] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup("5IbN433=~", (-1095), false, '6');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">?l]t|0h#/l9: :*B", "{gG", "qq(mOJqs", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >?l]t|0h#/l9: :*B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-90);
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1395, 1151);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2847, 34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.compactClassName("fastore");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "fastore";
      objectArray0[1] = (Object) "fastore";
      objectArray0[2] = (Object) "fastore";
      objectArray0[3] = (Object) "fastore";
      objectArray0[4] = (Object) "fastore";
      objectArray0[5] = (Object) "fastore";
      objectArray0[6] = (Object) "fastore";
      objectArray0[7] = (Object) "fastore";
      objectArray0[8] = (Object) "fastore";
      Utility.printArray(objectArray0);
      Utility.accessToString(88, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("fastore", "static final volatile", "static final volatile");
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
