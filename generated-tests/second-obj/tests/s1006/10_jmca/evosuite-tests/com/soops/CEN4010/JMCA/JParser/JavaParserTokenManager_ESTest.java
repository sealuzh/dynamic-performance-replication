/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:51:54 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-3828), (byte)74, 100);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(100);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 100. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)12, (byte)12, (byte)12);
      byteArrayInputStream0.skip((-253L));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 12, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayInputStream0.skip(1L);
      byteArrayInputStream1.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)33, (byte)33);
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(33, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 4096, 3720, (byte)70);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      Token.newToken(3720);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 4096, column 3720.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[3] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 14, 'a', 14);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      
      javaCharStream0.bufsize = 98;
      assertEquals(98, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayInputStream0.skip(15);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1136, (byte)12);
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(14, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byte byte0 = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-58);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-58), 591, (byte)42);
      byteArrayInputStream0.skip((-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byteArrayInputStream0.reset();
      javaParserTokenManager0.getNextToken();
      byteArrayInputStream0.reset();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 2512);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2512. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(20, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)67, (byte)67, 15);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(20, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      byteArrayInputStream0.reset();
      assertEquals(20, byteArrayInputStream0.available());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(68, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(67, token0.beginColumn);
      assertEquals(67, token0.endLine);
      assertEquals(67, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals("CC", token0.toString());
      assertNotNull(token0);
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-58);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-58), (byte) (-58), (byte)42);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-57), token0.endColumn);
      assertEquals(103, token0.kind);
      assertEquals((-58), token0.beginLine);
      assertEquals((-57), token0.beginColumn);
      assertEquals((-58), token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-58), javaCharStream0.getBeginLine());
      assertEquals((-58), javaCharStream0.getEndLine());
      assertEquals((-57), javaCharStream0.getColumn());
      assertEquals((-58), javaCharStream0.getLine());
      assertEquals((-57), javaCharStream0.getBeginColumn());
      assertEquals((-57), javaCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      assertEquals(0, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token1.kind);
      assertEquals((-58), token1.beginLine);
      assertEquals((-57), token1.beginColumn);
      assertEquals((-57), token1.endColumn);
      assertEquals((-58), token1.endLine);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-58), javaCharStream0.getBeginLine());
      assertEquals((-58), javaCharStream0.getEndLine());
      assertEquals((-57), javaCharStream0.getColumn());
      assertEquals((-58), javaCharStream0.getLine());
      assertEquals((-57), javaCharStream0.getBeginColumn());
      assertEquals((-57), javaCharStream0.getEndColumn());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(103, token2.kind);
      assertEquals((-58), token2.beginLine);
      assertEquals((-56), token2.beginColumn);
      assertEquals((-56), token2.endColumn);
      assertEquals((-58), token2.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("*", token2.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-58), javaCharStream0.getBeginLine());
      assertEquals((-58), javaCharStream0.getEndLine());
      assertEquals((-56), javaCharStream0.getColumn());
      assertEquals((-58), javaCharStream0.getLine());
      assertEquals((-56), javaCharStream0.getEndColumn());
      assertEquals((-56), javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)32, (byte)42, (byte)42, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-58));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -58. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)59, (-229), 1762);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      long long0 = byteArrayInputStream0.skip(15);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5L, long0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      byteArrayInputStream0.reset();
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(59, token0.beginLine);
      assertEquals(59, token0.endLine);
      assertEquals((-227), token0.beginColumn);
      assertEquals((-227), token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals((-227), javaCharStream0.getBeginColumn());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals((-227), javaCharStream0.getEndColumn());
      assertEquals((-227), javaCharStream0.getColumn());
      assertEquals("L", token0.toString());
      assertNotNull(token0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertNotNull(charsetDecoder0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertNotNull(inputStreamReader0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertNotNull(lineNumberReader0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      javaCharStream0.ReInit((Reader) lineNumberReader0, (int) (byte)59, (int) (byte)59, 230);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1136, (byte)12);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)76, (byte)0, (byte)0}, byteArray1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, int0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream1);
      assertEquals(6, byteArrayInputStream1.available());
      assertNotNull(inputStreamReader0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.lengthOfMatch = 15;
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("F", token0.toString());
      assertNotNull(token0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)76;
      byteArray0[3] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)76, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1437), (byte)102);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)76, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)76, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(102, token0.beginColumn);
      assertEquals(103, token0.endColumn);
      assertEquals((-1437), token0.endLine);
      assertEquals((-1437), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1437), javaCharStream0.getEndLine());
      assertEquals((-1437), javaCharStream0.getLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals((-1437), javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals("CC", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)76, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(105, token1.beginColumn);
      assertEquals(106, token1.endColumn);
      assertEquals((-1437), token1.beginLine);
      assertEquals((-1437), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1437), javaCharStream0.getEndLine());
      assertEquals((-1437), javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals((-1437), javaCharStream0.getBeginLine());
      assertEquals("fL", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)76, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)76, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("yxD2aj<MeZX&,[@:h^3");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader(stringReader0, (-1437));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)73;
      byteArray0[3] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-65), 32, (byte)67);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1179, 4, (byte)12);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals("CC", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(4, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(5, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(5, javaCharStream2.getEndColumn());
      assertEquals("fI", token1.toString());
      assertNotNull(token1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(4, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(5, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(5, javaCharStream2.getEndColumn());
      assertEquals("CC", token0.toString());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(token0, token1);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(4, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(5, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(5, javaCharStream2.getEndColumn());
      assertEquals("fI", token1.toString());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)102, (byte)73, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      StringReader stringReader0 = new StringReader("[XL\"dBkyWF0~_o}XJ");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 67, (byte)50, 67);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 67, 200);
      assertEquals((-60), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = byteArrayInputStream0.skip(1320L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-60L), long0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-60), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(50, token0.endColumn);
      assertEquals(81, token0.kind);
      assertEquals(67, token0.endLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(67, token0.beginLine);
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals("[", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals((-60), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(52, token1.endColumn);
      assertEquals(51, token1.beginColumn);
      assertEquals(67, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(67, token1.endLine);
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals("XL", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o7#Nk");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)40, (byte)40, (byte)40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.beginColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(41, token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals("o7", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      
      String string0 = inputStreamReader0.getEncoding();
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(string0);
      assertEquals("ASCII", string0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArrayInputStream0.reset();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2879), 1945);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2879), token1.beginLine);
      assertEquals(1945, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-2879), token1.endLine);
      assertEquals(1945, token1.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2879), javaCharStream0.getLine());
      assertEquals((-2879), javaCharStream0.getBeginLine());
      assertEquals(1945, javaCharStream0.getBeginColumn());
      assertEquals(1945, javaCharStream0.getColumn());
      assertEquals(1945, javaCharStream0.getEndColumn());
      assertEquals((-2879), javaCharStream0.getEndLine());
      assertEquals("W", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      
      token0.specialToken = token1;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2879), javaCharStream0.getLine());
      assertEquals((-2879), javaCharStream0.getBeginLine());
      assertEquals(1945, javaCharStream0.getBeginColumn());
      assertEquals(1945, javaCharStream0.getColumn());
      assertEquals(1945, javaCharStream0.getEndColumn());
      assertEquals((-2879), javaCharStream0.getEndLine());
      assertNull(token0.toString());
      assertEquals("W", token1.toString());
      assertEquals("W", token0.specialToken.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2879), javaCharStream0.getLine());
      assertEquals((-2879), javaCharStream0.getBeginLine());
      assertEquals(1945, javaCharStream0.getBeginColumn());
      assertEquals(1945, javaCharStream0.getColumn());
      assertEquals(1945, javaCharStream0.getEndColumn());
      assertEquals((-2879), javaCharStream0.getEndLine());
      assertNull(token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token1);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[3] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 2033, 20, (byte)2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream1.reset();
      assertEquals(7, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = Token.newToken(20);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2033, token1.beginLine);
      assertEquals(2033, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(20, token1.beginColumn);
      assertEquals(20, token1.endColumn);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(2033, javaCharStream0.getBeginLine());
      assertEquals(2033, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(2033, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals("T", token1.toString());
      assertNotNull(token1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(2033, javaCharStream0.getBeginLine());
      assertEquals(2033, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(2033, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[2] = (byte)49;
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', '3'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)49, 637, (byte)12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', '3'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', '3'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, token0.beginLine);
      assertEquals(638, token0.endColumn);
      assertEquals(637, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(49, token0.endLine);
      assertEquals(638, javaCharStream0.getEndColumn());
      assertEquals(637, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(638, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals("e3", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', '3'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      try { 
        charArrayReader0.read(charArray0, 1809, 1809);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-3839), 43, 100);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(43, token0.endColumn);
      assertEquals((-3839), token0.beginLine);
      assertEquals((-3839), token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(43, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals((-3839), javaCharStream0.getEndLine());
      assertEquals((-3839), javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals((-3839), javaCharStream0.getLine());
      assertEquals("1", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals((-3839), token1.beginLine);
      assertEquals(43, token1.endColumn);
      assertEquals(43, token1.beginColumn);
      assertEquals((-3839), token1.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals((-3839), javaCharStream0.getEndLine());
      assertEquals((-3839), javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals((-3839), javaCharStream0.getLine());
      assertEquals("1", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)50, (-1078), (byte)50);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1078), token0.beginColumn);
      assertEquals(50, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(50, token0.beginLine);
      assertEquals((-1077), token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals((-1078), javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals((-1077), javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals((-1077), javaCharStream0.getEndColumn());
      assertEquals("22", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'e', 'e'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1303, 1303, 1303);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'3', 'e', 'e'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'3', 'e', 'e'}, charArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = Token.newToken((-1500));
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(1303, token1.beginLine);
      assertEquals(1303, token1.endColumn);
      assertEquals(1303, token1.beginColumn);
      assertEquals(1303, token1.endLine);
      assertEquals(1303, javaCharStream0.getColumn());
      assertEquals(1303, javaCharStream0.getLine());
      assertEquals(1303, javaCharStream0.getBeginColumn());
      assertEquals(1303, javaCharStream0.getEndColumn());
      assertEquals(1303, javaCharStream0.getBeginLine());
      assertEquals(1303, javaCharStream0.getEndLine());
      assertEquals("3", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'3', 'e', 'e'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1303, javaCharStream0.getColumn());
      assertEquals(1303, javaCharStream0.getLine());
      assertEquals(1303, javaCharStream0.getBeginColumn());
      assertEquals(1303, javaCharStream0.getEndColumn());
      assertEquals(1303, javaCharStream0.getBeginLine());
      assertEquals(1303, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'3', 'e', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)0, (-2355));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("k", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.jjimageLen = (-4);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      Token token2 = Token.newToken(0);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("k", token0.toString());
      assertFalse(token0.equals((Object)token2));
      assertNotSame(token0, token2);
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', '+', '+', 'e', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 14, '+', 14);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'+', '+', '+', 'e', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'+', '+', '+', 'e', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(99, token0.kind);
      assertEquals(14, token0.beginLine);
      assertEquals(44, token0.endColumn);
      assertEquals(14, token0.endLine);
      assertEquals(43, token0.beginColumn);
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals("++", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'+', '+', '+', 'e', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(99, token0.kind);
      assertEquals(14, token0.beginLine);
      assertEquals(44, token0.endColumn);
      assertEquals(14, token0.endLine);
      assertEquals(43, token0.beginColumn);
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals("++", token0.toString());
      assertArrayEquals(new char[] {'+', '+', '+', 'e', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'+', '+', '+', 'e', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)49;
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', '+', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)49, 637, (byte)12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', '+', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', '+', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, token0.beginLine);
      assertEquals(637, token0.endColumn);
      assertEquals(49, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(637, token0.beginColumn);
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(637, javaCharStream0.getBeginColumn());
      assertEquals(637, javaCharStream0.getColumn());
      assertEquals(637, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals("e", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', '+', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(637, javaCharStream0.getBeginColumn());
      assertEquals(637, javaCharStream0.getColumn());
      assertEquals(637, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'e', '+', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        charArrayReader0.read(charArray0, 1809, 1809);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 4, (byte)115, (-1031));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(4, token0.beginLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(116, token0.endColumn);
      assertEquals(4, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals("ss", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[2] = (byte)12;
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)0, (-2069), (byte)12);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2068), token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-2069), token0.beginColumn);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-2068), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-2068), javaCharStream0.getEndColumn());
      assertEquals((-2069), javaCharStream0.getBeginColumn());
      assertEquals("ee", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      try { 
        charArrayReader0.read(charArray0, 1809, 1809);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[6] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)92, (byte)0, (byte) (-59), (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)92, 125, (byte)92);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)92, (byte)0, (byte) (-59), (byte)0, (byte)0}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip(137438953472L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9L, long0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)92, (byte)0, (byte) (-59), (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)92, (byte)0, (byte) (-59), (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)92, (byte)0, (byte) (-59), (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 92, column 125.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n|b#&;^|n4.");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 43, 32, 371);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(32, token0.beginColumn);
      assertEquals(32, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(43, token0.beginLine);
      assertEquals(43, token0.endLine);
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals("n", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*5Ny3`M");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)59, 43, (byte)26);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(59, token0.endLine);
      assertEquals(43, token0.endColumn);
      assertEquals(43, token0.beginColumn);
      assertEquals(59, token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(44, token1.beginColumn);
      assertEquals(59, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(59, token1.endLine);
      assertEquals(44, token1.endColumn);
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals("5", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(44, token1.beginColumn);
      assertEquals(59, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(59, token1.endLine);
      assertEquals(44, token1.endColumn);
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals("5", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(59, token2.beginLine);
      assertEquals(59, token2.endLine);
      assertEquals(45, token2.beginColumn);
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals("Ny3", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(59, token0.endLine);
      assertEquals(43, token0.endColumn);
      assertEquals(43, token0.beginColumn);
      assertEquals(59, token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)45;
      byteArray0[0] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)107;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 28, (byte)45, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip((byte)115);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9L, long0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      byteArrayInputStream0.reset();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(28, token2.beginLine);
      assertEquals(28, token2.endLine);
      assertEquals(45, token2.endColumn);
      assertEquals(45, token2.beginColumn);
      assertEquals(102, token2.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("-", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertNotNull(token2);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 5253);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 5253. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)107;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)107, (byte)115, (byte)124, (byte)115, (byte)45, (byte)107}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2531, (byte)124, 2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)107, (byte)115, (byte)124, (byte)115, (byte)45, (byte)107}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)45, (byte)107, (byte)115, (byte)124, (byte)115, (byte)45, (byte)107}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token0.kind);
      assertEquals(124, token0.beginColumn);
      assertEquals(2531, token0.beginLine);
      assertEquals(124, token0.endColumn);
      assertEquals(2531, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2531, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(2531, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals(2531, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)45, (byte)107, (byte)115, (byte)124, (byte)115, (byte)45, (byte)107}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)107, (byte)115, (byte)124, (byte)115, (byte)45, (byte)107}, byteArray0);
      
      StringReader stringReader0 = new StringReader("-");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("'");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        stringReader2.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)12;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)12;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'R', 'R', 'R', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)92, (byte)92, 1993);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'R', 'R', 'R', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'R', 'R', 'R', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token0.endColumn);
      assertEquals(92, token0.endLine);
      assertEquals(92, token0.beginColumn);
      assertEquals(92, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(92, javaCharStream0.getBeginLine());
      assertEquals(92, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals(92, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals("RRR", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'R', 'R', 'R', '\u0000'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("])C%WX8<@;");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "])C%WX8<@;");
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("])C%WX8<@;");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 889, 56);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(82, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(889, token0.beginColumn);
      assertEquals(889, token0.endColumn);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getColumn());
      assertEquals(889, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("]", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getColumn());
      assertEquals(889, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(890, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(890, token1.endColumn);
      assertEquals(890, javaCharStream0.getBeginColumn());
      assertEquals(890, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(890, javaCharStream0.getEndColumn());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(82, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(889, token0.beginColumn);
      assertEquals(889, token0.endColumn);
      assertEquals(890, javaCharStream0.getBeginColumn());
      assertEquals(890, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(890, javaCharStream0.getEndColumn());
      assertEquals("]", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token0, token1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      StringReader stringReader0 = new StringReader("*9");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 5001, (byte)59, 615);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)59, (byte)59);
      assertEquals((-55), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-55), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(59, token0.endColumn);
      assertEquals(5001, token0.endLine);
      assertEquals(5001, token0.beginLine);
      assertEquals(59, token0.beginColumn);
      assertEquals(103, token0.kind);
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(5001, javaCharStream0.getLine());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals(5001, javaCharStream0.getBeginLine());
      assertEquals(5001, javaCharStream0.getEndLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals((-55), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5001, token1.endLine);
      assertEquals(5001, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(60, token1.endColumn);
      assertEquals(60, token1.beginColumn);
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(5001, javaCharStream0.getLine());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(5001, javaCharStream0.getBeginLine());
      assertEquals(5001, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals("9", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YSGM#<P`AnQ y0");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(">\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(62, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 87, 74, (byte)100);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 36, (-1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 36, column 0.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)24}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("\"case\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)24, 49, 42);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(49, token0.beginColumn);
      assertEquals(24, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(24, token0.beginLine);
      assertEquals(54, token0.endColumn);
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getLine());
      assertEquals("\"case\"", token0.toString());
      assertNotNull(token0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      StringReader stringReader0 = new StringReader("CCB`)g& (tX*&dm0aya");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 1361, (-628), 1361);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (-1));
      assertEquals((-1), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-1), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1361, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-626), token0.endColumn);
      assertEquals((-628), token0.beginColumn);
      assertEquals(1361, token0.beginLine);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-628), javaCharStream0.getBeginColumn());
      assertEquals((-626), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-626), javaCharStream0.getEndColumn());
      assertEquals("CCB", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals((-1), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1361, column -625.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[2] = (byte)12;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'V', '3'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 112, 1464, (byte)12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'V', '3'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'V', '3'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(112, token0.endLine);
      assertEquals(1464, token0.beginColumn);
      assertEquals(1465, token0.endColumn);
      assertEquals(112, token0.beginLine);
      assertEquals(112, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getBeginLine());
      assertEquals(1465, javaCharStream0.getColumn());
      assertEquals(1465, javaCharStream0.getEndColumn());
      assertEquals(1464, javaCharStream0.getBeginColumn());
      assertEquals("V3", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'V', '3'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      try { 
        charArrayReader0.read(charArray0, 7, 19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<x");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 889, 889, 889);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaCharStream0.available = 887;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token1.kind);
      assertEquals(889, token1.beginLine);
      assertEquals(889, token1.beginColumn);
      assertEquals(889, token1.endColumn);
      assertEquals(889, token1.endLine);
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(889, javaCharStream0.getColumn());
      assertEquals(889, javaCharStream0.getEndLine());
      assertEquals(889, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getEndColumn());
      assertEquals("<", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(889, token2.beginLine);
      assertEquals(88, token2.kind);
      assertEquals(889, token2.endColumn);
      assertEquals(889, token2.beginColumn);
      assertEquals(889, token2.endLine);
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(889, javaCharStream0.getColumn());
      assertEquals(889, javaCharStream0.getEndLine());
      assertEquals(889, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getEndColumn());
      assertEquals("<", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-245));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -245. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<token of kind 12>");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)63, (byte)0, (byte)9);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(63, token0.endLine);
      assertEquals(63, token0.beginLine);
      assertEquals(91, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(63, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getBeginLine());
      assertEquals(63, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("?", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.jjnewStateCnt = 30;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(63, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getBeginLine());
      assertEquals(63, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token2 = token_GTToken0.specialToken;
      assertNull(token2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(63, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getBeginLine());
      assertEquals(63, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(63, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getBeginLine());
      assertEquals(63, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[2] = (byte)12;
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-71), (-71), (byte)12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-70), token0.endColumn);
      assertEquals(98, token0.kind);
      assertEquals((-71), token0.endLine);
      assertEquals((-71), token0.beginLine);
      assertEquals((-71), token0.beginColumn);
      assertEquals((-71), javaCharStream0.getLine());
      assertEquals((-71), javaCharStream0.getBeginLine());
      assertEquals((-70), javaCharStream0.getEndColumn());
      assertEquals((-71), javaCharStream0.getEndLine());
      assertEquals((-71), javaCharStream0.getBeginColumn());
      assertEquals((-70), javaCharStream0.getColumn());
      assertEquals("&&", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -71, column -69.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)12;
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)12, (-2465));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(12, token0.beginLine);
      assertEquals((-2465), token0.beginColumn);
      assertEquals(12, token0.endLine);
      assertEquals((-2465), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(12, javaCharStream0.getLine());
      assertEquals((-2465), javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals((-2465), javaCharStream0.getEndColumn());
      assertEquals((-2465), javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals("e", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(13);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 13. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)12;
      StringReader stringReader0 = new StringReader("@rsh)uAbBO=%");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 200, 88, (byte)12);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = 70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1632), 70);
      assertEquals(70, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)12}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = byteArrayInputStream0.skip((-1632));
      assertEquals(70, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)12}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(70, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)12}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token0.kind);
      assertEquals(200, token0.beginLine);
      assertEquals(88, token0.beginColumn);
      assertEquals(88, token0.endColumn);
      assertEquals(200, token0.endLine);
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals("@", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals(70, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)12}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(200, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(89, token1.beginColumn);
      assertEquals(200, token1.endLine);
      assertEquals(91, token1.endColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("rsh", token1.toString());
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 2037);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2037. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', 'e', 'e'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1303, 1303, 1303);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\"', 'e', 'e'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\"', 'e', 'e'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1303, column 1306.  Encountered: <EOF> after : \"\\\"ee\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      StringReader stringReader0 = new StringReader("[voYZ3]%W");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(91, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'D', '_'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-573), (byte)73, 59);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'D', '_'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'D', '_'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(73, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-573), token0.beginLine);
      assertEquals((-573), token0.endLine);
      assertEquals(74, token0.endColumn);
      assertEquals((-573), javaCharStream0.getBeginLine());
      assertEquals((-573), javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals((-573), javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals("D_", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'D', '_'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-573), token1.endLine);
      assertEquals(74, token1.endColumn);
      assertEquals(73, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-573), token1.beginLine);
      assertEquals((-573), javaCharStream0.getBeginLine());
      assertEquals((-573), javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals((-573), javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals("D_", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'D', '_'}, charArray0);
      
      StringReader stringReader1 = new StringReader("D_");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(73, token2.beginColumn);
      assertEquals(74, token2.endColumn);
      assertEquals((-573), token2.endLine);
      assertEquals((-573), token2.beginLine);
      assertEquals((-573), javaCharStream0.getBeginLine());
      assertEquals((-573), javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals((-573), javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals("D_", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'D', '_'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-964), (byte)21, (byte)38);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip(28);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3L, long0);
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      JavaCharStream javaCharStream1 = null;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-964), token0.endLine);
      assertEquals((-964), token0.beginLine);
      assertEquals(21, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-964), javaCharStream0.getEndLine());
      assertEquals((-964), javaCharStream0.getLine());
      assertEquals((-964), javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals("u", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      Token token2 = token_GTToken0.specialToken;
      assertNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(105, token3.kind);
      assertEquals(22, token3.beginColumn);
      assertEquals(22, token3.endColumn);
      assertEquals((-964), token3.endLine);
      assertEquals((-964), token3.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("&", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-964), javaCharStream0.getEndLine());
      assertEquals((-964), javaCharStream0.getLine());
      assertEquals((-964), javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token3, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      Token token4 = javaParserTokenManager1.jjFillToken();
      assertEquals((-964), token4.beginLine);
      assertEquals(22, token4.endColumn);
      assertEquals(22, token4.beginColumn);
      assertEquals((-964), token4.endLine);
      assertEquals(0, token4.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("", token4.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals((-964), javaCharStream0.getEndLine());
      assertEquals((-964), javaCharStream0.getLine());
      assertEquals((-964), javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)117, (byte)38, (byte)21}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager((JavaCharStream) null, 15);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 15. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'e';
      charArray0[2] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'e', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 42, 1, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'3', 'e', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 42;
      intArray0[1] = 1;
      intArray0[2] = 67;
      intArray0[3] = (int) '3';
      intArray0[4] = (-1);
      intArray0[5] = (int) 'e';
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'3', 'e', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(42, token0.beginLine);
      assertEquals(42, token0.endLine);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("3e3", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'3', 'e', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.curChar = '3';
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 42, column 4.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)73;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[3] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 980, (-937), 980);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream1);
      assertEquals(6, byteArrayInputStream1.available());
      assertNotNull(inputStreamReader0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      byteArrayInputStream1.reset();
      assertEquals(6, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)102, (byte)73, (byte)0}, byteArray0);
      
      Token token0 = Token.newToken(1382);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 980, column -936.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      StringReader stringReader0 = new StringReader("[XL\"dBkyWF0~_o}XJ");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (byte)50, (byte)50, (byte)50);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.endColumn);
      assertEquals(81, token0.kind);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, token0.beginLine);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals("[", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 50. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"*=\"");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"*=\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("\"*=\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 889, 889, 24);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.ExpandBuff(false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(73, token0.kind);
      assertEquals(889, token0.beginLine);
      assertEquals(889, token0.beginColumn);
      assertEquals(892, token0.endColumn);
      assertEquals(889, token0.endLine);
      assertEquals(892, javaCharStream0.getEndColumn());
      assertEquals(889, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(889, javaCharStream0.getEndLine());
      assertEquals(892, javaCharStream0.getColumn());
      assertEquals("\"*=\"", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(73, token0.kind);
      assertEquals(889, token0.beginLine);
      assertEquals(889, token0.beginColumn);
      assertEquals(892, token0.endColumn);
      assertEquals(889, token0.endLine);
      assertEquals(892, javaCharStream0.getEndColumn());
      assertEquals(889, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(889, javaCharStream0.getEndLine());
      assertEquals(892, javaCharStream0.getColumn());
      assertEquals("\"*=\"", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(892, token1.endColumn);
      assertEquals(889, token1.beginLine);
      assertEquals(73, token1.kind);
      assertEquals(889, token1.beginColumn);
      assertEquals(889, token1.endLine);
      assertEquals(892, javaCharStream0.getEndColumn());
      assertEquals(889, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(889, javaCharStream0.getEndLine());
      assertEquals(892, javaCharStream0.getColumn());
      assertEquals("\"*=\"", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("tQ$6u?><");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)2, 126, 126);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(126, token0.beginColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endLine);
      assertEquals(130, token0.endColumn);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(130, javaCharStream0.getEndColumn());
      assertEquals(130, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals("tQ$6u", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)63);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 63. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      StringReader stringReader0 = new StringReader("n|b#&;^|n4.");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 32, 15);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n|b#&;^|n4.");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginLine);
      assertEquals(32, token0.beginColumn);
      assertEquals(106, token0.kind);
      assertEquals(32, token0.endColumn);
      assertEquals(15, token0.endLine);
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, token1.beginColumn);
      assertEquals(32, token1.endColumn);
      assertEquals(15, token1.endLine);
      assertEquals(106, token1.kind);
      assertEquals(15, token1.beginLine);
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o7#Nk");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)40, (byte)40, (byte)40);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.curLexState = (int) (byte)40;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = Token.newToken((byte)40);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, token1.endColumn);
      assertEquals(40, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(40, token1.endLine);
      assertEquals(40, token1.beginLine);
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      
      token1.kind = 0;
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      
      Token token2 = Token.newToken(0);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertNull(token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals('7', char0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 40, column 41.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("\"boolean\"");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1704), 103, 67);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(15, token0.kind);
      assertEquals(109, token0.endColumn);
      assertEquals((-1704), token0.endLine);
      assertEquals((-1704), token0.beginLine);
      assertEquals(103, token0.beginColumn);
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals((-1704), javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals((-1704), javaCharStream0.getBeginLine());
      assertEquals((-1704), javaCharStream0.getLine());
      assertEquals("boolean", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals((-1704), javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals((-1704), javaCharStream0.getBeginLine());
      assertEquals((-1704), javaCharStream0.getLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1704, column 111.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z}GdkF*r!a#");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5997, 5997, 5997);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5997, token0.beginColumn);
      assertEquals(5997, token0.endColumn);
      assertEquals(5997, token0.endLine);
      assertEquals(5997, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(5997, javaCharStream0.getLine());
      assertEquals(5997, javaCharStream0.getEndColumn());
      assertEquals(5997, javaCharStream0.getBeginLine());
      assertEquals(5997, javaCharStream0.getColumn());
      assertEquals(5997, javaCharStream0.getBeginColumn());
      assertEquals(5997, javaCharStream0.getEndLine());
      assertEquals("z", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(5997, token1.endLine);
      assertEquals(5997, token1.beginLine);
      assertEquals(5998, token1.beginColumn);
      assertEquals(80, token1.kind);
      assertEquals(5998, token1.endColumn);
      assertEquals(5997, javaCharStream0.getLine());
      assertEquals(5997, javaCharStream0.getBeginLine());
      assertEquals(5998, javaCharStream0.getEndColumn());
      assertEquals(5998, javaCharStream0.getBeginColumn());
      assertEquals(5998, javaCharStream0.getColumn());
      assertEquals(5997, javaCharStream0.getEndLine());
      assertEquals("}", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(5997, javaCharStream0.getLine());
      assertEquals(5997, javaCharStream0.getBeginLine());
      assertEquals(5998, javaCharStream0.getEndColumn());
      assertEquals(5998, javaCharStream0.getBeginColumn());
      assertEquals(5998, javaCharStream0.getColumn());
      assertEquals(5997, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader((InputStream) null, "LtXIF2OlFm=n1*2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("[XLUdBkyWF<~TYo}XJ");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(91, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 67, 103, 67);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(67, token0.endLine);
      assertEquals(111, token0.endColumn);
      assertEquals(67, token0.beginLine);
      assertEquals(103, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals("XLUdBkyWF", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(112, token1.endColumn);
      assertEquals(67, token1.beginLine);
      assertEquals(112, token1.beginColumn);
      assertEquals(67, token1.endLine);
      assertEquals(88, token1.kind);
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals("<", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-1724L));
      assertEquals(0L, long0);
      
      token0.image = "";
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token2.kind);
      assertEquals(112, token2.beginColumn);
      assertEquals(67, token2.beginLine);
      assertEquals(112, token2.endColumn);
      assertEquals(67, token2.endLine);
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals("<", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedReader0, 74, 112, 67);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(111, token3.endColumn);
      assertEquals(74, token3.endLine);
      assertEquals(111, token3.beginColumn);
      assertEquals(111, javaCharStream1.getEndColumn());
      assertEquals(111, javaCharStream1.getBeginColumn());
      assertEquals(74, javaCharStream1.getBeginLine());
      assertEquals(74, javaCharStream1.getLine());
      assertEquals(111, javaCharStream1.getColumn());
      assertEquals(74, javaCharStream1.getEndLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(90, token4.kind);
      assertEquals(67, token4.endLine);
      assertEquals(113, token4.endColumn);
      assertEquals(67, token4.beginLine);
      assertEquals(113, token4.beginColumn);
      assertEquals(10, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("~", token4.toString());
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 10. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      StringReader stringReader0 = new StringReader("@rsh)uAbBO=%");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 200, 88, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1632), 70);
      assertEquals(70, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = byteArrayInputStream0.skip((-1632));
      assertEquals(70, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(70, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token0.kind);
      assertEquals(200, token0.endLine);
      assertEquals(88, token0.endColumn);
      assertEquals(200, token0.beginLine);
      assertEquals(88, token0.beginColumn);
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals("@", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals(70, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(200, token1.beginLine);
      assertEquals(200, token1.endLine);
      assertEquals(89, token1.beginColumn);
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals("rsh", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(200, token2.beginLine);
      assertEquals(78, token2.kind);
      assertEquals(92, token2.endColumn);
      assertEquals(92, token2.beginColumn);
      assertEquals(200, token2.endLine);
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals(")", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(97, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(200, token3.beginLine);
      assertEquals(200, token3.endLine);
      assertEquals(93, token3.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals("uAbBO", token3.toString());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(91, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(200, token1.beginLine);
      assertEquals(200, token1.endLine);
      assertEquals(89, token1.beginColumn);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals("rsh", token1.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token3);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      
      javaCharStream1.adjustBeginLineColumn(557, 89);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(558, javaCharStream1.getBeginLine());
      assertEquals(89, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(558, javaCharStream1.getBeginLine());
      assertEquals(89, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager1.TokenLexicalActions(token2);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(200, token2.beginLine);
      assertEquals(78, token2.kind);
      assertEquals(92, token2.endColumn);
      assertEquals(92, token2.beginColumn);
      assertEquals(200, token2.endLine);
      assertEquals(558, javaCharStream1.getBeginLine());
      assertEquals(89, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals(")", token2.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token3));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token3);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(558, javaCharStream1.getBeginLine());
      assertEquals(89, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(87, token4.kind);
      assertEquals(98, token4.endColumn);
      assertEquals(98, token4.beginColumn);
      assertEquals(200, token4.beginLine);
      assertEquals(200, token4.endLine);
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals("=", token4.toString());
      assertNotNull(token4);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      
      javaParserTokenManager0.SwitchTo(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(200, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(200, javaCharStream0.getLine());
      assertEquals(200, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(200, token5.beginLine);
      assertEquals(108, token5.kind);
      assertEquals(99, token5.beginColumn);
      assertEquals(200, token5.endLine);
      assertEquals(99, token5.endColumn);
      assertEquals(558, javaCharStream1.getBeginLine());
      assertEquals(89, javaCharStream1.getBeginColumn());
      assertEquals("%", token5.toString());
      assertNotNull(token5);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      StringReader stringReader0 = new StringReader(";$N\"55");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2948), (byte)50, (byte)50);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 121, (-1790));
      assertEquals((-1790), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-1790), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2948), token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, token0.endColumn);
      assertEquals((-2948), token0.endLine);
      assertEquals(83, token0.kind);
      assertEquals((-2948), javaCharStream0.getLine());
      assertEquals((-2948), javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-2948), javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(";", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals((-1790), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token1.endColumn);
      assertEquals(50, token1.beginColumn);
      assertEquals((-2948), token1.endLine);
      assertEquals(83, token1.kind);
      assertEquals((-2948), token1.beginLine);
      assertEquals((-2948), javaCharStream0.getLine());
      assertEquals((-2948), javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-2948), javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(";", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals((-2948), token2.endLine);
      assertEquals(52, token2.endColumn);
      assertEquals(51, token2.beginColumn);
      assertEquals((-2948), token2.beginLine);
      assertEquals((-2948), javaCharStream0.getLine());
      assertEquals((-2948), javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals((-2948), javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals("$N", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(32);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 32. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)73, (byte)102}, byteArray0);
      
      StringReader stringReader0 = new StringReader("jJ[=nHn#JtI^+!Ioj");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, (byte)73);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (byte)102, 100);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(mockPrintStream0);
      
      Token token0 = Token.newToken(645);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token1.beginColumn);
      assertEquals(102, token1.endLine);
      assertEquals(102, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(101, token1.endColumn);
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals("jJ", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-492));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -492. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)73, (byte)102}, byteArray0);
      
      StringReader stringReader0 = new StringReader("jJ[=nHn#JtI^+!Ioj");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, (byte)73);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (byte)102, 100);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0, false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(mockPrintStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)73, (byte)102}, byteArray0);
      
      Token token0 = Token.newToken(645);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("If", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-492));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -492. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)42, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)42, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = 'z';
      charArray0[5] = '/';
      charArray0[6] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '\u0000', '/', '/', 'z', '/', '/'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '\u0000', '/', '/', 'z', '/', '/'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '\u0000', '/', '/', 'z', '/', '/'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', '\u0000', '/', '/', 'z', '/', '/'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)45;
      byteArray0[0] = (byte)45;
      byteArray0[4] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 17, 44, 17);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      StringReader stringReader0 = new StringReader("<<=");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token0.beginLine);
      assertEquals(44, token0.endColumn);
      assertEquals(17, token0.endLine);
      assertEquals(44, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(17, token1.endLine);
      assertEquals(45, token1.beginColumn);
      assertEquals(17, token1.beginLine);
      assertEquals(45, token1.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals("s", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[1] = '\u001D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', '\u001D'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'0', '\u001D'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'0', '\u001D'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("0", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'0', '\u001D'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 66. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CCB=)g1 (tij&dm0aya");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 1361, (-628), 1361);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(mockPrintStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('C', char0);
      
      Token token0 = Token.newToken(1361);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-627), token1.endColumn);
      assertEquals(1361, token1.beginLine);
      assertEquals((-628), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(1361, token1.endLine);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-628), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-627), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-627), javaCharStream0.getColumn());
      assertEquals("CB", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-628), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-627), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-627), javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1361, token2.beginLine);
      assertEquals((-626), token2.beginColumn);
      assertEquals((-626), token2.endColumn);
      assertEquals(87, token2.kind);
      assertEquals(1361, token2.endLine);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-626), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-626), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-626), javaCharStream0.getColumn());
      assertEquals("=", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-626), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-626), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-626), javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals((-625), token3.beginColumn);
      assertEquals(1361, token3.endLine);
      assertEquals((-625), token3.endColumn);
      assertEquals(1361, token3.beginLine);
      assertEquals(78, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(")", token3.toString());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-625), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-625), javaCharStream0.getEndColumn());
      assertEquals((-625), javaCharStream0.getColumn());
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1361, token2.beginLine);
      assertEquals((-626), token2.beginColumn);
      assertEquals((-626), token2.endColumn);
      assertEquals(87, token2.kind);
      assertEquals(1361, token2.endLine);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-625), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-625), javaCharStream0.getEndColumn());
      assertEquals((-625), javaCharStream0.getColumn());
      assertEquals("=", token2.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token3));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-623), token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(1361, token4.endLine);
      assertEquals(1361, token4.beginLine);
      assertEquals((-624), token4.beginColumn);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-624), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-623), javaCharStream0.getEndColumn());
      assertEquals((-623), javaCharStream0.getColumn());
      assertEquals("g1", token4.toString());
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-624), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-623), javaCharStream0.getEndColumn());
      assertEquals((-623), javaCharStream0.getColumn());
      assertNull(token0.toString());
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token4));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(token0, token3);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertNotSame(token0, token4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("CCB=)g1 (tij&dm0aya");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CCB=)g1 (tij&dm0aya");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      int int0 = (-628);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 1361, (-628), 1361);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1361, token0.beginLine);
      assertEquals((-626), token0.endColumn);
      assertEquals(1361, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-628), token0.beginColumn);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-626), javaCharStream0.getColumn());
      assertEquals((-626), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-628), javaCharStream0.getBeginColumn());
      assertEquals("CCB", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-626), javaCharStream0.getColumn());
      assertEquals((-626), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals((-628), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token1.kind);
      assertEquals(1361, token1.beginLine);
      assertEquals((-625), token1.beginColumn);
      assertEquals(1361, token1.endLine);
      assertEquals((-625), token1.endColumn);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-625), javaCharStream0.getBeginColumn());
      assertEquals((-625), javaCharStream0.getEndColumn());
      assertEquals((-625), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals("=", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-624), token2.beginColumn);
      assertEquals(1361, token2.beginLine);
      assertEquals((-624), token2.endColumn);
      assertEquals(1361, token2.endLine);
      assertEquals(78, token2.kind);
      assertEquals((-624), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-624), javaCharStream0.getColumn());
      assertEquals((-624), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(")", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token3 = token_GTToken0.specialToken;
      assertNull(token3);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-624), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-624), javaCharStream0.getColumn());
      assertEquals((-624), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token4.kind);
      assertEquals(1361, token4.endLine);
      assertEquals((-623), token4.beginColumn);
      assertEquals((-622), token4.endColumn);
      assertEquals(1361, token4.beginLine);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-622), javaCharStream0.getEndColumn());
      assertEquals((-623), javaCharStream0.getBeginColumn());
      assertEquals((-622), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals("g1", token4.toString());
      assertNotNull(token4);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      
      javaParserTokenManager1.curChar = '.';
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-622), javaCharStream0.getEndColumn());
      assertEquals((-623), javaCharStream0.getBeginColumn());
      assertEquals((-622), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertEquals(1361, token5.beginLine);
      assertEquals((-620), token5.beginColumn);
      assertEquals(77, token5.kind);
      assertEquals(1361, token5.endLine);
      assertEquals((-620), token5.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("(", token5.toString());
      assertEquals((-620), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-620), javaCharStream0.getBeginColumn());
      assertEquals((-620), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertNotNull(token5);
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pushbackReader0, 1361, 45);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      javaParserTokenManager1.ReInit(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals((-620), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-620), javaCharStream0.getBeginColumn());
      assertEquals((-620), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)103;
      byteArray0[0] = (byte)103;
      byteArray0[4] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)115, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 17, 40, 17);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)115, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)103, (byte)115, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(42, token0.endColumn);
      assertEquals(17, token0.endLine);
      assertEquals(17, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals("gsg", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)103, (byte)115, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      token0.endLine = (-1416);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals("gsg", token0.toString());
      
      byteArrayInputStream0.reset();
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)103, (byte)115, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)115}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1663);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1663. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("])C%WX8<@;");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "])C%WX8<@;");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "])C%WX8<@;");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("])C%WX8<@;");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[23];
      byteArray0[13] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)114;
      byteArray0[1] = (byte)102;
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "])C%WX8<@;");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = 'l';
      charArray0[2] = 'Z';
      charArray0[3] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', 'l', 'Z', 'N'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'|', 'l', 'Z', 'N'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 40, (-297), 40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'|', 'l', 'Z', 'N'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'|', 'l', 'Z', 'N'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(40, token0.beginLine);
      assertEquals((-297), token0.beginColumn);
      assertEquals(106, token0.kind);
      assertEquals((-297), token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(40, javaCharStream1.getLine());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals((-297), javaCharStream1.getBeginColumn());
      assertEquals((-297), javaCharStream1.getColumn());
      assertEquals((-297), javaCharStream1.getEndColumn());
      assertEquals(40, javaCharStream1.getEndLine());
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'|', 'l', 'Z', 'N'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(40, token0.beginLine);
      assertEquals((-297), token0.beginColumn);
      assertEquals(106, token0.kind);
      assertEquals((-297), token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(40, javaCharStream1.getLine());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals((-297), javaCharStream1.getBeginColumn());
      assertEquals((-297), javaCharStream1.getColumn());
      assertEquals((-297), javaCharStream1.getEndColumn());
      assertEquals(40, javaCharStream1.getEndLine());
      assertEquals("|", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'|', 'l', 'Z', 'N'}, charArray0);
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(40, javaCharStream1.getLine());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals((-297), javaCharStream1.getBeginColumn());
      assertEquals((-297), javaCharStream1.getColumn());
      assertEquals((-297), javaCharStream1.getEndColumn());
      assertEquals(40, javaCharStream1.getEndLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'|', 'l', 'Z', 'N'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(40, token0.beginLine);
      assertEquals((-297), token0.beginColumn);
      assertEquals(106, token0.kind);
      assertEquals((-297), token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(40, javaCharStream1.getLine());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals((-297), javaCharStream1.getBeginColumn());
      assertEquals((-297), javaCharStream1.getColumn());
      assertEquals((-297), javaCharStream1.getEndColumn());
      assertEquals(40, javaCharStream1.getEndLine());
      assertEquals("|", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'|', 'l', 'Z', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)39;
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[6] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', '\u0000', 'l'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 62, (byte)39, 62);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', '\u0000', 'l'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', '\u0000', 'l'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', '\u0000', 'l'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(43, token0.endColumn);
      assertEquals(62, token0.beginLine);
      assertEquals(39, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(62, token0.endLine);
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(62, javaCharStream0.getBeginLine());
      assertEquals("lllll", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', '\u0000', 'l'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 62. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)45;
      byteArray0[0] = (byte)45;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)107, (byte)115, 2363);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)45, (-631));
      assertEquals((-631), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)115, (byte)115, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-631), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)115, (byte)115, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-631), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)115, (byte)45, (byte)0, (byte)115, (byte)115, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = Token.newToken(37);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(107, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(107, token1.endLine);
      assertEquals(115, token1.endColumn);
      assertEquals(115, token1.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("P", token1.toString());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(token1, token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new char[] {'P'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[3] = (byte)39;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("n", token1.toString());
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("n", token1.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream2);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(charArrayReader0, (byte)39, (-974), (byte)39);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream3.bufpos);
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertNotNull(javaCharStream3);
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      boolean boolean1 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'>', 'n'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 14, 'i', 14);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, token0.endLine);
      assertEquals(14, token0.beginLine);
      assertEquals(106, token0.endColumn);
      assertEquals(105, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals("ii", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token1.beginColumn);
      assertEquals(14, token1.endLine);
      assertEquals(14, token1.beginLine);
      assertEquals(106, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals("ii", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'i', 'i', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YSGM#<P`AnQ y0");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(">\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3908, 74, (byte)95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 36, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(124, token0.kind);
      assertEquals(36, token0.endLine);
      assertEquals(36, token0.beginLine);
      assertEquals((-1), token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertEquals(36, javaCharStream1.getEndLine());
      assertEquals(36, javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(36, javaCharStream1.getBeginLine());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(36, javaCharStream1.getEndLine());
      assertEquals(36, javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(36, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = Token.newToken((byte)95);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(36, javaCharStream1.getEndLine());
      assertEquals(36, javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(36, javaCharStream1.getBeginLine());
      assertNull(token1.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      StringReader stringReader0 = new StringReader("jJ[=nHn#JtI^+!Ioj");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, (byte)73);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (byte)0, 107);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaParserTokenManager0.jjnewStateCnt = (int) (byte)73;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(mockPrintStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('j', char0);
      
      Token token0 = Token.newToken(645);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      token0.kind = (int) (byte)73;
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(107, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("J", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      token1.specialToken = token0;
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      assertEquals("J", token1.toString());
      assertNull(token1.specialToken.toString());
      
      token1.endColumn = 81;
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("J", token1.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(81, token2.kind);
      assertEquals(108, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(108, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("[", token2.toString());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(109, token3.beginColumn);
      assertEquals(109, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(87, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("=", token3.toString());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertNull(token0.toString());
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token3);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token4.beginLine);
      assertEquals(110, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(0, token4.endLine);
      assertEquals(112, token4.endColumn);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals("nHn", token4.toString());
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      
      javaParserTokenManager0.TokenLexicalActions(token1.specialToken);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginLine);
      assertEquals(107, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(81, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals("J", token1.toString());
      assertFalse(token1.equals((Object)token4));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token3));
      assertNotSame(token1, token4);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token3);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      StringReader stringReader0 = new StringReader("\"private\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 58, 58);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token1.beginLine);
      assertEquals(47, token1.kind);
      assertEquals(58, token1.beginColumn);
      assertEquals(64, token1.endColumn);
      assertEquals(15, token1.endLine);
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals("private", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(15, token2.beginLine);
      assertEquals(64, token2.endColumn);
      assertEquals(58, token2.beginColumn);
      assertEquals(15, token2.endLine);
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, (-1294));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1294. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      StringReader stringReader0 = new StringReader("CCB=)g1 (tij&dm0aya");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 1361, (-628), 1361);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = '2';
      charArray0[2] = 'W';
      charArray0[3] = '+';
      int int0 = pushbackReader0.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'C', 'C', 'B', '='}, charArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (-1));
      assertEquals((-1), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-1), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-628), token0.endColumn);
      assertEquals(1361, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1361, token0.beginLine);
      assertEquals((-628), token0.beginColumn);
      assertEquals((-628), javaCharStream0.getEndColumn());
      assertEquals((-628), javaCharStream0.getBeginColumn());
      assertEquals((-628), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals(")", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals((-1), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token1.kind);
      assertEquals((-626), token1.endColumn);
      assertEquals(1361, token1.endLine);
      assertEquals(1361, token1.beginLine);
      assertEquals((-627), token1.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("g1", token1.toString());
      assertEquals((-626), javaCharStream0.getColumn());
      assertEquals((-627), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-626), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-626), javaCharStream0.getColumn());
      assertEquals((-627), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-626), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = Token.newToken('W');
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNull(token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals((-624), token3.endColumn);
      assertEquals(1361, token3.beginLine);
      assertEquals(1361, token3.endLine);
      assertEquals((-624), token3.beginColumn);
      assertEquals(77, token3.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("(", token3.toString());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-624), javaCharStream0.getEndColumn());
      assertEquals((-624), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-624), javaCharStream0.getColumn());
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      token0.specialToken = token1;
      assertEquals("g1", token1.toString());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-624), javaCharStream0.getEndColumn());
      assertEquals((-624), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-624), javaCharStream0.getColumn());
      assertEquals("g1", token0.specialToken.toString());
      assertEquals(")", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-624), javaCharStream0.getEndColumn());
      assertEquals((-624), javaCharStream0.getBeginColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-624), javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-623), token4.beginColumn);
      assertEquals(1361, token4.beginLine);
      assertEquals(74, token4.kind);
      assertEquals((-621), token4.endColumn);
      assertEquals(1361, token4.endLine);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-623), javaCharStream0.getBeginColumn());
      assertEquals((-621), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-621), javaCharStream0.getColumn());
      assertEquals("tij", token4.toString());
      assertNotNull(token4);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-623), javaCharStream0.getBeginColumn());
      assertEquals((-621), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-621), javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      Token token5 = javaParserTokenManager2.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1361, token5.beginLine);
      assertEquals(1361, token5.endLine);
      assertEquals((-620), token5.beginColumn);
      assertEquals(105, token5.kind);
      assertEquals((-620), token5.endColumn);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-620), javaCharStream0.getEndColumn());
      assertEquals((-620), javaCharStream0.getBeginColumn());
      assertEquals((-620), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals("&", token5.toString());
      assertNotNull(token5);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-620), javaCharStream0.getEndColumn());
      assertEquals((-620), javaCharStream0.getBeginColumn());
      assertEquals((-620), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertNull(token_GTToken0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token_GTToken0, token_GTToken1);
      
      Token token6 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(74, token6.kind);
      assertEquals((-614), token6.endColumn);
      assertEquals(1361, token6.beginLine);
      assertEquals((-619), token6.beginColumn);
      assertEquals(1361, token6.endLine);
      assertEquals((-614), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-614), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-619), javaCharStream0.getBeginColumn());
      assertEquals("dm0aya", token6.toString());
      assertNotNull(token6);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token1));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(token6, token1);
      
      javaParserTokenManager2.TokenLexicalActions(token6);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(74, token6.kind);
      assertEquals((-614), token6.endColumn);
      assertEquals(1361, token6.beginLine);
      assertEquals((-619), token6.beginColumn);
      assertEquals(1361, token6.endLine);
      assertEquals((-614), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-614), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-619), javaCharStream0.getBeginColumn());
      assertEquals("dm0aya", token6.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token1));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token6, token4);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(token6, token1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pushbackReader0, 1361, 45);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      javaParserTokenManager1.ReInit(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals((-614), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-614), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-619), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals((-628), token0.endColumn);
      assertEquals(1361, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1361, token0.beginLine);
      assertEquals((-628), token0.beginColumn);
      assertEquals((-614), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-614), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-619), javaCharStream0.getBeginColumn());
      assertEquals(")", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token6));
      assertFalse(token0.equals((Object)token4));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token5));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token3);
      assertNotSame(token0, token6);
      assertNotSame(token0, token4);
      assertNotSame(token0, token2);
      assertNotSame(token0, token5);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals((-628), token0.endColumn);
      assertEquals(1361, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1361, token0.beginLine);
      assertEquals((-628), token0.beginColumn);
      assertEquals((-614), javaCharStream0.getEndColumn());
      assertEquals(1361, javaCharStream0.getBeginLine());
      assertEquals((-614), javaCharStream0.getColumn());
      assertEquals(1361, javaCharStream0.getEndLine());
      assertEquals(1361, javaCharStream0.getLine());
      assertEquals((-619), javaCharStream0.getBeginColumn());
      assertEquals(")", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token6));
      assertFalse(token0.equals((Object)token4));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token5));
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token3);
      assertNotSame(token0, token6);
      assertNotSame(token0, token4);
      assertNotSame(token0, token2);
      assertNotSame(token0, token5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "throws");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("Cm^{^]'&X");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)23, 615, (byte)23);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 112, (byte)92);
      assertEquals((-103), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals((-103), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(616, token0.endColumn);
      assertEquals(23, token0.beginLine);
      assertEquals(615, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.endLine);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(616, javaCharStream0.getEndColumn());
      assertEquals(616, javaCharStream0.getColumn());
      assertEquals(615, javaCharStream0.getBeginColumn());
      assertEquals("Cm", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(616, javaCharStream0.getEndColumn());
      assertEquals(616, javaCharStream0.getColumn());
      assertEquals(615, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(23, token1.endLine);
      assertEquals(617, token1.beginColumn);
      assertEquals(617, token1.endColumn);
      assertEquals(23, token1.beginLine);
      assertEquals(107, token1.kind);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(617, javaCharStream0.getEndColumn());
      assertEquals(617, javaCharStream0.getColumn());
      assertEquals(617, javaCharStream0.getBeginColumn());
      assertEquals("^", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertEquals((-103), byteArrayInputStream0.available());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(23, token1.endLine);
      assertEquals(617, token1.beginColumn);
      assertEquals(617, token1.endColumn);
      assertEquals(23, token1.beginLine);
      assertEquals(107, token1.kind);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(617, javaCharStream0.getEndColumn());
      assertEquals(617, javaCharStream0.getColumn());
      assertEquals(617, javaCharStream0.getBeginColumn());
      assertEquals("^", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken((-29));
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNull(token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaCharStream0.adjustBeginLineColumn(617, 23);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(617, javaCharStream0.getBeginLine());
      assertEquals(617, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(617, javaCharStream0.getEndLine());
      
      byteArrayInputStream0.mark((-2458));
      assertEquals((-103), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(617, javaCharStream0.getBeginLine());
      assertEquals(617, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(617, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(616);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 616. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("^/{6[l7_");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 19, 19);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token0.beginColumn);
      assertEquals(24, token0.beginLine);
      assertEquals(19, token0.endColumn);
      assertEquals(24, token0.endLine);
      assertEquals(107, token0.kind);
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals("^", token0.toString());
      assertNotNull(token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1867);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1867. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("])C%WX8<@;");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "])C%WX8<@;");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "])C%WX8<@;");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("])C%WX8<@;");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)114;
      byteArray0[1] = (byte)102;
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "])C%WX8<@;");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'l';
      charArray0[2] = 'Z';
      charArray0[3] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', 'l', 'Z', 'N'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'w', 'l', 'Z', 'N'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 40, (-297), 40);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'w', 'l', 'Z', 'N'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'w', 'l', 'Z', 'N'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.beginLine);
      assertEquals((-297), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.endLine);
      assertEquals((-294), token0.endColumn);
      assertEquals(40, javaCharStream1.getLine());
      assertEquals((-294), javaCharStream1.getColumn());
      assertEquals(40, javaCharStream1.getEndLine());
      assertEquals((-297), javaCharStream1.getBeginColumn());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals((-294), javaCharStream1.getEndColumn());
      assertEquals("wlZN", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'w', 'l', 'Z', 'N'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.beginLine);
      assertEquals((-297), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.endLine);
      assertEquals((-294), token0.endColumn);
      assertEquals(40, javaCharStream1.getLine());
      assertEquals((-294), javaCharStream1.getColumn());
      assertEquals(40, javaCharStream1.getEndLine());
      assertEquals((-297), javaCharStream1.getBeginColumn());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals((-294), javaCharStream1.getEndColumn());
      assertEquals("wlZN", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'w', 'l', 'Z', 'N'}, charArray0);
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager0.debugStream);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, javaCharStream1.getLine());
      assertEquals((-294), javaCharStream1.getColumn());
      assertEquals(40, javaCharStream1.getEndLine());
      assertEquals((-297), javaCharStream1.getBeginColumn());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals((-294), javaCharStream1.getEndColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'w', 'l', 'Z', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "whhrow");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("whhrow");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1867, 19, 24);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1867, token0.beginLine);
      assertEquals(24, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.beginColumn);
      assertEquals(1867, token0.endLine);
      assertEquals(1867, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals(1867, javaCharStream0.getLine());
      assertEquals(1867, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals("whhrow", token0.toString());
      assertNotNull(token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      try { 
        javaCharStream1.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<x");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 889, 889, 889);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaCharStream0.available = 887;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(889, token1.beginColumn);
      assertEquals(889, token1.endColumn);
      assertEquals(889, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(889, token1.beginLine);
      assertEquals(889, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getEndLine());
      assertEquals(889, javaCharStream0.getColumn());
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(889, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getEndColumn());
      assertEquals("x", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(889, token2.endLine);
      assertEquals(889, token2.endColumn);
      assertEquals(889, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(889, token2.beginLine);
      assertEquals(889, javaCharStream0.getBeginLine());
      assertEquals(889, javaCharStream0.getEndLine());
      assertEquals(889, javaCharStream0.getColumn());
      assertEquals(889, javaCharStream0.getBeginColumn());
      assertEquals(889, javaCharStream0.getLine());
      assertEquals(889, javaCharStream0.getEndColumn());
      assertEquals("x", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-245));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -245. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)67, (byte)73, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-62), 30, (byte)67);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)67, (byte)73, (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)67, (byte)73, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)67, (byte)73, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)67, (byte)73, (byte)0}, byteArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)67, (byte)73, (byte)0}, byteArray0);
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)12, (byte)67, (byte)73, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -62, column 36.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C26<`Q");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[26];
      charArray0[0] = '>';
      charArray0[1] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'I';
      charArray0[6] = 'j';
      charArray0[7] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      StringReader stringReader0 = new StringReader("C26<`Q");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(124, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(">", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
      
      javaCharStream0.adjustBeginLineColumn((byte)0, 540);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(540, javaCharStream0.getEndColumn());
      assertEquals(540, javaCharStream0.getColumn());
      assertEquals(540, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      MockFile mockFile0 = new MockFile("C26<`Q");
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("C26<`Q", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("C26<`Q", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("C26<`Q", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("C26<`Q", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, " O:S|O>");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  O:S|O>
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(11, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(11, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'z', 'z', '/', '/', '/'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'z', 'z', '/', '/', '/'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'z', 'z', '/', '/', '/'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'z', 'z', '/', '/', '/'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("zz", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'z', 'z', '/', '/', '/'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[4] = (byte)73;
      byteArray0[3] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)124, (byte)73, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(39, int0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)124, (byte)73, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 980, (-937), 980);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)124, (byte)73, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)124, (byte)73, (byte)0}, byteArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0, (byte)124, (byte)73, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 980, column -935.  Encountered: \"|\" (124), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Ax");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 928, 928, 24);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(928, token0.endLine);
      assertEquals(928, token0.beginColumn);
      assertEquals(928, token0.beginLine);
      assertEquals(928, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(928, javaCharStream0.getBeginLine());
      assertEquals(928, javaCharStream0.getEndColumn());
      assertEquals(928, javaCharStream0.getLine());
      assertEquals(928, javaCharStream0.getColumn());
      assertEquals(928, javaCharStream0.getBeginColumn());
      assertEquals(928, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      assertFalse(boolean0);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(928, token1.beginLine);
      assertEquals(929, token1.beginColumn);
      assertEquals(930, token1.endColumn);
      assertEquals(928, token1.endLine);
      assertEquals(928, javaCharStream0.getBeginLine());
      assertEquals(928, javaCharStream0.getLine());
      assertEquals(930, javaCharStream0.getEndColumn());
      assertEquals(929, javaCharStream0.getBeginColumn());
      assertEquals(928, javaCharStream0.getEndLine());
      assertEquals(930, javaCharStream0.getColumn());
      assertEquals("Ax", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"strictfp\"");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'E', '\''}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1303, 764, 67);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'E', '\''}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'E', '\''}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1303, token0.endLine);
      assertEquals(764, token0.endColumn);
      assertEquals(764, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1303, token0.beginLine);
      assertEquals(1303, javaCharStream0.getEndLine());
      assertEquals(764, javaCharStream0.getBeginColumn());
      assertEquals(764, javaCharStream0.getColumn());
      assertEquals(1303, javaCharStream0.getBeginLine());
      assertEquals(1303, javaCharStream0.getLine());
      assertEquals(764, javaCharStream0.getEndColumn());
      assertEquals("E", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'E', '\''}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1303, column 766.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[2] = (byte)12;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"*=\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"*=\"");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      StringReader stringReader0 = new StringReader("transient");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 39, 52, 52);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 52, (byte)12);
      assertEquals((-41), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)12, (byte)12);
      assertEquals((-1), byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      byteArrayInputStream1.close();
      assertEquals((-1), byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-41), byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      byteArrayInputStream0.reset();
      assertEquals((-41), byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(60, token0.kind);
      assertEquals(60, token0.endColumn);
      assertEquals(39, token0.endLine);
      assertEquals(39, token0.beginLine);
      assertEquals(52, token0.beginColumn);
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals("transient", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals((-41), byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(39, token1.beginLine);
      assertEquals(39, token1.endLine);
      assertEquals(60, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(60, token1.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("", token1.toString());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, (-5553), 0, (-433));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      StringReader stringReader0 = new StringReader("[voYZ3]%!W");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(91, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 22, (byte)102, 11);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.endColumn);
      assertEquals(102, token0.beginColumn);
      assertEquals(22, token0.beginLine);
      assertEquals(22, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals("voYZ", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 22, column 106.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("thrws");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("thr", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "throws");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("Cm^{^]'&X");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)23, 615, (byte)23);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'X';
      charArray0[2] = '+';
      charArray0[3] = 'T';
      charArray0[4] = ',';
      charArray0[5] = '*';
      charArray0[6] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'X', '+', 'T', ',', '*', '.'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-4709), (-909), 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(615, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(615, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(615, javaCharStream0.getBeginColumn());
      assertEquals('C', char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(javaCharStream0, javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(615, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(615, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(615, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = Token.newToken((-909));
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(23, token1.beginLine);
      assertEquals(23, token1.endLine);
      assertEquals(616, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(616, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("m", token1.toString());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(616, javaCharStream0.getColumn());
      assertEquals(616, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(616, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[2] = (byte)12;
      char[] charArray0 = new char[11];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 172, (-1360));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1360), token0.beginColumn);
      assertEquals(172, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(172, token0.endLine);
      assertEquals((-1359), token0.endColumn);
      assertEquals(172, javaCharStream0.getBeginLine());
      assertEquals((-1359), javaCharStream0.getColumn());
      assertEquals((-1360), javaCharStream0.getBeginColumn());
      assertEquals(172, javaCharStream0.getLine());
      assertEquals(172, javaCharStream0.getEndLine());
      assertEquals((-1359), javaCharStream0.getEndColumn());
      assertEquals("HH", token0.toString());
      assertNotNull(token0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)12, 172);
      assertEquals((-1), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals((-1), byteArrayInputStream0.available());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(172, javaCharStream0.getBeginLine());
      assertEquals((-1359), javaCharStream0.getColumn());
      assertEquals((-1360), javaCharStream0.getBeginColumn());
      assertEquals(172, javaCharStream0.getLine());
      assertEquals(172, javaCharStream0.getEndLine());
      assertEquals((-1359), javaCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 172, column -1358.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "throws");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("throws");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1867, 8, 24);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1867, token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals(1867, token0.endLine);
      assertEquals(59, token0.kind);
      assertEquals(8, token0.beginColumn);
      assertEquals(1867, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1867, javaCharStream0.getBeginLine());
      assertEquals(1867, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals("throws", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(13, token1.beginColumn);
      assertEquals(13, token1.endColumn);
      assertEquals(1867, token1.endLine);
      assertEquals(1867, token1.beginLine);
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(1867, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(1867, javaCharStream0.getBeginLine());
      assertEquals(1867, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 104);
      assertNotNull(pushbackReader0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"\r\"");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      PushbackReader pushbackReader1 = new PushbackReader(pushbackReader0);
      assertNotNull(pushbackReader1);
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      
      try { 
        pushbackReader0.mark(103);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.PushbackReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "throws");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("Cm^{^]'&X");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)23, 615, (byte)23);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 112, (byte)92);
      assertEquals((-103), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals((-103), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(615, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.beginLine);
      assertEquals(616, token0.endColumn);
      assertEquals(23, token0.endLine);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(615, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(616, javaCharStream0.getEndColumn());
      assertEquals(616, javaCharStream0.getColumn());
      assertEquals("Cm", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(615, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(616, javaCharStream0.getEndColumn());
      assertEquals(616, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token1.kind);
      assertEquals(23, token1.beginLine);
      assertEquals(617, token1.endColumn);
      assertEquals(23, token1.endLine);
      assertEquals(617, token1.beginColumn);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(617, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(617, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(617, javaCharStream0.getEndColumn());
      assertEquals("^", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertEquals((-103), byteArrayInputStream0.available());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token1.kind);
      assertEquals(23, token1.beginLine);
      assertEquals(617, token1.endColumn);
      assertEquals(23, token1.endLine);
      assertEquals(617, token1.beginColumn);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(617, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(617, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(617, javaCharStream0.getEndColumn());
      assertEquals("^", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken((-29));
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertNull(token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaCharStream0.adjustBeginLineColumn(617, 23);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(617, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(617, javaCharStream0.getLine());
      assertEquals(617, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(617, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(617, javaCharStream0.getLine());
      assertEquals(617, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getColumn());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(79, token3.kind);
      assertEquals(617, token3.endLine);
      assertEquals(24, token3.beginColumn);
      assertEquals(24, token3.endColumn);
      assertEquals(617, token3.beginLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("{", token3.toString());
      assertEquals(617, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(617, javaCharStream0.getLine());
      assertEquals(617, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getColumn());
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertEquals(79, token3.kind);
      assertEquals(617, token3.endLine);
      assertEquals(24, token3.beginColumn);
      assertEquals(24, token3.endColumn);
      assertEquals(617, token3.beginLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("{", token3.toString());
      assertEquals(617, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(617, javaCharStream0.getLine());
      assertEquals(617, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getColumn());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(618, token4.endLine);
      assertEquals(107, token4.kind);
      assertEquals(618, token4.beginLine);
      assertEquals(1, token4.beginColumn);
      assertEquals(1, token4.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("^", token4.toString());
      assertEquals(618, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(618, javaCharStream0.getEndLine());
      assertEquals(618, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      
      Token token5 = token_GTToken0.specialToken;
      assertNull(token5);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(618, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(618, javaCharStream0.getEndLine());
      assertEquals(618, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(618, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(618, javaCharStream0.getEndLine());
      assertEquals(618, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(618, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(618, javaCharStream0.getEndLine());
      assertEquals(618, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*5Ny3`M");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1655, 38, 1655);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup((-2887));
      assertEquals(2886, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2886, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.kind);
      assertEquals(1655, token0.beginLine);
      assertEquals(38, token0.endColumn);
      assertEquals(38, token0.beginColumn);
      assertEquals(1655, token0.endLine);
      assertEquals(1655, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(1655, javaCharStream0.getLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(1655, javaCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1655, token1.endLine);
      assertEquals(42, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(40, token1.beginColumn);
      assertEquals(1655, token1.beginLine);
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(1655, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(1655, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(1655, javaCharStream0.getEndLine());
      assertEquals("Ny3", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedReader0, 38, 1655, 74);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1655, token3.endLine);
      assertEquals(44, token3.beginColumn);
      assertEquals(44, token3.endColumn);
      assertEquals(1655, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(1655, javaCharStream0.getBeginLine());
      assertEquals(1655, javaCharStream0.getLine());
      assertEquals(1655, javaCharStream0.getEndLine());
      assertEquals("M", token3.toString());
      assertNotNull(token3);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager3);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      
      Token token4 = javaParserTokenManager3.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("", token4.toString());
      assertNotNull(token4);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      
      javaParserTokenManager3.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(1655, javaCharStream0.getBeginLine());
      assertEquals(1655, javaCharStream0.getLine());
      assertEquals(1655, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.SwitchTo(635);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 635. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = byteArrayInputStream1.skip((byte)42);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(4L, long0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      byteArrayInputStream1.reset();
      assertEquals(4, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 75, 3, (-604));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(75, token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(84, token0.kind);
      assertEquals(75, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      byteArrayInputStream1.close();
      assertEquals(4, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      byteArrayInputStream1.reset();
      assertEquals(4, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(4, token1.beginColumn);
      assertEquals(103, token1.kind);
      assertEquals(75, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(75, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("*", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)42, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 49. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup((-3974));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3973, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3973, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = ':';
      charArray0[2] = '#';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, (byte)12);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', ':', '#'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'!', ':', '#'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, 0, 1, 2867);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'!', ':', '#'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'!', ':', '#'}, charArray0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", token2.toString());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager3);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'!', ':', '#'}, charArray0);
      
      Token token4 = javaParserTokenManager3.getNextToken();
      assertEquals(1, token4.endColumn);
      assertEquals(1, token4.beginColumn);
      assertEquals(89, token4.kind);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals("!", token4.toString());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getEndColumn());
      assertEquals(0, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getEndLine());
      assertNotNull(token4);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertArrayEquals(new char[] {'!', ':', '#'}, charArray0);
      
      javaParserTokenManager1.ReInit(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertArrayEquals(new char[] {'!', ':', '#'}, charArray0);
      
      javaParserTokenManager2.SwitchTo(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getEndColumn());
      assertEquals(0, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getEndLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertArrayEquals(new char[] {'!', ':', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = byteArrayInputStream1.skip((byte)42);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(4L, long0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      byteArrayInputStream1.reset();
      assertEquals(4, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 75, 3, (-604));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(',', char0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(75, token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(75, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(3, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(4, token1.endColumn);
      assertEquals(103, token1.kind);
      assertEquals(75, token1.endLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(75, token1.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)44, (byte)42, (byte)44, (byte)0}, byteArray0);
      
      MockFile mockFile0 = new MockFile("^2=jpt\"${`x|S");
      assertFalse(mockFile0.isDirectory());
      assertEquals("^2=jpt\"${`x|S", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("^2=jpt\"${`x|S", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNotNull(mockFile0);
      
      String string0 = "\\G!:h4:3k5TCT";
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      StringReader stringReader0 = new StringReader("{O*9");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 5001, (byte)59, 615);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)59, (byte)59);
      assertEquals((-55), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-55), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(59, token0.beginColumn);
      assertEquals(5001, token0.beginLine);
      assertEquals(59, token0.endColumn);
      assertEquals(79, token0.kind);
      assertEquals(5001, token0.endLine);
      assertEquals(5001, javaCharStream0.getEndLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(5001, javaCharStream0.getBeginLine());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals(5001, javaCharStream0.getLine());
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals("{", token0.toString());
      assertNotNull(token0);
      
      byteArrayInputStream0.reset();
      assertEquals((-55), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(60, token1.endColumn);
      assertEquals(60, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(5001, token1.endLine);
      assertEquals(5001, token1.beginLine);
      assertEquals(5001, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(5001, javaCharStream0.getBeginLine());
      assertEquals(5001, javaCharStream0.getLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals("O", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-55), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-55), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-55), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("", token2.toString());
      assertEquals((-55), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertNull(token_GTToken1.toString());
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      
      Token token3 = token_GTToken1.specialToken;
      assertNull(token3);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{O*9");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(61, token4.endColumn);
      assertEquals(103, token4.kind);
      assertEquals(5001, token4.beginLine);
      assertEquals(5001, token4.endLine);
      assertEquals(61, token4.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("*", token4.toString());
      assertEquals(5001, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(5001, javaCharStream0.getBeginLine());
      assertEquals(5001, javaCharStream0.getLine());
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      byteArrayInputStream0.reset();
      assertEquals((-55), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals((-55), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      Token token5 = token_GTToken1.specialToken;
      assertNull(token5);
      
      javaParserTokenManager1.TokenLexicalActions(token_GTToken1);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNull(token_GTToken1.toString());
      assertEquals((-55), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(token_GTToken1, token_GTToken0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(5001, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(5001, javaCharStream0.getBeginLine());
      assertEquals(5001, javaCharStream0.getLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 615);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 615. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<<=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 32, 371, 32);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(32, token0.beginLine);
      assertEquals(371, token0.beginColumn);
      assertEquals(32, token0.endLine);
      assertEquals(118, token0.kind);
      assertEquals(373, token0.endColumn);
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(371, javaCharStream0.getBeginColumn());
      assertEquals(373, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(373, javaCharStream0.getEndColumn());
      assertEquals("<<=", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      token_GTToken0.kind = 32;
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(371, javaCharStream0.getBeginColumn());
      assertEquals(373, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(373, javaCharStream0.getEndColumn());
      
      StringReader stringReader1 = new StringReader("<<=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = token_GTToken0.endLine;
      assertEquals(0, int0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(371, javaCharStream0.getBeginColumn());
      assertEquals(373, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(373, javaCharStream0.getEndColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(32, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(371, javaCharStream0.getBeginColumn());
      assertEquals(373, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(373, javaCharStream0.getEndColumn());
      assertNull(token_GTToken0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(373, token1.endColumn);
      assertEquals(118, token1.kind);
      assertEquals(32, token1.endLine);
      assertEquals(371, token1.beginColumn);
      assertEquals(32, token1.beginLine);
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(371, javaCharStream0.getBeginColumn());
      assertEquals(373, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(373, javaCharStream0.getEndColumn());
      assertEquals("<<=", token1.toString());
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(373, token2.endColumn);
      assertEquals(373, token2.beginColumn);
      assertEquals(32, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(32, token2.beginLine);
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(373, javaCharStream0.getBeginColumn());
      assertEquals(373, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(373, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(373, token3.beginColumn);
      assertEquals(373, token3.endColumn);
      assertEquals(32, token3.endLine);
      assertEquals(32, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(373, javaCharStream0.getBeginColumn());
      assertEquals(373, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(373, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      token2.kind = 371;
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(373, javaCharStream0.getBeginColumn());
      assertEquals(373, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(373, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      
      try { 
        stringReader0.skip(72057594054705140L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', '<'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)12, (byte)67, (byte)67);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'n', '<'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'n', '<'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(12, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(67, token0.beginColumn);
      assertEquals(67, token0.endColumn);
      assertEquals(12, token0.endLine);
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals("n", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'n', '<'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(67, token1.endColumn);
      assertEquals(67, token1.beginColumn);
      assertEquals(12, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(12, token1.endLine);
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals("n", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'n', '<'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'n', '<'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 12, column 69.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(11, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(11, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0085';
      charArray0[1] = '\u0085';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0085', '\u0085', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'\u0085', '\u0085', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0085', '\u0085', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\u0085', '\u0085', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1, 100, 89, (byte)123);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(11, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedReader pipedReader1 = new PipedReader();
      assertNotNull(pipedReader1);
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedReader1, (-1), 15, 31);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'\u0085', '\u0085', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(123, int0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = token_GTToken0.next;
      assertNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0085\" (133), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\r\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3396, 24, 24);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3396, column 25.  Encountered: \"\\r\" (13), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nCHd{]$l:1rdy");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byteArray0[0] = (byte)36;
      byteArray0[0] = (byte)44;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("nCHd", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token1.endColumn);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("{", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      try { 
        javaCharStream1.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*5Ny3`M");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[0] = (byte)42;
      byteArray0[0] = (byte)36;
      byteArray0[0] = (byte)44;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "*5Ny3`M");
      assertEquals(7, stringBuffer0.length());
      assertEquals("*5Ny3`M", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, stringBuffer0.length());
      assertEquals("*5Ny3`M", stringBuffer0.toString());
      assertEquals("*5Ny3`M", javaParserTokenManager0.image.toString());
      assertEquals(7, javaParserTokenManager0.image.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 103, (byte)44, 103);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      boolean boolean3 = javaCharStream1.prevCharIsLF;
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("5", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip(137438953472L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3L, long0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedReader0, (-1540), (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager2.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager2.TokenLexicalActions(token1);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("5", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(token1, token0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager1.SwitchTo(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ntransient");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 39, 20, 20);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      int int0 = token_GTToken0.endLine;
      assertEquals(0, int0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      Token token0 = Token.newToken((-2209));
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token1.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(29, token2.endColumn);
      assertEquals(39, token2.beginLine);
      assertEquals(20, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(39, token2.endLine);
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals("ntransient", token2.toString());
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token3 = Token.newToken(0);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertNull(token3.toString());
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      
      javaParserTokenManager2.jjnewStateCnt = (-2147483647);
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      
      Token token4 = token_GTToken0.specialToken;
      assertNull(token4);
      
      Token token5 = Token.newToken(0);
      assertEquals(0, token5.endColumn);
      assertEquals(0, token5.beginColumn);
      assertEquals(0, token5.beginLine);
      assertEquals(0, token5.endLine);
      assertEquals(0, token5.kind);
      assertNull(token5.toString());
      assertNotNull(token5);
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      
      javaParserTokenManager2.SkipLexicalActions((Token) null);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(19);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 19. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
