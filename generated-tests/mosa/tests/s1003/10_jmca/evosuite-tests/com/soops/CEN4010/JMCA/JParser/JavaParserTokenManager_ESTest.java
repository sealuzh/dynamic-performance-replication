/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:08:02 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.ReInit((JavaCharStream) null, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      Token token0 = Token.newToken((-1));
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("a", token0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_&YO:  1tO_+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("wxNSmT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(":", token0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(":", token0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 102, 102);
      javaParserTokenManager0.SkipLexicalActions(token0);
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 102);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 102. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'&', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'&', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'&', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("&", token0.toString());
      assertArrayEquals(new char[] {'&', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("&", token0.toString());
      assertArrayEquals(new char[] {'&', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("k", token1.toString());
      assertArrayEquals(new char[] {'&', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("3", token0.toString());
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("6", token0.toString());
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'i', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'i', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("i", token0.toString());
      assertArrayEquals(new char[] {'i', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('b', char0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      javaParserTokenManager0.curLexState = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\r';
      charArray0[1] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\r', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\r', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\r', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("W", token0.toString());
      assertArrayEquals(new char[] {'\r', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {')', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {')', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {')', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {')', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(")", token0.toString());
      assertArrayEquals(new char[] {')', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(")", token0.toString());
      assertArrayEquals(new char[] {')', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(")", token0.toString());
      assertArrayEquals(new char[] {')', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("i", token0.toString());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("i", token0.toString());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("i", token0.toString());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'!', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'!', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'!', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      assertArrayEquals(new char[] {'!', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(89, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("ii", token0.toString());
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("bb", token0.toString());
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'.', 'F'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', 'F'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', 'F'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(".", token0.toString());
      assertArrayEquals(new char[] {'.', 'F'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("F", token1.toString());
      assertArrayEquals(new char[] {'.', 'F'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("i", token0.toString());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("?", token1.toString());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(91, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("?", token2.toString());
      assertArrayEquals(new char[] {'i', '?', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(91, token2.kind);
      assertEquals(1, token2.endLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      long long0 = charArrayReader0.skip((-1));
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("u", token0.toString());
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("~", token0.toString());
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(90, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("~", token1.toString());
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(90, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("~", token0.toString());
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(90, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("M", token0.toString());
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals("i7", token0.toString());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals("i7", token0.toString());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'B';
      charArray0[2] = '`';
      charArray0[3] = '$';
      charArray0[4] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'Q', 'B', '`', '$', 'b'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Q', 'B', '`', '$', 'b'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Q', 'B', '`', '$', 'b'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("QB", token0.toString());
      assertArrayEquals(new char[] {'Q', 'B', '`', '$', 'b'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'Q', 'B', '`', '$', 'b'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'u';
      charArray0[0] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'=', 'u'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'=', 'u'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'=', 'u'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("=", token0.toString());
      assertArrayEquals(new char[] {'=', 'u'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'=', 'u'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("u", token1.toString());
      assertArrayEquals(new char[] {'=', 'u'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', 'g', 'g'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2963, 2963, 1206);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', 'g', 'g'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', 'g', 'g'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2963, javaCharStream0.getEndLine());
      assertEquals(2963, javaCharStream0.getLine());
      assertEquals(2965, javaCharStream0.getColumn());
      assertEquals(2963, javaCharStream0.getBeginColumn());
      assertEquals(2963, javaCharStream0.getBeginLine());
      assertEquals(2965, javaCharStream0.getEndColumn());
      assertEquals("ggg", token0.toString());
      assertArrayEquals(new char[] {'g', 'g', 'g'}, charArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2963, token0.beginLine);
      assertEquals(2963, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2965, token0.endColumn);
      assertEquals(2963, token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(2963, javaCharStream0.getEndLine());
      assertEquals(2963, javaCharStream0.getLine());
      assertEquals(2965, javaCharStream0.getColumn());
      assertEquals(2963, javaCharStream0.getBeginColumn());
      assertEquals(2963, javaCharStream0.getBeginLine());
      assertEquals(2965, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'g', 'g', 'g'}, charArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(2963, javaCharStream0.getEndLine());
      assertEquals(2963, javaCharStream0.getLine());
      assertEquals(2965, javaCharStream0.getColumn());
      assertEquals(2963, javaCharStream0.getBeginColumn());
      assertEquals(2963, javaCharStream0.getBeginLine());
      assertEquals(2965, javaCharStream0.getEndColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'g', 'g', 'g'}, charArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'!', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'!', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'!', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("!", token0.toString());
      assertArrayEquals(new char[] {'!', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("W", token1.toString());
      assertArrayEquals(new char[] {'!', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'B', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'B', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'B', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("B", token0.toString());
      assertArrayEquals(new char[] {'B', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'B', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("o", token0.toString());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("o", token0.toString());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("22", token0.toString());
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'3', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'3', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = Token.newToken('3');
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("3", token1.toString());
      assertArrayEquals(new char[] {'3', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      StringReader stringReader0 = new StringReader("\"double\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("\"double\"", token0.toString());
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false, "&=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // &=
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '^', 'l', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '^', 'l', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '^', 'l', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '^', 'l', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("^", token0.toString());
      assertArrayEquals(new char[] {'\u0000', '^', 'l', '^', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(107, token0.kind);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1092));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1092. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[22];
      charArray0[0] = 'l';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("lrr", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("2", token0.toString());
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(1, 1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("z", token1.toString());
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("l", token0.toString());
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("l", token0.toString());
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("O", token0.toString());
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("{", token0.toString());
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(79, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      token_GTToken0.image = ">$1";
      assertEquals(">$1", token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("{", token0.toString());
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(79, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = '^';
      charArray0[2] = '^';
      charArray0[5] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '^', '^', '^', '\u0000', '^', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '^', '^', '^', '\u0000', '^', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '^', '^', '^', '\u0000', '^', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '^', '^', '^', '\u0000', '^', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("^", token0.toString());
      assertArrayEquals(new char[] {'\u0000', '^', '^', '^', '\u0000', '^', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(107, token0.kind);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = Token.newToken(0);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[16];
      charArray0[0] = 'G';
      charArray0[1] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      long long0 = charArrayReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("Gi", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '9';
      charArray0[0] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'C', '9', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("C9", token0.toString());
      assertArrayEquals(new char[] {'C', '9', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'C', '9', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("S", token0.toString());
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("v", token0.toString());
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("v", token1.toString());
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[3] = 'i';
      charArray0[4] = '2';
      charArray0[1] = 'i';
      charArray0[0] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      long long0 = charArrayReader0.skip((-1));
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals("2", token0.toString());
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("i2i2", token1.toString());
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream1.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("vvv", token0.toString());
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("vvv", token0.toString());
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', 'N'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'N'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'N'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("2", token0.toString());
      assertArrayEquals(new char[] {'2', 'N'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      token0.beginLine = 0;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("2", token0.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'2', 'N'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn(1, 25);
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'2', 'N'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("N", token1.toString());
      assertArrayEquals(new char[] {'2', 'N'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(26, token1.beginColumn);
      assertEquals(26, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[11];
      charArray0[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("9", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[2] = '/';
      charArray0[2] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'T', '\u0000', '-'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'T', '\u0000', '-'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'T', '\u0000', '-'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("T", token0.toString());
      assertArrayEquals(new char[] {'T', '\u0000', '-'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("T", token1.toString());
      assertArrayEquals(new char[] {'T', '\u0000', '-'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'v', 'O'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'O'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'O'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'O'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals("vO", token0.toString());
      assertArrayEquals(new char[] {'v', 'O'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'v', 'O'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'v', ']', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'v', ']', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'v', ']', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("v", token0.toString());
      assertArrayEquals(new char[] {'v', ']', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("]", token1.toString());
      assertArrayEquals(new char[] {'v', ']', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'v', ']', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("]", token2.toString());
      assertArrayEquals(new char[] {'v', ']', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(82, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', '='}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', '='}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', '='}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("|=", token0.toString());
      assertArrayEquals(new char[] {'|', '='}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(115, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      token_GTToken0.image = ">$1";
      assertEquals(">$1", token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("|=", token0.toString());
      assertArrayEquals(new char[] {'|', '='}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(115, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0086';
      charArray0[0] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'=', '\u0086'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'=', '\u0086'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'=', '\u0086'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('=', char0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'=', '\u0086'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[0] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("C99", token0.toString());
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Zi`_M~@3y/^");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '9';
      charArray0[2] = '\u0088';
      charArray0[0] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'C', '9', '\u0088', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '\u0088', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '\u0088', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("C9", token0.toString());
      assertArrayEquals(new char[] {'C', '9', '\u0088', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u0088\" (136), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', 'U'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', 'U'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', 'U'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      assertArrayEquals(new char[] {'|', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(106, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("U", token2.toString());
      assertArrayEquals(new char[] {'|', 'U'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Zig`\"_vM~@3y/^");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-131), 108);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-131), javaCharStream1.getBeginLine());
      assertEquals(108, javaCharStream1.getEndColumn());
      assertEquals((-131), javaCharStream1.getLine());
      assertEquals(108, javaCharStream1.getColumn());
      assertEquals((-131), javaCharStream1.getEndLine());
      assertEquals(108, javaCharStream1.getBeginColumn());
      assertEquals("1", token0.toString());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-131), token0.endLine);
      assertEquals((-131), token0.beginLine);
      assertEquals(108, token0.endColumn);
      assertEquals(108, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals((-131), javaCharStream1.getBeginLine());
      assertEquals(108, javaCharStream1.getEndColumn());
      assertEquals((-131), javaCharStream1.getLine());
      assertEquals(108, javaCharStream1.getColumn());
      assertEquals((-131), javaCharStream1.getEndLine());
      assertEquals(108, javaCharStream1.getBeginColumn());
      assertEquals("1", token1.toString());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(108, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals((-131), token1.endLine);
      assertEquals(108, token1.beginColumn);
      assertEquals((-131), token1.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-131), javaCharStream1.getBeginLine());
      assertEquals(108, javaCharStream1.getEndColumn());
      assertEquals((-131), javaCharStream1.getLine());
      assertEquals(108, javaCharStream1.getColumn());
      assertEquals((-131), javaCharStream1.getEndLine());
      assertEquals(108, javaCharStream1.getBeginColumn());
      assertEquals("1", token2.toString());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(66, token2.kind);
      assertEquals(108, token2.endColumn);
      assertEquals((-131), token2.endLine);
      assertEquals((-131), token2.beginLine);
      assertEquals(108, token2.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertEquals((-131), javaCharStream1.getBeginLine());
      assertEquals(108, javaCharStream1.getEndColumn());
      assertEquals((-131), javaCharStream1.getLine());
      assertEquals(108, javaCharStream1.getColumn());
      assertEquals((-131), javaCharStream1.getEndLine());
      assertEquals(108, javaCharStream1.getBeginColumn());
      assertEquals("1", token1.toString());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(108, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals((-131), token1.endLine);
      assertEquals(108, token1.beginColumn);
      assertEquals((-131), token1.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("y", token0.toString());
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("y", token1.toString());
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 14.  Encountered: <EOF> after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Zig`\"_vM~@3y/^");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = 's';
      charArray1[2] = 'H';
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'[', 's', 'H'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', 's', 'H'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', 's', 'H'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      assertArrayEquals(new char[] {'[', 's', 'H'}, charArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(81, token0.kind);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("sH", token1.toString());
      assertArrayEquals(new char[] {'[', 's', 'H'}, charArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', 's', 'H'}, charArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'/', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'/', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertArrayEquals(new char[] {'/', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("[", token1.toString());
      assertArrayEquals(new char[] {'/', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(81, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'/', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("[", token2.toString());
      assertArrayEquals(new char[] {'/', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(81, token2.kind);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '@';
      charArray0[2] = 's';
      charArray0[3] = '|';
      charArray0[4] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("@", token1.toString());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("s", token2.toString());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'|', '@', 's', '|', '|'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'G';
      charArray0[4] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', 'G', '\u0000', '\u0000', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'i', 'G', '\u0000', '\u0000', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'i', 'G', '\u0000', '\u0000', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("iG", token0.toString());
      assertArrayEquals(new char[] {'i', 'G', '\u0000', '\u0000', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("iG", token0.toString());
      assertArrayEquals(new char[] {'i', 'G', '\u0000', '\u0000', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'i', 'G', '\u0000', '\u0000', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'P';
      charArray0[2] = 'L';
      charArray0[3] = '!';
      charArray0[4] = 'L';
      charArray0[5] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'L', 'P', 'L', '!', 'L', 'L'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'L', 'P', 'L', '!', 'L', 'L'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'L', 'P', 'L', '!', 'L', 'L'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("LPL", token0.toString());
      assertArrayEquals(new char[] {'L', 'P', 'L', '!', 'L', 'L'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("!", token1.toString());
      assertArrayEquals(new char[] {'L', 'P', 'L', '!', 'L', 'L'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(89, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = ')';
      charArray0[2] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', ')', ')'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'i', ')', ')'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'i', ')', ')'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("i", token0.toString());
      assertArrayEquals(new char[] {'i', ')', ')'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("Y", token0.toString());
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("|", token0.toString());
      assertArrayEquals(new char[] {'|', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      assertFalse(fileDescriptor1.valid());
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      assertNotNull(fileDescriptor1);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor1);
      assertFalse(fileDescriptor1.valid());
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = 'q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'&', 'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'&', 'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'&', 'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
      assertArrayEquals(new char[] {'&', 'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(105, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("q", token1.toString());
      assertArrayEquals(new char[] {'&', 'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("q", token1.toString());
      assertArrayEquals(new char[] {'&', 'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'&', 'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("U", token1.toString());
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'.', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(".", token0.toString());
      assertArrayEquals(new char[] {'.', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'P';
      charArray0[4] = 'l';
      charArray0[3] = 'P';
      charArray0[2] = 'P';
      charArray0[5] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'P', 'P', 'P', 'l', 'P', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', 'P', 'P', 'P', 'l', 'P', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', 'P', 'P', 'P', 'l', 'P', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', 'P', 'P', 'P', 'l', 'P', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0, 0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', 'P', 'P', 'P', 'l', 'P', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("PPPlP", token0.toString());
      assertArrayEquals(new char[] {'\u0000', 'P', 'P', 'P', 'l', 'P', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Zig`\"_vM~@3y/^");
      assertFalse(boolean0);
      
      charArray0[0] = '(';
      charArray0[1] = 'C';
      charArray0[2] = 'y';
      charArray0[3] = '~';
      charArray0[4] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'(', 'C', 'y', '~', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'(', 'C', 'y', '~', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'(', 'C', 'y', '~', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("(", token0.toString());
      assertArrayEquals(new char[] {'(', 'C', 'y', '~', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(77, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'l';
      charArray0[3] = 'R';
      charArray0[2] = 'R';
      charArray0[5] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '\u0000', 'R', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '\u0000', 'R', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("RRRR", token0.toString());
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '\u0000', 'R', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("RRRR", token1.toString());
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("++", token0.toString());
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(99, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      javaCharStream0.adjustBeginLineColumn(2, 1);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(3, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(3, token1.endLine);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals("++", token0.toString());
      assertArrayEquals(new char[] {'+', '+'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(99, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertFalse(token0.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertEquals(108, int0);
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 108, 108);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals("ll", token0.toString());
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token0.beginLine);
      assertEquals(108, token0.endLine);
      assertEquals(109, token0.endColumn);
      assertEquals(108, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = Token.newToken(108);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'v', 'K'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'K'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'K'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("vK", token0.toString());
      assertArrayEquals(new char[] {'v', 'K'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'K'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'K'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("vK", token1.toString());
      assertArrayEquals(new char[] {'v', 'K'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Zi`_M~@3y/^");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      boolean boolean1 = JavaCharStream.staticFlag;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      charArray0[2] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'K', '\u0000', 'K', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'K', '\u0000', 'K', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'K', '\u0000', 'K', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'K', '\u0000', 'K', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("K", token0.toString());
      assertArrayEquals(new char[] {'K', '\u0000', 'K', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("f", token0.toString());
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '-';
      charArray0[2] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', '-', 'y', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'|', '-', 'y', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', '-', 'y', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'|', '-', 'y', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertArrayEquals(new char[] {'|', '-', 'y', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("-", token1.toString());
      assertArrayEquals(new char[] {'|', '-', 'y', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(102, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("e", token0.toString());
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(".", token0.toString());
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(".", token1.toString());
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = '.';
      charArray0[1] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(".", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(85, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'<', 'B', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertArrayEquals(new char[] {'<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("H", token0.toString());
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '/';
      charArray0[2] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'<', '/', '/'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'<', '/', '/'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'<', '/', '/'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertArrayEquals(new char[] {'<', '/', '/'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertNotNull(token0);
      
      try { 
        MockURI.URI("<", (String) null, "case", "|JZADc_qYrluMZJpn/", "|JZADc_qYrluMZJpn/");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: <:case?%7CJZADc_qYrluMZJpn/#%7CJZADc_qYrluMZJpn/
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'e';
      charArray0[3] = 'e';
      charArray0[2] = 'e';
      charArray0[5] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', '\u0000', 'e', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', '\u0000', 'e', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', '\u0000', 'e', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', '\u0000', 'e', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', '\u0000', 'e', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', '\u0000', 'e', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("eee", token0.toString());
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', '\u0000', 'e', '\u0000'}, charArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<OCTAL_LITERAL>");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 'h';
      charArray0[2] = '5';
      charArray0[3] = 'I';
      charArray0[4] = 'D';
      charArray0[5] = 'p';
      charArray0[6] = '>';
      charArray0[7] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'h', '5', 'I', 'D', 'p', '>', 'E'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'h', '5', 'I', 'D', 'p', '>', 'E'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'h', '5', 'I', 'D', 'p', '>', 'E'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'b', 'h', '5', 'I', 'D', 'p', '>', 'E'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'b', 'h', '5', 'I', 'D', 'p', '>', 'E'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals("bh5IDp", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'b', 'h', '5', 'I', 'D', 'p', '>', 'E'}, charArray0);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(">", token1.toString());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'b', 'h', '5', 'I', 'D', 'p', '>', 'E'}, charArray0);
      assertEquals(7, token1.endColumn);
      assertEquals(124, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(7, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals("E", token2.toString());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'b', 'h', '5', 'I', 'D', 'p', '>', 'E'}, charArray0);
      assertEquals(1, token2.beginLine);
      assertEquals(8, token2.beginColumn);
      assertEquals(8, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<OCTAL_LITERAL>");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 'h';
      charArray0[2] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'h', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'h', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'b', 'h', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'b', 'h', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("bh5", token0.toString());
      assertArrayEquals(new char[] {'b', 'h', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '9';
      charArray0[2] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'>', '9', '9'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'>', '9', '9'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'>', '9', '9'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(token0, token_GTToken0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      assertArrayEquals(new char[] {'>', '9', '9'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(124, token0.kind);
      assertFalse(token0.equals((Object)token_GTToken0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("99", token1.toString());
      assertArrayEquals(new char[] {'>', '9', '9'}, charArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '/';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '/';
      charArray0[6] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'6', '6', '/', '6', '6', '/', '6'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'6', '6', '/', '6', '6', '/', '6'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'6', '6', '/', '6', '6', '/', '6'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("66", token0.toString());
      assertArrayEquals(new char[] {'6', '6', '/', '6', '6', '/', '6'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'6', '6', '/', '6', '6', '/', '6'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("/", token1.toString());
      assertArrayEquals(new char[] {'6', '6', '/', '6', '6', '/', '6'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(104, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals("66", token2.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'6', '6', '/', '6', '6', '/', '6'}, charArray0);
      assertEquals(4, token2.beginColumn);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '&';
      charArray0[2] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '&', 'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'/', '&', 'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '&', 'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'/', '&', 'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertArrayEquals(new char[] {'/', '&', 'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 98);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 98. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = '^';
      charArray0[2] = '^';
      charArray0[5] = '^';
      StringReader stringReader0 = new StringReader("E_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("E_", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<OCTAL_LITERAL>");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'h';
      charArray1[1] = '{';
      charArray1[2] = 'h';
      charArray1[3] = 'b';
      charArray1[4] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'h', '{', 'h', 'b', 'b'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'h', '{', 'h', 'b', 'b'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'h', '{', 'h', 'b', 'b'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("h", token0.toString());
      assertArrayEquals(new char[] {'h', '{', 'h', 'b', 'b'}, charArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'h', '{', 'h', 'b', 'b'}, charArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("{", token1.toString());
      assertArrayEquals(new char[] {'h', '{', 'h', 'b', 'b'}, charArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(79, token1.kind);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals("hbb", token2.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'h', '{', 'h', 'b', 'b'}, charArray1);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '|';
      charArray1[2] = 'I';
      charArray1[3] = '|';
      charArray1[4] = '|';
      charArray1[5] = '|';
      charArray1[6] = '|';
      charArray1[7] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'[', '|', 'I', '|', '|', '|', '|', '|'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertEquals(91, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', '|', 'I', '|', '|', '|', '|', '|'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '|', 'I', '|', '|', '|', '|', '|'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '|', 'I', '|', '|', '|', '|', '|'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken('[');
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '|', 'I', '|', '|', '|', '|', '|'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals("|", token1.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'[', '|', 'I', '|', '|', '|', '|', '|'}, charArray1);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(106, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '9';
      charArray0[0] = 'q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'q', '9', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'q', '9', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'q', '9', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("q9", token0.toString());
      assertArrayEquals(new char[] {'q', '9', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'q', '9', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("tt", token0.toString());
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("0", token0.toString());
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.jjmatchedPos = 0;
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("0", token0.toString());
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("0", token0.toString());
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("&", token1.toString());
      assertArrayEquals(new char[] {'0', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(105, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream1.readChar();
      assertEquals('i', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("7", token0.toString());
      assertArrayEquals(new char[] {'i', '7', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Zi`_M~@3y/^");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '9';
      charArray0[2] = '\u0088';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)86, (byte)36, (byte)46, (byte) (-127), (byte)40, (byte)33, (byte) (-31), (byte)46}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)36, 122, (-1918));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)86, (byte)36, (byte)46, (byte) (-127), (byte)40, (byte)33, (byte) (-31), (byte)46}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)86, (byte)36, (byte)46, (byte) (-127), (byte)40, (byte)33, (byte) (-31), (byte)46}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("V$", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals(123, javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)86, (byte)36, (byte)46, (byte) (-127), (byte)40, (byte)33, (byte) (-31), (byte)46}, byteArray0);
      assertEquals(123, token0.endColumn);
      assertEquals(122, token0.beginColumn);
      assertEquals(36, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(36, token0.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte)36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 36. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertEquals(108, int0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)43, (byte)61, (byte)50}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)61, (-1437));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)43, (byte)61, (byte)50}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)43, (byte)61, (byte)50}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(61, javaCharStream1.getLine());
      assertEquals((-1437), javaCharStream1.getBeginColumn());
      assertEquals((-1436), javaCharStream1.getColumn());
      assertEquals(61, javaCharStream1.getBeginLine());
      assertEquals((-1436), javaCharStream1.getEndColumn());
      assertEquals(61, javaCharStream1.getEndLine());
      assertEquals("+=", token0.toString());
      assertArrayEquals(new byte[] {(byte)43, (byte)61, (byte)50}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(110, token0.kind);
      assertEquals(61, token0.beginLine);
      assertEquals((-1436), token0.endColumn);
      assertEquals((-1437), token0.beginColumn);
      assertEquals(61, token0.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals("", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("<<", token0.toString());
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(109, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("-", token1.toString());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(102, token1.kind);
      assertEquals(1, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("4", token2.toString());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token4.toString());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(2, token4.endColumn);
      assertEquals(2, token4.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertNotNull(token4);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("-", token5.toString());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token5.endColumn);
      assertEquals(102, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(2, token5.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertNotNull(token5);
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token3);
      assertNotSame(token1, token4);
      assertNotSame(token1, token2);
      assertNotSame(token1, token5);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("-", token1.toString());
      assertArrayEquals(new char[] {'-', '4'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(102, token1.kind);
      assertEquals(1, token1.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token4));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token5));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[3] = 'i';
      charArray0[4] = '2';
      charArray0[1] = 'i';
      charArray0[0] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', 'i', '2', 'i', '2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)123, (byte) (-11), (byte)84, (byte) (-49), (byte)99, (byte)36}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)84, (byte)99, (byte)84);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)123, (byte) (-11), (byte)84, (byte) (-49), (byte)99, (byte)36}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)123, (byte) (-11), (byte)84, (byte) (-49), (byte)99, (byte)36}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals("8", token0.toString());
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)123, (byte) (-11), (byte)84, (byte) (-49), (byte)99, (byte)36}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(84, token0.endLine);
      assertEquals(99, token0.beginColumn);
      assertEquals(84, token0.beginLine);
      assertEquals(99, token0.endColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)123, (byte) (-11), (byte)84, (byte) (-49), (byte)99, (byte)36}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 84, column 100.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("wxNSmT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = ' ';
      charArray0[2] = 'Z';
      charArray0[3] = '~';
      charArray0[4] = '5';
      charArray0[5] = ';';
      charArray0[6] = '<';
      charArray0[7] = '&';
      charArray0[8] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', ' ', 'Z', '~', '5', ';', '<', '&', '-'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertArrayEquals(new char[] {'i', ' ', 'Z', '~', '5', ';', '<', '&', '-'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertArrayEquals(new char[] {'i', ' ', 'Z', '~', '5', ';', '<', '&', '-'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals("i", token0.toString());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getEndLine());
      assertArrayEquals(new char[] {'i', ' ', 'Z', '~', '5', ';', '<', '&', '-'}, charArray0);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals("Z", token1.toString());
      assertEquals(3, javaCharStream2.getBeginColumn());
      assertEquals(3, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(3, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getEndLine());
      assertArrayEquals(new char[] {'i', ' ', 'Z', '~', '5', ';', '<', '&', '-'}, charArray0);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 329);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 329. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[6] = '.';
      charArray0[7] = '.';
      charArray0[8] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', '\u0000', '\u0000', '\u0000', '.', '.', '='}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '.', '.', '\u0000', '\u0000', '\u0000', '.', '.', '='}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '.', '.', '\u0000', '\u0000', '\u0000', '.', '.', '='}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("...", token0.toString());
      assertArrayEquals(new char[] {'.', '.', '.', '\u0000', '\u0000', '\u0000', '.', '.', '='}, charArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(121, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'C';
      charArray1[1] = 'A';
      charArray1[2] = 'A';
      charArray1[3] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'C', 'A', 'A', '-'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertEquals(67, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'C', 'A', 'A', '-'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', 'A', 'A', '-'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      
      char[] charArray2 = new char[15];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '-';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', 'A', 'A', '-'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("AA", token0.toString());
      assertArrayEquals(new char[] {'C', 'A', 'A', '-'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      
      javaParserTokenManager0.lengthOfMatch = 32;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals("-", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'C', 'A', 'A', '-'}, charArray1);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(102, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals("", token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'C', 'A', 'A', '-'}, charArray1);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[0] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("C", token0.toString());
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'C', '9', '9', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '<';
      charArray1[1] = '<';
      charArray1[2] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("<<", token0.toString());
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(109, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
      
      Token token1 = Token.newToken(1);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArray1, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("<<", token2.toString());
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(109, token2.kind);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("<", token3.toString());
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(88, token3.kind);
      assertEquals(3, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      assertFalse(fileDescriptor1.valid());
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      assertNotNull(fileDescriptor1);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor1);
      assertFalse(fileDescriptor1.valid());
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'&', '&', 'x'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'&', '&', 'x'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'&', '&', 'x'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("&&", token0.toString());
      assertArrayEquals(new char[] {'&', '&', 'x'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(98, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("x", token1.toString());
      assertArrayEquals(new char[] {'&', '&', 'x'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'D';
      charArray0[6] = 'a';
      charArray0[7] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'a', ',', 'a', '\u0000', 'a', 'D', 'a', 'a'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'a', ',', 'a', '\u0000', 'a', 'D', 'a', 'a'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'a', ',', 'a', '\u0000', 'a', 'D', 'a', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'a', ',', 'a', '\u0000', 'a', 'D', 'a', 'a'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'a', ',', 'a', '\u0000', 'a', 'D', 'a', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("a", token0.toString());
      assertArrayEquals(new char[] {'a', ',', 'a', '\u0000', 'a', 'D', 'a', 'a'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(token0);
  }
}
