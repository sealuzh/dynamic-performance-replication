/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:01:50 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.Locale;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.substituteMarkers("()", "()", nameSpec0);
      assertEquals("IF_REPRODUCIBLE", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE  = ''", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "Ajk*F`awH", "", stringArray0);
      assertEquals("Ajk*F`awH as  on null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execute", true, "execute", "execute");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "CONSTRAINT execute CHECK execute";
      stringArray0[3] = "CONSTRAINT execute CHECK execute";
      String string1 = SQLUtil.removeComments("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Page.DIAG_SLOTTABLE_SIZE;
      String string1 = SQLUtil.normalize("renamee6!5lma*tj5|", true);
      assertEquals("renamee6 ! 5lma * tj5 |", string1);
      
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("PRbT0", stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("renamee6!5lma*tj5|", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT renamee6!5lma*tj5| FOREIGN KEY () REFERENCES null()", string2);
      
      String string3 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("m&_Mxq)+L4)", (String[]) null, "m&_Mxq)+L4)", "IckH:4YaI-)(`>", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      int int0 = (-7042);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-7042), (CharSequence) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -7042
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("execute");
      assertFalse(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", (DBTable) null, (-2179), " AS VARCHAR_IGNORECASE)");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" AS VARCHAR_IGNORECASE)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-2425), "");
      defaultDBColumn0.isEquivalent((DBObject) null);
      defaultDBColumn0.setDefaultValue((String) null);
      defaultDBColumn0.setDefaultValue("");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("updateand");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " on ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1623877078), "X&k+&c:\"^?");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X&k+&c:\"^?", defaultDBTable0, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("X&k+&c:\"^? X&K+&C:\"^? NULL", string0);
      
      boolean boolean0 = SQLUtil.isQuery("*12`5]|Ke}WmI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.normalize("xh0*ynz(>p", true);
      assertEquals("xh0 * ynz (> p", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.normalize("CHECK ", false);
      assertEquals("CHECK", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("CHECK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isQuery("{C");
      String string0 = "PzKE";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F/0g", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec1);
      int int0 = 2796;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2796, (Object) nameSpec0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2796
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablederby.storage.pagecachesize");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("alter tablederby.storage.pagecachesize");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isQuery("{C");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("alter talederby.storage.pagecachesize", "alter talederby.storage.pagecachesize", (VersionNumber) null);
      defaultDatabase0.getTable(" = ", false);
      String string0 = "Yfqu\\OP'M0(x6JsQeO%";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("alter talederby.storage.pagecachesize", (DBTable) null, 15, "YfquOP'M0(x6JsQeO%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: YfquOP'M0(x6JsQeO%
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-4021L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executeq");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "executeq";
      stringArray0[1] = "executeq";
      stringArray0[2] = "executeq";
      stringArray0[3] = "executeq";
      stringArray0[4] = "executeq";
      stringArray0[5] = "executeq";
      stringArray0[6] = "executeq";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "!v_Kj~xJ:o*->\"*", false, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("executeq.!v_Kj~xJ:o*->\"*", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "jM$S.v/@";
      String string0 = TypeId.TIMESTAMP_NAME;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isProcedureCall("TIMESTAMP");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("alter tablederby.storage.pagecachesize", stringArray0);
      assertEquals("alter tablederby.storage.pagecachesize.jM$S.v/@, alter tablederby.storage.pagecachesize.jM$S.v/@, alter tablederby.storage.pagecachesize.null", string1);
      
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("qXe_|/J~y460_", compositeDBObject0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.toString();
      dBCatalog0.getTable("qXe_|/J~y460_", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jM$S.v/@", (DBTable) null, 44, "EX\"JFNkCQ/r[U");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("jM$S.v/@", string2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[5];
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("derby.storage.pagecaches", 12);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[0] = "jM$S.v/@";
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      Integer integer0 = RawTransaction.COMMIT;
      TableContainer tableContainer0 = new TableContainer("jM$S.v/@");
      tableContainer0.getTable("Expected but did not recieve a result set");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance((-183), "- ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'=fJV`UWUdp&=Gf", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setSize(integer0);
      Boolean boolean0 = new Boolean(true);
      defaultDBColumn0.setDefaultValue("\u0001\u0106\u0003\uFFFF\u0001\u0105");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("- (0)", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8`0ny");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("'=fJV`UWUdp&=Gf");
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable1);
      assertEquals("'=fJV`UWUdp&=Gf", string1);
      
      defaultDBColumn0.getNotNullConstraint();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("'=fJV`UWUdp&=Gf, '=fJV`UWUdp&=Gf, '=fJV`UWUdp&=Gf", string2);
      
      boolean boolean1 = SQLUtil.isQuery("Old database: ");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isQuery("SELECT");
      DBCatalog dBCatalog0 = new DBCatalog("SELECT");
      SQLUtil.normalize("(, , , , , )", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select intoerror converting to array of bytes.");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "I).yx!1:10<}Hv";
      stringArray0[1] = "-";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("I).yx!1:10<}Hv = 'I).yx!1:10<}Hv' AND - = '-' AND null = null", string0);
      
      String string1 = SQLUtil.normalize("I).yx!1:10<}Hv", false);
      assertEquals("I).yx ! 1 : 10 < } Hv", string1);
      
      String string2 = SQLUtil.leftJoin("I).yx!1:10<}Hv = 'I).yx!1:10<}Hv' AND - = '-' AND null = null", stringArray0, stringArray0[2], stringArray0[2], stringArray0);
      assertEquals("left join null as null on I).yx!1:10<}Hv = 'I).yx!1:10<}Hv' AND - = '-' AND null = null.I).yx!1:10<}Hv = null.I).yx!1:10<}Hv and I).yx!1:10<}Hv = 'I).yx!1:10<}Hv' AND - = '-' AND null = null.- = null.- and I).yx!1:10<}Hv = 'I).yx!1:10<}Hv' AND - = '-' AND null = null.null = null.null", string2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.normalize("jM$S.v/@", true);
      String string0 = SQLUtil.removeComments("U");
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "jM$S.v/@";
      stringArray0[2] = "jM$S.v/@";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.normalize("jM$S.v/@ = 'jM$S.v/@' AND jM$S.v/@ = 'jM$S.v/@' AND jM$S.v/@ = 'jM$S.v/@'", true);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("drop index", "drop index", "drop index");
      SQLUtil.ownerDotComponent(dBSequence0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      String string0 = RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER;
      StringBuilder stringBuilder0 = new StringBuilder("U");
      SQLUtil.addRequiredCondition("CURRENT_USER", stringBuilder0);
      assertEquals("U and CURRENT_USER", stringBuilder0.toString());
      
      SQLUtil.isQuery("U");
      SQLUtil.parseColumnTypeAndSize("derby.storage.pageReservedSpace");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("derby.storage.pageReservedSpace", (DBTable) null, (-1492), "org.databene.jdbacl.SQLUtil");
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column derby.storage.pageReservedSpace", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = new Boolean("renamee6!5lma*tj5|");
      String string0 = NoPutResultSet.ABSOLUTE;
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.isProcedureCall("table null");
      defaultDBTable0.getIndex("table null");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.isProcedureCall("execyemjzt7}oe9iy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "D}R[RXApK^2+ft9I^Fb";
      stringArray0[4] = "D}R[RXApK^2+ft9I^Fb";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.normalize("inner", true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.isQuery("%5yV\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)47;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBSchema dBSchema0 = new DBSchema("%5yV\"");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%5yV\"", dBSchema0);
      defaultDBTable0.getIndex("%5yV\"");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean("9N]N}np\"FZQNy");
      SQLUtil.normalize("#p>q,l$HMc2", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SchemaDescriptor.SYSSTAT_SCHEMA_UUID;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop table", true, "# p > q, l $ HMc2", "watchd");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isQuery("SELECT");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rukmi`f";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("rukmi`f", false, defaultDBTable0, stringArray0);
      dBNonUniqueIndex0.addColumnName("f/|T#8ks{3");
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      String[] stringArray1 = new String[6];
      SQLUtil.normalize("renamee6!5lma*tj5|", true);
      SQLUtil.renderColumnListWithTableName("a46|ZSez", stringArray1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      SQLUtil.normalize("renamee6!5lma*tj5|", false);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isQuery("create table");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(rukmi`f)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"rukmi`f\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "JAVA ";
      SQLUtil.renderColumnListWithTableName("U", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*/", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "z_'9.RQewj9K+H", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("JAVA ", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      defaultDBTable0.toString();
      defaultDBTable0.getUniqueConstraint("z_'9.RQewj9K+H");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("*/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("update");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "update";
      stringArray0[1] = "update";
      stringArray0[2] = "update";
      stringArray0[3] = "update";
      stringArray0[4] = "update";
      stringArray0[5] = "=jq;>vt*XOX+";
      stringArray0[6] = "=jq;>vt*XOX+";
      stringArray0[7] = "=jq;>vt*XOX+";
      String string0 = SQLUtil.leftJoin("=jq;>vt*XOX+", stringArray0, "EPC", "=jq;>vt*XOX+", stringArray0);
      assertEquals("left join EPC as =jq;>vt*XOX+ on =jq;>vt*XOX+.update = =jq;>vt*XOX+.update and =jq;>vt*XOX+.update = =jq;>vt*XOX+.update and =jq;>vt*XOX+.update = =jq;>vt*XOX+.update and =jq;>vt*XOX+.update = =jq;>vt*XOX+.update and =jq;>vt*XOX+.update = =jq;>vt*XOX+.update and =jq;>vt*XOX+.=jq;>vt*XOX+ = =jq;>vt*XOX+.=jq;>vt*XOX+ and =jq;>vt*XOX+.=jq;>vt*XOX+ = =jq;>vt*XOX+.=jq;>vt*XOX+ and =jq;>vt*XOX+.=jq;>vt*XOX+ = =jq;>vt*XOX+.=jq;>vt*XOX+", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-2425), "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer0);
      defaultDBColumn0.isEquivalent((DBObject) null);
      defaultDBColumn0.setDefaultValue("");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.toString();
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter talederby.storage.pagecachesize");
      assertNull(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean1 = SQLUtil.isProcedureCall("X0Y63.S");
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alter talederby.storage.pagecachesize";
      stringArray0[1] = "z!R`.[lb<V";
      String string0 = SQLUtil.join("z!R`.[lb<V", "alter talederby.storage.pagecachesize", stringArray0, "CLOB", "CLOB", stringArray0);
      assertEquals("z!R`.[lb<V join CLOB as CLOB on alter talederby.storage.pagecachesize.alter talederby.storage.pagecachesize = CLOB.alter talederby.storage.pagecachesize and alter talederby.storage.pagecachesize.z!R`.[lb<V = CLOB.z!R`.[lb<V", string0);
      
      String string1 = FBConnectionProperties.ISOLATION_PROPERTY;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" on ", 6);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string2 = SQLUtil.normalize("-q)#K,rLN", false);
      assertEquals(" - q) # K, rLN", string2);
      
      SQLUtil.mutatesStructure("Z_kje+1&");
      Character character0 = Character.valueOf('<');
      String string3 = SQLUtil.substituteMarkers("'", "ZWR`;={do", character0);
      assertEquals("'", string3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "'";
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = FileUtil.fsIsIgnoreCase;
      SQLUtil.isDML("select");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'", (DBSchema) null);
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("z_'9.RQewj9K+H", false, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBUniqueIndex0.getTable();
      defaultDBTable1.toString();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, stringArray0[0], false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isQuery("SELECT");
      DBCatalog dBCatalog0 = new DBCatalog("SELECT");
      SQLUtil.join("SELECT", ";)A$]3>4Zg", stringArray0, ";)A$]3>4Zg", "5(Q8?Zxwd }", stringArray0);
      SQLUtil.mutatesDataOrStructure("deleteu");
      SQLUtil.parseColumnTypeAndSize("truncate");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RawStoreFactory.PAGE_CACHE_SIZE_PARAMETER;
      String string1 = Page.DIAG_BYTES_RESERVED;
      String string2 = FBConnectionProperties.ISOLATION_PROPERTY;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o/@|S$ro");
      SQLUtil.normalize("#@D%`*g*$\"/_y", true);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      SQLUtil.parseColumnTypeAndSize("Illegal column type format: ");
      DBDataType dBDataType0 = DBDataType.getInstance(2295, "x=3%");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-1859));
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", (DBTable) null, dBDataType0, integer2, integer3);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("truncate X=3%(1,3) NULL", string0);
      
      String[] stringArray1 = new String[0];
      String string1 = SQLUtil.renderColumnNames(stringArray1);
      assertEquals("()", string1);
      
      String string2 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("truncate", string2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      String string0 = RawStoreFactory.PAGE_CACHE_SIZE_PARAMETER;
      SQLUtil.removeComments("");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBCatalog0.getSchema("rukmi`");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)36;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intorukmi`fxeer@~&d");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      TableContainer tableContainer0 = new TableContainer("select intorukmi`fxeer@~&d", dBCatalog0);
      tableContainer0.equals("derby.storage.pageCacheSize");
      tableContainer0.getTable("");
      String string1 = SQLUtil.normalize("rukmi`", true);
      assertEquals("rukmi ` ", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBSchema dBSchema0 = new DBSchema("jM$S.v/@");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String string0 = "into";
      defaultDBTable0.getIndex("into");
      SQLUtil.typeAndName(dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder(9);
      SQLUtil.addOptionalCondition("jM$S.v/@", stringBuilder0);
      int int0 = (-1606);
      int int1 = 445;
      // Undeclared exception!
      try { 
        stringBuilder0.replace(1263, 445, "exec'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      String string0 = TypeId.TIMESTAMP_NAME;
      DBDataType dBDataType0 = DBDataType.getInstance((-154), " REFERENCES ");
      DBDataType.getInstance(182, "TIMESTAMP");
      DBCatalog dBCatalog0 = new DBCatalog(stringArray0[1]);
      DBSchema dBSchema0 = new DBSchema(stringArray0[1]);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(182, 182);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TIMESTAMP", defaultDBTable0, dBDataType0, integer0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]/eZo*!h");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "XBCXN.S";
      stringArray0[3] = "calldeleteu";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("ruKMi`FXeEr@~&d");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("XBCXN.S", true, defaultDBTable0, "insertdeleteu");
      SQLUtil.typeAndName(dBCheckConstraint0);
      String string0 = TypeId.TIMESTAMP_NAME;
      DBDataType.getInstance((int) (byte)11, "COLUMN_LIST");
      Integer integer0 = RawTransaction.ABORT;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i+A|8*x}}70");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "TIMESTAMP", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBSchema dBSchema0 = new DBSchema("e5ohE=~7Jg?h8Ixs4x");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jM$S.v/@", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "e5ohE=~7Jg?h8Ixs4x", false, stringArray0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = TypeId.TIMESTAMP_NAME;
      SQLUtil.isDDL("drop materialized view");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ruKMi`FXeEr@~&d";
      stringArray0[3] = "ruKMi`FXeEr@~&d";
      stringArray0[7] = "ruKMi`FXeEr@~&d";
      String[] stringArray1 = new String[4];
      stringArray1[1] = "XBCXN.S";
      stringArray1[3] = "calldeleteu";
      SQLUtil.join("calldeleteu", stringArray0[1], stringArray1, "ruKMi`FXeEr@~&d", stringArray0[1], stringArray0);
      SQLUtil.mutatesDataOrStructure("ruKMi`FXeEr@~&d");
      SQLUtil sQLUtil0 = new SQLUtil();
      TableContainer tableContainer0 = new TableContainer("XBCXN.S", defaultDBTable0);
      tableContainer0.getTable(stringArray0[1]);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(stringArray1[0], true, defaultDBTable0, "insertdeleteu");
      SQLUtil.typeAndName(dBCheckConstraint0);
      String string0 = TypeId.TIMESTAMP_NAME;
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)11, "COLUMN_LIST");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ruKMi`FXeEr@~&d", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i+A|8*x}}70");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "TIMESTAMP", (Object[]) stringArray1);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("setBigDecimal(String,BigDecimal)", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("bk]|\"T", stringBuilder1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder3 = stringBuilder2.append(stringBuffer0);
      stringBuilder2.append((CharSequence) "bk]|\"T");
      StringBuilder stringBuilder4 = stringBuilder3.append(0.0);
      StringBuilder stringBuilder5 = stringBuilder4.replace(46, 46, "setBigDecimal(String,BigDecimal)");
      StringBuilder stringBuilder6 = stringBuilder5.insert(46, 0L);
      SQLUtil.addOptionalCondition("bk]|\"T", stringBuilder6);
      assertEquals("setBigDecimal(String,BigDecimal) or bk]|\"Tbk]|0setBigDecimal(String,BigDecimal)\"T0.0 or bk]|\"T", stringBuilder6.toString());
      assertEquals("setBigDecimal(String,BigDecimal) or bk]|\"Tbk]|0setBigDecimal(String,BigDecimal)\"T0.0 or bk]|\"T", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = TypeId.TIMESTAMP_NAME;
      DBDataType.getInstance((-154), "jM$S.v/@");
      DBDataType dBDataType0 = DBDataType.getInstance(1026, "71vq0}EONJ`");
      DBCatalog dBCatalog0 = new DBCatalog("71vq0}EONJ`");
      DBSchema dBSchema0 = new DBSchema("71vq0}EONJ`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("71vq0}EONJ`");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString(2313);
      Integer.remainderUnsigned(2434, 2434);
      Integer integer1 = Integer.getInteger("TIMESTAMP", integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer0, integer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop table");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("truncate", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jM$S.v/@", dBSchema0);
      DBCatalog dBCatalog1 = defaultDBTable0.getCatalog();
      DBTable dBTable0 = dBCatalog1.getTable("jM$S.v/@", true);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "valueOf", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (jM$S.v/@, , )", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = TypeId.TIMESTAMP_NAME;
      DBSchema dBSchema0 = new DBSchema("select intoalter talederby.storage.pagecachesize");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" UREFERENCES ", dBSchema0);
      defaultDBTable0.setDoc(" UREFERENCES ");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("TIMESTAMP", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderColumnListWithTableName("- 0", stringArray0);
      String string1 = SQLUtil.removeComments("jM$S.v/@");
      assertEquals("jM$S.v/@", string1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execute", true, "execute", "execute");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK execute", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      String string1 = SQLUtil.normalize("alter materialized viewtimestamp", false);
      assertEquals("alter materialized viewtimestamp", string1);
      
      SQLUtil.parseColumnTypeAndSize("CHECK execute");
      String string2 = SQLUtil.normalize("--", false);
      assertEquals("--", string2);
      
      SQLUtil.parseColumnTypeAndSize("W8a3%WzTZ1.@6UL^x%");
      String string3 = SQLUtil.ownerDotComponent(dBCheckConstraint0);
      assertEquals("execute", string3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.isQuery("");
      DBCatalog dBCatalog0 = new DBCatalog("");
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil sQLUtil0 = new SQLUtil();
      TableContainer tableContainer0 = new TableContainer("create materialized view");
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "truncatetable";
      stringArray0[1] = "alter ";
      stringArray0[2] = "m+4Uj~J";
      stringArray0[3] = " TYPE = ";
      stringArray0[4] = "truncatetable";
      stringArray0[5] = " TYPE = ";
      stringArray0[6] = "alter indextimestamp";
      stringArray0[8] = "@\"6R~@2R.{pMhQ";
      SQLUtil.innerJoin("alter ", stringArray0, "kPyLu,z}Dv9<", "4cu>BL>b&umk;R", stringArray0);
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "jM$S.v/@";
      String string0 = TypeId.TIMESTAMP_NAME;
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "@Fu_s#", "select");
      String string1 = RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER;
      dBCheckConstraint0.toString();
      dBCheckConstraint0.equals((Object) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_' 8OK>;/");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("JJK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = Page.DIAG_BYTES_RESERVED;
      String string1 = FBConnectionProperties.ISOLATION_PROPERTY;
      SQLUtil.normalize("#@D%`*g*$\"/_y", false);
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      pipedReader1.markSupported();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader1);
      TableContainer tableContainer0 = new TableContainer("o/@|S$NOro");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o/@|S$NOro", (DBSchema) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "# @ D % ` * g * $ \"/_y\"";
      stringArray0[2] = "# @ D % ` * g * $ \"/_y\"";
      stringArray0[3] = "#@D%`*g*$\"/_y";
      stringArray0[4] = "isolation";
      SQLUtil.normalize("bytesReserved", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("bytesReserved", defaultDBTable0, 2064, "isolation");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "jM$S.v/@";
      String string0 = TypeId.TIMESTAMP_NAME;
      DBCatalog dBCatalog0 = new DBCatalog("Error converting to array of bytes.");
      DBSchema dBSchema0 = new DBSchema("truncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Pz", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter index", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.min((-2035018682), (-2035018682));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jM$S.v/@");
      mockPrintWriter0.println(0.0F);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Integer.min((-111), (-1717986916));
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, jM$S.v/@, )", string1);
  }
}
