/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:18:18 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, 6);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 416.80842931768;
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(32, 32, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1760, 454, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2286.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      int int1 = 1573;
      SparseMatrix.zero(1573, 3, 454);
      cRSMatrix0.updateAt(454, 3, matrixFunction0);
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.maxInRow(3);
      MockRandom mockRandom2 = new MockRandom();
      CRSMatrix.fromCSV("]&*");
      mockRandom0.nextDouble();
      double double0 = 32.320780683392;
      CRSMatrix.random(int0, int1, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(0, 1013.3, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(8, 8, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 22.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.setAll(22.0);
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, (Matrix) null, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      CRSMatrix.from1DArray(0, 0, doubleArray0);
      int int0 = (-179);
      int int1 = (-700);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        DenseVector.zero((-179));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(4080);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4081
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      int int0 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2286.0)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.random(3, 454, (double) 0, (Random) mockRandom0);
      cRSMatrix1.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.updateAt(454, 3, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 454
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-1665.02);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 416.80842931768;
      doubleArray0[1] = 11.565910818264998;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix matrix0 = Matrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3404, 3404);
      cRSMatrix0.copyOfRows(447);
      cRSMatrix0.transpose();
      cRSMatrix0.minInRow(3404);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1760, 1760);
      cRSMatrix0.getColumn(1760);
      cRSMatrix0.nonZeroIteratorOfColumn(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.copy();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-1434));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1434
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-2103), (-2103), (-3243.47346213), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(10, 10, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1396, 1396, Double.POSITIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1760, 1760);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      int int1 = 1775;
      int int2 = (-3099);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(1775, (-3099));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1775' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 416.80842931768;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 912.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(964, 964);
      Matrix matrix0 = cRSMatrix0.copyOfShape(964, 0);
      matrix0.removeLastColumn();
      matrix0.euclideanNorm();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 726;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(726);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      ((CRSMatrix) sparseMatrix0).copyOfShape(639, 726);
      int int1 = 9;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(9, 639, matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = null;
      byte[] byteArray1 = null;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray1);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.non(matrixPredicate0);
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix cRSMatrix2 = new CRSMatrix(int0, int0, int1);
      cRSMatrix2.rotate();
      CRSMatrix.fromBinary(byteArray0);
      sparseMatrix0.blank();
      int int2 = 1738;
      int int3 = (-2222);
      CRSMatrix.zero(int1, int2, int3);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 416.80842931768;
      doubleArray0[1] = 11.565910818264998;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      int int0 = 848;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = cRSMatrix0.copyOfShape(848, 848);
      byte[] byteArray0 = new byte[2];
      cRSMatrix0.trace();
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      cRSMatrix0.copyOfShape(6058, 2);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.non(matrixPredicate0);
      matrix0.rotate();
      CRSMatrix cRSMatrix2 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix2.toSparseMatrix();
      int int1 = 1839;
      MockRandom mockRandom0 = new MockRandom(byte0);
      SparseMatrix.randomSymmetric(int1, (double) int0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double[] doubleArray0 = new double[9];
          doubleArray0[0] = 416.80842931768;
          doubleArray0[1] = 0.0;
          doubleArray0[2] = Double.NEGATIVE_INFINITY;
          doubleArray0[3] = 0.0;
          doubleArray0[4] = 0.0;
          doubleArray0[4] = 912.0;
          // Undeclared exception!
          try { 
            CRSMatrix.from1DArray(955, 1, doubleArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 9
             //
             verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(2091);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2091
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = (byte) (-46);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (double) (byte) (-46);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int int0 = 2091;
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((byte) (-46), 2091, 3221.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-46' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1760, 1760);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1760;
      doubleArray0[1] = (double) 877;
      int[] intArray0 = new int[3];
      intArray0[0] = 2300;
      intArray0[1] = 10;
      CRSMatrix cRSMatrix1 = new CRSMatrix(2, 877, 969, doubleArray0, intArray0, intArray0);
      cRSMatrix0.getColumn(5853);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2590);
      int int0 = 41;
      cRSMatrix0.iteratorOfColumn(41);
      cRSMatrix0.blankOfRows(2590);
      cRSMatrix0.nonZeroAt(1287, 41);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(0L, (-99L), (-1L));
      byte byte0 = (byte) (-65);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int int1 = 3;
      org.evosuite.runtime.Random.setNextRandom(int1);
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[2] = int0;
      intArray0[3] = (int) byte0;
      cRSMatrix0.select(intArray0, intArray0);
      int int2 = 8;
      CRSMatrix.identity(int2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1471, 454, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2286.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(454, 0, matrixFunction0);
      MockRandom mockRandom1 = new MockRandom();
      int int1 = 982;
      int int2 = 4200;
      mockRandom1.ints(73, (-887));
      CRSMatrix.random(int2, int1, (double) int0, (Random) mockRandom1);
      String string0 = "";
      CRSMatrix.fromCSV(string0);
      mockRandom1.nextDouble();
      int int3 = (-975);
      double double0 = 95.83512656997527;
      CRSMatrix.random(int2, int3, double0, (Random) mockRandom0);
      int int4 = 84;
      int int5 = 17;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int4, int0, int5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1760, 1760);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.non(matrixPredicate0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = new Integer(1760);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.random(1760, 473, (double) 0, (Random) mockRandom0);
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix0, cRSMatrix0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1000);
      cRSMatrix0.getColumn(1000);
      cRSMatrix0.nonZeroIteratorOfColumn(0);
      cRSMatrix0.iteratorOfRow(361);
      double double0 = new Integer(1000);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double1 = new Double(1000);
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(864.12097, (-1593.257429893498), (double)1000, (double)1000, (double)3).when(vectorAccumulator1).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      int int1 = 1725;
      CRSMatrix.zero(int0, int1);
      cRSMatrix0.max();
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-1665.02);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.toDenseMatrix();
      int int0 = (-406);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(2, 1109.3312302912466, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 411.02745940572555;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.getColumn(990);
      cRSMatrix0.iteratorOfColumn(990);
      RowMajorSparseMatrix.zero(973, 3, 973);
      cRSMatrix0.iteratorOfRow(0);
      cRSMatrix0.max();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInRow(361, vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[4] = 55.363001626709995;
      doubleArray1[1] = 55.363001626709995;
      doubleArray1[2] = 9.93;
      doubleArray1[2] = 100.0;
      doubleArray1[4] = 2988.474332;
      doubleArray1[5] = (-1666.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[2] = 55.363001626709995;
      doubleArray2[1] = 55.363001626709995;
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 55.363001626709995;
      doubleArray2[5] = (-1666.7038915);
      doubleArray2[6] = (-1666.0);
      doubleArray2[7] = 100.0;
      doubleArray0[1] = doubleArray2;
      doubleArray0[0] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(925);
      cRSMatrix0.copyOfShape(925, 925);
      cRSMatrix0.max();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      CRSMatrix cRSMatrix0 = new CRSMatrix(7, 7, 7, (double[]) null, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.toBinary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1000);
      cRSMatrix0.getColumn(1000);
      cRSMatrix0.nonZeroIteratorOfColumn(0);
      RowMajorSparseMatrix.zero(1000, 3, 1000);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.copyOfShape(3, 988);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1760, 454, (double) 0, (Random) mockRandom0);
      int int0 = 1;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1584, 1, 454);
      cRSMatrix0.updateAt(454, 1, matrixFunction0);
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.maxInRow(1);
      MockRandom mockRandom2 = new MockRandom();
      ((CRSMatrix) sparseMatrix0).minInRow(1);
      int int1 = Double.MAX_EXPONENT;
      mockRandom0.nextDouble();
      cRSMatrix0.select((int[]) null, (int[]) null);
      CRSMatrix.identity(int1);
      cRSMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1760, 454, (double) 0, (Random) mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1573, 3, 454);
      sparseMatrix0.subtract((double) 1573);
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.maxInRow(3);
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1573;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 454;
      doubleArray0[0] = doubleArray1;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix.identity(3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(984);
      // Undeclared exception!
      SparseMatrix.randomSymmetric(984, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 416.80842931768;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 416.80842931768;
      int int0 = 848;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[1] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(848, 416.80842931768);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.shuffle();
      cRSMatrix1.nonZeroIterator();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(2288, 848, matrixFunction0);
      int int1 = 5144;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).each(matrixProcedure0);
      cRSMatrix0.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 416.80842931768;
      doubleArray0[1] = (-23.152589454545943);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfColumns(1740);
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.divide((-23.152589454545943));
      cRSMatrix0.removeFirstColumn();
      int int0 = 27;
      cRSMatrix2.getColumn(1740);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 1740, (-1023L), (-1023L));
      double double0 = (-2.1872265966754156E-4);
      CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      int int1 = 6;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.foldNonZeroInColumn(int1, vectorAccumulator0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1760, 1760);
      cRSMatrix0.swapColumns((-1), (-1));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      Matrix matrix0 = cRSMatrix0.rotate();
      double[][] doubleArray0 = new double[0][6];
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, matrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(13, 1775, 3187);
      byte byte0 = (byte)36;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 8;
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.transform(matrixFunction1);
      int int2 = (-104);
      int int3 = 1426;
      MatrixFunction matrixFunction2 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix1).updateAt(1426, 3187, matrixFunction2);
      MockRandom mockRandom0 = new MockRandom();
      int int4 = 1429;
      int int5 = 1388;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int4, int5);
      int int6 = 751;
      CRSMatrix cRSMatrix2 = new CRSMatrix(int1, int6, int0);
      cRSMatrix2.minInRow(int2);
      int int7 = (-1);
      int int8 = (-1068);
      CRSMatrix cRSMatrix3 = new CRSMatrix(byte0, int7, int8);
      int int9 = (-2019);
      int int10 = 99;
      double double0 = 0.0;
      cRSMatrix1.set(int9, int10, double0);
      CRSMatrix.identity(int3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 416.80842931768;
      doubleArray0[1] = (-23.152589454545943);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2960.2, 0.5, (-2720.109699), (-23.152589454545943), 161.0888256).when(vectorAccumulator0).accumulate();
      double[] doubleArray2 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.min();
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[0] = doubleArray2;
      MockRandom mockRandom0 = new MockRandom((-2016L));
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(130);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 130
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 416.80842931768;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 416.80842931768;
      doubleArray1[5] = 416.80842931768;
      doubleArray1[6] = 416.80842931768;
      doubleArray0[0] = doubleArray1;
      Matrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-150), 677);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -150
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1000);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix1, cRSMatrix1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      double[][] doubleArrayArray0 = null;
      CRSMatrix.from2DArray(doubleArrayArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(848);
      cRSMatrix0.foldNonZeroInRow(2, (VectorAccumulator) null);
      byte byte0 = (byte)122;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byte byte1 = (byte) (-94);
      byteArray0[5] = byte1;
      byteArray0[6] = byte0;
      CRSMatrix.fromBinary(byteArray0);
      Random random0 = null;
      CRSMatrix.random((int) byteArray0[6], (int) byte0, (double) byteArray0[0], random0);
      cRSMatrix0.min();
      int int0 = 539;
      int int1 = 851;
      cRSMatrix0.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1269.8761973858)).when(vectorAccumulator0).accumulate();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1645.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[1] = (double) 1760;
      doubleArray2[2] = (double) 453;
      doubleArray2[3] = (double) 453;
      doubleArray2[4] = (double) 1760;
      doubleArray2[5] = (double) 453;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.blankOfColumns(6);
      CRSMatrix cRSMatrix1 = new CRSMatrix(6, 8, 6);
      Matrix matrix0 = cRSMatrix1.divide((-2280.0));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix1.min();
      CRSMatrix cRSMatrix2 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix2.slice(928, 1760, 8, (-453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [928..8][1760..-453].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1584, 1, 454);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      ((CRSMatrix) sparseMatrix0).minInRow(1);
      int int0 = Double.MAX_EXPONENT;
      mockRandom0.nextDouble();
      CRSMatrix.diagonal(17, (-1724.2991959730728));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = 848;
      double[][] doubleArray0 = new double[5][5];
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(848, 848, 848);
      int int1 = 2;
      cRSMatrix0.foldNonZeroInRow(2, (VectorAccumulator) null);
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 9993L;
      mockRandom0.longs(long0);
      int int2 = (-994);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int0, int0);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.each(matrixProcedure0);
      int int3 = 822;
      double double1 = (-1.0);
      mockRandom0.ints((long) int3);
      cRSMatrix1.set(int2, int3, double1);
      cRSMatrix0.max();
      int int4 = (-382);
      mockRandom0.longs();
      CRSMatrix cRSMatrix2 = CRSMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
      CRSMatrix.from2DArray(doubleArray0);
      int int5 = 1990;
      cRSMatrix2.blankOfShape(int5, int4);
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 16;
      int int1 = 1425;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      // Undeclared exception!
      CRSMatrix.random(16, 1425, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.swapColumns((-1), (-1));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      byte[] byteArray0 = new byte[1];
      cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      Matrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix1.setAll(0.0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("]oiH!Jd:nY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(237, 0.0);
      double double1 = cRSMatrix0.min();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 2810;
      int int1 = (-3117);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(304L, (double) 2810, (double) 304L);
      mockRandom0.nextLong();
      Matrix.random(int0, int1, mockRandom0);
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.iteratorOfNonZeroRows();
      int int2 = Integer.MAX_VALUE;
      int int3 = (-1099);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int2;
      CRSMatrix.from1DArray(int2, int3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 416.80842931768;
      doubleArray0[1] = (-23.152589454545943);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray1[0];
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = cRSMatrix0.blankOfColumns(1740);
      Matrix matrix1 = matrix0.divide((-23.152589454545943));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2960.2, 0.5, (-2720.109699), (-23.152589454545943), 161.0888256).when(vectorAccumulator0).accumulate();
      double[] doubleArray2 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.min();
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray2;
      cRSMatrix0.setAll((-23.152589454545943));
      int[] intArray0 = new int[3];
      intArray0[0] = 1740;
      intArray0[1] = 1740;
      intArray0[2] = 1740;
      matrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1775, 0, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, rowMajorSparseMatrix0, cRSMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 984;
      MockRandom mockRandom0 = new MockRandom(2369L);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(984, 984, 984);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.setAll(1000.0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      MockRandom mockRandom1 = new MockRandom();
      double double0 = 1.0;
      int int0 = (-2630);
      CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1760, 454, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(454, 3, matrixFunction0);
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.maxInRow(3);
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(3, 2975.996466078);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.nextFloat();
      CRSMatrix.block(cRSMatrix2, cRSMatrix0, cRSMatrix0, cRSMatrix2);
      cRSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1760;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1760, 454, (double) 0, (Random) mockRandom0);
      int int1 = 1;
      byte[] byteArray0 = new byte[2];
      cRSMatrix0.swapRows(1, 48);
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-74);
      CRSMatrix.fromBinary(byteArray0);
      int int2 = (-255);
      CRSMatrix.zero(int1, int0);
      int int3 = 8;
      cRSMatrix0.minInRow(int3);
      int int4 = Double.MAX_EXPONENT;
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.nextDouble();
      CRSMatrix.diagonal(byteArray0[1], int2);
      int int5 = 0;
      CRSMatrix.identity(int5);
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 4;
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.05838628619763517;
      doubleArray1[1] = 0.05838628619763517;
      doubleArray1[2] = 416.80842931768;
      doubleArray1[3] = 0.05838628619763517;
      doubleArray1[4] = 416.80842931768;
      doubleArray1[5] = 416.80842931768;
      doubleArray1[6] = 0.05838628619763517;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int1 = 1740;
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      cRSMatrix0.insert(matrix0);
      cRSMatrix0.blank();
      Matrix.from1DArray(3, 3, doubleArray1);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(981);
      cRSMatrix1.insert(matrix0);
      cRSMatrix1.divide(1224.78);
      int int2 = cRSMatrix1.rank();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = 1367.0;
      MockRandom mockRandom0 = new MockRandom(int1);
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int0, int2, double0, (Random) mockRandom0);
      int[] intArray0 = null;
      cRSMatrix2.select(intArray0, intArray0);
      int int3 = 392;
      CRSMatrix cRSMatrix3 = CRSMatrix.identity(int3);
      int int4 = (-1368);
      cRSMatrix3.getColumn(int4);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 416.80842931768;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      int int0 = 1740;
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      Matrix matrix1 = cRSMatrix0.insert(matrix0);
      Matrix matrix2 = cRSMatrix0.insert(matrix1);
      matrix2.divide(1740);
      Matrix matrix3 = cRSMatrix0.divide((-3147.132607079103));
      matrix3.rank();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInColumn(1740);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1740' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1760, 454, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.maxInRow(1668);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, (Matrix) null, cRSMatrix0, (Matrix) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      cRSMatrix0.toRowMajorSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(13, 1775, 1775);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ((CRSMatrix) rowMajorSparseMatrix0).minInRow(13);
      int int1 = 1743;
      int int2 = 1754;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1588, (int) (byte)35, (int) (byte)35);
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      Integer integer0 = new Integer((byte)35);
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).each(matrixProcedure0);
      int int0 = 16;
      org.evosuite.runtime.Random.setNextRandom(int0);
      cRSMatrix1.select(intArray0, intArray0);
      int int1 = 885;
      CRSMatrix.identity(int1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2590);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2590, (double)13, Double.NEGATIVE_INFINITY, (-1724.2991959730728)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(13, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 3069;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3069, 1367);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1367, (double)1367, (double)3069, (double)3069, 1.4007942622556625E-4).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(1367, vectorFunction0);
      matrix0.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 3051;
      int int1 = 1367;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3051, 1367);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(1367, vectorFunction0);
      int int2 = 15;
      cRSMatrix0.maxInRow(15);
      int int3 = 3;
      MockRandom mockRandom0 = new MockRandom();
      long long0 = (-2043L);
      mockRandom0.doubles((double) 1367, 0.0);
      mockRandom0.longs(long0);
      double[][] doubleArrayArray0 = null;
      cRSMatrix0.removeLastColumn();
      mockRandom0.nextFloat();
      RowMajorSparseMatrix.from2DArray(doubleArrayArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int3, int2, (double) int0, (Random) mockRandom0);
      double double0 = (-1713.57729);
      cRSMatrix0.setAll(double0);
      int int4 = 2396;
      cRSMatrix0.nonZeroIteratorOfRow(int4);
      cRSMatrix0.toColumnVector();
      int int5 = (-3910);
      int int6 = 28;
      cRSMatrix0.nonZeroAt(int5, int6);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int7 = 6191;
      cRSMatrix1.set(int1, int7, int1);
      double double1 = (-1391.0548248);
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int5, int2, double1, (Random) mockRandom0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      cRSMatrix2.apply((MatrixMatrixOperation<Matrix>) ooPlaceMatricesAddition0, (Matrix) cRSMatrix1);
      cRSMatrix1.iteratorOfNonZeroRows();
      int int8 = (-569);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(int8, vectorProcedure0);
      int int9 = (-579);
      int int10 = 40;
      CRSMatrix.zero(int9, int3, int10);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 1;
      int int1 = 2590;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2590);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2590, (double)1, Double.NEGATIVE_INFINITY, (-1724.2991959730728), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(1, vectorFunction0);
      int int2 = 17;
      cRSMatrix0.iteratorOfColumn(int2);
      cRSMatrix0.removeFirstColumn();
      cRSMatrix0.getColumn(int0);
      MockRandom mockRandom0 = new MockRandom();
      long long0 = (-99L);
      long long1 = 0L;
      long long2 = (-1L);
      mockRandom0.longs(long1, long0, long2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      matrix0.sum();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int2;
      cRSMatrix1.select(intArray0, intArray0);
      int int3 = 660;
      CRSMatrix.identity(int3);
      int int4 = (-4437);
      cRSMatrix0.getRow(int4);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2590);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(1450, vectorFunction0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 2590;
      int[] intArray0 = new int[14];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 1450;
      intArray0[3] = 13;
      CRSMatrix cRSMatrix1 = new CRSMatrix(13, 13, 2590, doubleArray0, intArray0, intArray0);
      cRSMatrix1.iterator();
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 416.80842931768;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = cRSMatrix0.blankOfColumns(1740);
      matrix0.divide(0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2960.2, 16.669574188602667, (-2720.109699), 2348.6989336, 161.0888256).when(vectorAccumulator0).accumulate();
      double[] doubleArray2 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.min();
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[0] = doubleArray2;
      int[] intArray0 = new int[2];
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix.identity((-1785));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 0;
      double double0 = (-2285.677804936604);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = 454;
      MockRandom mockRandom0 = new MockRandom();
      long long0 = new Integer(1471);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1471, 454, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2285.677804936604)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(454, 0, matrixFunction0);
      cRSMatrix0.divide((-2285.677804936604));
      int int2 = (-1806);
      CRSMatrix.zero(int2, int2, int0);
      mockRandom0.nextDouble();
      int int3 = 508;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int3;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      double double1 = (-1784.9);
      doubleArray0[5] = double1;
      doubleArray0[6] = double0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(int3, int1, doubleArray0);
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      int int4 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.transformRow(int4, vectorFunction0);
  }
}
