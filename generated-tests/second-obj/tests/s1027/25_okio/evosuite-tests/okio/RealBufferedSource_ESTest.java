/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:25:40 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(115);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.read(buffer1, (long) 115);
      realBufferedSource0.readByte();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)119, (long) (byte)119, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=119 toIndex=0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.read(buffer0, 637L);
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      hashingSource0.hash();
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pipe pipe0 = new Pipe(934L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf(byteString0);
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[3];
      try { 
        realBufferedSource0.readByteString(174L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.skip(952L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      buffer0.writeLongLe((-1675L));
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      try { 
        realBufferedSource0.skip(39L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-1030L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1030
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteString0.size());
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      assertNotNull(hashingSource1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteString0.size());
      assertNotSame(hashingSource1, hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteString0.size());
      
      HashingSource hashingSource2 = HashingSource.sha1(hashingSource1);
      assertNotNull(hashingSource2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteString0.size());
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      String string0 = realBufferedSource0.readString(charset0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertEquals("", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteString0.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      
      long long0 = realBufferedSource0.read(buffer0, 2147483647L);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertEquals((-1L), long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(4, byteString0.size());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteString0.size());
      
      ByteString byteString1 = ByteString.of(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(4, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      
      byte[] byteArray1 = realBufferedSource0.buffer.readByteArray();
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        realBufferedSource0.skip(1000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217280L);
      assertNotNull(pipe0);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8(71776119061217280L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-4));
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      realBufferedSource0.skip((-4));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      long long0 = realBufferedSource0.read(buffer1, 4278190080L);
      assertEquals(1L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-3015L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3015
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pipe pipe0 = new Pipe(57L);
      assertNotNull(pipe0);
      
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      pipe0.sourceClosed = false;
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0, byteString0.size());
      
      boolean boolean0 = realBufferedSource0.rangeEquals(57L, byteString0);
      assertTrue(boolean0);
      assertEquals(0, byteString0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.read((Buffer) null, 57L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      long long0 = realBufferedSource0.indexOfElement(byteString0, (long) (byte)99);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-4));
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      long long0 = realBufferedSource0.read(buffer0, 637L);
      assertEquals(1L, long0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertNotNull(string0);
      assertEquals("\uFFFD", string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertSame(buffer0, buffer1);
      
      long long1 = realBufferedSource0.indexOfElement(byteString0);
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-68), (long) (byte) (-68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-68 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pipe pipe0 = new Pipe(4381L);
      assertNotNull(pipe0);
      
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      source0.close();
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray(695L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertNotNull(gzipSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Timeout timeout0 = gzipSource0.timeout();
      assertNotNull(timeout0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      realBufferedSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(8192L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotSame(buffer0, buffer1);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(8192L, byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(boolean0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotSame(buffer0, buffer1);
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(4, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0, int0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, options0.size());
      assertNotSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      long long0 = realBufferedSource0.indexOfElement(byteString0, 129L);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      String string1 = realBufferedSource0.toString();
      assertNotNull(string1);
      assertEquals("buffer([size=0])", string1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(9, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9, options0.size());
      
      long long1 = realBufferedSource0.read(buffer0, 2383L);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long2 = realBufferedSource0.read(buffer0, 2383L);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals((-1L), long2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string2 = realBufferedSource0.readUtf8Line();
      assertNull(string2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      long long0 = realBufferedSource0.indexOfElement(byteString0, 129L);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      String string1 = realBufferedSource0.toString();
      assertNotNull(string1);
      assertEquals("buffer([size=0])", string1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      long long1 = realBufferedSource0.indexOf(byteString0);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      String string2 = realBufferedSource0.buffer.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("[size=0]", string2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
      
      boolean boolean1 = realBufferedSource0.rangeEquals(81L, byteString0, (-1312), (-1312));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotSame(byteString0, byteString1);
      
      try { 
        realBufferedSource0.readString(1838L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      long long1 = realBufferedSource0.indexOf((byte) (-8), 284L, 284L);
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = realBufferedSource0.readUtf8();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
      
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-4));
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      long long0 = realBufferedSource0.readAll(realBufferedSource1.buffer);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      long long1 = realBufferedSource0.indexOf((byte)25, 1840L, 1840L);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
      
      boolean boolean1 = realBufferedSource1.rangeEquals((long) (byte)25, byteString0, (int) (byte)25, (int) (byte)25);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertSame(charset1, charset0);
      
      String string1 = realBufferedSource0.readString(0L, charset1);
      assertNotNull(string1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals("", string1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(charset1, charset0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      String string1 = realBufferedSource0.toString();
      assertNotNull(string1);
      assertEquals("buffer([size=0])", string1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-83L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -83
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater(false);
      assertNotNull(inflater0);
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteString0.size());
      
      try { 
        realBufferedSource0.rangeEquals((long) (byte)48, byteString0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = realBufferedSource0.buffer.writeAll(buffer0);
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      ByteString byteString1 = realBufferedSource0.buffer.md5();
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean1 = realBufferedSource0.rangeEquals(2121L, byteString0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      long long1 = realBufferedSource0.readAll(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      String string1 = realBufferedSource0.readUtf8();
      assertNotNull(string1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      try { 
        realBufferedSource0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotSame(hashingSource0, hashingSource1);
      
      long long0 = realBufferedSource0.indexOfElement(byteString0, 129L);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotSame(hashingSource0, hashingSource1);
      
      String string1 = realBufferedSource0.toString();
      assertNotNull(string1);
      assertEquals("buffer([size=0])", string1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      int int0 = buffer0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource2 = HashingSource.sha256(buffer1);
      assertNotNull(hashingSource2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString2.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(1003L, byteString2, (int) (byte)48, (-2146317803));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(boolean0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString2.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((long) (-3339), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3339
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteString0.size());
      
      ByteString byteString1 = ByteString.of(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(4, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      
      Buffer buffer1 = buffer0.writeByte((-1));
      assertNotNull(buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = realBufferedSource0.indexOf((byte)10, (long) (byte)10, (long) (byte)10);
      assertEquals((-1L), long0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotNull(hashingSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(32, byteString2.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      long long1 = realBufferedSource0.indexOfElement(byteString1);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString1.size());
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        Charset.forName("d_\" @='ivjbH");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // d_\" @='ivjbH
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteString0.size());
      
      ByteString byteString1 = ByteString.of(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(4, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      
      byte[] byteArray1 = buffer0.readByteArray();
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(byteArray1, byteArray0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource2);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      long long0 = realBufferedSource2.read(realBufferedSource0.buffer, (long) (byte)10);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(32, byteString2.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer1, byteString1);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(4, byteString1.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString3 = hashingSink0.hash();
      assertNotNull(byteString3);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString3.size());
      assertEquals(4, byteString1.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer1, buffer0);
      
      byteString3.write(realBufferedSource0.buffer);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString3.size());
      assertEquals(4, byteString1.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(buffer1, buffer0);
      
      long long1 = realBufferedSource1.indexOfElement(byteString3);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(long1 == long0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, long1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString3.size());
      assertEquals(4, byteString1.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(buffer1, buffer0);
      
      try { 
        realBufferedSource1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=64 content=997bd0fdb0f97e9f3a7b5be255a01d2b4ef233744e88e452d2b68b9954db4d5e\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      long long0 = buffer0.writeAll(realBufferedSource0.buffer);
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(0, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, options0.size());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeShortLe(1447);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource2);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean4 = realBufferedSource2.exhausted();
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(boolean4);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource2.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = hashingSource0.read(realBufferedSource0.buffer, 1104L);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      
      byte[] byteArray0 = new byte[10];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(10, byteString1.size());
      
      ByteString byteString2 = ByteString.of(byteArray0);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(10, byteString2.size());
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      assertNotNull(hashingSource1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSource1, hashingSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSource0, inflater0);
      assertNotNull(inflaterSource0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      
      inflaterSource0.close();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(inflater0.needsInput());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      boolean boolean0 = realBufferedSource1.rangeEquals((-1L), byteString0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertNotNull(gzipSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha256(gzipSource0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-122);
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Inflater inflater0 = new Inflater(false);
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-4), (byte)1, (byte) (-3), (byte)71, (byte) (-52), (byte)45, (byte) (-82), (byte)9}, byteArray0);
      assertEquals(9, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-4), (byte)1, (byte) (-3), (byte)71, (byte) (-52), (byte)45, (byte) (-82), (byte)9}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(9, byteString0.size());
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertNotNull(hashingSource1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-4), (byte)1, (byte) (-3), (byte)71, (byte) (-52), (byte)45, (byte) (-82), (byte)9}, byteArray0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(9, byteString0.size());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-4), (byte)1, (byte) (-3), (byte)71, (byte) (-52), (byte)45, (byte) (-82), (byte)9}, byteArray0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(9, byteString0.size());
      
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = 2L;
      try { 
        realBufferedSource0.readFully(buffer0, (long) 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      realBufferedSource0.close();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource1.buffer);
      assertNotNull(hashingSink0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      HashingSink hashingSink1 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(hashingSink1, hashingSink0);
      
      ByteString byteString0 = hashingSink1.hash();
      assertNotNull(byteString0);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertNotSame(hashingSink1, hashingSink0);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOfElement(byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = hashingSource0.read(realBufferedSource0.buffer, 1104L);
      assertEquals((-1L), long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      byte[] byteArray0 = new byte[10];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(10, byteString1.size());
      
      ByteString byteString2 = ByteString.of(byteArray0);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals(10, byteString2.size());
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      assertNotNull(hashingSource1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSource1, hashingSource0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((-1L), byteString0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(boolean0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      
      try { 
        realBufferedSource0.require(2488L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byteString0.write(realBufferedSource0.buffer);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertFalse(boolean0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      long long1 = 695L;
      try { 
        realBufferedSource0.readByteArray(695L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      long long0 = realBufferedSource0.indexOfElement(byteString0, 4865L);
      assertEquals((-1L), long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[6] = byteString0;
      long long1 = buffer0.writeAll(hashingSource0);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals((-1), int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(9, options0.size());
      
      int int1 = realBufferedSource0.select(options0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(9, options0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.writeShortLe(10);
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      String string0 = realBufferedSource1.readUtf8();
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals("", string0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer3 = realBufferedSink0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      
      int int2 = buffer1.select(options0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals((-1), int2);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9, options0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      
      Buffer buffer4 = buffer1.write(byteString0);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(16L, buffer4.size());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      
      int int3 = realBufferedSource0.readUtf8CodePoint();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(65533, int3);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      String string1 = realBufferedSource1.readUtf8Line();
      assertNotNull(string1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals("\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~", string1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      long long0 = hashingSource0.read(buffer_UnsafeCursor0.buffer, (byte)0);
      assertEquals((-1L), long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(9, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(9, options0.size());
      assertSame(buffer0, buffer1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = realBufferedSource1.buffer;
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      Buffer buffer3 = realBufferedSource0.buffer.writeShortLe((-1));
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      
      Timeout timeout0 = hashingSource0.timeout();
      assertNotNull(timeout0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      assertNotNull(realBufferedSource2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      
      String string1 = realBufferedSource2.readUtf8();
      assertNotNull(string1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertEquals("", string1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource1.buffer);
      assertNotNull(realBufferedSink0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer4);
      assertNotNull(realBufferedSink1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      
      Buffer buffer5 = realBufferedSink1.buffer;
      assertNotNull(buffer5);
      assertTrue(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertTrue(buffer5.equals((Object)buffer1));
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer3);
      
      int int1 = realBufferedSource1.buffer.select(options0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(9, options0.size());
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      Buffer buffer6 = realBufferedSink0.buffer.write(byteString0);
      assertNotNull(buffer6);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer5));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(16L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer5);
      
      int int2 = realBufferedSource0.readUtf8CodePoint();
      assertFalse(buffer0.equals((Object)buffer6));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(65533, int2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      long long0 = realBufferedSource0.indexOfElement(byteString0, 1L);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long1 = realBufferedSource0.buffer.writeAll(buffer0);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      byte[] byteArray0 = new byte[2];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      long long2 = buffer2.writeAll(buffer1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(8, options0.size());
      
      int int1 = realBufferedSource0.select(options0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(8, options0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      
      Buffer buffer4 = buffer2.writeShortLe((-1));
      assertNotNull(buffer4);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string1 = realBufferedSource1.readUtf8();
      assertNotNull(string1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer5 = realBufferedSink0.buffer;
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(2L, buffer5.size());
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer4);
      
      int int2 = buffer0.select(options0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertEquals((-1), int2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(8, options0.size());
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      
      Buffer buffer6 = buffer1.write(byteString0);
      assertNotNull(buffer6);
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(16L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(16L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer3);
      assertSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer3);
      
      int int3 = realBufferedSource1.readUtf8CodePoint();
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(65533, int3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      String string2 = realBufferedSource0.readUtf8Line();
      assertNull(string2);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      realBufferedSource1.skip(8L);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSource1, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.readAll((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[6] = byteString0;
      long long0 = buffer0.writeAll(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      
      byteStringArray0[3] = byteString0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(9, options0.size());
      
      int int0 = realBufferedSource0.select(options0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(9, options0.size());
      assertNotSame(buffer0, buffer1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      Buffer buffer3 = buffer1.writeShortLe(240);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long1 = realBufferedSource1.indexOf(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(long1 == long0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string1 = realBufferedSource2.readUtf8();
      assertNotNull(string1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer4 = realBufferedSink0.buffer;
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer2));
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      
      Buffer buffer5 = realBufferedSource1.buffer.write(byteString0);
      assertNotNull(buffer5);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer4));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer4));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(18L, buffer5.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      
      try { 
        realBufferedSource2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      long long0 = realBufferedSource1.indexOf((byte) (-31));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      long long1 = realBufferedSource1.readAll(buffer0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotNull(byteString1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals(0, byteString1.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      
      InputStream inputStream0 = realBufferedSource1.buffer.inputStream();
      assertNotNull(inputStream0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      
      String string0 = realBufferedSource0.readString(0L, charset0);
      assertNotNull(string0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals("", string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      realBufferedSource1.close();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      String string1 = realBufferedSource0.readUtf8();
      assertNotNull(string1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals("", string1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals((-1L), byteString1, (int) (byte) (-31), (int) (byte) (-31));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      assertNotNull(sequenceInputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      try { 
        realBufferedSource0.buffer.readFrom((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeDecimalLong(853L);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      // Undeclared exception!
      buffer0.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Pipe pipe0 = new Pipe(100000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      pipe0.sinkClosed = true;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeIntLe(224);
      assertNotNull(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      pipe0.sinkClosed = true;
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(4L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      buffer0.size = 20L;
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer0.size());
      assertEquals(16L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(20L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertNotNull(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = hashingSource0.read(realBufferedSource0.buffer, 1104L);
      assertEquals((-1L), long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      byte[] byteArray0 = new byte[10];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      long long1 = hashingSource0.read(buffer_UnsafeCursor0.buffer, (byte)0);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(9, options0.size());
      
      realBufferedSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      byte[] byteArray1 = realBufferedSource0.readByteArray();
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(byteArray1, byteArray0);
      assertSame(buffer0, buffer1);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertNotNull(hashingSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer1, byteString0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink1, hashingSink0);
      assertSame(buffer1, buffer0);
      
      ByteString byteString1 = hashingSink1.hash();
      assertNotNull(byteString1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString1.size());
      assertEquals(16, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      long long0 = realBufferedSource1.readAll(buffer0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      InputStream inputStream0 = realBufferedSource1.buffer.inputStream();
      assertNotNull(inputStream0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      
      long long1 = buffer0.indexOfElement(byteString0, 0L);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      realBufferedSource1.close();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      String string1 = realBufferedSource0.readUtf8();
      assertNotNull(string1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals("", string1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      long long0 = realBufferedSource0.indexOf((byte)13, 2215L);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)56;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)68;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)68, (byte)13, (byte)56, (byte)0, (byte)68, (byte)68, (byte)22, (byte)68}, byteArray0);
      assertEquals(8, byteString0.size());
      
      ByteString byteString1 = ByteString.of(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)68, (byte)13, (byte)56, (byte)0, (byte)68, (byte)68, (byte)22, (byte)68}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(8, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString1);
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)68, (byte)13, (byte)56, (byte)0, (byte)68, (byte)68, (byte)22, (byte)68}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(8, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource1);
      assertArrayEquals(new byte[] {(byte)68, (byte)13, (byte)56, (byte)0, (byte)68, (byte)68, (byte)22, (byte)68}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(8, byteString1.size());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      
      InflaterSource inflaterSource0 = new InflaterSource(realBufferedSource0, inflater0);
      assertNotNull(inflaterSource0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      inflaterSource0.close();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      
      boolean boolean0 = realBufferedSource1.rangeEquals((long) (byte)13, byteString1);
      assertArrayEquals(new byte[] {(byte)68, (byte)13, (byte)56, (byte)0, (byte)68, (byte)68, (byte)22, (byte)68}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(8, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      String string1 = realBufferedSource1.readUtf8Line();
      assertNull(string1);
      assertArrayEquals(new byte[] {(byte)68, (byte)13, (byte)56, (byte)0, (byte)68, (byte)68, (byte)22, (byte)68}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(8, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
