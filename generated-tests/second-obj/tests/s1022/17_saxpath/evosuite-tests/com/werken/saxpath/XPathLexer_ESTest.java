/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:56:37 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{t^$");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("{t^$", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("{t^$");
      xPathLexer1.getXPath();
      xPathLexer1.div();
      xPathLexer2.isIdentifierStartChar('3');
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('3');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$|0apf9ZN{RO;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(26, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P)B3*54");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("P)", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.colon();
      String string0 = token0.toString();
      assertEquals("[ (18) ([)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(" (", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getPreviousToken();
      xPathLexer0.isIdentifierChar('8');
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("B?1oIXcxqX4qo@{Ve?S");
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.isIdentifierChar('K');
      xPathLexer0.consume(25);
      assertEquals("B?1oIXcxqX4qo@{Ve?S", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1s0;ubl83nR/CscRd");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("1", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("s", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("0", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9c8");
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.not();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i85cuW=F*W");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("i85cuW", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals(21, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w;f{d");
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#7Ns\"N");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.literal();
      xPathLexer0.div();
      xPathLexer0.hasMoreChars();
      xPathLexer0.or();
      xPathLexer0.consume(6);
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":A8@vX[}3W^j-( H");
      XPathLexer xPathLexer1 = new XPathLexer(":A8@vX[}3W^j-( H");
      Token token0 = xPathLexer1.doubleColon();
      assertEquals(":A", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer1.slashes();
      token1.toString();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(16, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      token1.toString();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(18, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (11) (8)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$&'R\"E1.bYU9");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer1.mod();
      xPathLexer0.colon();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer2.consume((-3195));
      xPathLexer1.rightBracket();
      xPathLexer1.plus();
      // Undeclared exception!
      try { 
        xPathLexer2.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B.W dkE3vCr>?nJo5");
      xPathLexer0.and();
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.identifier();
      assertEquals(".W", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (26) (B)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.notEquals();
      assertEquals(" d", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('(');
      assertFalse(boolean0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("k", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4A-`Krl");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.currentPosition();
      Token token1 = xPathLexer0.slashes();
      assertEquals("A", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.operatorName();
      String string0 = token0.toString();
      assertEquals("[ (3) (B)", string0);
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("z", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("^w", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(20, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("_", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("R", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("L", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("|", token7.getTokenText());
      
      Token token8 = xPathLexer0.not();
      assertEquals("/", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      char char0 = xPathLexer0.LA(271);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kc<}& YWE");
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.dots();
      xPathLexer0.and();
      String string0 = token0.toString();
      assertEquals("[ (22) (kc)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (13) (<)", string1);
      
      Token token2 = xPathLexer0.at();
      assertEquals("}", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("c:v3gks`-GtryH MMP");
      xPathLexer1.operatorName();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("c", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.and();
      Token token4 = xPathLexer0.dollar();
      assertEquals("&", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(" ", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SI/");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("SI", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("SI/");
      Token token1 = xPathLexer1.comma();
      assertEquals("S", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer0.dots();
      assertEquals("/", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      Token token3 = xPathLexer2.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.operatorName();
      int int0 = xPathLexer4.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")Lh\"L tt,S\"G4");
      Token token0 = xPathLexer0.identifier();
      String string0 = token0.toString();
      assertEquals("[ (15) ()", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftParen();
      assertEquals(")", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Lh\"L tt,S\"G4", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("L", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N ");
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      Token token1 = xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("[ (-2) ()");
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!t'!>>qDR*DYO6s");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("t'", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      String string0 = token2.toString();
      assertEquals("[ (26) (!)", string0);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(">", token3.getTokenText());
      assertEquals(9, token3.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B.W dkE3vCr>?nJo5");
      xPathLexer0.and();
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (26) (B)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("");
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "bjfHMO)";
      XPathLexer xPathLexer0 = new XPathLexer("bjfHMO)");
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-922));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" :?F,#kj{");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",u.<xxp>b<IcA2");
      xPathLexer0.consume();
      xPathLexer0.dots();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'3JKG9o95mw.2|`%a(n");
      Token token0 = xPathLexer0.leftParen();
      String string0 = token0.toString();
      assertEquals("[ (1) (')", string0);
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("J", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("K", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("G", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L<}& YWr");
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("d><9vmf%_-VT#I");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",Dp0!4-g0+6|2F$HF");
      Token token0 = xPathLexer0.not();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (,)", string0);
      
      char char0 = xPathLexer0.LA(124);
      assertEquals('\uFFFF', char0);
      
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.doubleColon();
      xPathLexer0.hasMoreChars();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("4-", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      String string1 = token5.toString();
      assertEquals("[ (17) (6)", string1);
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(",", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I=D gH4` 'i3");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("D ", token3.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      xPathLexer0.consume(5);
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("O[V\"gHMXmwib<");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.rightBracket();
      xPathLexer1.dollar();
      xPathLexer0.nextToken();
      xPathLexer1.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "bjfHMO)";
      XPathLexer xPathLexer0 = new XPathLexer("bjfHMO)");
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-922));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$&'R\"E1.bYU9");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer0.notEquals();
      xPathLexer1.mod();
      xPathLexer0.colon();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer2.consume((-3195));
      xPathLexer1.rightBracket();
      xPathLexer1.plus();
      // Undeclared exception!
      try { 
        xPathLexer2.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{t^$");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals("{", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("t", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("^$", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("{t^$");
      xPathLexer1.getXPath();
      xPathLexer1.div();
      xPathLexer2.isIdentifierStartChar('3');
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('3');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I=D gH4` 'i3");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertNotSame(token2, token0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer1.div();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer1.operatorName();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("I", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.div();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B01thi");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer("B01thi");
      xPathLexer4.nextToken();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.plus();
      Token token0 = xPathLexer1.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("drwPoise");
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.dots();
      xPathLexer0.operatorName();
      xPathLexer1.relationalOperator();
      xPathLexer1.or();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "bjfHMO)";
      XPathLexer xPathLexer0 = new XPathLexer("bjfHMO)");
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-914));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "-t'!>y>qDR*DYO6s";
      XPathLexer xPathLexer0 = new XPathLexer("-t'!>y>qDR*DYO6s");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("-t'!>y>qDR*DYO6s");
      xPathLexer0.leftParen();
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "mAqhWS>ITSVS9";
      XPathLexer xPathLexer0 = new XPathLexer("mAqhWS>ITSVS9");
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-3195));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      String string0 = "g'nj1yv|E";
      XPathLexer xPathLexer1 = new XPathLexer("+3CJ0LJ5@=[");
      xPathLexer1.nextToken();
      xPathLexer1.consume((-3195));
      // Undeclared exception!
      try { 
        xPathLexer1.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d]/><9vmf%_-,T#I");
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("d]", token0.getTokenText());
      
      char char0 = xPathLexer0.LA(113);
      assertEquals('\uFFFF', char0);
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("/>", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("<", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("9", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("drwPoise");
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jjo^Cg,");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("jjo", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("^C", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"02jU[/");
      Token token0 = xPathLexer0.not();
      assertEquals("\"", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("02", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      xPathLexer0.consume(3);
      Token token2 = xPathLexer0.nextToken();
      assertEquals(11, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%awvr");
      Token token0 = xPathLexer0.pipe();
      String string0 = token0.toString();
      assertEquals("[ (17) (%)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (17) (%)");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.operatorName();
      token0.toString();
      xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.at();
      token1.toString();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer1.leftParen();
      Token token2 = xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      token2.toString();
      xPathLexer0.consume(1);
      xPathLexer1.div();
      xPathLexer1.setPreviousToken(token2);
      xPathLexer0.consume();
      assertEquals("Bz^w*A_RL|/0@&|@k1", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Qp3996");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.at();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2656));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h0");
      XPathLexer xPathLexer1 = new XPathLexer("h0");
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("h0");
      Token token0 = xPathLexer2.equals();
      String string0 = token0.toString();
      assertEquals("[ (21) (h)", string0);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.setXPath("h0");
      char char0 = xPathLexer3.LA(589);
      assertEquals('\uFFFF', char0);
      
      Token token1 = xPathLexer3.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("h0", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("~aPu");
      Token token3 = xPathLexer4.pipe();
      assertEquals("~", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer3.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer1.star();
      String string1 = token6.toString();
      assertEquals("[ (20) (h)", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",u.<xxp>b<IcA2");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(7, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("x", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A8@v}3W^j-WH");
      XPathLexer xPathLexer1 = new XPathLexer("A8@v}3W^j-WH");
      Token token0 = xPathLexer1.doubleColon();
      assertEquals("A8", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer1.slashes();
      token1.toString();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (11) (@)", string0);
      
      char char0 = xPathLexer0.LA(1264);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.at();
      assertEquals("@", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" :?F,#kj{");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(" :", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("?F,#kj{", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.setXPath("^>Xm_l>");
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("^", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(">", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.endPosition();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("X", token6.getTokenText());
      
      xPathLexer0.operatorName();
      int int0 = xPathLexer0.endPosition();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bmB_Q(5lz&@gl,no#>");
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("m", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "d]/><9vmf%_-,T#I";
      XPathLexer xPathLexer0 = new XPathLexer("d]/><9vmf%_-,T#I");
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.minus();
      Token token0 = xPathLexer1.colon();
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer("|KA#e7i#MioN");
      xPathLexer2.hasMoreChars();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("|KA#e7i#MioN");
      xPathLexer1.leftBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("drwPoise");
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.equals();
      token0.toString();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.at();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      xPathLexer1.relationalOperator();
      xPathLexer1.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.relationalOperator();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!t'!>y>qDR*DYO6s");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",u.<xxp>b<IcA2");
      xPathLexer0.nextToken();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a{}(D@l'|Q]$.u");
      xPathLexer0.and();
      xPathLexer0.star();
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("(D", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("|", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("Q", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (23) (@)", string0);
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      String string1 = token0.toString();
      assertEquals("[ (22) ({})", string1);
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "kc<}& YWe";
      XPathLexer xPathLexer0 = new XPathLexer("kc<}& YWe");
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.setXPath("BEN-cQ>3Mg<G_XeJzB");
      XPathLexer xPathLexer1 = new XPathLexer("kc<}& YWe");
      xPathLexer1.and();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer1.dots();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fr[U047!ZJ|\"#GlSfd");
      Token token0 = xPathLexer0.comma();
      Token token1 = xPathLexer0.identifier();
      String string0 = token0.toString();
      assertEquals("[ (32) (f)", string0);
      
      xPathLexer0.operatorName();
      String string1 = token1.toString();
      assertEquals("[ (15) (r)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("C");
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(23, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
      
      Token token4 = xPathLexer1.at();
      assertEquals("C", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer1.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.currentPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token6 = xPathLexer2.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer2.isIdentifierChar('(');
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a{}(D@l'|Q]$.u");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("a", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("E-UpnZ#[ ");
      Token token2 = xPathLexer1.at();
      assertEquals("E", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.pipe();
      String string0 = token3.toString();
      assertEquals("[ (17) (-)", string0);
      
      Token token4 = xPathLexer1.comma();
      assertEquals("U", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("p", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (17) (-)");
      Token token6 = xPathLexer3.notEquals();
      assertEquals("[ ", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("pC;");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("PL(ew");
      xPathLexer5.currentPosition();
      Token token7 = xPathLexer1.getPreviousToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("nZ", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.isIdentifierChar('3');
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("z&?\".Yv5[");
      xPathLexer0.minus();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("z&?\".Yv5[");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a{}(D@l'|Q]$.u");
      xPathLexer0.and();
      xPathLexer0.star();
      xPathLexer0.mod();
      String string0 = "E-UpnZ#[ ";
      XPathLexer xPathLexer1 = new XPathLexer("E-UpnZ#[ ");
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer1.nextToken();
      xPathLexer0.currentPosition();
      xPathLexer0.minus();
      xPathLexer1.nextToken();
      xPathLexer2.at();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gQnd;>:/h");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      token0.toString();
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      token0.toString();
      xPathLexer0.relationalOperator();
      xPathLexer1.dots();
      xPathLexer2.equals();
      xPathLexer1.leftParen();
      xPathLexer1.leftParen();
      xPathLexer2.relationalOperator();
      xPathLexer0.at();
      Token token1 = new Token((-1711), "/F2s(|OF(R9*f}$;\"i", 2, (-1));
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#k&");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.plus();
      token0.toString();
      Token token1 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d><9vmf%_-,T#I");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer2.doubleColon();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d]/><9vmf%_-,T#I");
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("d]", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      char char0 = xPathLexer2.LA(113);
      assertEquals('\uFFFF', char0);
      
      Token token1 = xPathLexer2.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(11, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("|m1qgYyvRuOJ{<:KMd:");
      Token token1 = xPathLexer1.leftBracket();
      assertEquals("|", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer1.dots();
      assertEquals("m", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("1", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      assertEquals("qgYyvRuOJ{<:KMd:", token4.getTokenText());
      
      Token token5 = xPathLexer1.plus();
      assertEquals("q", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("N+pMX>pS9&D-%bw:");
      xPathLexer1.colon();
      Token token0 = xPathLexer1.leftParen();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("");
      token0.toString();
      xPathLexer1.operatorName();
      Token token1 = xPathLexer2.doubleColon();
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("N+pMX>pS9&D-%bw:");
      xPathLexer2.dollar();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d]/><9vmf%_-,T#I");
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("d]", token0.getTokenText());
      
      char char0 = xPathLexer0.LA(113);
      assertEquals('\uFFFF', char0);
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("/>", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(7, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("9vmf", token3.getTokenText());
      
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[c\"p");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.literal();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierStartChar('_');
      xPathLexer0.literal();
      xPathLexer0.getPreviousToken();
      xPathLexer0.getXPath();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierStartChar('_');
      xPathLexer0.getXPath();
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "-t'!>y>qDR*DYO6s";
      XPathLexer xPathLexer0 = new XPathLexer("-t'!>y>qDR*DYO6s");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.not();
      xPathLexer0.rightParen();
      xPathLexer1.colon();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5\"Z;QsJ7K&_N");
      Token token0 = xPathLexer0.plus();
      assertEquals("5", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.comma();
      assertEquals("\"", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Z", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "'3JKG9o95mwF2|`%a(n";
      XPathLexer xPathLexer0 = new XPathLexer("'3JKG9o95mwF2|`%a(n");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.consume((-1619));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d]/><9vmf%_-,T#I");
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.LA(113);
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.star();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-t'!>y>qDR*DYO6s");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.not();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("drwPoise");
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.equals();
      token0.toString();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.slashes();
      Token token1 = xPathLexer2.minus();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.or();
      xPathLexer0.consume((-2400));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I=D gH4` 'i3");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("=D", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      xPathLexer0.consume(4);
      Token token3 = xPathLexer0.nextToken();
      assertEquals("` 'i3", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("'", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d]/><9vmf%_-,T#I");
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("d]", token0.getTokenText());
      
      char char0 = xPathLexer0.LA(113);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("><", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("9", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("vmf", token3.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("j");
      Token token0 = xPathLexer1.plus();
      token0.toString();
      token0.toString();
      xPathLexer1.identifier();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d]A><9vmf%_-,T%I");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.equals();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath("[ (21) (d)");
      Token token1 = xPathLexer1.notEquals();
      xPathLexer1.setPreviousToken(token1);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.relationalOperator();
      xPathLexer2.at();
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = null;
      try {
        xPathLexer7 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      XPathLexer xPathLexer1 = new XPathLexer(":Cu&$Ps]id");
      xPathLexer0.and();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer0.and();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer("vEN?\":");
      xPathLexer1.whitespace();
      xPathLexer3.slashes();
      xPathLexer2.setXPath("etmqsN0tt O=DE`3e");
      xPathLexer1.getPreviousToken();
      Token token1 = xPathLexer3.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("a{}\"({@l';Q]$.u");
      xPathLexer0.consume(2942);
      xPathLexer1.operatorName();
      xPathLexer1.setXPath("e?Rz,'");
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1s0;ubl83nR/CscRd");
      Token token0 = xPathLexer0.not();
      assertEquals("1", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals(";u", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      String string0 = "&u.%c+<xxp>b<Icqp2";
      XPathLexer xPathLexer0 = new XPathLexer("&u.%c+<xxp>b<Icqp2");
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer1.rightBracket();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.star();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("O5By<M2V8?");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("O", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("5B", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("<", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("M", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("2", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d]/><9vmf%_-,T#I");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("d]", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(113);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("/", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(9, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("<", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("9", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      Token token1 = xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.consume(46);
      xPathLexer1.rightParen();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer2.setPreviousToken(token1);
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.or();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.consume();
      xPathLexer1.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5\"Z;QsJ7K&_N");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("5", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.comma();
      assertEquals("Z", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(";QsJ7K&_N", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(";", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R_C/rP8U?v@!O.|]!");
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.getPreviousToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1111));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'3JKG9o95mw.2|`%a(n");
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B.W dkE3vCr>?nJo5");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (14) (B.)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('(');
      assertFalse(boolean0);
      
      xPathLexer0.isIdentifierStartChar('Q');
      Token token2 = xPathLexer0.colon();
      assertEquals(" ", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("dkE3vCr>?nJo5", token3.getTokenText());
  }
}
