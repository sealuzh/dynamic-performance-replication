/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:05:28 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 187;
      intArray0[0] = 187;
      intArray0[1] = 4098;
      intArray0[2] = 1;
      intArray0[3] = (-343711);
      intArray0[4] = 3457;
      intArray0[5] = (-382);
      int int1 = (-343266);
      intArray0[6] = (-343266);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {187, 4098, 1, (-343711), 3457, (-382), (-343266)}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[9][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      intArray2[1] = 4098;
      intArray1[6] = intArray2;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2045;
      intArray0[1] = 64;
      intArray0[2] = (-29);
      intArray0[3] = 912;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2045, 64, (-29), 912}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-29), 912, 2045, 64}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-29), 2045);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-29), 912, 2045, 64}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-29), 912, 2045, 64}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(1, 64);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-29), 912, 2045, 64}, intArray0);
      assertNotNull(charClass4);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2045;
      intArray2[1] = 64;
      intArray2[2] = 1;
      intArray2[3] = 64;
      intArray2[4] = (-29);
      intArray2[5] = 1;
      intArray2[6] = 2045;
      intArray2[7] = (-29);
      intArray2[8] = 1;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 64;
      intArray3[1] = 1;
      intArray3[2] = 2045;
      intArray3[3] = (-29);
      intArray3[4] = 64;
      intArray3[5] = 912;
      intArray3[6] = 2045;
      intArray1[3] = intArray3;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass5 = charClass3.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-29), 912, 2045, 64}, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass4.appendNegatedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-29), 912, 2045, 64}, intArray0);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.appendRange((-1869), 64);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-29), 912, 2045, 64}, intArray0);
      assertNotNull(charClass7);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = 619;
      intArray0[2] = 614;
      intArray0[3] = 2;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {9, 619, 614, 2}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111, 1, 613}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1339);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 1114111}, intArray0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(65, (-11025));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      
      int int0 = (-11021);
      int int1 = 110592;
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendLiteral(418, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass3.appendClassWithSign(intArray0, (-11021));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass4.appendLiteral((-11021), 110592);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass8);
      
      int[] intArray1 = charClass8.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 64, (-11024), (-1), 0, 1114111}, intArray1);
      assertNotNull(intArray1);
      
      CharClass charClass9 = charClass8.appendFoldedRange(65, 120121);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass9);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass9);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-466);
      intArray0[1] = (-1269);
      intArray0[2] = 1253;
      intArray0[3] = (-11030);
      intArray0[4] = 1357;
      intArray0[5] = 2510;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-466), (-1269), 1253, (-11030), 1357, 2510}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-466), (-1269), 1253, (-11030), 1357, 2510}, intArray0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[2][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-466), (-1269), 1253, (-11030), 1357, 2510}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendRange(864, (-466));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-466), (-1269), 1253, (-11030), 1357, 2510}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendLiteral(4, (-1269));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-466), (-1269), 1253, (-11030), 1357, 2510}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 1357);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-466), (-1269), 1253, (-11030), 1357, 2510}, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-466), (-1269), 1253, (-11030), 1357, 2510}, intArray0);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-125);
      intArray0[1] = 177984;
      intArray0[2] = 492;
      intArray0[3] = 1232;
      intArray0[4] = 2655;
      intArray0[5] = (-2237);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-125), 177984, 492, 1232, 2655, (-2237)}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][5];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-2237));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-125), 177984, 0, 1114111, 2655, (-2237)}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-2237));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-125), 177984, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals("[0xffffff83-0x2b740 0x0-0x10ffff 0xfffff744-0x10ffff]", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-125), 177984, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(string0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(1114111, 6121);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-125), 177984, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-2237));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-125), 177984, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendLiteral(177984, 485);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-125), 177984, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass4.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-125), 177984, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass0.negateClass();
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-125), 177984, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass7.negateClass();
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2236), 1114111, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass7.appendNegatedClass(intArray0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2236), 1114111, 0, 1114111, (-2236), 1114111}, intArray0);
      assertNotNull(charClass10);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1011;
      intArray0[1] = (-1856);
      intArray0[2] = 3300;
      intArray0[3] = 578;
      intArray0[4] = (-263);
      intArray0[5] = 11798;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1011, (-1856), 3300, 578, (-263), 11798}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[8][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1011, (-1856), 3300, 578, (-263), 11798}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1011, (-1856), 3300, 578, (-263), 1114111}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1011, (-1856), 3300, 578, (-263), 1114111}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1011, (-1856), 3300, 578, (-263), 1114111}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendRange(2646, 2651);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1011, (-1856), 3300, 578, (-263), 1114111}, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1011, (-1856), 3300, 578, (-263), 1114111}, intArray0);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 66640;
      intArray0[0] = 66640;
      intArray0[1] = 508;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {66640, 508}, intArray0);
      assertNotNull(charClass0);
      
      int int1 = 1;
      CharClass charClass1 = charClass0.appendLiteral(508, 1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {66640, 508}, intArray0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      charClass1.appendFoldedRange(2104, 66640);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1137);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-107);
      intArray0[2] = 508;
      CharClass charClass1 = charClass0.appendLiteral(0, 1687);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 508);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1738);
      intArray0[1] = 106;
      intArray0[2] = 1834;
      intArray0[3] = 93;
      intArray0[4] = 620;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1738), 106, 1834, 93, 620}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[4][6];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1834;
      intArray2[1] = (-1738);
      intArray2[2] = (-1738);
      intArray2[3] = 620;
      intArray2[4] = 66640;
      intArray2[5] = 106;
      intArray2[6] = 620;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 7006);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-1738), 106, 1834, 93, 620}, intArray0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 1834);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1680;
      intArray0[1] = (-1346);
      intArray0[2] = 266;
      intArray0[3] = 309;
      intArray0[4] = (-1445);
      intArray0[5] = 4;
      intArray0[6] = 72;
      intArray0[7] = 3020;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 72);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.appendLiteral(965, 1680);
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[2];
      intArray2[0] = (-1346);
      intArray2[1] = 309;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, (-5468615));
      int[][] intArray1 = new int[4][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendTableWithSign(intArray1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-107);
      CharClass charClass1 = charClass0.appendLiteral(0, 1687);
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray1 = new int[7];
      intArray1[0] = 1687;
      intArray1[1] = 1687;
      intArray1[2] = 1687;
      intArray1[3] = 1687;
      intArray1[4] = 1687;
      intArray1[5] = 0;
      intArray1[6] = (-107);
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(4667, 4667);
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[9];
      intArray1[0] = 4667;
      intArray1[1] = 4667;
      intArray1[2] = 4667;
      intArray1[3] = 4667;
      intArray1[4] = 4667;
      intArray1[5] = 4667;
      intArray1[6] = 4667;
      intArray1[7] = 4667;
      intArray1[8] = 4667;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 4667;
      intArray2[1] = 4667;
      intArray2[2] = 4667;
      intArray2[3] = 4667;
      intArray2[4] = 4667;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 4667;
      intArray3[1] = 4667;
      intArray3[2] = 4667;
      intArray3[3] = 4667;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 4667;
      intArray4[1] = 4667;
      intArray4[2] = 4667;
      intArray4[3] = 2628;
      intArray4[4] = 4667;
      intArray4[5] = 4667;
      intArray4[6] = 4667;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 2628;
      intArray5[1] = 2628;
      intArray5[2] = 2628;
      intArray5[3] = 4667;
      intArray5[4] = 4667;
      intArray5[5] = 4667;
      intArray5[6] = 4667;
      intArray5[7] = 2628;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      intArray6[0] = 2628;
      intArray6[1] = 2628;
      intArray6[2] = 42872;
      intArray6[3] = 4667;
      intArray6[4] = 2628;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      intArray7[0] = 2628;
      intArray7[1] = 2628;
      intArray7[2] = 4667;
      intArray7[3] = 42872;
      intArray7[4] = 42872;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 4667;
      intArray8[1] = (-5468616);
      intArray8[2] = 4667;
      intArray8[3] = 4667;
      intArray8[4] = 2628;
      intArray8[5] = 4667;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[4];
      intArray9[0] = 2628;
      intArray9[1] = 42872;
      intArray9[2] = (-5468616);
      intArray9[3] = (-5468616);
      intArray0[8] = intArray9;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      int[] intArray10 = charClass2.toArray();
      assertArrayEquals(new int[] {(-2143694843), 1114111}, intArray10);
      assertEquals(2, intArray10.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 3030;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendFoldedRange(778, (-345));
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 3030);
      CharClass charClass5 = charClass4.cleanClass();
      String string0 = charClass5.toString();
      assertEquals("[0xfffffea8-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1587;
      intArray0[1] = 4;
      int int0 = (-11020);
      intArray0[2] = (-11020);
      intArray0[3] = 1;
      intArray0[4] = (-816);
      intArray0[5] = (-5079);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-11020), 4);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[2];
      intArray2[0] = 1587;
      intArray2[1] = (-1777);
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
