/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:17:07 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byte byte0 = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byte byte1 = (byte)16;
      byteArray0[2] = (byte)16;
      byte byte2 = (byte)40;
      byteArray0[3] = (byte)40;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "boolean";
      Utility.fillup("boolean", 174, true, 'E');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("ifnonnull", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, (int) (byte) (-98), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("fNzkx/ odDT~c)", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("dreturn");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "6yvu", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(6, 6);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, 6, 6, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.searchOpcode("byte");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte) (-46);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)120);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)100, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)29;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-2549), (int) (byte)79, false);
      assertEquals("0:    return\n1:    lload_2\n2:    pop\n3:    sipush\t\t20253\n", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-107);
      byteArray0[8] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, 4935, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-11);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte) (-11));
      assertEquals("0:    fstore_1\n1:    nop\n2:    freturn\n3:    fconst_2\n4:    lor\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "f[b[|&OTtn(q~!_P,a";
      Utility.compactClassName("f[b[|&OTtn(q~!_P,a");
      // Undeclared exception!
      try { 
        Utility.getSignature("f[b[|&OTtn(q~!_P,a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[b[|&OTtn(q~!_P,a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)26;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 143, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-59);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 155, 819, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)115;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte)45);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1598, (byte)78);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte)93, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 201, (int) (byte) (-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("Byte code error: ", "Byte code error: ", "Byte code error: ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4385, (-160), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.compactClassName("f2l");
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Constant$1";
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Constant$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.getSignature("XnwVZ~*:^,*C6");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "XnwVZ~*:^,*C6";
      stringArray0[1] = "XnwVZ~*:^,*C6";
      Utility.methodTypeToSignature("LXnwVZ~*:^,*C6;", stringArray0);
      Utility.methodSignatureToString("(LXnwVZ~*:^,*C6;LXnwVZ~*:^,*C6;)LLXnwVZ~*:^,*C6;;", "l}d=JaX^D9NgB", "e$@8Y", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)7;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byte byte0 = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)57;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-7), (int) (byte)57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore\t\t%249
         // 2:    lneg
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("+KPHrxE4FiXy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KPHrxE4FiXy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.compactClassName("~", "L$9y.K'8(e++f=", false);
      assertEquals("~", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-62);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-62), (int) (byte)48, false);
      assertEquals("0:    faload\n1:    monitorenter\n", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, (int) (byte)100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)26;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 143, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-117);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("");
      Utility.clearBit((byte)0, (byte) (-117));
      Utility.toHexString(byteArray0);
      Utility.convertString("=D6J7phDH>");
      Utility.compactClassName("1__Kms9\"y'r$");
      Utility.accessToString((int) (byte)16, false);
      try { 
        Utility.decode("1__Kms9\"y'r$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.signatureToString("T-NAdD3'_b;");
      String string0 = "J|0(E";
      Utility.signatureToString("J|0(E");
      String string1 = "\\n";
      boolean boolean0 = true;
      Utility.compactClassName("\n", true);
      int int0 = 53;
      Utility.fillup("T-NAdD3'_b;", 53, false, 'I');
      try { 
        Utility.methodSignatureArgumentTypes("int", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-12);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)104, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-52);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (int) (byte) (-52));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.fillup(">", (-561), true, 'i');
      Utility.accessToString((-561), false);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.getSignature("]\">nBZc!8");
      byte[] byteArray1 = Utility.decode("L]\">nBZc!8;", false);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-428));
      constantArray0[0] = (Constant) constantClass0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokestatic");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-134), (-428));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray1, constantPool0, (-428), 21, false);
      try { 
        Utility.methodSignatureArgumentTypes(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.compactClassName("m");
      Utility.clearBit((-282), (-1258));
      Utility.fillup("m", 3836, false, '0');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-105);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4819, (-1258));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)90, (-1618), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.fillup("boolean", 174, true, 'E');
      Utility.searchOpcode("breakpoint");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)13, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.mark((byte) (-128));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte) (-128));
      assertEquals("transient native interface abstract strictfp synthetic annotation enum", string0);
      
      boolean boolean0 = Utility.isSet(1192, 1389);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)115;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)38;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1956), (int) (byte)115, true);
      try { 
        Utility.methodSignatureReturnType("fgw=x!p27$o^s-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fgw=x!p27$o^s-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), (int) (byte) (-83));
      assertEquals("0:    istore_3\n1:    arraylength\n2:    <illegal opcode>\n3:    dsub\n4:    aload_1\n5:    lreturn\n", string0);
      
      String string1 = Utility.convertString("0:    istore_3\n1:    arraylength\n2:    <illegal opcode>\n3:    dsub\n4:    aload_1\n5:    lreturn\n");
      assertEquals("0:    istore_3\\n1:    arraylength\\n2:    <illegal opcode>\\n3:    dsub\\n4:    aload_1\\n5:    lreturn\\n", string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      String string0 = "!iHX_xqyM\\4y[+";
      try { 
        Utility.typeOfSignature("!iHX_xqyM\u0004y[+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iHX_xqyM\u0004y[+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byte byte0 = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)71;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4080), (-974), true);
      Utility.encode(byteArray0, true);
      int int0 = 563;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(563, 76, true, '(');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "int", "int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.getSignature("vf");
      byte[] byteArray0 = Utility.decode("Lvf;", false);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2118), 70, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto_w", ">$*tnJYD]3", ">$*tnJYD]3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte)91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32767, (int) (byte)64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.isJavaIdentifierPart('r');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[0] = (Constant) constantFloat0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bN");
      Utility.printArray(objectArray0, false, true);
      String string0 = Utility.accessToString((-1906), true);
      assertEquals("private protected static transient strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.convertString("bN");
      assertEquals("bN", string1);
      
      byte[] byteArray0 = Utility.decode("int", false);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1906), 84, false);
      assertEquals("0:    lmul\n1:    fdiv\n2:    ineg\n", string2);
      
      String string3 = Utility.compactClassName("B]hE\"`-YAo", "", false);
      assertEquals("B]hE\"`-YAo", string3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-114);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte) (-103), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)15;
      byte byte0 = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)76;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, (int) (byte)46, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 7785. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 201, 214, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.setBit(196, (-2599));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)80;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, (int) (byte) (-65), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47872. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.classOrInterface((-933));
      Utility.searchOpcode("class");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(585, (byte)41);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.typeOfSignature("FP+bUlpW_2+");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "athrow");
      String string0 = Utility.accessToString((-2712));
      assertEquals("static synchronized volatile native abstract synthetic annotation enum", string0);
      
      Utility.compactClassName("athrow", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-44);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-44), (int) (byte)57);
      assertEquals("0:    istore_2\n1:    dstore\t\t%224\n3:    castore\n4:    fload\t\t%212\n", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.isSet(753, 753);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", signature_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , signature_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "fsub";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup("fsub", 62, true, '>');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 602, 130);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)123;
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(607, (-1462993285));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Byte code error: ");
      constantArray0[1] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1462993285), 607);
      assertEquals("0:    dup_x1\n1:    <illegal opcode>\n2:    fload_1\n3:    istore_0\n4:    lshr\n", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.compactClassName("[]");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-74), (byte) (-74));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("return");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 164, 249, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("HT>lqyR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HT>lqyR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)90;
      ConstantPool constantPool0 = null;
      int int0 = 83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("V(lo34");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.typeOfSignature("V(lo34");
      Utility.convertString("V(lo34");
      boolean boolean0 = false;
      Utility.fillup("V(lo34", (short) (-1), false, '&');
      Utility.getSignature("{}");
      Utility.typeOfSignature("V(lo34");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("W3u3", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      byte byte1 = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)70;
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-122);
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "74 27 12 46 00 15 86";
      stringArray0[1] = "XP";
      stringArray0[2] = "74 27 12 46 00 15 86";
      stringArray0[3] = "srM~W3g";
      Utility.methodTypeToSignature("XP", stringArray0);
      try { 
        Utility.typeOfSignature("74 27 12 46 00 15 86");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 74 27 12 46 00 15 86
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1140), 1539);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("XNn/6");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "XNn/6";
      objectArray0[1] = (Object) "XNn/6";
      objectArray0[2] = (Object) "XNn/6";
      objectArray0[3] = (Object) "XNn/6";
      objectArray0[4] = (Object) "XNn/6";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "XNn/6";
      objectArray0[7] = (Object) "XNn/6";
      Utility.printArray(objectArray0, false);
      Utility.getSignature("XNn/6");
      Utility.getSignature("%");
      Utility.accessToString((-3638), true);
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1648), 173, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        MockURI.URI("d2l", "d2l", "d2l", "d2l");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: d2l://d2ld2l#d2l
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " (");
      Utility.replace("sSn", " (", " (");
      Utility.convertString("invokeinterface");
      Utility.fillup("sSn", (-2673), false, 'c');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-36);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 211, (int) (byte)25, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "@GcBR";
      Utility.convertString("@GcBR");
      Utility.compactClassName("The offset cannot be negative", false);
      Utility.convertString("The offset cannot be negative");
      Utility.isJavaIdentifierPart(':');
      Utility.accessToString((-408), false);
      Utility.accessToString((-408), false);
      try { 
        Utility.typeOfSignature("@GcBR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @GcBR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ewC],)JE!W{mUSM:");
      String string0 = Utility.compactClassName("ifnonnull", true);
      assertEquals("ifnonnull", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)100;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2989), 752);
      assertEquals("0:    <illegal opcode>\n1:    if_acmpne\t\t#18432\n4:    isub\n", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.compactClassName("QJ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "QJ";
      objectArray0[1] = (Object) "QJ";
      objectArray0[2] = (Object) "QJ";
      objectArray0[3] = (Object) "QJ";
      objectArray0[4] = (Object) "QJ";
      Utility.printArray(objectArray0, false, false);
      Utility.printArray(objectArray0, false, true);
      Utility.classOrInterface(150);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)23;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore_1
         // 1:    dcmpg
         // 2:    ireturn
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.isJavaIdentifierPart('V');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-14);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte) (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15346. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-36), (int) (byte)76);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "0:    ifnull\t\t#15405\n3:    <illegal opcode>\n4:    astore_1\n5:    land\n6:    if_acmpeq\t\t#21766\n", "`j[t#`!XFvHM*$2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.accessToString(9, true);
      String string1 = Utility.convertString("public static");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)12;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1618), 512);
      assertEquals("0:    sipush\t\t-15313\n3:    fastore\n4:    l2d\n5:    lshr\n6:    fconst_1\n", string2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YDTol4r?E/<T#M9X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YDTol4r?E/<T#M9X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "x$Oo[p]X^rg5%*G4";
      Utility.getSignature("x$Oo[p]X^rg5%*G4");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-84);
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet(178, (byte) (-96));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UCV");
      String string1 = "2R&L(7/\"]K>}9TH";
      String string2 = "lookupswitch";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("x$Oo[p]X^rg5%*G4", "2R&L(7/\"]K>}9TH", "lookupswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x$Oo[p]X^rg5%*G4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skip((-1629L));
      Utility.decode("ei!av$,iOu|he", false);
      Utility.clearBit((byte)0, (-95));
      Utility.convertString("if_icmpge\t\t#62");
      Utility.encode(byteArray0, true);
      MockFile mockFile0 = new MockFile("3/7`=wuK)Qx6(o_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "if_icmpge\t\t#62";
      objectArray0[1] = (Object) "if_icmpge\t\t#62";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "ei!av$,iOu|he", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      //  // Unstable assertion: assertEquals(112L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.convertString("6[>,q$J1mjeTP");
      String string0 = Utility.compactClassName("6[>,q$J1mjeTP");
      Utility.accessToString(1338);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2750, (-1710));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("java.lang.Object@3bfda7be, java.lang.Object@4165c1a0, java.lang.Object@529efa8d, java.lang.Object@de82f89", true);
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeinterface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)74;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L;\"7OQT{]%c;V");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (int) (byte)11, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("wide\t(wide)", string0);
      
      String string1 = Utility.getSignature("T*qZ|x:)q0ba6%;r97*");
      assertEquals("LT*qZ|x:)q0ba6%;r97*;", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)88;
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)39, (byte)39);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString(369);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)39, 34);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), (int) (byte)49);
      assertEquals("0:    dload_1\n1:    iflt\t\t#12584\n4:    <illegal opcode>\n5:    fdiv\n6:    <illegal opcode>\n7:    pop2\n", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)36;
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "MtULz)4X";
      try { 
        Utility.typeOfSignature("MtULz)4X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MtULz)4X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-77);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-71), (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifge\t\t#26411
         // 3:    iload_2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaWriter", (String[]) null);
      Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaWriter");
      Utility.format(175, 9, true, 'S');
      Utility.convertString("%P}\"R2};'ZE!4m<3");
      Utility.methodSignatureToString("()Lorg/apache/bcel/classfile/Utility$JavaWriter;", "1`IK", "175SSSSSS", true);
      try { 
        Utility.methodSignatureArgumentTypes("175SSSSSS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 175SSSSSS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)95;
      byte byte0 = (byte)6;
      byteArray0[3] = (byte)6;
      Utility.encode(byteArray0, false);
      Utility.convertString("]L)u_|<[Z/vW1\"-");
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "float";
      Utility.replace("float", "monitorenter", "float");
      Utility.typeOfSignature("JQ[HogYQ");
      String string1 = "aload_0";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aload_0", "float", "float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.isSet(103, 103);
      Utility.decode("/3.-)A*?", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.methodSignatureReturnType("~_Q5)uu;k/)ZG-~", false);
      Utility.compactClassName("boolean", "boolean", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)42;
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.fillup(" ", (byte)32, true, 'h');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)36;
      objectArray0[1] = (Object) " hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)42;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)108;
      byteArray0[0] = (byte)108;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-93);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_acmpeq");
      byteArray0[2] = (byte) (-125);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_acmpeq");
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte) (-93), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    idiv
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.getSignature("if_acmpeq");
      try { 
        Utility.typeOfSignature("3xt3QoJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3xt3QoJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.compactClassName("anewarray", true);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)123;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6W YP/+*Y");
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-23), (int) (byte)6);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "if_icmpgt";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmpgt");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface((-631));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)48;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 415, 75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("aload\t\t%31", string0);
      
      Utility.compactClassName("v(wv:Ov", "[]", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)10;
      objectArray0[1] = (Object) (byte)31;
      objectArray0[2] = (Object) "v(wv:Ov";
      objectArray0[3] = (Object) (byte)80;
      objectArray0[4] = (Object) (byte)25;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, 184, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "$\"5VLxGo_9e{C";
      boolean boolean0 = true;
      try { 
        Utility.decode("$\"5VLxGo_9e{C", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("P+E{V~L`");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("dload_3", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      String string0 = Utility.encode(byteArray0, true);
      Utility.clearBit((-1746), 170);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8Q@&:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Q@&:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.isSet(89, 89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";g)@NGWsFN");
      try { 
        Utility.typeOfSignature("&s$3e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &s$3e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char char0 = 'u';
      Utility.isJavaIdentifierPart('u');
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.isJavaIdentifierPart('O');
      String string0 = "/Q~LY~'";
      try { 
        Utility.typeOfSignature("/Q~LY~'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Q~LY~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.typeOfSignature("Z;#c6=L3hzW..");
      byte byte0 = Utility.typeOfSignature("Z;#c6=L3hzW..");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.replace("C1~W@oIg", "Z;#c6=L3hzW..", "org.apache.bcel.classfile.SimpleElementValue");
      assertEquals("C1~W@oIg", string0);
      
      byte byte1 = Utility.typeOfSignature("C1~W@oIg");
      assertEquals((byte)5, byte1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-1);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("`;l~;`AC2b?aD:h,1");
      constantArray0[0] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString((byte)36);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-1));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)100);
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3435, (int) (byte)100, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = Utility.clearBit((-738), 1946);
      assertEquals((-67109602), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((byte) (-95));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      Constant constant0 = constantClass0.copy();
      constantArray0[1] = constant0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)5, (byte)39);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmplt\t\t#10146", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.classOrInterface(97);
      assertEquals("class", string0);
      
      short short0 = Utility.searchOpcode("DhLVfT8`L\"'Z!=");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)65;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte) (-37));
      assertEquals("13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n", string1);
      
      boolean boolean0 = Utility.isSet(43, 448);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-38);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-38), 95);
      assertEquals("0:    lushr\n1:    faload\n2:    astore\t\t%210\n4:    laload\n5:    dup_x1\n6:    bipush\t\t-38\n", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.accessToString((-2018));
      Utility.replace("\\", "private protected static final strictfp synthetic annotation enum", "return");
      Utility.decode("DK1F!TdL", false);
      try { 
        Utility.methodSignatureReturnType("Xlr9#~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xlr9#~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("DBQ6);[T,X6O", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, (-2267), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-70);
      Constant[] constantArray0 = new Constant[6];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(101, (byte)28);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1349, (-1024));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)28);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1060), 76);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\t\t#");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[5] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0pk.B?QN2^$u0I");
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)33;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-37), (int) (byte)108, false);
      assertEquals("0:    lstore_1\n1:    aload_0\n2:    nop\n3:    aaload\n4:    idiv\n5:    laload\n6:    aaload\n7:    lload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 98, 4769);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.searchOpcode("ifge");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-23);
      byte byte0 = (byte)60;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "char");
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-4);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-4), (int) (byte)60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.replace("5x|i*!6", " arg", " arg");
      assertEquals("5x|i*!6", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "5x|i*!6";
      objectArray0[1] = (Object) " arg";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "5x|i*!6";
      objectArray0[4] = (Object) null;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{5x|i*!6,  arg, null, 5x|i*!6, null}", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-52);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-52);
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)75;
      byteArray1[5] = (byte)75;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "(BEH6<";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(BEH6<", "if_acmpeq", "if_acmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EH6<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-37);
      byteArray0[5] = (byte)124;
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 30, (int) (byte)8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.accessToString(144, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-17);
      Utility.toHexString(byteArray0);
      Utility.fillup("checkcast", (byte) (-17), true, 'T');
      Utility.accessToString(8, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 55, (int) (byte) (-17));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1693, (int) (byte)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-79);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1165, 157, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=ciLD#XN{&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =ciLD#XN{&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)15;
      byte byte0 = (byte)80;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, (int) (byte)80, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload\t\t%65", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("'@*eHQQhv)ZcP2S");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "'@*eHQQhv)ZcP2S";
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'@*eHQQhv)ZcP2S");
      objectArray0[1] = object0;
      mockPrintStream0.print(object0);
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("'@*eHQQhv)ZcP2S", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'@*eHQQhv)ZcP2S");
      Utility.isJavaIdentifierPart('!');
      Utility.replace("'@*eHQQhv)ZcP2S", ">busMtRpapouHD", ">busMtRpapouHD");
      try { 
        Utility.typeOfSignature("'@*eHQQhv)ZcP2S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '@*eHQQhv)ZcP2S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.isSet(249, (-3647));
      Utility.convertString("}HZA<5Rre>^z");
      Utility.clearBit((-1142), (-2634));
      Utility.compactClassName("sdG7>`z[Gesx.lOs,", true);
      Utility.convertString("}HZA<5Rre>^z");
      Utility.accessToString(234, true);
      Utility.clearBit(234, 254);
      Utility.classOrInterface((-4195446));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4367, 234, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-2743);
      boolean boolean0 = true;
      char char0 = 'V';
      Utility.format(222, (-2743), true, 'V');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "222";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("222");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 222
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.compactClassName("PBjCp");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.typeOfSignature("Dl^v!t`NtLxXH,=");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "PBjCp";
      objectArray0[1] = (Object) "PBjCp";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Dl^v!t`NtLxXH,=";
      objectArray0[4] = (Object) "PBjCp";
      objectArray0[5] = (Object) "PBjCp";
      objectArray0[6] = (Object) "Dl^v!t`NtLxXH,=";
      objectArray0[7] = (Object) "PBjCp";
      objectArray0[8] = (Object) "PBjCp";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("9~FGd{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9~FGd{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("UuPbX4&^4z", "UuPbX4&^4z", true);
      try { 
        Utility.typeOfSignature("UuPbX4&^4z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UuPbX4&^4z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(mf`0{SARwj?0;g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (mf`0{SARwj?0;g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      Utility.format(97, 97, false, '}');
      try { 
        Utility.typeOfSignature("(HU\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (HU\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.fillup("{java.lang.Object@27a7d364}", 3547, true, 'K');
      try { 
        Utility.methodSignatureReturnType("Pn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 106, (int) (byte)81, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)108;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, 172);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)124;
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 30, (int) (byte)8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.isSet((-811), 98);
      try { 
        Utility.typeOfSignature("9W.~u<6Sk>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9W.~u<6Sk>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.searchOpcode("rD+i}/ -j6ybkFV");
      Utility.setBit((short) (-1), (-85));
      Utility.replace("rD+i}/ -j6ybkFV", "rD+i}/ -j6ybkFV", "/N-+?l?mHU");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2230, (-1465));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.setBit(1233, (-2986));
      try { 
        Utility.typeOfSignature("OJIQ4IRz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OJIQ4IRz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(90, 43);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)8;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, (-34));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)15;
      byte byte0 = (byte)80;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, (int) (byte)80, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = (-2259);
      Utility.clearBit((-477), (-2259));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Gy0NS6BT\\{_X>`=|";
      try { 
        Utility.methodSignatureReturnType("Gy0NS6BT{_X>`=|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gy0NS6BT{_X>`=|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "X";
      Utility.fillup("X", 143, false, '!');
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 41, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.accessToString(13);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)0;
      Utility.encode(byteArray0, false);
      Utility.setBit(13, (byte)0);
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) (byte)10;
      objectArray0[1] = (Object) "$A$A$N$H$A4$A$K$A";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("gM)A%+-/9mXw");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-82);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantPool0.dump(dataOutputStream0);
      constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1502), (int) (byte) (-61), true);
      assertEquals("0:    sipush\t\t12811\n3:    monitorexit\n4:    breakpoint\n5:    freturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.isSet((-3185), 3372);
      String string0 = "L{A<D^6F[fN";
      try { 
        Utility.methodSignatureReturnType("L{A<D^6F[fN", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L{A<D^6F[fN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "anewarray";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("(sD", "if_icmpgt", "anewarray", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      String string0 = Utility.methodTypeToSignature("null", stringArray0);
      assertEquals("(Lnull;Lnull;Lnull;Lnull;Lnull;Lnull;)Lnull;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lnull;Lnull;Lnull;Lnull;Lnull;Lnull;)Lnull;");
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#uWH+j2%Ly$bBe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #uWH+j2%Ly$bBe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.compactClassName("checkcast", "IG<{Q1FHfSA#I\"", false);
      Utility.compactClassName("9~FGd{", false);
      Utility.getSignature("9~FGd{");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (int) (byte)99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byte byte0 = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3250, 102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("\t\t");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-74), (byte)70);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("?k5Q;O}=\"XvkQX!ea");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.typeOfSignature("SimpleElementValue doesnt know how to write out type ");
      boolean boolean0 = true;
      Utility.format(5, 3, true, '5');
      Utility.setBit(3, 3);
      try { 
        Utility.methodSignatureArgumentTypes("555", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 555
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "20";
      objectArray0[1] = (Object) (byte)32;
      objectArray0[2] = (Object) (byte)32;
      objectArray0[3] = (Object) "20";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte)32;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      Utility.searchOpcode("20");
      try { 
        Utility.typeOfSignature("\"20\", \"32\", \"32\", \"20\", \"java.lang.Object@e1a1422\", \"32\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"20\", \"32\", \"32\", \"20\", \"java.lang.Object@e1a1422\", \"32\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-47);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2197, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegal type for StackMapType: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, 294, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("M=0Pn$OEbr(#JED ", false);
      String string0 = "5I[2@XUM,RGidp";
      String string1 = "H!";
      int int0 = (-1);
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-19), (int) (byte)57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr\t\t#-4747
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-747), (int) (byte) (-76));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    pop
         // 1:    <illegal opcode>
         // 2:    astore\t\t%46
         // 4:    faload
         // 5:    aaload
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-3);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), 2486);
      assertEquals("0:    astore_1\n1:    sipush\t\t21253\n4:    lrem\n5:    <illegal opcode>\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.isJavaIdentifierPart('j');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "PMGClass(";
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ";e/\\{Q4mqW'";
      try { 
        Utility.typeOfSignature(";e/{Q4mqW'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;e/{Q4mqW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "CONSTANT_String";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONSTANT_String");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y/?]R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y/?]R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-10), (-108));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)0, (byte)0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.compactClassName("Dont call getValueFloat() on a non FLOAT ElementValue", true);
      int int0 = Utility.clearBit((-3050), 115);
      assertEquals((-527338), int0);
      
      String string1 = Utility.fillup("Dont call getValueFloat() on a non FLOAT ElementValue", (byte)0, true, 'W');
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.fillup("Dont call getValueFloat() on a non FLOAT ElementValue", 2618, true, 'T');
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.methodTypeToSignature("?'", (String[]) null);
      assertEquals("()L?';", string3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Utility.fillup("", (-2793), true, 'R');
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1876), (int) (byte)91, true);
      assertEquals("0:    iconst_4\n1:    dup_x2\n2:    fconst_1\n3:    dup\n4:    newarray\t\t<byte>\n6:    <illegal opcode>\n7:    nop\n", string1);
      
      String string2 = Utility.fillup("#j", (byte)8, true, 'R');
      assertEquals("#jRRRRRR", string2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("50");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 50
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Kn=%=l PC&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kn=%=l PC&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = (-2457);
      Utility.setBit((-2457), (-2457));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((-397), (-397));
      Utility.accessToString((-2457));
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-71);
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)33;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 140, (-2457), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "CodeException(start_pc = ";
      Utility.typeOfSignature("CodeException(start_pc = ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("CodeException(start_pc = ", "CodeException(start_pc = ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CodeException(start_pc = 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(92, true);
      String string0 = ")c[.";
      try { 
        Utility.typeOfSignature(")c[.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )c[.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$l$8b$i$a$a$a$a$a$a$a", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)50;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte)107, (byte) (-89));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "wide";
      Utility.getSignature("wide");
      Utility.signatureToString("Lwide;");
      String string1 = "5%'1wie>-lE\\}K;xn=4";
      try { 
        Utility.methodSignatureArgumentTypes("5%'1wie>-lE}K;xn=4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5%'1wie>-lE}K;xn=4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Utility.classOrInterface(97);
      assertEquals("class", string0);
      
      short short0 = Utility.searchOpcode("DhLVfT8`L\"'Z!=");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)65;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte) (-37));
      assertEquals("13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n", string1);
      
      boolean boolean0 = Utility.isSet(43, 448);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.format((-3237), (-3237), false, '[');
      Utility.methodTypeToSignature("Mt1S^C$xQqg", (String[]) null);
      Utility.setBit((-3237), (-3237));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)35;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" arg");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 132, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("KI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Object", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Object'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "'";
      Utility.fillup("'", 198, true, 'C');
      Utility.setBit(198, 198);
      String string1 = "H\\bGAdfvf@";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H\bGAdfvf@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H\bGAdfvf@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.accessToString((-224), false);
      String string1 = Utility.compactClassName("synchronized native interface abstract strictfp synthetic annotation enum", "synchronized native interface abstract strictfp synthetic annotation enum", false);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("l2i", string2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.getSignature("~fl-BIl_");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byte byte0 = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byte byte1 = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Utility.convertString("ldc_w");
      assertEquals("ldc_w", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      assertTrue(boolean0);
      
      Utility.signatureToString("V#");
      String string1 = Utility.compactClassName("s*Q~u}", false);
      assertEquals("s*Q~u}", string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byte byte0 = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)109;
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 30, (int) (byte)8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-6);
      Utility.encode(byteArray1, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.replace("", "static", "static");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "static";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "static";
      Utility.printArray(objectArray0);
      Utility.methodSignatureReturnType("ev/pV8)Ck'\"");
      Utility.typeOfSignature("I9/VuBYMhvh'K}ZO)");
      boolean boolean0 = true;
      Utility.format((-211), 1828, true, 'R');
      Utility.accessToString((int) (byte)10);
      try { 
        Utility.decode(" ", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("", "LIt&SUg-F$jsEH]+%_", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LIt&SUg-F$jsEH]+%_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LIt&SUg-F$jsEH]+%_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("WE#mKR.00^G6[M'+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WE#mKR.00^G6[M'+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "Gv7%K\"Kn`";
      try { 
        Utility.typeOfSignature("Gv7%K\"Kn`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gv7%K\"Kn`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 240, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = 4;
      int int1 = 1957;
      Utility.isSet(4, 1957);
      String string0 = "[`c{t'`j^h!-q|^";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[`c{t'`j^h!-q|^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``c{t'`j^h!-q|^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)41;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-6));
      try { 
        Utility.typeOfSignature("49 b1 fa ad 29");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 49 b1 fa ad 29
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('\"');
      Utility.isSet(55, 55);
      Utility.getSignature("arraylength");
      String string0 = "L^)e,(KMnI";
      Utility.typeOfSignature("L^)e,(KMnI");
      Utility.compactClassName("<hR;-tCVwF4", "z\"!Rm:(0fUImSK", false);
      Utility.classOrInterface((byte)14);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = new ConstantString(85);
      constantArray0[0] = (Constant) constantString0;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("monitorenter", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.typeOfSignature("B");
      int int0 = 105;
      Utility.clearBit(105, (byte)8);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(43, 533);
      boolean boolean0 = false;
      Utility.signatureToString("B", false);
      byte[] byteArray0 = new byte[0];
      try { 
        MockURI.URI("newarray", "byte", "B", "org.apache.bcel.classfile.Utility$JavaReader", "newarray");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: newarray://byteB?org.apache.bcel.classfile.Utility$JavaReader#newarray
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("QO{fH&tsM@`]cr7;-d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QO{fH&tsM@`]cr7;-d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NKP\"aP=~-,#]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NKP\"aP=~-,#]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = "6,W;rrf";
      try { 
        Utility.typeOfSignature("6,W;rrf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6,W;rrf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("\n", "\n", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-37);
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte) (-68), 92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 36, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "boolean";
      String string1 = "MRqJ]8Mp^(~t,K";
      Utility.replace("boolean", "boolean", "MRqJ]8Mp^(~t,K");
      int int0 = 1277;
      Utility.classOrInterface(1277);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("MRqJ]8Mp^(~t,K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MRqJ]8Mp^(~t,K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.classOrInterface(97);
      Utility.searchOpcode("DhLVfT8`L\"'Z!=");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte) (-37));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "[`c{t'`J^h!-q|^";
      boolean boolean0 = false;
      Utility.compactClassName("[`c{t'`J^h!-q|^", false);
      Utility.searchOpcode("[`c{t'`J^h!-q|^");
      Utility.typeOfSignature("[`c{t'`J^h!-q|^");
      String string1 = "long";
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(60, 60, false, ' ');
      Utility.isJavaIdentifierPart(' ');
      String string0 = "YkHU:)No";
      try { 
        Utility.methodSignatureReturnType("YkHU:)No", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `No'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("java.lang.", false);
      char char0 = 't';
      Utility.isJavaIdentifierPart('t');
      try { 
        Utility.methodSignatureArgumentTypes("(w1[,d'h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `w1[,d'h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)7;
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      int int0 = 24;
      Utility.format(24, (byte) (-29), true, 'V');
      Utility.compactClassName("$e3$H", false);
      try { 
        Utility.typeOfSignature("E%#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E%#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.printArray((Object[]) null);
      try { 
        Utility.typeOfSignature("WC'xzHv+RXNdL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WC'xzHv+RXNdL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.clearBit(92, 92);
      Utility.getSignature("\t\t#");
      try { 
        Utility.decode("invokeinterface", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("getfield", 105, true, 'r');
      MockPrintStream mockPrintStream0 = new MockPrintStream("R$l6Z{g!1\"Ng5ze");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "getfieldrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrintStream printStream1 = mockPrintStream1.append('O');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) printStream1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " *h9?Ox{$;q");
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "getfield";
      Utility.printArray(printStream1, objectArray0);
      Utility.isJavaIdentifierPart('O');
      Utility.convertString("R$l6Z{g!1\"Ng5ze");
      try { 
        Utility.typeOfSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.setBit(223, 223);
      Utility.accessToString((-2147483425), true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("`:*:V@shWK!d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `:*:V@shWK!d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, true, false);
      String string0 = "Q92YsWHIS%<cA?-O@s";
      try { 
        Utility.methodSignatureReturnType("Q92YsWHIS%<cA?-O@s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q92YsWHIS%<cA?-O@s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.searchOpcode(".M");
      Utility.signatureToString("Invalid signature: ", false);
      Utility.searchOpcode("r");
      try { 
        Utility.typeOfSignature(".M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, false);
      Utility.fillup("W\"TXNNEV!", (-408), false, ',');
      Utility.clearBit(2066, 2715);
      Utility.compactClassName("org.apache.bcel.util.ClassPath$Dir", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<rhqd.\"y");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Utility.replace("5{I0uUp6Q", "5{I0uUp6Q", "5{I0uUp6Q");
      assertEquals("5{I0uUp6Q", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      String string1 = Utility.format((-559), (-3939), true, 'P');
      assertEquals("-559", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)86;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-491), (int) (byte)86, false);
      assertEquals("0:    sastore\n1:    lreturn\n2:    pop2\n3:    iconst_0\n4:    dneg\n5:    iastore\n6:    astore_3\n7:    impdep2\n8:    sastore\n", string2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "0'>0MskgUy;N";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      try { 
        Utility.typeOfSignature("0'>0MskgUy;N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0'>0MskgUy;N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-7));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteSequence0, constantPool1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("astore_1", "astore_1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // astore_1
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.LineNumberTable");
      String string0 = Utility.methodSignatureReturnType("FTk`4r#a", true);
      assertEquals("float", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FTk`4r#a";
      stringArray0[1] = "float";
      stringArray0[2] = "float";
      stringArray0[3] = "float";
      stringArray0[4] = "float";
      String string1 = Utility.methodTypeToSignature("FTk`4r#a", stringArray0);
      assertEquals("(LFTk`4r#a;FFFF)LFTk`4r#a;", string1);
      
      String string2 = Utility.accessToString(86);
      assertEquals("private protected final volatile", string2);
      
      Utility.compactClassName("%uEf`SjXd1", "invokevirtual", true);
      String string3 = Utility.compactClassName("Y4i+SCI^", "private protected final volatile", false);
      assertEquals("Y4i+SCI^", string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('b');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(80, (-2208));
      assertEquals(81, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.getSignature("~fl-BIl_");
      assertEquals("L~fl-BIl_;", string0);
      
      String string1 = Utility.signatureToString("IotZ,bS`&J:Sp3/");
      assertEquals("int", string1);
      
      String string2 = Utility.format(42, 42, false, '3');
      assertEquals("333333333333333333333333333333333333333342", string2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n     ";
      Utility.methodTypeToSignature("\n     ", stringArray0);
      Utility.compactClassName(" no ident, reaching EOF");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("\n     ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //      '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.setBit(78, 78);
      String string0 = "T`}.}]>Kd}c3dh0Dcv";
      Utility.compactClassName("T`}.}]>Kd}c3dh0Dcv", "T`}.}]>Kd}c3dh0Dcv", false);
      Utility.typeOfSignature("T`}.}]>Kd}c3dh0Dcv");
      Object[] objectArray0 = new Object[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[0] = (Object) "T`}.}]>Kd}c3dh0Dcv";
      objectArray0[1] = (Object) "T`}.}]>Kd}c3dh0Dcv";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "T`}.}]>Kd}c3dh0Dcv";
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('*');
      try { 
        Utility.typeOfMethodSignature("lookupswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lookupswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"");
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.compactClassName(", low = ", true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)14;
      Utility.toHexString(byteArray1);
      try { 
        Utility.methodSignatureReturnType("/ZjGu$Vsf3/qq0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/ZjGu$Vsf3/qq0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 77;
      Utility.isSet(77, 77);
      String string0 = "A+=M%bzm9.#";
      try { 
        Utility.typeOfSignature("A+=M%bzm9.#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A+=M%bzm9.#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte) (-99), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      Utility.accessToString(11, true);
      Utility.fillup("TfU=hZ", 11, true, '^');
      try { 
        Utility.methodSignatureReturnType("TfU=hZ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TfU=hZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}OgD/>C?Y?ClX_O");
      Utility.searchOpcode("");
      Utility.compactClassName("Kvvz>lB_#");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Kvvz>lB_#", "4FH~", "char", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kvvz>lB_#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("boolean");
      String string0 = "#&'=u(}WL]CO@r\\(TLh";
      Utility.convertString("#&'=u(}WL]CO@r(TLh");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.convertString("}r;AcBGt");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}r;AcBGt";
      stringArray0[1] = "}r;AcBGt";
      stringArray0[2] = "f|xkm,}([BHH";
      stringArray0[3] = "}r;AcBGt";
      stringArray0[4] = "}r;AcBGt";
      stringArray0[5] = "}r;AcBGt";
      stringArray0[6] = "}r;AcBGt";
      stringArray0[7] = "}r;AcBGt";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("}r;AcBGt", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[BHH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "1902souq\"CWO:j";
      try { 
        Utility.typeOfSignature("1902souq\"CWO:j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1902souq\"CWO:j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.signatureToString("DL", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)75;
      byte byte0 = (byte) (-36);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-121);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("double");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "@sZv";
      Utility.replace("Eu{Sm?v6n<$|:ZlX", "@sZv", "g57CN?]f");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 112
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("S");
      Utility.accessToString(541, true);
      String string0 = "5btXl.ynpa7wYS ";
      String string1 = "int";
      boolean boolean0 = false;
      MockFile mockFile0 = new MockFile("5btXl.ynpa7wYS ", "5btXl.ynpa7wYS ");
      MockFile mockFile1 = new MockFile(mockFile0, "public protected static final");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"S\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "@Ey%#P<";
      try { 
        Utility.decode("@Ey%#P<", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.compactClassName("dreturn");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("vM.-]t", true);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = 1024;
      Utility.clearBit(1024, 1024);
      String string0 = "U{N";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U{N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U{N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, true, true);
      String string0 = "org.apache.bcel.classfile.ParameterAnnotations";
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.ParameterAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = Utility.setBit(8192, (-163));
      assertEquals(536879104, int0);
      
      String string0 = Utility.replace("K:", "K:", ") H");
      String string1 = Utility.compactClassName(") H", "CaFNl 4fT3X\"", false);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)7;
      Utility.toHexString(byteArray0);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("72 08 da f9 07", string2);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = (-1395);
      Utility.accessToString((-1395), false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("=>~fF'", "", "public protected static transient interface strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =>~fF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.isSet(36, 36);
      String string0 = "w`SroctWUt$x$";
      try { 
        Utility.typeOfSignature("w`SroctWUt$x$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w`SroctWUt$x$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.compactClassName("<Any exception>(0)", true);
      Utility.classOrInterface((-178));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "<Any exception>(0)";
      objectArray0[1] = (Object) "<Any exception>(0)";
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("R7U0dDU0'jJ&$V*Tw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R7U0dDU0'jJ&$V*Tw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = (-1393);
      int int1 = 83;
      Utility.isSet((-1393), 83);
      String string0 = "S\"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S\"");
      try { 
        Utility.typeOfMethodSignature("bootstrap_method_attr_index");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bootstrap_method_attr_index
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H6iUMlj#7oQTw");
      byteArray0[1] = (byte)73;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1250), 8, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)73;
      byteArray1[2] = (byte)73;
      byteArray1[3] = (byte)0;
      Utility.equals(byteArray0, byteArray1);
      Utility.equals(byteArray1, byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("}}uC v]g|Z$:p~ &0D", "H6iUMlj#7oQTw", "}}uC v]g|Z$:p~ &0D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }}uC v]g|Z$:p~ &0D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.accessToString(113, true);
      String string0 = "mD!J$z";
      try { 
        Utility.methodSignatureArgumentTypes("mD!J$z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mD!J$z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokedynamic", "invokedynamic", "invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "E>[`jbn,!";
      // Undeclared exception!
      try { 
        Utility.signatureToString("E>[`jbn,!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E>[`jbn,!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.isJavaIdentifierPart('v');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("areturn", "if_icmplt", "if_acmpeq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.SuffixFileFilter";
      try { 
        Utility.typeOfSignature("org.apache.commons.io.filefilter.SuffixFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.SuffixFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-102);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)10;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "boolean";
      Utility.convertString("boolean");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", "!", "boolean", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.compactClassName("ifnonnull");
      Utility.searchOpcode("ifnonnull");
      OutputStream outputStream0 = null;
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = Utility.format((-2247), (-2247), false, '{');
      Utility.searchOpcode("_;vjR;BHkO#$g");
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("daload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `daload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.clearBit((-810), (-810));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 125
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.getSignature("char");
      Utility.compactClassName("char", true);
      Utility.accessToString(77);
      try { 
        Utility.methodSignatureArgumentTypes("mD!J$z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mD!J$z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.searchOpcode("Synthetic attribute with length > 0");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Synthetic attribute with length > 0";
      objectArray0[1] = (Object) "Synthetic attribute with length > 0";
      Utility.printArray(objectArray0, true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Lclass;V");
      mockPrintWriter0.print('V');
      PrintWriter printWriter0 = mockPrintWriter0.printf("lsub", objectArray0);
      mockPrintWriter0.println();
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 49, false, 't');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode(":;a4Zs&", false);
      Constant[] constantArray0 = new Constant[1];
      int int0 = 54;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(54, 16);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      constantNameAndType1.setSignatureIndex(54);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        constantPool0.getConstant(54, (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 54. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.classOrInterface((-600));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.getSignature("(Lclass;Lclass;)Lclass;");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.print((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "Re7&].eyT<XED5.z|c";
      Utility.convertString("Re7&].eyT<XED5.z|c");
      Utility.accessToString((-200));
      Utility.getSignature("static final synchronized native interface abstract strictfp synthetic annotation enum");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      String string1 = Utility.fillup("Re7&].eyT<XED5.z|c", 1263, true, 'O');
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Re7&].eyT<XED5.z|c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "?+{FR$>teOZ=[WZ";
      try { 
        Utility.typeOfSignature("?+{FR$>teOZ=[WZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?+{FR$>teOZ=[WZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.accessToString(13);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      Utility.setBit(13, (byte)0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)10;
      objectArray0[1] = (Object) "$A$d0$N$H$A4$A$K$A";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte) (-48);
      Object object0 = new Object();
      objectArray0[4] = object0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-1341), (-1341), true, '.');
      try { 
        Utility.typeOfSignature("-1341");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1341
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int int0 = 645;
      boolean boolean0 = true;
      Utility.fillup("", 645, true, '(');
      Utility.getSignature("~Gp+McLU");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L~Gp+McLU;", (String) null, "~Gp+McLU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L~Gp+McLU;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.compactClassName("n$Wn-SQJVs", "n$Wn-SQJVs", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1743), (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dneg
         // 2:    iconst_2
         // 3:    astore_2
         // 4:    aload_3
         // 5:    frem
         // 6:    <illegal opcode>
         // 7:    laload
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("null, null, null, java.lang.Object@49394277, null", false);
      try { 
        Utility.methodSignatureArgumentTypes("/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("Jn<HP,ht");
      Utility.accessToString(0);
      Utility.format(202, (-785), false, 's');
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = Utility.format(1931, 1931, true, '3');
      Utility.convertString("int");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)95;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)44;
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) "int";
      objectArray0[3] = (Object) (byte)71;
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) string0;
      objectArray0[6] = (Object) "int";
      objectArray0[7] = (Object) "int";
      Object object0 = new Object();
      objectArray0[8] = object0;
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "checkcast";
      Utility.convertString("checkcast");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "checkcast";
      stringArray0[1] = "checkcast";
      stringArray0[2] = "checkcast";
      stringArray0[3] = "checkcast";
      stringArray0[4] = "checkcast";
      stringArray0[5] = "checkcast";
      stringArray0[6] = "checkcast";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"uul{$-");
      Utility.methodTypeToSignature("checkcast", stringArray0);
      Utility.classOrInterface(18);
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.decode("void", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "void";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorenter");
      Utility.compactClassName("monitorenter", "monitorenter", true);
      Utility.setBit((-2933), 65);
      Utility.isJavaIdentifierPart('I');
      String string0 = "putfield";
      try { 
        Utility.methodSignatureReturnType("putfield", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putfield'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.format((-3237), (-3237), false, '[');
      Utility.methodTypeToSignature("Mt1S^C$xQqg", (String[]) null);
      Utility.setBit((-3237), (-3237));
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)35;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" arg");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 132, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 35. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(235, 255);
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
