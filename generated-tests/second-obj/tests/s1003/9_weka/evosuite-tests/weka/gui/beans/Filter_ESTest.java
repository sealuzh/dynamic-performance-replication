/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:43:59 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.ComponentOrientation;
import java.awt.Dialog;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Panel;
import java.awt.TextField;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JApplet;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.tree.VariableHeightLayoutCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.meta.FilteredClassifier;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.SparseInstance;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.removeInstanceListener(substringReplacer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      filter0.enumerateRequests();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptDataSet((DataSetEvent) null);
      boolean boolean0 = filter0.eventGeneratable("*");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      crossValidationFoldMaker0.enumerateRequests();
      filter0.getMouseListeners();
      filter0.disconnectionNotification("\tThe length of the subsequence.\n\t(default: 3)", crossValidationFoldMaker0);
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.getLocale();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.getFilter();
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      Discretize discretize0 = new Discretize();
      filter0.setFilter(discretize0);
      filter0.connectionAllowed("1Y:(oh)y9z");
      filter0.setWrappedAlgorithm(discretize0);
      assertEquals("Discretize", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      Loader loader0 = new Loader();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(loader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.Loader : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeDataSourceListener(flowByExpression0);
      filter0.getPropertyChangeListeners("fNZ");
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.addTrainingSetListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("g+2WwPX^b=\"U6[Zxe,", "g+2WwPX^b=\"U6[Zxe,");
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.addDataSourceListener(classValuePicker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addInstanceListener(classAssigner0);
      filter0.isBusy();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.useDefaultVisual();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      TestSetEvent testSetEvent0 = new TestSetEvent(globalInfoJavadoc0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      ImageSaver imageSaver0 = new ImageSaver();
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      MetaBean metaBean0 = new MetaBean();
      Vector vector0 = metaBean0.m_inputs;
      JTree jTree0 = new JTree(vector0);
      VariableHeightLayoutCache variableHeightLayoutCache0 = new VariableHeightLayoutCache();
      filter0.connectionNotification("<!-- globalinfo-end -->", imageSaver0);
      filter0.getGraphicsConfiguration();
      Frame frame0 = null;
      try {
        frame0 = new Frame((GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.transferFocusUpCycle();
      filter0.connectionNotification("weka/gui/beans/icons/DefaultFilter_animated.gif", "weka/gui/beans/icons/DefaultFilter_animated.gif");
      long long0 = (-826L);
      System.setCurrentTimeMillis((-826L));
      filter0.stop();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Class<IncrementalClassifierEvaluator> class0 = IncrementalClassifierEvaluator.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/gui/beans/icons/DefaultFilter_animated.gif";
      stringArray0[1] = "weka/gui/beans/icons/DefaultFilter_animated.gif";
      stringArray0[2] = "weka/gui/beans/icons/DefaultFilter_animated.gif";
      stringArray0[3] = "weka/gui/beans/icons/DefaultFilter_animated.gif";
      stringArray0[4] = "weka/gui/beans/icons/DefaultFilter_animated.gif";
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "weka/gui/beans/icons/DefaultFilter_animated.gif", class0, stringArray0, "weka/gui/beans/icons/DefaultFilter_animated.gif", "weka/gui/beans/icons/DefaultFilter_animated.gif", "weka/gui/beans/icons/DefaultFilter_animated.gif");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found: weka/gui/beans/icons/DefaultFilter_animated.gif on class weka.gui.beans.IncrementalClassifierEvaluator
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      TestSetEvent testSetEvent0 = new TestSetEvent(globalInfoJavadoc0, (Instances) null);
      ImageSaver imageSaver0 = new ImageSaver();
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      MetaBean metaBean0 = new MetaBean();
      VariableHeightLayoutCache variableHeightLayoutCache0 = new VariableHeightLayoutCache();
      filter0.connectionNotification("<!-- globalinfo-end -->", imageSaver0);
      InstanceEvent instanceEvent0 = new InstanceEvent("", (Instances) null);
      filter0.acceptInstance(instanceEvent0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      BeanVisual beanVisual0 = filter0.getVisual();
      filter0.setVisual(beanVisual0);
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.connectionNotification("weka/gui/beans/icons/", instanceStreamToBatchMaker0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.getFilter();
      Associator associator0 = new Associator();
      boolean boolean0 = filter0.eventGeneratable("weka/gui/beans/icons/");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      BeanVisual beanVisual0 = filter0.getVisual();
      filter0.setVisual(beanVisual0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.connectionNotification("weka/gui/beans/icons/", instanceStreamToBatchMaker0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      filter0.connectionNotification("weka/gui/beans/icons/", beanVisual0);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus(6);
      // Undeclared exception!
      try { 
        filter0.performRequest("G-L28&EoO_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // G-L28&EoO_ not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      filter0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      filter0.setLog((Logger) null);
      filter0.removeAll();
      filter0.getHierarchyBoundsListeners();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("+?*", allFilter0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.getFilter();
      Associator associator0 = new Associator();
      boolean boolean0 = filter0.eventGeneratable("+?*");
      assertTrue(boolean0);
      
      Saver saver0 = new Saver();
      filter0.removeTestSetListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      XRFFLoader xRFFLoader1 = new XRFFLoader();
      String string0 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      weka.filters.Filter filter1 = filter0.getFilter();
      filter0.globalInfo();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("wb", arrayList0, 0);
      TestSetEvent testSetEvent0 = new TestSetEvent(filter1, instances0, (-690), 2, 1518, 78);
      filter0.acceptTestSet(testSetEvent0);
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      BeanVisual beanVisual0 = substringLabeler1.m_visual;
      filter0.setVisual(beanVisual0);
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      DataSetEvent dataSetEvent0 = new DataSetEvent(incrementalClassifierEvaluator0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("SubstringLabeler", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      filter0.setCustomName("}*AlQ");
      BeanVisual beanVisual0 = filter0.m_visual;
      filter0.setVisual(beanVisual0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka/gui/beans/icons/", arrayList0, 3);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classAssigner0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.removeTrainingSetListener(classAssigner0);
      assertEquals("}*AlQ", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.eventGeneratable("configuration");
      FileSystemHandling.shouldAllThrowIOExceptions();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      filter0.acceptDataSet((DataSetEvent) null);
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals(1, instances0.classIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getGraphicsConfiguration();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      AWTEventMulticaster.remove((FocusListener) metalComboBoxEditor0, (FocusListener) metalComboBoxEditor0);
      FocusListener focusListener0 = AWTEventMulticaster.add((FocusListener) null, (FocusListener) metalComboBoxEditor0);
      trainTestSplitMaker0.addFocusListener(focusListener0);
      trainTestSplitMaker0.removeAll();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      boolean boolean0 = filter0.connectionAllowed("{l]jn/X)(L");
      assertTrue(boolean0);
      
      filter0.getWrappedAlgorithm();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Random.setNextRandom(256);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(testSetMaker0, instances0, 1175, 2, 105, 1572);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nO2sB+1v2oJSVz]");
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseListeners();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.disconnectionNotification("\tThe length of the subsequence.\n\t(default: 3)", add0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      XRFFLoader xRFFLoader1 = new XRFFLoader();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      substringLabeler0.isValidateRoot();
      filter0.disconnectionNotification(".arff", ".arff");
      MetaBean metaBean0 = new MetaBean();
      JComponent.isLightweightComponent(metaBean0);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("$rN#b)N=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // $rN#b)N= not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      Sorter sorter1 = new Sorter();
      sorter1.invalidate();
      TestSetMaker testSetMaker1 = new TestSetMaker();
      Associator associator0 = new Associator();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      TrainTestSplitMaker trainTestSplitMaker1 = new TrainTestSplitMaker();
      trainTestSplitMaker1.getKeyListeners();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      BeanVisual beanVisual0 = sorter1.getVisual();
      Locale locale0 = Locale.UK;
      JComponent.setDefaultLocale(locale0);
      beanVisual0.isFocusOwner();
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged). not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      sorter0.invalidate();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DenseInstance denseInstance0 = new DenseInstance(2);
      Sorter sorter1 = new Sorter();
      testSetMaker0.getVisual();
      instanceEvent0.setInstance(denseInstance0);
      Sorter sorter2 = new Sorter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      BeanVisual beanVisual0 = instanceStreamToBatchMaker0.m_visual;
      instanceEvent0.setStatus((-8));
      filter0.acceptInstance(instanceEvent0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getOptions();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      sorter0.invalidate();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Associator associator0 = new Associator();
      ListOptions listOptions0 = new ListOptions();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      Sorter sorter1 = new Sorter();
      BeanVisual beanVisual0 = testSetMaker0.getVisual();
      beanVisual0.isFocusOwner();
      instanceEvent0.setStatus(1);
      filter0.acceptInstance(instanceEvent0);
      Discretize discretize0 = new Discretize();
      instanceEvent0.setStatus((-936));
      Panel panel0 = new Panel();
      assertEquals(0, panel0.getX());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("Can't delete class attribute");
      assertFalse(boolean0);
      
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      filter0.addDataSourceListener(crossValidationFoldMaker0);
      filter0.removeTrainingSetListener(crossValidationFoldMaker0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      Appender appender0 = new Appender();
      filter0.addInstanceListener(appender0);
      AllFilter allFilter0 = new AllFilter();
      filter0.setFilter(allFilter0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addNotify();
      filter0.getWidth();
      filter0.setRequestFocusEnabled(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.setCustomName("instance");
      filter0.stop();
      filter0.connectionAllowed("instance");
      Classifier classifier0 = new Classifier();
      classifier0.isFocusable();
      filter0.addTrainingSetListener(classifier0);
      filter0.enumerateRequests();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      try { 
        filteredClassifier0.numElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      filter1.getCapabilities();
      boolean boolean0 = attributeSummarizer0.m_runningAsPerspective;
      ComponentOrientation componentOrientation1 = ComponentOrientation.LEFT_TO_RIGHT;
      attributeSummarizer0.setComponentOrientation(componentOrientation0);
      filter0.removeTestSetListener(attributeSummarizer0);
      filter0.getWrappedAlgorithm();
      filter0.setCustomName("weka/core/Capabilities.props");
      Clusterer clusterer0 = new Clusterer();
      clusterer0.getToolTipText();
      BeanVisual beanVisual0 = clusterer0.m_visual;
      JComponent.getDefaultLocale();
      filter0.setVisual(beanVisual0);
      Sorter sorter0 = new Sorter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      FlowByExpression flowByExpression0 = new FlowByExpression();
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("instance", filter1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      sorter0.invalidate();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Associator associator0 = new Associator();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(manhattanDistance0, instances0, 1, (-1244), (-1244), 0);
      trainingSetEvent0.m_maxRunNumber = 2;
      filter0.acceptTrainingSet(trainingSetEvent0);
      Sorter sorter1 = new Sorter();
      BeanVisual beanVisual0 = testSetMaker0.getVisual();
      beanVisual0.isFocusOwner();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      testSetEvent0.m_setNumber = 2128;
      filter0.acceptTestSet(testSetEvent0);
      Discretize discretize0 = new Discretize();
      filter0.connectionAllowed("The maximum number of alterations to the percptron.");
      filter0.getKeyListeners();
      filter0.enumerateRequests();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setLog((Logger) null);
      filter0.removeAll();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      int int0 = WrapperSubsetEval.EVAL_RMSE;
      Associator associator0 = new Associator();
      filter0.connectionNotification("-C <order>", associator0);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      FocusEvent focusEvent0 = new FocusEvent(filter0, 3);
      filter0.removeFocusListener(basicComboBoxEditor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      filter0.eventGeneratable("-C <order>");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      TestSetMaker testSetMaker0 = new TestSetMaker();
      MetaBean metaBean0 = new MetaBean();
      BeanVisual beanVisual0 = metaBean0.m_visual;
      beanVisual0.isFocusOwner();
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest(" ERROR : ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  ERROR :  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      sorter0.invalidate();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Associator associator0 = new Associator();
      ListOptions listOptions0 = new ListOptions();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(listOptions0, instances0, 2, 16, 1, 28);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.getKeyListeners();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      BeanVisual beanVisual0 = sorter0.getVisual();
      beanVisual0.isFocusOwner();
      instanceEvent0.setStatus(57);
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged). not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removeAll();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.removeAll();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      filter0.getWrappedAlgorithm();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      sorter0.invalidate();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      String[] stringArray0 = new String[5];
      stringArray0[2] = "@data";
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      flowByExpression0.removeComponentListener((ComponentListener) null);
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      filter0.enumerateRequests();
      filter0.addTestSetListener(trainTestSplitMaker0);
      filter0.removeTrainingSetListener((TrainingSetListener) null);
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      TestSetEvent testSetEvent0 = new TestSetEvent(clustererPerformanceEvaluator0, instances0);
      filter0.acceptTestSet(testSetEvent0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false);
      filter0.setLog(logPanel0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanVisual beanVisual0 = filter0.m_visual;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      ArffLoader arffLoader0 = new ArffLoader();
      Environment environment0 = Environment.getSystemWide();
      arffLoader0.setEnvironment(environment0);
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.setCustomName("V?+dYf5l^E-yw4'");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      sorter0.invalidate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      filter0.removeTrainingSetListener(sorter0);
      instanceEvent0.setStructure(instances0);
      Associator associator0 = new Associator();
      ListOptions listOptions0 = new ListOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sorter sorter1 = new Sorter();
      sorter1.getVisual();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      boolean boolean0 = sorter0.m_busy;
      sorter0.grabFocus();
      instanceEvent0.setStatus(0);
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @relation not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      filter0.removeHierarchyListener((HierarchyListener) null);
      filter0.getPropertyChangeListeners("fNZ");
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.addTrainingSetListener(flowByExpression0);
      Associator associator0 = new Associator();
      associator0.getStructure("fNZ");
      DataSetEvent dataSetEvent0 = new DataSetEvent(flowByExpression0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getGraphicsConfiguration();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      AWTEventMulticaster.remove((FocusListener) metalComboBoxEditor0, (FocusListener) metalComboBoxEditor0);
      FocusListener focusListener0 = AWTEventMulticaster.add((FocusListener) null, (FocusListener) metalComboBoxEditor0);
      trainTestSplitMaker0.addFocusListener(focusListener0);
      trainTestSplitMaker0.removeAll();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      filter0.connectionAllowed("{l]jn/X)(L");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      filter0.getWrappedAlgorithm();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Random.setNextRandom(256);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ".bsi");
      testSetMaker0.resetKeyboardActions();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(testSetMaker0, instances0, 1173, 2, 105, 1572);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      filter0.addDataSourceListener(trainTestSplitMaker0);
      TestSetMaker testSetMaker1 = new TestSetMaker();
      DataSetEvent dataSetEvent0 = new DataSetEvent(testSetMaker1, instances0);
      filter0.acceptDataSet(dataSetEvent0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      sorter0.invalidate();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.removeTrainingSetListener(sorter0);
      Associator associator0 = new Associator();
      ListOptions listOptions0 = new ListOptions();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.getKeyListeners();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      instanceEvent0.setInstance(sparseInstance0);
      Sorter sorter1 = new Sorter();
      BeanVisual beanVisual0 = associator0.m_visual;
      beanVisual0.isFocusOwner();
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Panel panel0 = new Panel();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      sorter0.invalidate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x`M5J2[\"1k");
      Instances instances0 = textDirectoryLoader0.getStructure();
      DenseInstance denseInstance0 = new DenseInstance(2);
      instances0.add((Instance) denseInstance0);
      Associator associator0 = new Associator();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      manhattanDistance0.listOptions();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(manhattanDistance0, instances0, 1, (-1299), (-1299), 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Sorter sorter1 = new Sorter();
      instanceEvent0.setInstance(denseInstance0);
      Sorter sorter2 = new Sorter();
      BeanVisual beanVisual0 = associator0.m_visual;
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker1 = new InstanceStreamToBatchMaker();
      sorter2.getVisual();
      instanceEvent0.setStatus(1);
      filter0.acceptInstance(instanceEvent0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      filter0.eventGeneratable(".arff");
      filter0.getVisual();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      sorter0.invalidate();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DenseInstance denseInstance0 = new DenseInstance(2);
      instances0.add((Instance) denseInstance0);
      Associator associator0 = new Associator();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      associator0.getCursor();
      manhattanDistance0.listOptions();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(manhattanDistance0, instances0, 1, (-1), (-1), 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6:Jh2]");
      Sorter sorter1 = new Sorter();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      instanceEvent0.setInstance(denseInstance0);
      BeanVisual beanVisual0 = associator0.m_visual;
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Panel panel0 = null;
      try {
        panel0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }
}
