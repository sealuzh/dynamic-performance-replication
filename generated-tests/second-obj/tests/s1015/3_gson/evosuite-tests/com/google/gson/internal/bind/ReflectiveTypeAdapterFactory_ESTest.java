/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:48:55 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedInputStream;
import java.io.CharArrayWriter;
import java.io.PushbackReader;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      Excluder excluder1 = excluder0.withVersion(2191.172779);
      Class<Integer> class0 = Integer.TYPE;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize int
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Field field0 = null;
      Excluder excluder0 = new Excluder();
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Excluder excluder1 = Excluder.DEFAULT;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Integer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Gson gson0 = new Gson();
      gson0.toJson((Object) charArrayWriter0);
      Class<Integer> class0 = Integer.TYPE;
      Field field0 = null;
      Excluder excluder0 = Excluder.DEFAULT;
      Boolean boolean0 = new Boolean("{\"buf\":[\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\",\"\u0000\"],\"count\":java.lang.Integer@0000000093}");
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        ReflectiveTypeAdapterFactory.excludeField((Field) null, true, excluder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Object> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Object>((ObjectConstructor<Object>) null, hashMap0);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "]r[c43^vlkP{H");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      reflectiveTypeAdapterFactory_Adapter0.toJson((Writer) mockPrintWriter0, (Object) null);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      charArrayWriter0.write("C=;m1nc&5");
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jsonWriter0.beginArray();
      Object object1 = new Object();
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      charArrayWriter0.flush();
      TypeToken.get(class1);
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.excludeClass(class0, true);
      excluder0.disableInnerClassSerialization();
      ConstructorConstructor constructorConstructor0 = null;
      JsonObject jsonObject0 = new JsonObject();
      Class<Type> class2 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Register an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }
}
