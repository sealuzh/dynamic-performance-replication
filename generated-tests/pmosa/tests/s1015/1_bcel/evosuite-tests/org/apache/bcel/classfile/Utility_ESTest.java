/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:17:15 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.compactClassName("Y");
      String string0 = "U/`,9%*-@$ddjS";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U/`,9%*-@$ddjS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U/`,9%*-@$ddjS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.searchOpcode("");
      Utility.isSet((short) (-1), 0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-343), (-343));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid method signature: ");
      assertEquals("int", string0);
      
      short short0 = Utility.searchOpcode("anewarray");
      assertEquals((short)189, short0);
      
      boolean boolean0 = Utility.isSet((short)189, (short)189);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00", string1);
      
      boolean boolean0 = Utility.isSet(43, 57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)5;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("G8D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G8D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.classOrInterface((-3767));
      try { 
        Utility.methodSignatureReturnType("f2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f2i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "<Any exception>(0)";
      boolean boolean0 = true;
      Utility.compactClassName("<Any exception>(0)", true);
      Utility.classOrInterface(0);
      try { 
        Utility.typeOfMethodSignature("<Any exception>(0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Any exception>(0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.replace("anewarra|Wy", "anewarra|Wy", "'KWzh1h'xR/u\"*");
      try { 
        Utility.methodSignatureReturnType(" arg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` arg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.convertString(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "void";
      Utility.convertString("void");
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("$", false);
      try { 
        Utility.typeOfSignature("$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The suffix must not be null");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.replace("The suffix must not be null", "multianewarray", "The suffix must not be null");
      assertEquals("The suffix must not be null", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('R');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "O";
      try { 
        Utility.typeOfSignature("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.accessToString(60);
      try { 
        Utility.typeOfSignature("dO#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dO#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      try { 
        Utility.methodSignatureArgumentTypes("lPsT@?\"w3&M", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lPsT@?\"w3&M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "<";
      Utility.compactClassName("<");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) "<";
      objectArray0[2] = (Object) "<";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "<";
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('{');
      String string1 = "";
      String string2 = "";
      boolean boolean0 = true;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("q", stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ElYf]^5{Ovb");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "q");
      Utility.printArray(printWriter0, (Object[]) stringArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 3006;
      Utility.setBit(3006, 3006);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "fAH_U/[TU<Yl16";
      stringArray0[1] = "fAH_U/[TU<Yl16";
      stringArray0[2] = "fAH_U/[TU<Yl16";
      stringArray0[3] = "2V,Sh- N7;P#HRspB";
      stringArray0[4] = "fAH_U/[TU<Yl16";
      stringArray0[5] = "fAH_U/[TU<Yl16";
      stringArray0[6] = "fAH_U/[TU<Yl16";
      stringArray0[7] = "fAH_U/[TU<Yl16";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("fAH_U/[TU<Yl16", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[TU<Yl16
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.getSignature("2u[Q %}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Q %}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TJX)O");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.fillup("TJX)O", (-915), true, '{');
      assertEquals("TJX)O", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      int int0 = 0;
      Utility.format(0, 0, true, '#');
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.getSignature("5sjmA47");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I.Y-G]pI7Ci>");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("\t", (String[]) null);
      assertEquals("()L;", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("_1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_1");
      Object[] objectArray0 = new Object[1];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      Utility.format(29, 29, true, '#');
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)76;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.replace("anewarra|Wy", "anewarra|Wy", "'KWzh1h'xR/u\"*");
      assertEquals("'KWzh1h'xR/u\"*", string0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)89;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)91, (byte)89);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-856), 146);
      assertEquals("0:    dup\n1:    dup_x2\n2:    dup\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-513), (-513));
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.replace("1$GY$.k\"4]k9BJkZ<mv", "T'!V5Z8{%", "T'!V5Z8{%");
      try { 
        Utility.methodSignatureReturnType("U", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(3165L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(189, 189);
      Utility.setBit(189, 189);
      Utility.signatureToString("C3. =gP%=1zY\"]~H=<", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("6</C0X}=]GT{0KMUK9*", (String) null, "C3. =gP%=1zY\"]~H=<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6</C0X}=]GT{0KMUK9*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.getSignature("Invalid method signature: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "; )JE]TF!WHVFq~#";
      stringArray0[1] = "Invalid method signature: ";
      stringArray0[2] = "Invalid method signature: ";
      stringArray0[3] = "LInvalid;";
      String string0 = Utility.methodTypeToSignature("t6S@@&w", stringArray0);
      assertEquals("(L;;LInvalid;LInvalid;LLInvalid;;)Lt6S@@&w;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
      
      Utility.printArray((Object[]) stringArray0, true, true);
      String string1 = Utility.classOrInterface(1008);
      assertEquals("interface", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, true);
      assertEquals("{\"; )JE]TF!WHVFq~#\", \"Invalid method signature: \", \"Invalid method signature: \", \"LInvalid;\"}", string2);
      
      Utility.printArray((Object[]) stringArray0, true);
      String string3 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{; )JE]TF!WHVFq~#, Invalid method signature: , Invalid method signature: , LInvalid;}", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.signatureToString("C\"sg");
      Utility.isJavaIdentifierPart('k');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.searchOpcode("<Any excep");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.compactClassName("void", "z46r=3U}=N0", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"";
      stringArray0[1] = "d@d|t4QZD-n!eaf";
      stringArray0[2] = "\"";
      stringArray0[3] = "void";
      stringArray0[4] = "\"";
      stringArray0[5] = "void";
      try { 
        Utility.methodTypeToSignature("\"", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 46;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.typeOfSignature("6_?#)uIr:`UEc7Hq4M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6_?#)uIr:`UEc7Hq4M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.replace("1$GY$.k\"4]k9BJkZ<mv", "T'!V5Z8{%", "T'!V5Z8{%");
      Utility.clearBit(197, 197);
      try { 
        Utility.methodSignatureReturnType("K{Pqgi^= 8=X'i!(.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K{Pqgi^= 8=X'i!(.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("org.apache.commons.io.filefilter.PrefixFileFilter", "org.apache.commons.io.filefilter.PrefixFileFilter", true);
      assertEquals("", string0);
      
      int int0 = Utility.clearBit(1522, 1522);
      assertEquals(1522, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)23;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.replace("#N<W&-Pj<JLrFvV", "#N<W&-Pj<JLrFvV", "T'!V5Z8{%");
      try { 
        Utility.methodSignatureReturnType("T'!V5Z8{%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T'!V5Z8{%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.replace("#N<W&-Pj<JLrFvV", "#N<W&-Pj<JLrFvV", "T'!V5Z8{%");
      try { 
        Utility.methodSignatureReturnType("T'!V5Z8{%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T'!V5Z8{%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      String string1 = Utility.format(103, 83, false, '#');
      assertEquals("################################################################################103", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "p+HIsW%";
      stringArray0[3] = "char";
      String string2 = Utility.methodTypeToSignature("p+HIsW%", stringArray0);
      assertEquals("(L;L;Lp+HIsW%;C)Lp+HIsW%;", string2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "W";
      try { 
        Utility.methodSignatureReturnType("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Utility.compactClassName(" ", " ", false);
      assertEquals(" ", string0);
      
      Object[] objectArray0 = new Object[2];
      String string1 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1766, (byte)86);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "  ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ld@d|t4QZD-n!eaf;V");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ld@d|t4QZD-n!eaf;V");
      boolean boolean0 = Utility.isSet(155, 120);
      boolean boolean1 = Utility.isJavaIdentifierPart('J');
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.accessToString(2835, true);
      assertEquals("public private final native strictfp", string0);
      
      String string1 = Utility.format(120, 120, true, '4');
      assertEquals("120444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string1);
      
      String string2 = Utility.fillup("G>tIN4To", 120, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJG>tIN4To", string2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Vf");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-125);
      try { 
        Utility.methodSignatureReturnType(")Q=6d4OeHz", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q=6d4OeHz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-1);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b2$94B6$eb$eb$ff", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-21));
      assertEquals("public private static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.convertString("f>xNl1Q\"Luk]{qBmo<");
      assertEquals("f>xNl1Q\\\"Luk]{qBmo<", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = Constants.ATTR_LOCAL_VARIABLE_TABLE;
      String string0 = "T'!V5Z8{%";
      Utility.replace("T'!V5Z8{%", ",}3i?%\"mG", "T'!V5Z8{%");
      String string1 = "v)HQZ$Qa(U(4XP`u?";
      try { 
        Utility.methodSignatureReturnType("v)HQZ$Qa(U(4XP`u?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HQZ$Qa(U(4XP`u?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = Utility.isSet(10, 10);
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("F?/7l)");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "F?/7l)");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-114);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$3e$x$5bY$ab$7d$F$A$8e", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      int int0 = Utility.clearBit(966, 966);
      assertEquals(902, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      byteArray0[3] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = "dadd";
      stringArray0[3] = "dadd";
      stringArray0[4] = "ior";
      stringArray0[5] = "dadd";
      stringArray0[6] = " ";
      stringArray0[7] = "v";
      String string1 = Utility.methodTypeToSignature("dadd", stringArray0);
      assertEquals("(L$l$8b$I$A$A$A$A$A$A$A;L$l$8b$I$A$A$A$A$A$A$A;Ldadd;Ldadd;Lior;Ldadd;L;Lv;)Ldadd;", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{$l$8b$I$A$A$A$A$A$A$A, $l$8b$I$A$A$A$A$A$A$A, dadd, dadd, ior, dadd,  , v}", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.signatureToString("C3. =gP%=1zY\"]~H=<", false);
      try { 
        Utility.methodSignatureReturnType("MethodParameters", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MethodParameters'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "O";
      try { 
        Utility.typeOfSignature("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.signatureToString("Ff'", true);
      String string0 = Constants.CONSTRUCTOR_NAME;
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "R{)%&i";
      // Undeclared exception!
      try { 
        Utility.signatureToString("R{)%&i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R{)%&i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString(";;Sl");
      try { 
        Utility.decode("OOq0G2f?4!4=R:$F!", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.compactClassName("f'EI!0z9Zg-");
      Utility.convertString("f'EI!0z9Zg-");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "f'EI!0z9Zg-";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "f'EI!0z9Zg-";
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "f'EI!0z9Zg-";
      objectArray0[6] = (Object) "f'EI!0z9Zg-";
      objectArray0[7] = (Object) "f'EI!0z9Zg-";
      Utility.printArray(objectArray0);
      int int0 = 2199;
      boolean boolean0 = false;
      Utility.fillup("f'EI!0z9Zg-", 2199, false, '*');
      Utility.searchOpcode("{f'EI!0z9Zg-, java.lang.Object@6047d5fe, java.lang.Object@cfe3364, f'EI!0z9Zg-, java.lang.Object@4a158749, f'EI!0z9Zg-, f'EI!0z9Zg-, f'EI!0z9Zg-}");
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f'EI!0z9Zg-", "{f'EI!0z9Zg-, java.lang.Object@6047d5fe, java.lang.Object@cfe3364, f'EI!0z9Zg-, java.lang.Object@4a158749, f'EI!0z9Zg-, f'EI!0z9Zg-, f'EI!0z9Zg-}", "f'EI!0z9Zg-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f'EI!0z9Zg-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.decode("+TibLDTd63BY2PxbB", false);
      boolean boolean0 = Utility.isSet((-590), (-1287));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M'lsQmDY8";
      stringArray0[1] = "M'lsQmDY8";
      stringArray0[2] = "ifnonnull";
      stringArray0[3] = "M'lsQmDY8";
      stringArray0[4] = "M'lsQmDY8";
      stringArray0[5] = "M'lsQmDY8";
      Utility.methodTypeToSignature("M'lsQmDY8", stringArray0);
      try { 
        Utility.typeOfSignature("M'lsQmDY8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M'lsQmDY8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      String[] stringArray0 = Constants.ITEM_NAMES;
      Utility.format((-1), (-1), false, '&');
      try { 
        Utility.typeOfSignature("-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YmM$r${x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YmM$r${x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.getSignature("b*/x");
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ",O=d\\w";
      try { 
        Utility.typeOfSignature(",O=dw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,O=dw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true);
      int int0 = 171;
      Utility.accessToString(171, true);
      String string0 = "\"";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_icmpgt", "_~bNV*FjB,Ro^wo", "\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.typeOfSignature("F4mHd]vw*/+1^Je_pk");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "F4mHd]vw*/+1^Je_pk";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "F4mHd]vw*/+1^Je_pk";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "F4mHd]vw*/+1^Je_pk";
      objectArray0[8] = (Object) "F4mHd]vw*/+1^Je_pk";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegally nested brackets:", true);
      try { 
        Utility.methodSignatureReturnType("1aau,+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1aau,+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "NE4_L.#>8%";
      // Undeclared exception!
      try { 
        Utility.signatureToString("NE4_L.#>8%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NE4_L.#>8%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "NE4_L.#>8%";
      try { 
        Utility.typeOfSignature("NE4_L.#>8%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NE4_L.#>8%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "O";
      byte byte0 = ElementValue.PRIMITIVE_CHAR;
      // Undeclared exception!
      try { 
        Utility.signatureToString("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature("17mv]&+SOB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 17mv]&+SOB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":X~!g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :X~!g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9C@VOzn1Q_Fy)H4V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9C@VOzn1Q_Fy)H4V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!y#cfa3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y#cfa3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "[q',-oEVx`";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[q',-oEVx`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `q',-oEVx`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X~!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X~!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.signatureToString("B*DzAOc](");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B*DzAOc](";
      Utility.methodTypeToSignature("byte", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" (", "byte", "2G[FVfC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.signatureToString("Limpdep1;V");
      assertEquals("impdep1", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.signatureToString("LB*DzAOc](;V");
      assertEquals("B*DzAOc](", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "B*DzAOc](";
      stringArray0[1] = "LB*DzAOc](;V";
      stringArray0[2] = "LB*DzAOc](;V";
      stringArray0[3] = "0/=Mx)8_j7s";
      stringArray0[4] = "0/=Mx)8_j7s";
      stringArray0[5] = "B*DzAOc](";
      stringArray0[6] = "Ooops, what primitive type is ";
      stringArray0[7] = "LB*DzAOc](;V";
      String string1 = Utility.methodTypeToSignature("0/=Mx)8_j7s", stringArray0);
      assertEquals("(LB*DzAOc](;LLB*DzAOc](;V;LLB*DzAOc](;V;L0/=Mx)8_j7s;L0/=Mx)8_j7s;LB*DzAOc](;LOoops,;LLB*DzAOc](;V;)L0/=Mx)8_j7s;", string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LU3[@v*v6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU3[@v*v6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Gg_  kQw}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gg_  kQw}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("EAfH*~sOW@3e}{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EAfH*~sOW@3e}{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "AO";
      try { 
        Utility.typeOfSignature("AO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.getSignature("f\t");
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.$l$8b$3$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.$l$8b$3$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_RESET;
      try { 
        Utility.typeOfSignature("H85*&*+(-gVrZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H85*&*+(-gVrZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&eC4i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &eC4i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.getSignature(";8qU");
      Utility.getSignature("L;8qU;");
      Utility.accessToString(56);
      Utility.classOrInterface(56);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-30);
      byteArray0[0] = (byte) (-30);
      byte byte1 = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)53, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.convertString("invokedynamic");
      try { 
        Utility.typeOfSignature("WwU6tX *1$-)|yX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WwU6tX *1$-)|yX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/H|UCPt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /H|UCPt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_Fieldref");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BslC[");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%EqBA:IK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %EqBA:IK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.convertString("\t");
      byte byte0 = Constants.T_ADDRESS;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("bipush\t\t16", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5Xa,x<guQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5Xa,x<guQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "@9-_5?aA";
      try { 
        Utility.typeOfSignature("@9-_5?aA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @9-_5?aA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Lmonitorenter;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = ")Q=64OeHz";
      try { 
        Utility.typeOfSignature("Unrecognized attribute type tag parsed: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unrecognized attribute type tag parsed: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(type=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `type='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.typeOfSignature("Zx,p|k+AN.5[.xItN`");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[2] = (byte)62;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1200, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.getSignature("org.apache.commons.io.filefilter.OrFileFilter");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (-1610));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-513), (-513));
      Utility.getSignature("0:    nop\n");
      try { 
        Utility.methodSignatureReturnType("-}Qgw9t|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-}Qgw9t|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, (-1177));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)90;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), 150);
      assertEquals("0:    dstore_1\n1:    faload\n2:    bastore\n3:    <illegal opcode>\n4:    fconst_0\n5:    d2i\n6:    dup_x1\n", string0);
      
      String string1 = Utility.compactClassName("AI-.U", "AI-.U", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Qy/hBL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qy/hBL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Vr;oBaC|");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.accessToString((int) (byte)12);
      assertEquals("protected static", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), 449);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2i
         // 1:    dup_x1
         // 2:    faload
         // 3:    dup_x1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.getSignature("org.apache.commons.io.filefilter.OrFileFilter");
      assertEquals("Lorg/apache/commons/io/filefilter/OrFileFilter;", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)47;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1559), (int) (byte)30);
      assertEquals("0:    lload_1\n1:    fload_0\n2:    laload\n3:    lconst_1\n4:    fload_0\n5:    laload\n6:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-19), (byte)0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)65, 1410);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)12;
      byte byte0 = (byte)20;
      byteArray0[2] = (byte)20;
      byte byte1 = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.signatureToString("DO<(~5DJ!xrUFQR");
      Utility.isJavaIdentifierPart('J');
      Utility.accessToString(45);
      Utility.compactClassName("<init>", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` arg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (-838));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3488, 392);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.getSignature("L");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.3qiE22eoE.}0VXYd");
      assertEquals("java.lang.3qiE22eoE.}0VXYd", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)33;
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)28, (int) (byte)33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(440L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("sastore", string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";.Xl9$a[36e(},$=~G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;.Xl9$a[36e(},$=~G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1200, 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = (byte) (-30);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      byte byte1 = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)53;
      int int0 = (-1473);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1473), 47, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    saload
         // 1:    saload
         // 2:    saload
         // 3:    saload
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 1504;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)86;
      byte byte0 = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)102;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)104, (int) (byte) (-37), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (-2701));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 149, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-31);
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-31), (-92));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("LS2m;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LS2m;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.getSignature("fuB4b`+%#:?\"fSK&OT");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)66;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1559), (int) (byte)31);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1559), (int) (byte)10);
      Utility.clearBit((byte)66, (byte)66);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Deprecated", "wUz~:dycQ", "Z[YDr L0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Deprecated
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3708), 1183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantDouble constantDouble0 = new ConstantDouble(1726.3218729196583);
      constantArray0[1] = (Constant) constantDouble0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*PpFUnjlA<gWI*");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      dataOutputStream0.writeInt(2025);
      constantDouble0.dump(dataOutputStream0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 311, (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3708), 1183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.getSignature("org.apache.commons.io.filefilter.OrFileFilter");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)31;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)40;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte)34;
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)40;
      byteArray1[7] = (byte)31;
      byteArray1[0] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)31, (int) (byte)90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "5Xa,x<guQ";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byte byte0 = (byte)93;
      byteArray0[1] = (byte)93;
      byte byte1 = (byte)7;
      byteArray0[2] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 37, 37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-110);
      try { 
        Utility.typeOfSignature(">ZixGUPR&Dyd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >ZixGUPR&Dyd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)57;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)92;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (-3351));
      assertEquals("0:    i2s\n1:    fstore_2\n2:    dstore\t\t%0\n4:    i2s\n5:    fstore_2\n6:    dup2\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-31);
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-31), (-92));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-651), 449);
      assertEquals("0:    caload\n1:    astore_0\n2:    <illegal opcode>\n3:    nop\n", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "? super ");
      String string1 = Utility.compactClassName("8Swa%BYlViPF", "8Swa%BYlViPF", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.typeOfSignature("DDPGA$V");
      Utility.convertString("DDPGA$V");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.convertString("");
      try { 
        Utility.typeOfSignature("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      try { 
        Utility.typeOfSignature("RXDhSgu9r$Dg[N.7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RXDhSgu9r$Dg[N.7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("dload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, 1036);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SourceFile");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("8", false);
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 228);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1137, (int) (byte) (-31));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-119);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), 1443);
      assertEquals("0:    nop\n1:    nop\n2:    l2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = (byte)75;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, 1590);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)37;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 161, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-91);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-11);
      byteArray0[6] = (byte)84;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "*Y_vWT\\P@";
      try { 
        Utility.typeOfSignature("*Y_vWTP@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y_vWTP@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)103;
      byteArray0[3] = (byte) (-68);
      byteArray0[1] = (byte)103;
      byteArray0[6] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)37;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 161, (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)119;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), 100);
      assertEquals("0:    <illegal opcode>\n1:    l2f\n2:    dload_1\n3:    dneg\n", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (byte)89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.signatureToString("SqAGp0LLZDl-k}hE");
      String string0 = Utility.accessToString(3197);
      assertEquals("public protected static final synchronized volatile abstract strictfp", string0);
      
      String string1 = Utility.fillup("public protected static final synchronized volatile abstract strictfp", 3197, false, 'r');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      try { 
        Utility.typeOfSignature(".-t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .-t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.searchOpcode("if_icmplt\t\t#29812");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmplt\t\t#29812
         // 3:    <illegal opcode>
         // 4:    <illegal opcode>
         // 5:    iload_3
         // 6:    iconst_2
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)93;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 6, 255);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "anewarray");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "anewarray");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "7oyu";
      try { 
        Utility.typeOfSignature("7oyu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7oyu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-82);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 231);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1137, (int) (byte) (-31));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-51);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-841), (int) (byte) (-51));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)125;
      int int0 = 186;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 186, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.methodSignatureReturnType("B gTx;[:xYzLh", true);
      Utility.accessToString(338);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-74);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 338, (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)103;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)103);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 255, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[2] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 1443);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(nk&VT)=T", "(nk&VT)=T", "(nk&VT)=T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nk&VT)=T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmple\t\t#251
         // 3:    sipush\t\t-10024
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 140);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("XF$_ B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XF$_ B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('2');
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "breakpoint";
      String string0 = Utility.methodTypeToSignature("breakpoint", stringArray0);
      assertEquals("(Lbreakpoint;)Lbreakpoint;", string0);
      
      String string1 = Utility.signatureToString("Jbw", false);
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-82);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-123);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte) (-11);
      byteArray1[3] = (byte) (-31);
      byteArray1[4] = (byte) (-3);
      byteArray1[5] = (byte) (-5);
      byteArray1[6] = (byte)126;
      byteArray1[7] = (byte)59;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-31), (int) (byte)59);
      assertEquals("0:    astore_0\n1:    fastore\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    iand\n7:    istore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, (int) (byte) (-18));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("E2D<J]/|~|f{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E2D<J]/|~|f{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("[", false);
      Utility.compactClassName("w'5D_[^(2w`", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byte byte0 = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (-1317));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "pQV)P_.-";
      Utility.searchOpcode("pQV)P_.-");
      try { 
        Utility.methodSignatureReturnType("pQV)P_.-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P_.-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-16);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2449), (int) (byte)9);
      assertEquals("0:    if_icmpeq\t\t#-14759\n3:    dconst_0\n4:    iconst_5\n5:    lconst_0\n6:    faload\n7:    lconst_1\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)52;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-19);
      byteArray0[0] = (byte)83;
      byteArray0[2] = (byte)24;
      byteArray0[2] = (byte) (-96);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)103;
      Constant[] constantArray0 = new Constant[15];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)103);
      ConstantInteger constantInteger1 = new ConstantInteger((byte)24);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 255, (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1137, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 144, (int) (byte)101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)85;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 52, (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-59));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1137, (int) (byte) (-24));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("[", false);
      Utility.compactClassName("w'5D_[^(2w`", false);
      Utility.clearBit(34, 34);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 32413. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-792), (int) (byte)76);
      assertEquals("0:    lshr\n1:    astore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[4] = (byte) (-102);
      byteArray0[0] = (byte)103;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-59);
      Utility.encode(byteArray0, false);
      byteArray0[6] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-80);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (-124));
      try { 
        Utility.typeOfSignature("0:    areturn\n1:    areturn\n2:    astore_3\n3:    areturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    areturn
         // 1:    areturn
         // 2:    astore_3
         // 3:    areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte) (-20);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-680), (-680));
      try { 
        Utility.typeOfSignature("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)18;
      byte[] byteArray1 = Utility.decode("if_icmpne", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)110, (byte)101}, byteArray1);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)110;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)60;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte)110;
      byteArray1[3] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 55, 55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte) (-99));
      assertEquals("0:    ifgt\t\t#-25187\n", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[2] = (byte) (-70);
      try { 
        Utility.decode("QC>9Zac%1gn?$ 8", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-32);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("4-$4Dg{~+T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4-$4Dg{~+T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-85);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 1428);
      assertEquals("0:    dcmpl\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)124, 1428);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-48), (int) (byte)126);
      assertEquals("0:    fconst_2\n1:    astore_2\n2:    fsub\n3:    lstore_2\n4:    ifnonnull\t\t#-12135\n7:    iand\n", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H-D0]g*2");
      byteArray0[4] = (byte) (-102);
      byteArray0[0] = (byte)103;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 530, (int) (byte) (-113));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = ")'Q=64OeHz";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-66), (int) (byte) (-66));
      try { 
        Utility.typeOfSignature(")'Q=64OeHz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )'Q=64OeHz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)26;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)26);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)26, (int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-52);
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)39, 1012);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[7] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)35;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-1661), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 208, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)9;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)35;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-1661), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-83);
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 149, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)34, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.convertString("H85*&*+(-gVLrWZ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 171);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 288, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@D";
      stringArray0[1] = "\nAnnotation(s):\n";
      String string0 = Utility.convertString("\nAnnotation(s):\n");
      assertEquals("\\nAnnotation(s):\\n", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)6;
      Utility.codeToString(byteArray0, constantPool0, (-3772), (-839));
      Utility.classOrInterface((byte)6);
      Utility.toHexString(byteArray0);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-1L));
      Constant[] constantArray0 = new Constant[0];
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (-208));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ARvT|R");
      byteArray0[1] = (byte) (-105);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 229, (int) (byte) (-105));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)58;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantPool0.constantToString((Constant) constantDouble0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)115, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-44);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-44), 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpl
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)19;
      byteArray0[1] = (byte)94;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)5;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)87, 211);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 165. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 22, (-1684));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 152, 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "1$#N}06|t~VHM6~";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      byte byte0 = (byte)47;
      byteArray0[6] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 504);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 838, 67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("if_icmpne", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-116);
      String string0 = Utility.signatureToString("ZRan}zALzRYNniL<'/");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("3Z5\"pId39t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Z5\"pId39t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-121);
      try { 
        Utility.typeOfSignature("2K2xc!*oiiY6R*{3N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2K2xc!*oiiY6R*{3N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)100;
      Utility.encode(byteArray0, true);
      int int0 = 5257;
      int int1 = 74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5257, 74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)95;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte) (-89));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 299, (-4121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "The array of prefixes must not be null";
      byte[] byteArray0 = Utility.decode("The array of prefixes must not be null", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      try { 
        Utility.methodSignatureReturnType("GF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-121);
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-121);
      byteArray1[2] = (byte)38;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]J@+24]");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 414, 127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "#wm>x~*fFfn5>";
      try { 
        Utility.typeOfSignature("#wm>x~*fFfn5>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #wm>x~*fFfn5>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-806), (int) (byte) (-62));
      String string0 = "\nAttribute(s):\n";
      // Undeclared exception!
      try { 
        Utility.signatureToString("\nAttribute(s):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         // Attribute(s):
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, (-1821));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpg
         // 1:    wide\t(wide)
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, 4809);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Constant[] constantArray0 = new Constant[12];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), 2721);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%36
         // 2:    aconst_null
         // 3:    <illegal opcode>
         // 4:    <illegal opcode>
         // 5:    lor
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-46);
      byteArray0[8] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Constant[] constantArray0 = new Constant[12];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)36;
      constantDouble0.toString();
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte) (-126);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), 2721);
      assertEquals("0:    ret\t\t%36\n2:    aconst_null\n3:    fload_2\n4:    <illegal opcode>\n5:    lor\n6:    <illegal opcode>\n7:    ixor\n", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{\"CONSTANT_Double[6](bytes = 0.0)\", null, null, null, null, null, null, null, null, null, null, null}", string1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lmul
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-32);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 455, (int) (byte) (-13));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
