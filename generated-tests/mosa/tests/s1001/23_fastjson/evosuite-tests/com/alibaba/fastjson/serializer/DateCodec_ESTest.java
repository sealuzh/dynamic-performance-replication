/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:38:10 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.Writer;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Float float0 = new Float((-1.0));
      Short short0 = new Short((short)1563);
      dateCodec0.write(jSONSerializer0, float0, serializeWriter0, (Type) null, (short)1563);
      assertEquals(2, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      int int0 = Calendar.TUESDAY;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, (-1721225154), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      jSONSerializer0.getPropertyFilters();
      simplePropertyPreFilter0.getClazz();
      Double double0 = new Double(3);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, double0, "yyyy-MM-dd HH:mm:ss", (Type) null, (-1721225154));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Ljava/math/BigDecimal;");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "(C)Ljava/math/BigDecimal;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(C)Ljava/math/BigDecimal;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Ljava/math/BigDecimal;");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0, (Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Short> class0 = Short.TYPE;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeConfig) null);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      dateCodec0.write(jSONSerializer0, (Object) null, mockMinguoDate1, class0, 2);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Ljava/math/igDecimal;");
      Class<Short> class0 = Short.TYPE;
      Class<Byte> class1 = Byte.TYPE;
      dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) defaultJSONParser0, (Object) "");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("UAjk*F`a=wH");
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, (-2721), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      dateCodec0.write(jSONSerializer0, 0, "UAjk*F`a=wH", class1, 0);
      assertEquals(21, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      int int0 = Calendar.TUESDAY;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      int int0 = Opcodes.IASTORE;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 79, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      MockDate mockDate0 = new MockDate();
      dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, (Type) null, 79);
      assertEquals(13, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00:00:00");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DateCodec dateCodec1 = new DateCodec();
      Double double0 = new Double(0);
      dateCodec1.cast(defaultJSONParser0, (Type) null, (Object) double0, (Object) "0000-00-00T00:00:00");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Ljava/math/BigDecimal;");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "(C)Ljava/math/BigDecimal;", (Object) "/Date(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      int int0 = Opcodes.IASTORE;
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 3128, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      MockDate mockDate0 = new MockDate(79, 3128, 79);
      dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, (Type) null, 3128);
      assertEquals(13, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = Opcodes.IASTORE;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 3128, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      MockDate mockDate0 = new MockDate(3128, 79, 3128, 3128, 79, 3128);
      dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, (Type) null, 3128);
      assertEquals(22, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      TimeZone.getDefault();
      int int0 = Opcodes.IASTORE;
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      JavaBeanInfo.getBuilderClass((JSONType) null);
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 2749, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Integer integer0 = new Integer(3600000);
      dateCodec0.write(jSONSerializer0, integer0, (Object) null, (Type) null, 19);
      assertEquals(22, serializeWriter0.size());
      
      int int1 = dateCodec0.getFastMatchToken();
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = Opcodes.IASTORE;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 3128, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      MockDate mockDate0 = new MockDate(79, 3128, 79);
      Integer integer0 = new Integer(2952);
      dateCodec0.write(jSONSerializer0, integer0, (Object) null, (Type) null, 3128);
      assertEquals(26, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = Opcodes.IASTORE;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 3128, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      MockDate mockDate0 = new MockDate(79, 79, 3128, 3128, 3128);
      dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, (Type) null, 3128);
      assertEquals(22, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("UAjk*F`a=wH");
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, (-2721), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      jSONSerializer0.setDateFormat(dateFormat0);
      serializeWriter0.writeString("5:sAV/w5%8L3VUBO=|", 'm');
      dateCodec0.write(jSONSerializer0, 0, "UAjk*F`a=wH", class1, 0);
      assertEquals(35, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.langauLocloseable", parserConfig0);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0, (Object) "java.langauLocloseable");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.langauLocloseable\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      int int0 = Opcodes.IASTORE;
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 3118, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      MockDate mockDate0 = new MockDate(79, 3118, 79);
      dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, (Type) null, 3118);
      assertEquals(13, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8Hh%~lH`$");
      DateCodec dateCodec1 = DateCodec.instance;
      // Undeclared exception!
      try { 
        dateCodec1.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) "/Date(Xastjson.parser.auyoType?ccep*)/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Xastjson.parser.auyoType?ccep*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = Opcodes.IASTORE;
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00");
      JSON.setDefaultTypeKey("/Date(");
      Class<Short> class0 = Short.TYPE;
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) serializerFeature0, (Object) "0000-00-00");
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0, (Object) null);
      int int1 = dateCodec0.getFastMatchToken();
      assertEquals(2, int1);
  }
}
