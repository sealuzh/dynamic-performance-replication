/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:43:37 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Map<String, String>, String> hashMap2 = new HashMap<Map<String, String>, String>();
      hashMap1.putAll(hashMap2);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (Map<Object, String>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Map<String, String>, Map<Integer, Object>> hashMap0 = new HashMap<Map<String, String>, Map<Integer, Object>>();
      DoubleKeyMap<Map<String, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Integer, Object>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Integer integer0 = new Integer((-1265));
      Object object0 = new Object();
      doubleKeyMap0.put((Map<String, String>) hashMap1, integer0, object0);
      Integer integer1 = new Integer((-1265));
      doubleKeyMap0.put((Map<String, String>) hashMap1, integer1, (Object) hashMap0);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer2 = new Integer((-1265));
      doubleKeyMap1.remove(integer2, integer2);
      hashMap1.put("", "LS*");
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap2.remove("9e]U8ig.nq=;7(=P4");
      doubleKeyMap2.get("");
      doubleKeyMap2.put("", (Object) hashMap1, (Object) null);
      HashMap<String, Map<Object, Map<String, String>>> hashMap4 = new HashMap<String, Map<Object, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<String, String>> doubleKeyMap3 = new DoubleKeyMap<String, Object, Map<String, String>>(hashMap4, class0);
      doubleKeyMap3.get("", (Object) "");
      HashMap<Object, Map<Object, Integer>> hashMap5 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap4 = new DoubleKeyMap<Object, Object, Integer>(hashMap5, class0);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap5 = null;
      try {
        doubleKeyMap5 = new DoubleKeyMap<Object, Object, String>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Object, String>();
      HashMap<Integer, Map<Map<String, String>, Object>> hashMap0 = new HashMap<Integer, Map<Map<String, String>, Object>>();
      DoubleKeyMap<Object, Integer, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<String, String>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap2.put(integer0, integer0, (Object) null);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      doubleKeyMap2.remove(integer2, (Integer) null);
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap3.remove("wrong proto type map ");
      doubleKeyMap3.get("");
      HashMap<String, Map<Object, Map<String, String>>> hashMap1 = new HashMap<String, Map<Object, Map<String, String>>>();
      HashMap<Object, Map<Object, Integer>> hashMap2 = new HashMap<Object, Map<Object, Integer>>();
      Map<Integer, String> map0 = doubleKeyMap3.newMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Map<String, String>, Map<Integer, Object>> hashMap0 = new HashMap<Map<String, String>, Map<Integer, Object>>();
      DoubleKeyMap<Map<String, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Integer, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Integer integer0 = new Integer((-1265));
      Object object0 = new Object();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      doubleKeyMap0.get((Map<String, String>) hashMap2);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer1 = new Integer((-1265));
      HashMap<String, Map<Object, Map<String, String>>> hashMap3 = new HashMap<String, Map<Object, Map<String, String>>>();
      HashMap<Object, Map<String, String>> hashMap4 = new HashMap<Object, Map<String, String>>(1192);
      hashMap3.put("", hashMap4);
      hashMap3.keySet();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<String, String>> doubleKeyMap2 = new DoubleKeyMap<String, Object, Map<String, String>>(hashMap3, class0);
      doubleKeyMap2.get("", (Object) "");
      HashMap<Object, Map<Object, Integer>> hashMap5 = new HashMap<Object, Map<Object, Integer>>();
      assertTrue(hashMap5.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Object, String>();
      HashMap<Integer, Map<Map<String, String>, Object>> hashMap0 = new HashMap<Integer, Map<Map<String, String>, Object>>();
      DoubleKeyMap<Object, Integer, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<String, String>>();
      doubleKeyMap1.remove((Object) hashMap0);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap2.put(integer0, integer0, (Object) null);
      Integer integer1 = new Integer((-1552));
      Integer integer2 = new Integer(0);
      doubleKeyMap2.remove(integer0, integer2);
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap3.get("");
      HashMap<String, Map<Object, Map<String, String>>> hashMap1 = new HashMap<String, Map<Object, Map<String, String>>>();
      HashMap<Object, Map<Object, Integer>> hashMap2 = new HashMap<Object, Map<Object, Integer>>();
      Map<Integer, String> map0 = doubleKeyMap3.newMap();
      assertEquals(0, map0.size());
  }
}
