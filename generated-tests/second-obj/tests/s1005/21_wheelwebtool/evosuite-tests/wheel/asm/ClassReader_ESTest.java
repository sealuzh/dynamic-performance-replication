/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:06:06 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      ClassReader classReader0 = new ClassReader(byteArray0);
      classReader0.getAccess();
      ClassWriter classWriter0 = new ClassWriter(19);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("zMYAMOZph^H,'XQZ1z");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      ClassReader classReader0 = new ClassReader(byteArray0, 4, 123);
      Label[] labelArray0 = new Label[7];
      classReader0.readLabel(4, labelArray0);
      classReader0.readLabel(4, labelArray0);
      int int0 = 184;
      ClassWriter classWriter0 = new ClassWriter(2);
      // Undeclared exception!
      try { 
        classReader0.copyPool(classWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "wheel.asm.Frame";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Frame");
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      int int0 = 1104;
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Frame");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Label label1 = edge1.successor;
      assertNull(label1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3025, classReader0.header);
      assertEquals(48, classReader0.getAccess());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3025, classReader0.header);
      assertEquals(48, classReader0.getAccess());
      assertEquals(11770, byteArrayInputStream0.available());
      
      byteArrayInputStream0.close();
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3025, classReader0.header);
      assertEquals(48, classReader0.getAccess());
      assertEquals(11770, byteArrayInputStream0.available());
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3025, classReader0.header);
      assertEquals(3025, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(48, classReader0.getAccess());
      assertEquals(48, classReader1.getAccess());
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(stringArray0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3025, classReader0.header);
      assertEquals(3025, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(48, classReader0.getAccess());
      assertEquals(48, classReader1.getAccess());
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      int int0 = 3;
      int int1 = (-705);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader1.readConst(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      Label label0 = edge1.successor;
      assertNull(label0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertNotNull(classReader0);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(49, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newField("pop", "org.apache.commons.io.IOCase", "Kb\\.1oYWRG@a");
      assertEquals(6, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.accept((ClassVisitor) classWriter0, 11);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(49, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(49, classReader0.getAccess());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2765, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 160);
      assertNotNull(pushbackInputStream0);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2765, byteArrayInputStream0.available());
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(49, classReader0.getAccess());
      assertEquals(49, classReader1.getAccess());
      
      Attribute attribute0 = new Attribute((String) null);
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      Attribute[] attributeArray0 = new Attribute[7];
      attributeArray0[0] = attribute0;
      attributeArray0[1] = attribute0;
      attributeArray0[2] = attribute0;
      attributeArray0[3] = attribute0;
      attributeArray0[4] = attribute0;
      attributeArray0[5] = attribute0;
      attributeArray0[6] = attribute0;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, (-2111));
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(49, classReader0.getAccess());
      assertNotSame(classReader0, classReader1);
      
      long long0 = classReader0.readLong(1556);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(2305843009633133056L, long0);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(49, classReader0.getAccess());
      assertNotSame(classReader0, classReader1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Frame");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      Label label1 = edge1.successor;
      assertNull(label1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3025, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(48, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3025, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3025, classReader1.header);
      assertEquals(48, classReader0.getAccess());
      assertEquals(48, classReader1.getAccess());
      
      String string0 = classReader0.getClassName();
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotNull(string0);
      assertEquals("wheel/asm/Frame", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3025, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(48, classReader0.getAccess());
      assertNotSame(classReader0, classReader1);
      
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      assertNotNull(classAdapter0);
      
      // Undeclared exception!
      try { 
        classReader1.accept((ClassVisitor) null, 1661);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      Label label0 = edge1.successor;
      assertNull(label0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertNotNull(classReader0);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(49, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 156);
      assertNotNull(classWriter0);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(49, classReader0.getAccess());
      
      Attribute[] attributeArray0 = null;
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(49, classReader0.getAccess());
      
      Label label1 = edge0.successor;
      assertNull(label1);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("(j3dRR4bMDsT");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      Label label1 = edge1.successor;
      assertNull(label1);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      assertNotNull(classReader0);
      assertEquals(3025, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(48, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(3025);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, 2);
      classReader0.readInt(1194);
      Label[] labelArray0 = new Label[9];
      labelArray0[0] = null;
      labelArray0[1] = null;
      labelArray0[2] = null;
      labelArray0[3] = null;
      labelArray0[4] = null;
      labelArray0[5] = null;
      labelArray0[6] = null;
      labelArray0[7] = null;
      labelArray0[8] = null;
      classReader0.readLabel(5, labelArray0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("wheel.asm.Frame");
      ClassReader classReader1 = new ClassReader(mockFileInputStream0);
      int int0 = 24;
      classReader0.readLong(int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      Label label1 = edge1.successor;
      assertNull(label1);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(3025, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(48, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter((-2894));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(3025, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(48, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(3025, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(48, classReader0.getAccess());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(3025, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(48, classReader0.getAccess());
      assertEquals(11770, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1657);
      assertNotNull(pushbackInputStream0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(3025, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(48, classReader0.getAccess());
      assertEquals(11770, byteArrayInputStream0.available());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(33, classReader1.getAccess());
      
      Attribute attribute0 = new Attribute("``][F0}");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      Attribute[] attributeArray0 = new Attribute[7];
      Attribute attribute1 = new Attribute("``][F0}");
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertTrue(attribute1.isUnknown());
      assertFalse(attribute1.isCodeAttribute());
      
      attributeArray0[0] = attribute1;
      attributeArray0[1] = attribute0;
      attributeArray0[2] = attribute0;
      attributeArray0[3] = attribute0;
      attributeArray0[4] = attribute0;
      attributeArray0[5] = attribute0;
      Attribute attribute2 = attribute1.next;
      assertNull(attribute2);
      
      attributeArray0[6] = null;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, (-2894));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(33, classReader1.getAccess());
      assertNotSame(classReader1, classReader0);
      
      long long0 = classReader1.readLong(597);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(72098750049185651L, long0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(33, classReader1.getAccess());
      assertNotSame(classReader1, classReader0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      Label label0 = edge1.successor;
      assertNull(label0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(49, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute[] attributeArray0 = null;
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(49, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(49, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(49, classReader0.getAccess());
      assertEquals(49, classReader1.getAccess());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[2] = '\\';
      charArray0[3] = '|';
      charArray0[4] = 'H';
      charArray0[5] = 'B';
      ClassReader classReader2 = new ClassReader("java/lang/Object");
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertNotNull(classReader2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader2.header);
      assertEquals(33, classReader2.getAccess());
      
      Attribute attribute0 = new Attribute("G^5]X/9L|Dna+ebB;w");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ClassReader classReader3 = null;
      try {
        classReader3 = new ClassReader(classReader0.b, 4, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47629
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Edge edge0 = new Edge();
          assertNotNull(edge0);
          
          Label label0 = edge0.successor;
          assertNull(label0);
          
          Edge edge1 = new Edge();
          assertFalse(edge1.equals((Object)edge0));
          assertNotNull(edge1);
          
          Label label1 = edge0.successor;
          assertNull(label1);
          
          int int0 = (-2894);
          ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
          assertNotNull(classReader0);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(3025, classReader0.header);
          assertEquals(48, classReader0.getAccess());
          
          ClassWriter classWriter0 = new ClassWriter(0);
          assertNotNull(classWriter0);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          
          classReader0.accept((ClassVisitor) classWriter0, 238);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(3025, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(48, classReader0.getAccess());
          
          int int1 = classWriter0.newMethod("wheel.asm.Frame", "wheel.asm.Frame", "LocalVariableTypeTable", true);
          assertFalse(int1 == int0);
          assertEquals(249, int1);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          
          String string0 = classReader0.getSuperName();
          assertNotNull(string0);
          assertEquals("java/lang/Object", string0);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(3025, classReader0.header);
          assertEquals(48, classReader0.getAccess());
          
          AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Signature", false);
          assertNotNull(annotationVisitor0);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
          assertNotNull(byteArrayInputStream0);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(3025, classReader0.header);
          assertEquals(48, classReader0.getAccess());
          assertEquals(11770, byteArrayInputStream0.available());
          
          PushbackInputStream pushbackInputStream0 = null;
          try {
            pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // size <= 0
             //
             verifyException("java.io.PushbackInputStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pZlhE [xu*z|`<nO");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      Label label1 = edge0.successor;
      assertNull(label1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(4463, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.readLabel(160, (Label[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Edge edge0 = new Edge();
          assertNotNull(edge0);
          
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          String string0 = "org.apache.commons.io.IOCase";
          ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
          assertNotNull(classReader0);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1531, classReader0.header);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(49, classReader0.getAccess());
          
          Label label0 = edge0.successor;
          assertNull(label0);
          
          ClassWriter classWriter0 = new ClassWriter(8);
          assertNotNull(classWriter0);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          
          ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
          assertNotNull(classAdapter0);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          
          classReader0.accept((ClassVisitor) classWriter0, 4);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1531, classReader0.header);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(49, classReader0.getAccess());
          
          String string1 = classReader0.getSuperName();
          assertFalse(string1.equals((Object)string0));
          assertNotNull(string1);
          assertEquals("java/lang/Object", string1);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1531, classReader0.header);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(49, classReader0.getAccess());
          
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
          assertNotNull(byteArrayInputStream0);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1531, classReader0.header);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(49, classReader0.getAccess());
          assertEquals(2765, byteArrayInputStream0.available());
          
          int int0 = (-93);
          PushbackInputStream pushbackInputStream0 = null;
          try {
            pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (-93));
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // size <= 0
             //
             verifyException("java.io.PushbackInputStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      Label label1 = edge1.successor;
      assertNull(label1);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      assertNotNull(classReader0);
      assertEquals(3025, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(48, classReader0.getAccess());
      
      int int0 = 208;
      ClassWriter classWriter0 = new ClassWriter((-306));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.accept((ClassVisitor) classAdapter0, 2220);
      int int1 = Frame.DOUBLE;
      classReader0.getSuperName();
      classWriter0.visitAnnotation("Signature", true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 157);
      ClassReader classReader1 = new ClassReader(classReader0.b, 1, 8);
      classReader1.readInt(classReader0.SKIP_DEBUG);
      classReader0.readLong(classWriter0.COMPUTE_MAXS);
      classReader0.readByte(int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Edge edge0 = new Edge();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Label label0 = edge0.successor;
      Edge edge1 = new Edge();
      Label label1 = edge1.successor;
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getSuperName();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1657);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("");
      attributeArray0[0] = attribute0;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 8);
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      // Undeclared exception!
      try { 
        classReader0.readConst(930, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 930
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Edge edge0 = new Edge();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Label label0 = edge0.successor;
      Edge edge1 = new Edge();
      Label label1 = edge1.successor;
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getSuperName();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1657);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("");
      attributeArray0[0] = attribute0;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 8);
      char[] charArray0 = new char[2];
      charArray0[1] = 'x';
      classReader0.readConst(930, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Edge edge0 = new Edge();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Label label0 = edge0.successor;
      Edge edge1 = new Edge();
      Label label1 = edge1.successor;
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-2894));
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getSuperName();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1657);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      Attribute[] attributeArray0 = new Attribute[16];
      Attribute attribute0 = new Attribute("HsyyK_F0X1g3!t");
      attributeArray0[0] = attribute0;
      Attribute attribute1 = new Attribute("M#;bNFTI5h>dL9qO^M");
      attributeArray0[1] = attribute1;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 4);
      classReader1.getSuperName();
      ClassReader classReader2 = new ClassReader(byteArrayInputStream0);
      classReader2.readLong(4);
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        classReader0.getItem(3976);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3976
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Edge edge0 = new Edge();
      Edge edge1 = new Edge();
      Label label0 = edge1.successor;
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 156);
      classReader0.getInterfaces();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 1, 8);
      byteArrayInputStream0.read(classReader0.b);
      classReader0.readInt(1009);
      classReader0.getClassName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(classReader0.b);
      byteArrayInputStream1.skip(0L);
      byteArrayInputStream1.close();
      byteArrayInputStream1.markSupported();
      classReader0.readByte(156);
      // Undeclared exception!
      try { 
        classReader0.readByte((-1099));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1099
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Edge edge0 = new Edge();
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          Label label0 = edge0.successor;
          String string0 = "wheel.asm.Frame";
          Edge edge1 = new Edge();
          Label label1 = edge1.successor;
          ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
          ClassWriter classWriter0 = new ClassWriter(8);
          classReader0.accept((ClassVisitor) classWriter0, 1);
          classReader0.getSuperName();
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
          int int0 = 1657;
          PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1657);
          ClassReader classReader1 = new ClassReader("java/lang/Object");
          Attribute[] attributeArray0 = new Attribute[1];
          classReader1.accept((ClassVisitor) classWriter0, 1);
          classReader1.getSuperName();
          ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(classReader1.b);
          PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 1);
          ClassReader classReader2 = null;
          try {
            classReader2 = new ClassReader("");
            fail("Expecting exception: IOException");
          
          } catch(Throwable e) {
             //
             // Class not found
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Edge edge0 = new Edge();
      Label label0 = new Label();
      Edge edge1 = new Edge();
      Label label1 = edge1.successor;
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter((-2894));
      classReader0.accept((ClassVisitor) classWriter0, 1);
      String string0 = File.pathSeparator;
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'W';
      charArray0[2] = '3';
      // Undeclared exception!
      try { 
        classReader0.readConst(54, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
