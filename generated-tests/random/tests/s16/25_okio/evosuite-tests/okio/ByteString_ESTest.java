/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:47:50 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=190000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ELwt,)X$'(Gc", charset0);
      byte[] byteArray0 = new byte[5];
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)90;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)90, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      byte[] byteArray1 = byteString0.toByteArray();
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = byteString0.toByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("t~Lc,<L@[jJHJ");
      int int0 = byteString0.size();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("m^EXs_Tx9<JHU88?H8L");
      byte[] byteArray1 = byteString0.internalArray();
      int int0 = byteString1.lastIndexOf(byteArray1);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pipe pipe0 = new Pipe(1666L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      ByteString byteString1 = ByteString.encodeUtf8("h");
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1888);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.EMPTY.hex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.base64Url();
      assertEquals("AAAAAAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      String string0 = byteString0.base64();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      boolean boolean0 = byteString0.startsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1888);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString0.EMPTY.rangeEquals(16, byteString0, 9, (-860));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-4029), 263);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=-4029 byteCount=263
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 102, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=102 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      byte[] byteArray1 = byteString0.internalArray();
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("jYjE3zi");
      int int0 = byteString0.lastIndexOf(byteString0, 477);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("t");
      byte[] byteArray0 = new byte[4];
      ByteString byteString1 = ByteString.of(byteArray0);
      int int0 = byteString0.EMPTY.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("t~Lc,<L@[jJHJ");
      int int0 = byteString0.indexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        byteString0.getByte((-80));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -80
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null, (int) (byte)65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)98);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (-507));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = byteString0.EMPTY.rangeEquals(4837, byteArray0, (-1), 100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = byteString0.rangeEquals((-93), byteArray0, (-32), (-2233));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(2103, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("jYjE3zi");
      String string0 = byteString0.hex();
      assertEquals("8d88c4df38", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.EMPTY.utf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        byteString0.getByte(3869);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3869
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = byteString0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("okio.HashingSource", 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=1]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3265);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("t~Lc,<L@[jJHJ");
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hashCode();
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.hmacSha256(byteString0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.sha512();
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.decodeBase64("");
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.equals(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)90;
      ByteString byteString0 = ByteString.of(byteArray0);
      byte[] byteArray1 = new byte[2];
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString1.indexOf(byteString0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      boolean boolean0 = byteString0.EMPTY.rangeEquals((-175), byteString0, (-175), (-175));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)5);
      assertEquals(2, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(547);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1888);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.toString();
      assertEquals("[size=1888 hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\u2026]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1888);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(" content=");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)65);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      try { 
        ByteString.read(dataInputStream0, (byte)54);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 60, (-4202));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 335);
      ByteString byteString0 = ByteString.read(bufferedInputStream0, (byte)0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(89);
      try { 
        ByteString.read(pipedInputStream0, 89);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 1399);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -972
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("eD})rhQ2XN#X)|Qy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: }
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("5^<:'t3%mz@-u]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ^
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("%k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: %
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.substring(72, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = byteString0.sha1();
      MockFile mockFile0 = new MockFile("6|", "6|");
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      ByteString byteString3 = byteString2.sha512();
      Charset charset0 = Charset.defaultCharset();
      byteString1.EMPTY.utf8();
      ByteString byteString4 = ByteString.encodeString("6|", charset0);
      MockFile mockFile1 = new MockFile(mockFile0, "6|");
      String string0 = byteString1.toString();
      assertEquals("[hex=5ba93c9db0cff93f52b521d7420e43f6eda2784f]", string0);
      
      mockFile0.getAbsolutePath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      byteString0.write(mockFileOutputStream0);
      byteString0.rangeEquals((-2233), byteString1, 102, 46);
      ByteString byteString5 = byteString3.sha512();
      ByteString byteString6 = byteString3.hmacSha256(byteString4);
      int int0 = byteString6.compareTo(byteString4);
      assertEquals(1, int0);
      
      byteString2.endsWith(byteString5);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)10;
      boolean boolean0 = byteString3.rangeEquals((-93), byteArray0, (-32), (-2233));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("Cr2", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 1787, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("t~Lc,<L@[jJHJ");
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      int int0 = byteString0.indexOf(byteString0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ELwt,)X$'(Gc", charset0);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertEquals(12L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        byteString0.substring((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("t~Lc,<L@[jJHJ");
      ByteString byteString1 = byteString0.sha256();
      assertEquals(32, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("t~Lc,<L@[jJHJ");
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      String string0 = byteString0.base64Url();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("t~Lc,<L@[jJHJ");
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.indexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("jYjE3zi");
      boolean boolean0 = byteString0.startsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.EMPTY.sha1();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("jYjE3zi");
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha512();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.base64();
      assertEquals("AAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ELwt,)X$'(Gc", charset0);
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString0, (-55297));
      assertEquals((-1), int0);
  }
}
