/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:47:06 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.io.PipedReader;
import java.io.StreamTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTaskAtom;
import umd.cs.shop.JSTasks;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      byteArrayInputStream0.skip((-193L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(inputStreamReader0);
      JSState jSState0 = null;
      try {
        jSState0 = new JSState(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSListLogicalAtoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = new JSState();
      jSState0.print();
      jSState0.clear();
      jSState0.listIterator();
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState0.standarizerListLogicalAtoms();
      jSListLogicalAtoms0.add((Object) jSState0);
      Object object0 = new Object();
      jSListLogicalAtoms0.add(object0);
      jSListLogicalAtoms0.add((Object) jSState0);
      jSState0.addElementsToState(jSListLogicalAtoms0);
      jSState0.addElementsToState(jSListLogicalAtoms0);
      assertFalse(jSState0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      jSPlan0.add((Object) jSState0);
      jSState0.addElementsToState(jSPlan0);
      assertEquals("[[(this Collection)]]", jSPlan0.toString());
      assertFalse(jSState0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSState jSState1 = jSState0.apply((JSPlan) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSSubstitution jSSubstitution1 = jSState1.satisfies(jSState0, jSSubstitution0, jSListAxioms0);
      JSListSubstitution jSListSubstitution0 = jSState1.satisfiesAll(jSState0, jSSubstitution1, jSListAxioms0);
      assertEquals("[[]]", jSListSubstitution0.toString());
      assertEquals(0, jSSubstitution1.capacity());
      assertNotSame(jSState1, jSState0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      System.setCurrentTimeMillis((-1L));
      JSPlan jSPlan0 = new JSPlan();
      JSTasks jSTasks0 = jSPlan0.standarizerTasks();
      jSState0.addElementsToState(jSTasks0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      jSState0.satisfiesTAm(jSTerm0, (JSSubstitution) null);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        jSPlanningDomain0.parserOpsMethsAxs(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
