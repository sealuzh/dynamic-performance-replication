/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 05:40:03 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileMode;
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.TextArea;
import java.awt.color.ColorSpace;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Point2D;
import java.awt.image.ComponentColorModel;
import java.awt.image.ImageProducer;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.time.Instant;
import java.time.format.ResolverStyle;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Delayed;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import javax.help.HelpSet;
import javax.help.JHelp;
import javax.help.JHelpFavoritesNavigator;
import javax.help.TextHelpModel;
import javax.help.plaf.basic.BasicFavoritesNavigatorUI;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.border.MatteBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.multi.MultiScrollPaneUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StringContent;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.bridge.SVGPathElementBridge;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.gvt.TextNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemExtensionCall;
import org.apache.xalan.templates.ElemMessage;
import org.apache.xalan.templates.ElemVariable;
import org.apache.xerces.parsers.XML11NonValidatingConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xml.serializer.ToHTMLSAXHandler;
import org.apache.xml.serializer.ToHTMLStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(3639);
      Boolean boolean0 = new Boolean(true);
      jDayChooser0.setDay(3639);
      jDayChooser0.getInputMap();
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3639, 2539L, (-1555), 8198, 'f');
      jDayChooser0.setFocus();
      int int0 = SwingConstants.BOTTOM;
      InputEvent.getModifiersExText(3639);
      keyEvent0.consume();
      keyEvent0.setKeyChar('H');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.getName();
      jDayChooser1.keyTyped(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      JDayChooser jDayChooser3 = new JDayChooser();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale1);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CHINESE;
      locale0.getUnicodeLocaleAttributes();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.keyTyped((KeyEvent) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale1 = Locale.CANADA;
      Locale locale2 = Locale.PRC;
      Locale locale3 = Locale.JAPAN;
      locale3.getScript();
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration();
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM;
      JDayChooser jDayChooser0 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SystemColor systemColor0 = SystemColor.controlText;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (int)gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON;
      floatArray0[1] = (float) (int)gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB;
      floatArray0[2] = (float) (int)gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL;
      floatArray0[3] = (float) (int)gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE;
      floatArray0[4] = (float) (int)gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON;
      floatArray0[5] = (float) (int)gVTAttributedCharacterIterator_TextAttribute0.SMALL_CAPS;
      floatArray0[6] = (float) (int)gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO;
      floatArray0[7] = (float) (int)gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL;
      systemColor0.getComponents(floatArray0);
      jDayChooser0.setForeground(systemColor0);
      SystemColor systemColor1 = SystemColor.infoText;
      jDayChooser0.getMinSelectableDate();
      KeyEvent.getKeyModifiersText(34);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.getSelectedDay();
      assertEquals(14, jDayChooser2.getDay());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM;
      JDayChooser jDayChooser0 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster0, (ContainerListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster0, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener(aWTEventMulticaster0);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_RTL;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      Locale locale0 = Locale.ITALY;
      JDayChooser jDayChooser1 = new JDayChooser();
      int int0 = (-807);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-807), (-1337L), (-193), (-3274), '[', (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser1.keyTyped(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      JDayChooser jDayChooser2 = new JDayChooser();
      Locale locale1 = Locale.FRANCE;
      jDayChooser0.setLocale(locale1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(626);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDay((-4145));
      jDayChooser0.getInputMap();
      jDayChooser0.setFocus();
      jDayChooser0.weekOfYearVisible = true;
      jDayChooser0.setAlwaysFireDayProperty(false);
      JHelp jHelp0 = new JHelp((TextHelpModel) null);
      BasicHelpUI basicHelpUI0 = new BasicHelpUI(jHelp0);
      Dimension dimension0 = basicHelpUI0.getMinimumSize(jDayChooser0);
      jDayChooser0.setPreferredSize(dimension0);
      KeyEvent keyEvent0 = new KeyEvent(jHelp0, (-4145), 0L, (-4145), (-1811), 'z');
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration();
      Locale locale0 = xML11NonValidatingConfiguration0.getLocale();
      locale0.getUnicodeLocaleKeys();
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale1 = Locale.CANADA;
      jDayChooser1.setLocale(locale0);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(3639);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDay(3639);
      jDayChooser0.getInputMap();
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(false);
      JHelp jHelp0 = new JHelp((TextHelpModel) null);
      BasicHelpUI basicHelpUI0 = new BasicHelpUI(jHelp0);
      Dimension dimension0 = basicHelpUI0.getMinimumSize(jHelp0);
      jDayChooser0.setPreferredSize(dimension0);
      KeyEvent keyEvent0 = new KeyEvent(jHelp0, (-1811), 1L, 10151, 10168, 'z');
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = xML11NonValidatingConfiguration0.getLocale();
      locale0.getUnicodeLocaleKeys();
      locale0.getScript();
      JComponent.setDefaultLocale(locale0);
      keyEvent0.setKeyCode(932);
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        ResolverStyle.valueOf("q&zD1cwm1G^MW`xf|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.time.format.ResolverStyle.q&zD1cwm1G^MW`xf|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(613);
      jDayChooser0.setDay(613);
      SystemColor systemColor0 = SystemColor.infoText;
      Color.RGBtoHSB(613, 36, 613, (float[]) null);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setMonth((-544));
      jDayChooser0.getDay();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      Random.setNextRandom((-544));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-1204), 30, 36, 36, '[');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 6, 613, 13, 31, '7');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(1450);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(1, jDayChooser0.getDay());
      
      Random.setNextRandom(4677);
      jDayChooser2.setMaxDayCharacters(31);
      assertFalse(jDayChooser2.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(613);
      jDayChooser0.setDay(613);
      SystemColor systemColor0 = SystemColor.infoText;
      Color.RGBtoHSB(613, 36, 613, (float[]) null);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setMonth((-544));
      jDayChooser0.getDay();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      Random.setNextRandom((-544));
      jDayChooser0.setMinSelectableDate(date0);
      StringContent stringContent0 = new StringContent(3115);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 5, "o1zT_S2=snB", (-1204), 8773);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser2.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.isOpaque();
      JMonthChooser jMonthChooser1 = jDayChooser0.monthChooser;
      jDayChooser1.setMonthChooser(jMonthChooser0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-754), (-228L), 2318, 935, '(');
      keyEvent0.setKeyCode(46);
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser1.getDay());
      
      JDayChooser jDayChooser2 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton2 = jDayChooser2.new DecoratorButton();
      JYearChooser jYearChooser0 = jDayChooser2.yearChooser;
      Color color0 = Color.black;
      FileMode fileMode0 = new FileMode();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      GraphicContext graphicContext0 = new GraphicContext();
      Color color1 = Color.blue;
      jDayChooser0.setSundayForeground(color1);
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SystemColor systemColor0 = SystemColor.scrollbar;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4");
      jDayChooser0.setDay((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      jDayChooser0.getInputMap();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_TERMINAL, (long) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, 555, '`');
      keyEvent0.setKeyCode(8831);
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser1.getSelectedDay();
      jDayChooser0.setMaxDayCharacters((-1587));
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getBackground();
      jDayChooser0.setSundayForeground(color0);
      assertEquals(4, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1400), (-1400), 2397, 39, '?');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemMessage elemMessage0 = new ElemMessage();
      SVGGeneratorContext.createDefault(elemMessage0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.setForeground(systemColor0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, (-859), 45);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      BorderLayout borderLayout0 = new BorderLayout();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)TextNode.PAINT_INFO;
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 962, (-17L), 37, 1043, '5');
      KeyEvent keyEvent2 = new KeyEvent(jDayChooser0, 39, 600000L, 962, 40, '1');
      jDayChooser1.keyPressed(keyEvent2);
      assertEquals(21, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instant instant0 = MockInstant.ofEpochMilli((-2147483648L));
      MockInstant.plusMillis(instant0, 2278L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 29, 29, 29, 29, 'X');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemMessage elemMessage0 = new ElemMessage();
      jDayChooser0.keyPressed(keyEvent0);
      SVGGeneratorContext.createDefault(elemMessage0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1171), (-1171), (-1171), 33, '`');
      keyEvent0.setKeyCode(34);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 2397;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1400), (-1400), 2397, 39, '?');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemMessage elemMessage0 = new ElemMessage();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemMessage0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.update(debugGraphics0);
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 2, 2, 2, 208, 'd', 2);
      keyEvent0.setKeyChar('j');
      jDayChooser0.keyPressed(keyEvent0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMaxDayCharacters((-1508));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SystemColor systemColor0 = SystemColor.controlText;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4");
      jDayChooser0.setDay((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      jDayChooser0.getInputMap();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setFocus();
      BrowseMode browseMode0 = new BrowseMode();
      jDayChooser0.setForeground(systemColor0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE, 16, 962);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDecorationBackgroundVisible();
      BorderLayout borderLayout0 = new BorderLayout();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = (GVTAttributedCharacterIterator.TextAttribute)TextNode.PAINT_INFO;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING, (-1252L), 16, 210, '1');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(4, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM;
      JDayChooser jDayChooser0 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SystemColor systemColor0 = SystemColor.controlText;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.toLanguageTag();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setLocale(locale0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Y#Z";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(626);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDay((-4145));
      jDayChooser0.getInputMap();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setFocus();
      Color color0 = Color.gray;
      jDayChooser0.setAlwaysFireDayProperty(true);
      JHelp jHelp0 = new JHelp((TextHelpModel) null);
      BasicHelpUI basicHelpUI0 = new BasicHelpUI(jHelp0);
      Dimension dimension0 = basicHelpUI0.getMinimumSize(jDayChooser0);
      jDayChooser0.setPreferredSize(dimension0);
      KeyEvent keyEvent0 = new KeyEvent(jHelp0, 932, 0L, 0, (-1811), 'z');
      keyEvent0.setKeyCode(37);
      jDayChooser0.keyPressed(keyEvent0);
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.removeAll();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent((Component) null, 932, 0L, (-4145), 238, 'z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDecorationBackgroundColor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 1493, 1493, 'A');
      jDayChooser0.getFocusTraversalPolicy();
      InputEvent.getModifiersExText(28);
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      KeyEvent.getExtendedKeyCodeForChar(2524);
      KeyEvent.getKeyText(406);
      jDayChooser0.createImage(406, 1493);
      keyEvent0.consume();
      jDayChooser0.keyReleased(keyEvent0);
      boolean boolean0 = true;
      jDayChooser0.setEnabled(true);
      jDayChooser0.getSundayForeground();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getTopLevelAncestor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1942));
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDay();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.getDay();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setFocus();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "SHv<lbmoVj\\j");
      actionEvent0.setSource(jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.dispatchEvent(actionEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters((-3));
      SystemColor systemColor0 = SystemColor.controlText;
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      jdbcClob jdbcClob0 = new jdbcClob("day");
      jDayChooser0.isDecorationBackgroundVisible();
      BrowseMode browseMode0 = new BrowseMode();
      jDayChooser1.setForeground(systemColor0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(160, 21, 2301);
      JComponent.getDefaultLocale();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      jDayChooser1.isDecorationBackgroundVisible();
      BorderLayout borderLayout0 = new BorderLayout();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)TextNode.PAINT_INFO;
      MultiScrollPaneUI multiScrollPaneUI1 = new MultiScrollPaneUI();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (-881L), (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, 'g', (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_LTR);
      jDayChooser2.keyReleased(keyEvent0);
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 2301, "Hv}t0LuE\"&-q");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HelpSet helpSet0 = new HelpSet();
      JHelp jHelp0 = new JHelp(helpSet0);
      BasicHelpUI basicHelpUI0 = new BasicHelpUI(jHelp0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, true, true, true);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      Dimension dimension0 = basicHelpUI0.getMinimumSize(jInternalFrame_JDesktopIcon0);
      jDayChooser0.setPreferredSize(dimension0);
      KeyEvent keyEvent0 = new KeyEvent(jHelp0, 2301, 883L, (-461), 2301, ')');
      keyEvent0.setKeyCode((-4145));
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.keyReleased(keyEvent0);
      jDayChooser1.setEnabled(true);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser2.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "SHv<lbmoVj\\j");
      jDayChooser_DecoratorButton0.dispatchEvent(actionEvent0);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setFocus();
      Color color0 = Color.gray;
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser_DecoratorButton0.isPaintingForPrint();
      jDayChooser0.getComponentListeners();
      jDayChooser0.getDay();
      SystemColor systemColor0 = SystemColor.menu;
      jDayChooser0.setEnabled(false);
      jDayChooser0.drawDays();
      MockCalendar.getInstance();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SHv<lbmoVj\\j";
      stringArray0[1] = "SHv<lbmoVj\\j";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "SHv<lbmoVj\\j";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 12313, 2301, 14, 2301, '2');
      keyEvent0.setKeyCode(14);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-647), (-1437625602), (-2471), (-2471), ',');
      keyEvent0.setKeyCode(0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.keyReleased(keyEvent0);
      jDayChooser2.setEnabled(false);
      assertEquals(14, jDayChooser2.getDay());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = SwingConstants.EAST;
      Color color0 = Color.black;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3, false);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.dispatchEvent(focusEvent0);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.paintImmediately(1, 0, 3, 593);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlwaysFireDayProperty(false);
      jDayChooser1.getComponentListeners();
      jDayChooser0.getDay();
      SystemColor systemColor0 = SystemColor.menu;
      JTextArea jTextArea0 = new JTextArea(10061, 7);
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null, jDayChooser1);
      jDayChooser0.getLocale();
      jDayChooser0.setForeground(color0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "day");
      jDayChooser_DecoratorButton0.dispatchEvent(actionEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(1);
      jDayChooser1.setAlwaysFireDayProperty(false);
      jDayChooser0.getComponentListeners();
      jDayChooser1.getDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2301, 4911L, 2301, 14, '\"');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setMonth(362);
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getColor();
      jDayChooser1.setDecorationBackgroundColor(color0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WULNl6^p?U'");
      jDayChooser1.drawWeeks();
      Color color1 = jDayChooser0.getSundayForeground();
      jDayChooser1.drawWeeks();
      jDayChooser1.getMaxDayCharacters();
      assertEquals(1, jDayChooser1.getMaxDayCharacters());
      
      jDayChooser0.setSundayForeground(color1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 2301, "Hv}t0LuE\"&-q");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2301, (-42L), 25, 21, 'V');
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser2.getDay());
      
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.getX();
      KeyEvent.getExtendedKeyCodeForChar(2301);
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      JButton jButton0 = jDayChooser3.getSelectedDay();
      assertNull(jButton0);
      
      jdbcClob jdbcClob0 = new jdbcClob("Hv}t0LuE\"&-q");
      JDayChooser jDayChooser4 = new JDayChooser();
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockInstant.now();
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setYearChooser((JYearChooser) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1798, true, (Component) null);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1171), (-1171), (-1171), 33, '`');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 164, 164, 0, 400, '+');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      jdbcClob jdbcClob0 = null;
      try {
        jdbcClob0 = new jdbcClob((String) null);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // java.lang.String@0000000058
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1437625602), (-1437625602), (-1437625602), (-746), '+');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1437625602), (-1437625602), (-1437625602), (-746), '+');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      jdbcClob jdbcClob0 = null;
      try {
        jdbcClob0 = new jdbcClob((String) null);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // java.lang.String@0000000058
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-884), "1");
      Cursor cursor0 = JSVGViewerFrame.DEFAULT_CURSOR;
      jDayChooser0.setCursor(cursor0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(4);
      ElemVariable elemVariable0 = new ElemVariable();
      ElemVariable elemVariable1 = new ElemVariable(elemVariable0);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      jdbcClob jdbcClob0 = new jdbcClob("day");
      // Undeclared exception!
      try { 
        jdbcClob0.setCharacterStream(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1171), 0L, 4053, (-1171), 'L');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      jdbcClob jdbcClob0 = new jdbcClob("day");
      assertEquals(3L, jdbcClob0.length());
      
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1263, (-65), (-1171), 4053, 'L', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      jdbcClob jdbcClob0 = new jdbcClob("6");
      SymbolTable symbolTable0 = new SymbolTable(4053, 4053);
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1056), (-531.8585F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1056
         //
         verifyException("org.apache.xerces.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1171), 5000L, 4053, 2282, 'D');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      jdbcClob jdbcClob0 = new jdbcClob("a1N]");
      assertEquals(4L, jdbcClob0.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instant instant0 = MockInstant.ofEpochMilli((-2147483648L));
      MockInstant.plusMillis(instant0, 2278L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getX();
      Stack<Delayed> stack0 = new Stack<Delayed>();
      JTable jTable0 = new JTable(stack0, stack0);
      KeyEvent keyEvent0 = new KeyEvent(jTable0, 5057, 2278L, (-2415), (-2415), '', 0);
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 100);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      defaultTableModel0.addColumn((Object) defaultTableColumnModel0, (Object[]) null);
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      JTable jTable1 = new JTable(defaultTableModel0);
      JTableHeader jTableHeader0 = jTable1.getTableHeader();
      KeyEvent keyEvent0 = new KeyEvent(jTableHeader0, 24, 0L, 71, (-2128), ':');
      keyEvent0.getExtendedKeyCode();
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 3716, 24, 3716, 0, 'b');
      jDayChooser0.keyTyped(keyEvent1);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = SwingConstants.EAST;
      Color color0 = Color.black;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3, false);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.createImage((ImageProducer) null);
      color0.getColorSpace();
      jDayChooser0.getInputMap();
      jDayChooser0.setDecorationBackgroundVisible(false);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 3;
      jDayChooser0.getInputMap();
      color0.getColorComponents(floatArray0);
      jDayChooser0.getDaysInMonth();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setEnabled(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JYearChooser jYearChooser1 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      MockDate mockDate0 = new MockDate();
      mockDate0.clone();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setMonth(28);
      jDayChooser0.setForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "SHv<lbmoVj\\j");
      jDayChooser_DecoratorButton0.dispatchEvent(actionEvent0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getInputMap();
      SystemColor systemColor0 = SystemColor.info;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2301;
      floatArray0[1] = (float) 2301;
      floatArray0[2] = (float) 2301;
      floatArray0[3] = (float) 2301;
      systemColor0.getColorComponents(floatArray0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.addListeners(39);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      jDayChooser0.setForeground(systemColor0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(28, 8192, 39);
      jDayChooser0.getSundayForeground();
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      SystemColor systemColor0 = SystemColor.menu;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDecorationBackgroundColor(systemColor0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)10;
      jDayChooser0.setForeground(systemColor0);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte)12, (byte)8, 100, 1150, 'M');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      Color color0 = jDayChooser0.getWeekdayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.createImage((ImageProducer) null);
      color0.getColorSpace();
      jDayChooser0.getInputMap();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      jDayChooser0.getInputMap();
      color0.getColorComponents(floatArray0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.addListeners(28);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      jDayChooser0.setForeground(color0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      jDayChooser0.getSundayForeground();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.JAPANESE;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-1647), false);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.createImage((ImageProducer) null);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      color0.getColorSpace();
      jDayChooser0.getInputMap();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getInputMap();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1647);
      floatArray0[1] = (float) (-1647);
      floatArray0[2] = (float) (-1647);
      color0.getColorComponents(floatArray0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.addListeners(28);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      jDayChooser1.setForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.drawDays();
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 42, 'b');
      keyEvent0.setKeyChar('@');
      jDayChooser0.keyReleased(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(584);
      jDayChooser0.setDay(30);
      // Undeclared exception!
      try { 
        jDayChooser0.getInputMap(30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(626);
      Locale locale0 = new Locale("day", "day", "day");
      jDayChooser0.setLocale(locale0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setYear((-679));
      JDayChooser jDayChooser3 = new JDayChooser();
      Vector<MockCalendar> vector0 = new Vector<MockCalendar>();
      jDayChooser0.setWeekOfYearVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4158), (-4158), 626);
      JDayChooser jDayChooser4 = new JDayChooser();
      System.setCurrentTimeMillis(0L);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser2, (-440), false, jDayChooser1);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser1.focusGained((FocusEvent) null);
      jDayChooser1.getMaxSelectableDate();
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "SHv<lbmoVj\\j");
      jDayChooser_DecoratorButton0.dispatchEvent(actionEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(1);
      jDayChooser1.setAlwaysFireDayProperty(false);
      jDayChooser0.getComponentListeners();
      jDayChooser1.getDay();
      SystemColor systemColor0 = SystemColor.menu;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser1.setEnabled(true);
      assertEquals(1, jDayChooser1.getMaxDayCharacters());
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(23);
      JDayChooser jDayChooser1 = new JDayChooser();
      Vector<MockCalendar> vector0 = new Vector<MockCalendar>();
      jDayChooser1.isWeekOfYearVisible();
      jDayChooser1.setFocus();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(23, (Color) null, (Color) null, (Color) null, (Color) null);
      Insets insets0 = new Insets(160, 2641, 2470, 1032);
      Insets insets1 = softBevelBorder0.getBorderInsets((Component) jDayChooser0, insets0);
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      synthTreeUI0.getCollapsedIcon();
      MatteBorder matteBorder0 = new MatteBorder(insets1, (Icon) null);
      jDayChooser1.setBorder(matteBorder0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser1.setFocus();
      jDayChooser1.setWeekdayForeground((Color) null);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.getDecorationBackgroundColor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2473, true, jDayChooser0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.list();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jMonthChooser0.getComponents();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getInputMap();
      jDayChooser0.setMinSelectableDate((Date) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[16];
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setYear((-3104));
      JDayChooser jDayChooser2 = new JDayChooser();
      Vector<MockCalendar> vector0 = new Vector<MockCalendar>();
      Stack<String> stack0 = new Stack<String>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, stack0);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, (-3104), "Windows", 378);
      // Undeclared exception!
      try { 
        jDayChooser2.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "KBXx:ccE1fEs^R");
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(819);
      jDayChooser0.setDay(0);
      jDayChooser0.getInputMap();
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      jDayChooser0.getFocusTraversalPolicy();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getComponentListeners();
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setEnabled(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "25");
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d|IJ^:i}?KwgP2 nl");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getComponentListeners();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setEnabled(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser0.getLocale();
      Result.newReleaseSavepointRequest("day");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      System.setCurrentTimeMillis((-1L));
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "SHv<lbmoVj\\j");
      jDayChooser_DecoratorButton0.dispatchEvent(actionEvent0);
      Boolean boolean0 = new Boolean("accessories.plugins.time.JDayChooser$DecoratorButton");
      jDayChooser0.transferFocusUpCycle();
      JDayChooser jDayChooser1 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1111, 2301, 2301, 1111, 560);
      jDayChooser1.setCalendar(mockGregorianCalendar0);
      jDayChooser1.getMaxSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 302, 258L, (-1284), (-198), ']');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser1.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.focusGained((FocusEvent) null);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "main/actions/exportPng";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-161), (-161), 123, 39, 43, (-161), 39, (-161), false, 123, 39, (-1335), 43);
      jDayChooser0.getToolTipLocation(mouseWheelEvent0);
      jMonthChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(42, (-366), (-366));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=42,MONTH=-366,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setDay((-535));
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1327), "r*vzGN");
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 12, (-1327), 39, (-535), '/', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setFont((Font) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isFocusable();
      MockDate mockDate0 = new MockDate(1, 1, 1976);
      jDayChooser1.setSelectableDateRange(mockDate0, mockDate0);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, (-710), "KBXx:ccE1fEs^R", 4294967295L, 0);
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      actionEvent0.setSource("KBXx:ccE1fEs^R");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "KBXx:ccE1fEs^R");
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 10017, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setYear(0);
      Color.getColor("(?ims).*<head>.*");
      jDayChooser0.setForeground((Color) null);
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea("day", 826, 0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "feDisplacementMap";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 0;
      jDayChooser0.drawWeeks();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.isFocusOwner();
      int int1 = 826;
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea("day", 826, 0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.keyReleased((KeyEvent) null);
      String[] stringArray0 = new String[2];
      String string0 = "feDisplacementMap";
      stringArray0[0] = "feDisplacementMap";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.JAPANESE;
      jDayChooser_DecoratorButton0.setLocale(locale0);
      jDayChooser_DecoratorButton0.isFocusable();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4377);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMaxDayCharacters((-460));
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setSundayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4377, 4377, 4377, 11, '<');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setMonth((-460));
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getPressedIcon();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JMonthChooser jMonthChooser1 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      jDayChooser0.setYear(442);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setDay((-535));
      jDayChooser0.getInputMap();
      ActionEvent actionEvent0 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.JAPANESE;
      jDayChooser_DecoratorButton0.setLocale(locale0);
      jDayChooser_DecoratorButton0.isFocusable();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4377);
      jDayChooser0.setMaxDayCharacters((-460));
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.getInputMap();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 10, "day", (-1487L), 10);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isFocusOwner();
      ToHTMLStream toHTMLStream0 = new ToHTMLStream();
      jDayChooser0.setEnabled(true);
      jDayChooser0.getDaysInMonth();
      ToHTMLSAXHandler toHTMLSAXHandler0 = new ToHTMLSAXHandler(toHTMLStream0, toHTMLStream0, "");
      toHTMLSAXHandler0.getOutputFormat();
      HsqlProperties hsqlProperties0 = new HsqlProperties((Properties) null);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 100);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      KeyEvent keyEvent0 = new KeyEvent(jTableHeader0, 16, 208L, 71, 15, ':');
      keyEvent0.getExtendedKeyCode();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      long long0 = (-2147483648L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instant instant0 = MockInstant.ofEpochMilli((-2147483648L));
      long long1 = 2278L;
      Instant instant1 = MockInstant.plusMillis(instant0, 2278L);
      Date date0 = Date.from(instant1);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.isDecorationBackgroundVisible();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, 8833, 0L, 16, 100, 'd');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 29, 1776L, 3, (-4637), 'M');
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.JAPANESE;
      jDayChooser_DecoratorButton0.setLocale(locale0);
      jDayChooser_DecoratorButton0.isFocusable();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4377);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMaxDayCharacters((-460));
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setSundayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4377, 4377, 4377, 11, '<');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setMonth((-460));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent("day", 47, "day");
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1525);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "SHv<lbmoVj\\j");
      jDayChooser_DecoratorButton0.dispatchEvent(actionEvent0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getLocale();
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 2301;
      Result result0 = new Result(8, intArray0, 5);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "lU=bD");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      Locale locale0 = Locale.UK;
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      XmlDocument xmlDocument0 = new XmlDocument();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "1";
      stringArray0[8] = "day";
      xmlDocument0.chooseLocale(stringArray0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "\\Q+?'kS";
      String string1 = "V@bc}83";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 0;
      jDayChooser0.isFocusOwner();
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea("day", 210, 0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q+?'kS";
      stringArray0[1] = "feDisplacementMap";
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALIAN;
      ComponentOrientation componentOrientation0 = ComponentOrientation.getOrientation(locale0);
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.isPaintingTile();
      defaultCaret0.setBounds(21, (-384), (-5094), 5);
      jDayChooser0.removeMouseMotionListener(defaultCaret0);
      ActionEvent actionEvent0 = new ActionEvent("KBXx:ccE1fEs^R", (-5094), ".b3@Y_z}F");
      jDayChooser0.getClientProperty(defaultCaret0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("", 1619, 0);
      jDayChooser0.transferFocusUpCycle();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-535));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.init();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent("9X\"EtOP6", (-4277), "9X\"EtOP6");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q+N?'kS";
      stringArray0[1] = "feDisplacementMap";
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
      Color color1 = Color.getColor("Q+N?'kS", color0);
      jDayChooser0.setSundayForeground(color1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "14");
      stringArray0[2] = "V@bc}83";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q+N?'kS";
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      int int0 = 1642;
      ActionEvent actionEvent0 = new ActionEvent("Q+N?'kS", 85, "day", (-38));
      actionEvent0.paramString();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      int int0 = 7;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(7, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "KBXx:ccE1fEs^R");
      jDayChooser0.addListeners(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4377);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMaxDayCharacters((-460));
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setSundayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4377, 4377, 4377, 11, '<');
      InputEvent.getMaskForButton(11);
      jDayChooser0.paintImmediately(2097152, 3908, 4377, (-460));
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate(13, 13, 25);
      jDayChooser0.setSelectableDateRange((Date) null, mockDate0);
      jDayChooser0.drawDays();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters(25);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSize((Dimension) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(210);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "KBXx:ccE1fEs^R");
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMaxDayCharacters(0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setForeground(systemColor0);
      boolean boolean0 = false;
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, false, false, 1561, 1561);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown data type 1561
         //
         verifyException("java.awt.image.DataBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1437625602), (-1437625602), (-1437625602), (-746), '+');
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getX();
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.drawDays();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemExtensionCall elemExtensionCall0 = new ElemExtensionCall();
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder((String) null, "0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir should not be null
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      Color color0 = jDayChooser0.getWeekdayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.createImage((ImageProducer) null);
      color0.getColorSpace();
      jDayChooser0.getInputMap();
      jDayChooser0.setDecorationBackgroundVisible(false);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      jDayChooser0.getInputMap();
      color0.getColorComponents(floatArray0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.addListeners(28);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      jDayChooser0.setForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      String string0 = "MapControllerPopupDialog.NewNodeAction";
      Locale locale0 = new Locale("m1{n?l8", "m1{n?l8", "MapControllerPopupDialog.NewNodeAction");
      jMonthChooser0.setLocale(locale0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setFont(font0);
      jDayChooser_DecoratorButton0.isFocusable();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4377);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMaxDayCharacters((-460));
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setDay(4377);
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.addListeners((-546));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("", 1619, 0);
      jDayChooser0.transferFocusUpCycle();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setFont((Font) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = jDayChooser_DecoratorButton1.isFocusable();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.getLocale();
      jDayChooser0.getLocale();
      Color color0 = Color.orange;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.focusLost((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setFont(font0);
      jDayChooser_DecoratorButton0.isFocusable();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4377);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMaxDayCharacters((-460));
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setSundayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4377, 4377, 4377, 11, '<');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.locale = locale0;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isRolloverEnabled();
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      SVGPathElementBridge sVGPathElementBridge0 = new SVGPathElementBridge();
      sVGPathElementBridge0.getCTM();
      Point2D[] point2DArray0 = new Point2D[7];
      int int0 = 100;
      int int1 = 0;
      int int2 = (-1459);
      int int3 = (-247);
      MenuElement[] menuElementArray0 = new MenuElement[7];
      jDayChooser0.getGraphicsConfiguration();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("day", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isFocusOwner();
      SystemColor systemColor0 = SystemColor.textText;
      systemColor0.getColorSpace();
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getSelectedDay();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(607);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus(false);
      jDayChooser0.weeks = null;
      jDayChooser0.getSelectedDay();
      Color color0 = null;
      try {
        color0 = new Color(985, 985, 0, 985);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red Green
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocus(true);
      jDayChooser0.getCursor();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getToolTipText();
      jDayChooser0.grabFocus();
      int int0 = 2113;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.getDayPanel();
      int int0 = 90;
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setFont(font0);
      jDayChooser_DecoratorButton0.isFocusable();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4377);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMaxDayCharacters((-460));
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setSundayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4377, 4377, 0, 11, '<');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(1727);
      jDayChooser0.addNotify();
      jDayChooser0.getDaysInMonth();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate(25, 13, 2);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.drawDays();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters(19);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.LIGHT_GRAY;
      color0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isWeekOfYearVisible();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      mockSimpleDateFormat0.getCalendar();
      int int0 = 1507;
      String string0 = "\\viewkind4\\uc1\\pard\\f0\\fs20{}";
      String string1 = "file://";
      MessageFormat messageFormat0 = new MessageFormat("file://");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat((String) null, decimalFormatSymbols0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      Color color0 = jDayChooser0.getWeekdayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.createImage((ImageProducer) null);
      color0.getColorSpace();
      jDayChooser0.getInputMap();
      jDayChooser0.setDecorationBackgroundVisible(false);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      color0.getColorComponents(floatArray0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.addListeners(28);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.getDecorationBackgroundColor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2473, true, jDayChooser0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDecorationBackgroundColor();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 2473, (-466L), 2473, 2473, 'R', 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 0;
      jDayChooser0.setMonth(0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("month");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "KBXx:ccE1fEs^R");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 2301, "SHv<lbmoVj\\j");
      jDayChooser_DecoratorButton0.dispatchEvent(actionEvent0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getLocale();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      String string0 = null;
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, (String) null, 2301);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.initDecorations();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      String string0 = "x";
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "x", 238);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getComponentListeners();
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1642, "day", 49);
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q+?'kS";
      stringArray0[1] = "feDisplacementMap";
      stringArray0[2] = "V@bc}83";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicFavoritesNavigatorUI basicFavoritesNavigatorUI0 = null;
      try {
        basicFavoritesNavigatorUI0 = new BasicFavoritesNavigatorUI((JHelpFavoritesNavigator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.help.plaf.basic.BasicFavoritesNavigatorUI", e);
      }
  }
}
