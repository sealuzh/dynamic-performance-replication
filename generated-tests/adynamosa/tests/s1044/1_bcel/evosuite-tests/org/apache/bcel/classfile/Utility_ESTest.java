/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 01:13:49 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.getSignature(")\t");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "L);";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = Utility.decode(")\t", false);
      Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-125), 35);
      try { 
        Utility.methodSignatureReturnType("0:    dload_3\n1:    lconst_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dload_3
         // 1:    lconst_0
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tableswitch");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, (int) (byte) (-119));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.searchOpcode("dload_2");
      byte[] byteArray0 = Utility.decode("dload_2", false);
      byte[] byteArray1 = new byte[1];
      Utility.toHexString(byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      byteSequence1.readByte();
      byteSequence1.available();
      byteSequence0.read(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.fillup("YNgv", (-4311), false, '{');
      try { 
        byteSequence0.readBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O'KaEE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)22;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (int) (byte) (-98));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_0
         // 1:    dstore_0
         // 2:    lload\t\t%22
         // 4:    dstore_0
         // 5:    lload\t\t%158
         // 7:    dstore_0
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("int", "int", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)49;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-872), (int) (byte)42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "dmul";
      stringArray0[1] = "dmul";
      stringArray0[2] = "dmul";
      stringArray0[3] = "r%G=az";
      stringArray0[4] = "Integer";
      stringArray0[5] = "dmul";
      stringArray0[6] = "dmul";
      String string0 = Utility.methodTypeToSignature("dmul", stringArray0);
      assertEquals("(Ldmul;Ldmul;Ldmul;Lr%G=az;LInteger;Ldmul;Ldmul;)Ldmul;", string0);
      
      String string1 = Utility.methodSignatureReturnType("Integer");
      assertEquals("int", string1);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Ldmul;Ldmul;Ldmul;Lr%G=az;LInteger;Ldmul;Ldmul;)Ldmul;", false);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.replace("shor2b", "shor2b", "shor2b");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)65;
      Utility.toHexString(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "shor2b");
      Utility.toHexString(byteArray1);
      String string0 = Utility.compactClassName("lstore_2", "", false);
      Utility.getSignature("HSz+CiA)N_I)vkq_@\"");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "shor2b";
      objectArray0[1] = (Object) (byte)65;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LHSz+CiA)N_I)vkq_@\";");
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "lstore_2";
      objectArray0[4] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      // Undeclared exception!
      try { 
        Utility.signatureToString("YMfK1'evAJLA4 byk", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YMfK1'evAJLA4 byk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale.getISOLanguages();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byteSequence1.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence1.reset();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool4 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence1, constantPool4, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.compactClassName("ifnonnull");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("muAltianewarray");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "(");
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      MockPrintStream mockPrintStream0 = new MockPrintStream("muAltianewarray");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantPool0.dump(dataOutputStream0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("jR?<Z'?l}9>o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jR?<Z'?l}9>o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byte byte0 = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "L);";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.signatureToString("L);");
      int int0 = Utility.setBit(228, (-773));
      assertEquals(134217956, int0);
      
      String string1 = Utility.accessToString((int) (byte)118, true);
      assertEquals("private protected final volatile", string1);
      
      String string2 = Utility.fillup(")\t", (byte)82, true, 'L');
      assertEquals(")\tLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string2);
      
      Utility.codeToString(byteSequence0, constantPool0);
      short short0 = Utility.searchOpcode("&tXjkoE7Vn'Q_F6fC,");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.replace("`[*yPb=l]XG", "`[*yPb=l]XG", "`[*yPb=l]XG");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`[*yPb=l]XG";
      stringArray0[1] = "`[*yPb=l]XG";
      stringArray0[2] = "sastore";
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.accessToString((int) (byte)86, false);
      Utility.encode(byteArray0, true);
      Utility.signatureToString("J+qn", false);
      Utility.compactClassName("LI0=f22HY8(4W.R02jY", true);
      Utility.accessToString(165, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("`[*yPb=l]XG", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``[*yPb=l]XG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString((-435));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)93;
      byteArray0[4] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.accessToString((int) (byte)11, false);
      Utility.replace("public private static", "byte", "public protected static volatile interface abstract strictfp synthetic annotation enum");
      try { 
        Utility.typeOfSignature("9A)h(z&GOa+V!q,T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9A)h(z&GOa+V!q,T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.compactClassName("ifnonnull");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      MockPrintStream mockPrintStream0 = new MockPrintStream("muAltianewarray");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantPool0.dump(dataOutputStream0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnonnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-83);
      byte byte0 = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3sb5lb5");
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = 1628;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-83), 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      String string0 = Utility.convertString(")*Dy\"m");
      assertEquals(")*Dy\\\"m", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("8a", string1);
      
      String string2 = Utility.classOrInterface((byte)76);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("(");
      byte byte0 = (byte)15;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.getSignature("*");
      Utility.signatureToString("Invalid signature: `", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-30));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence1.skip((-1242L));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2048, (int) (byte) (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.accessToString((-435));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)55;
      byteArray0[4] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.compactClassName("public protected static volatile interface abstract strictfp synthetic annotation enum", "X.B}v]", true);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName("arraylength", ", high,= ", false);
      Utility.fillup("if_icmpgt", 92, false, '7');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)86;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)85, (int) (byte)119, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "Illegally nested brackets:";
      boolean boolean0 = false;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-81);
      byte byte0 = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.compactClassName("ifnonnull");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      MockPrintStream mockPrintStream0 = new MockPrintStream("multianewarray");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantPool0.dump(dataOutputStream0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnonnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-85));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.commons.io.IOCase");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale.getISOLanguages();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("M,A)w8f~V[", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)37;
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence2, constantPool0, false);
      MockFile.createTempFile("l5e", "L!fG:rnLjJ=RIv#H");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("shY|&n&P4V~G", "M,A)w8f~V[", "fload_3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: shY|&n&P4V~G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      Utility.compactClassName("Y`uD'bm$gS:vPV", false);
      Utility.convertString("Y`uD'bm$gS:vPV");
      Utility.decode("Y`uD'bm$gS:vPV", false);
      try { 
        Utility.methodSignatureReturnType("Y`uD'bm$gS:vPV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y`uD'bm$gS:vPV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = ")\t";
      Utility.getSignature(")\t");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "L);";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)118;
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-95);
      byte byte1 = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.util.SyntheticRepository");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.util.SyntheticRepository'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("hI&@.TYA?<lLde]");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LhI&@/TYA?<lLde];", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LhI&@/TYA?<lLde];
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.getSignature("A1|o5n@t('ica?11");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)29;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = Utility.decode("A1|o5n@t('ica?11", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        MockFile.createTempFile("LA1|o5n@t('ica?11;", "d2i");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("irem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: irem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      Utility.convertString("Invalid signature: `");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("goto");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `goto'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.getSignature("boolean");
      assertEquals("Z", string0);
      
      short short0 = Utility.searchOpcode("Z");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.classOrInterface((-174));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale.getISOLanguages();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.isJavaIdentifierPart('$');
      try { 
        Utility.typeOfSignature("#aqxliN^O}0ji");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #aqxliN^O}0ji
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "FS+lThC^/%SWZ";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-44);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.getSignature("ifnull");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readBoolean();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-28), 18);
      String string0 = "|FHxS{tT`\"GHz";
      try { 
        Utility.methodSignatureReturnType("|FHxS{tT`\"GHz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|FHxS{tT`\"GHz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1845), 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.compactClassName("ky5xU/uM!.wcayXw6", "b", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)17;
      byteArray0[0] = (byte)125;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Utility.searchOpcode("(");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1955L));
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (byte)93);
      assertEquals("0:    fsub\n1:    <illegal opcode>\n2:    f2d\n3:    impdep2\n4:    iconst_0\n5:    dup2_x1\n6:    dup\n", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.getSignature("ifnull");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (-79943893));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-85));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 474);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(1L);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2445), 184);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.getSignature(")\t");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte)6);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte)27;
      byteArray1[2] = (byte)27;
      byteArray1[3] = (byte)27;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.close();
      byteSequence0.available();
      byteSequence1.skip(5643L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("4)?Tn%(d=+8]");
      // Undeclared exception!
      try { 
        Utility.signatureToString("4)?Tn%(d=+8]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4)?Tn%(d=+8]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      Utility.isJavaIdentifierPart('G');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(16384);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.available();
      byteSequence0.skip((byte) (-85));
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("lookupswitch\tdefault = 0, npairs = 0 ()");
      // Undeclared exception!
      try { 
        Utility.signatureToString("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "K";
      // Undeclared exception!
      try { 
        Utility.signatureToString("K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = "E";
      Utility.searchOpcode("");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)102;
      byteArray1[4] = (byte) (-127);
      byteArray1[5] = (byte)102;
      byteArray1[6] = (byte)102;
      byteArray1[7] = (byte)102;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)102;
      byteArray2[1] = (byte) (-127);
      byteArray2[2] = (byte) (-127);
      byteArray2[3] = (byte)102;
      byteArray2[4] = (byte) (-127);
      byteArray2[5] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 20, 1255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1058L));
      ConstantPool constantPool0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("[L`;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.setBit(3553, (-1279));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.decode("dstore\t\t%6", false);
      try { 
        Utility.typeOfSignature("lookupswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lookupswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-46);
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)59;
      Utility.equals(byteArray1, byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)59;
      objectArray0[1] = (Object) (byte)59;
      objectArray0[2] = (Object) (byte)59;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)59;
      objectArray0[5] = (Object) (byte) (-46);
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("{59, 59, 59, java.lang.Object@129b49cd, 59, -46}");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(181, 127);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(218, (byte)59);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(155, (-2862));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[4] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(172, (byte)59);
      constantArray0[5] = (Constant) constantMethodref1;
      ConstantFieldref constantFieldref2 = new ConstantFieldref((-1680), 870);
      constantArray0[6] = (Constant) constantFieldref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 22, 1494, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) byteSequence0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte) (-62);
      byteArray1[4] = (byte) (-60);
      byteArray1[5] = (byte)117;
      byteArray1[6] = (byte) (-10);
      byteArray1[7] = (byte)91;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(2108);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("laload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `laload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "UTP5z)";
      try { 
        Utility.typeOfSignature("UTP5z)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UTP5z)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-89), (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "multianewarray";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (int) (byte)22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale.getISOLanguages();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.signatureToString("V3la");
      try { 
        Utility.methodSignatureArgumentTypes("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)16;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 36, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)127;
      byteArray1[5] = (byte)103;
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte) (-55);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("_utsmJtic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _utsmJtic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-67));
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("V", false);
      String string0 = Utility.format((-193), 4304, false, 'c');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "V";
      stringArray0[1] = "static";
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = "char";
      stringArray0[5] = "char";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("char", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.getSignature(", high = ");
      boolean boolean0 = false;
      boolean boolean1 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ", stack items={";
      try { 
        Utility.typeOfSignature(", stack items={");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , stack items={
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-46);
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.signatureToString("Illegal type: ", true);
      assertEquals("int", string1);
      
      String string2 = Utility.classOrInterface(3);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("[L`;", false);
      Utility.convertString("_Dv<\"/v I0A");
      boolean boolean0 = true;
      try { 
        Utility.decode("KN&Qmk&JITa]Lclw", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-85));
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" entries\n", stringArray0);
      try { 
        Utility.methodSignatureReturnType(" entries\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` entries
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "short";
      Utility.getSignature("short");
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)5;
      byte byte0 = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-101);
      byte byte1 = (byte)82;
      byteArray0[6] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("ifnull", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.compactClassName("Jshort");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((-1357));
      Utility.searchOpcode("Jshort");
      Utility.convertString("Jshort");
      Utility.compactClassName("dsS(-a,~K*d~9_5e", "public private final synchronized transient interface strictfp synthetic annotation enum", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1252, 3325);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.signatureToString("L);", true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("0^`", "0^`", true);
      String string1 = Utility.fillup("", (-594), true, '*');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.getSignature(")\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-90);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)101;
      byteArray1[4] = (byte) (-90);
      byteArray1[5] = (byte) (-117);
      Utility.equals(byteArray0, byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.printArray((Object[]) null);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-92);
      byteArray2[1] = (byte) (-117);
      byteArray2[2] = (byte)30;
      byteArray2[3] = (byte)38;
      byteArray2[4] = (byte)90;
      byteArray2[5] = (byte)37;
      byteArray2[6] = (byte)44;
      byteArray2[7] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool1, (int) (byte)30, (int) (byte)44, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("bipush");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) "bipush";
      objectArray0[2] = (Object) (byte)117;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) "bipush";
      Utility.printArray(objectArray0);
      String string0 = Utility.convertString("\n     Method Arguments:");
      assertEquals("\\n     Method Arguments:", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = ")\t";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.available();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.decode(")\t", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.getSignature(")\t");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "L);";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.util.SyntheticRepository");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.util.SyntheticRepository'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.getSignature(")\t");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "L);";
      objectArray0[2] = (Object) ">~HQ^uC`'mGnSO";
      objectArray0[3] = (Object) "L);";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)117;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Llastore;V", "~_>.xr@0N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName("void");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-76);
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byte byte0 = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xyt2Q(\"Xo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xyt2Q(\"Xo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = false;
      try { 
        Utility.decode("*2f@o.dhai[i$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short short0 = Utility.searchOpcode("dload_2");
      assertEquals((short)40, short0);
      
      byte[] byteArray0 = Utility.decode("dload_2", false);
      assertArrayEquals(new byte[] {(byte)100, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)50}, byteArray0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.compactClassName("~1RhnB3eRZ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(221, (byte)78);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2651), 3649);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantFieldref constantFieldref1 = new ConstantFieldref((byte) (-112), 7);
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantClass constantClass2 = new ConstantClass(221);
      constantArray0[5] = (Constant) constantClass2;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-112), 221);
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(6);
      constantArray0[7] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(318, 3220);
      constantArray0[8] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "`[*yPb=l]XG";
      String string1 = "gLv:jM[,;";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-108);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)78;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (int) (byte) (-125));
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = Utility.isSet(32, 32);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      int int0 = Utility.setBit(51, (byte) (-92));
      assertEquals(51, int0);
      
      String string0 = Utility.getSignature("baload");
      assertEquals("Lbaload;", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = (byte) (-85);
      byte[] byteArray0 = new byte[23];
      byteArray0[4] = (byte) (-85);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-79);
      byteSequence0.readFully(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte) (-85));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("return", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `return'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)103;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1%Hoy");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("daload", true);
      try { 
        Utility.typeOfMethodSignature("1%Hoy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1%Hoy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.searchOpcode("mR(/;p)w>Rf");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Llastore;V", "Llastore;V", "java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Llastore;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, false);
      Utility.decode("M,A)w8f~V[", false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)34, 174, byteSequence0, constantPool2);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      LocalVariableTable localVariableTable2 = new LocalVariableTable(localVariableTable0);
      LocalVariableTable localVariableTable3 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("int", "int", "dconst_1", false, localVariableTable2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O'KaEE");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.convertString("?");
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, 3784, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    astore_3
         // 3:    fsub
         // 4:    nop
         // 5:    nop
         // 6:    fcmpl
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)111;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-85);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      int int0 = (-147);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)44;
      byteArray2[1] = (byte) (-113);
      // Undeclared exception!
      try { 
        constantPool0.getConstantString((-1040), (byte) (-113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 0, 3214);
      Utility.accessToString(0);
      byte[] byteArray1 = Utility.decode("<$\"vc,=ql%A?", false);
      Utility.compactClassName("");
      Utility.clearBit(0, 0);
      Utility.clearBit((-1), 83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.convertString("istore_3");
      Utility.compactClassName("<$\"vc,=ql%A?", false);
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, 182, 176, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale.getISOLanguages();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 229);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr\t\t#-22360
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.commons.io.IOCase");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-66);
      constantPool1.copy();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte) (-66);
      byteArray1[5] = (byte)45;
      byteArray1[6] = (byte) (-66);
      byteArray1[7] = (byte) (-66);
      byteArray1[8] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-116), (byte) (-66));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f2l", "\nRd]<#", "\nRd]<#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("lastore");
      assertEquals((short)80, short0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 1142);
      assertEquals("0:    lastore\n1:    lastore\n2:    if_acmpeq\t\t#-23172\n5:    nop\n", string0);
      
      Utility.fillup("b~0#{SZ{!", 3307, false, '\\');
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("nop");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 1142);
      String string0 = Utility.fillup("b~0#{SZ{!", 3307, false, '\\');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fstore_2", "<illegal opcode>", string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.compactClassName("short");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nef#?#331v;uFmG$6 ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      short short0 = Utility.searchOpcode("short");
      assertEquals((short) (-1), short0);
      
      Utility.codeToString(byteArray0, constantPool1, (-3148), (int) (byte) (-62));
      String string0 = Utility.codeToString(byteArray1, constantPool1, (-1169), (-1280), true);
      assertEquals("0:    aload_1\n1:    astore\t\t%194\n3:    aload_1\n4:    monitorenter\n", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      constantPool1.setConstantPool((Constant[]) null);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-41);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 22, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.replace("`[*yPb=l]XG", "`[*yPb=l]XG", "`[*yPb=l]XG");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence2);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("pop", "fstore_3", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)14;
      byteArray0[2] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("lastore");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 1142);
      Utility.fillup("b~0#{SZ{!", 3307, false, '\\');
      Utility.equals(byteArray0, byteArray0);
      String string1 = Utility.replace("wXbu}G8zTI.", "b~0#{SZ{!", "wXbu}G8zTI.");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d{\"yX4a");
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.convertString("nop");
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-426), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-113);
      byteArray0[1] = (byte)95;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool4 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool4, false);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.compactClassName("short");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)117;
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      Utility.replace("", "", "return");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)34;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)25;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-73);
      byteArray1[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)88;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte)57);
      Utility.signatureToString("D4\"AJ=vx(T6*", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)84;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("double", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-113);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool2, true);
      String string0 = Utility.accessToString((int) (byte)29, true);
      assertEquals("public protected static final", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.getSignature("A1|o5n@t('ica?11");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)39;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)26;
      byteArray1[0] = (byte)26;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)39;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence1, constantPool1, true);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool2, (int) (byte)26, (-818));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-65);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.convertString("org.apache.commons.io.IOCase");
      Utility.compactClassName("org.apache.commons.io.IOCase", true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 76
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byte byte0 = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.decode("if_icmple\t\t#29263", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantClass constantClass0 = new ConstantClass((byte)74);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(175, (byte)74);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool3, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 0, 3214);
      String string0 = Utility.accessToString(0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-69);
      byteArray1[2] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.replace("", "lreturn", ")v u'/");
      String string1 = Utility.printArray((Object[]) constantArray0, false, true);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.getSignature("%mnCc5E");
      assertEquals("L%mnCc5E;", string2);
      
      String string3 = Utility.getSignature("");
      assertEquals("L;", string3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-85));
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = "fcmpl";
      Utility.convertString("fcmpl");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "?";
      Utility.convertString("?");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?");
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)56;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-68);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, 3784, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    astore_3
         // 3:    fsub
         // 4:    nop
         // 5:    fstore\t\t%149
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-1700));
      constantArray0[0] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-101), (byte)0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O._.};Z{q");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[0] = (byte) (-97);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[5] = (byte) (-71);
      Utility.encode(byteArray0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.searchOpcode("dconst_1");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 73, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.replace("`[*yPb=l]XG", "`[*yPb=l]XG", "`[*yPb=l]XG");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      String[] stringArray0 = new String[3];
      byteSequence1.readUnsignedByte();
      stringArray0[0] = "`[*yPb=l]XG";
      stringArray0[1] = "`[*yPb=l]XG";
      stringArray0[2] = "swap";
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.accessToString((int) (byte)95, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)95;
      byteArray1[3] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 12, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-110), 1135, false);
      String string0 = Utility.compactClassName("0:    i2c\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("lastore");
      assertEquals((short)80, short0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 1142);
      assertEquals("0:    lastore\n1:    lastore\n2:    if_icmpeq\t\t#3708\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O'KaEE");
      String string0 = Utility.compactClassName(":,JA");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ":,JA";
      Constant[] constantArray0 = new Constant[2];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodref0.accept(emptyVisitor0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.compactClassName("ky5xU/uM!.wcayXw6", "b", true);
      String string0 = Utility.classOrInterface(215);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("ky5xU/uM!.wcayXw6", true);
      assertEquals("ky5xU.uM!.wcayXw6", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifge\t\t#-27813", string2);
      
      String string3 = Utility.replace(")v u'/", "class", "btN3\\:i,=L\"");
      assertEquals(")v u'/", string3);
      
      Utility.printArray((Object[]) null, true, true);
      String string4 = Utility.getSignature("b");
      assertEquals("Lb;", string4);
      
      String string5 = Utility.getSignature("");
      assertEquals("L;", string5);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString((-440));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1440, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-59);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.convertString("aload_0");
      Utility.compactClassName("multianewarray", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (-2090), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = "7";
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = Constants.OPCODE_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("jsr\t\t#484", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)78;
      Utility.encode(byteArray0, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$93N", string0);
      
      Integer integer0 = new Integer((byte)78);
      byte[] byteArray1 = Utility.decode("$93N", false);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)78}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((byte) (-25));
      String string0 = Utility.methodSignatureReturnType("Lmonitorenter;V");
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = ":";
      Utility.getSignature(":");
      String string1 = "-L4+N";
      try { 
        Utility.typeOfSignature("-L4+N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -L4+N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((byte) (-97));
      try { 
        Utility.methodSignatureReturnType("~4g(A-k;t='v\bW/$=9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~4g(A-k;t='v\bW/$=9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)55;
      byteArray0[6] = (byte)103;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)84;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("ifnull", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)127;
      byteArray0[5] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.replace("0w(ZS`#6", "{PXXG$", "qiny");
      assertEquals("0w(ZS`#6", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.getSignature(".!\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, 57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(43);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("(type=");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("/ad!uble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /ad!uble
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, 179, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.classOrInterface(6);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-67);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, (int) (byte)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-652), true);
      assertEquals("0:    nop\n", string0);
      
      String string1 = Utility.replace("W$}lEUF|&Rd", "monitorent", "nop");
      assertEquals("W$}lEUF|&Rd", string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.format(184, 75, true, 'b');
      assertEquals("184bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string0);
      
      String string1 = Utility.fillup("184bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", 75, false, 'b');
      assertEquals("184bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$bb$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.decode("$fb=Dht", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "4}]G";
      Utility.getSignature("4}]G");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-70);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1161), (int) (byte) (-70), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dneg
         // 1:    dload_2
         // 2:    fconst_0
         // 3:    lstore_3
         // 4:    dastore
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "'", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V@-4+";
      stringArray0[1] = "V@-4+";
      stringArray0[2] = "V@-4+";
      stringArray0[3] = "V@-4+";
      Utility.methodTypeToSignature("V@-4+", stringArray0);
      Utility.convertString("Lwide;V");
      Utility.methodSignatureToString("(LV@-4+;LV@-4+;LV@-4+;LV@-4+;)LV@-4+;", "V@-4+", "athrow");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantClass constantClass0 = new ConstantClass(183);
      constantClass0.copy();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-110), (-975), false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "ladd", "71FSq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      Utility.classOrInterface(401);
      String string0 = "EE2x>I\"SDjG?6[Z";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("EE2x>I\"SDjG?6[Z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EE2x>I\"SDjG?6[Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      String string0 = "U\"!1=_F7X!";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U\"!1=_F7X!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U\"!1=_F7X!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureReturnType("1X^VS8UiIH4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1X^VS8UiIH4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      Utility.signatureToString("FHNT!uMM>s", true);
      try { 
        Utility.typeOfMethodSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.getSignature("lreturn");
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
      
      Utility.convertString("Llreturn;");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)85;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2837), (int) (byte) (-65), true);
      assertEquals("0:    athrow\n1:    istore_1\n2:    aconst_null\n3:    lconst_1\n4:    fstore_3\n5:    <illegal opcode>\n6:    ddiv\n7:    castore\n", string1);
      
      String string2 = Utility.convertString("Llreturn;");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.convertString("getfield");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)61, true, ',');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)38;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("i,Sf^nY-`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i,Sf^nY-`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-122);
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Locale.getISOLanguages();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.searchOpcode("M,A)w8f~V[");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2925, (-196));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.replace("\n\t\tthrows ", "\n\t\tthrows ", "=?cLXh9U*A3p");
      String string0 = Utility.compactClassName("U", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = true;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = Constants.OPCODE_NAMES;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Integer integer0 = new Integer(51);
      try { 
        Utility.typeOfSignature("astore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, true);
      boolean boolean0 = false;
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[]");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.searchOpcode("[]");
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-114);
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.getSignature(";@]eU");
      Utility.signatureToString("L;@]eU;", false);
      byte[] byteArray0 = Utility.decode("", false);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-43);
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-43));
      constantArray0[0] = (Constant) constantClass0;
      constantClass0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("", "", "8qwf", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.getSignature("*");
      Utility.signatureToString("Invalid signature: `", false);
      byte[] byteArray0 = Utility.decode("v<C0-bU[#M)Y;un2~q", false);
      Utility.compactClassName("Invalid signature: `", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, (-734));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.getSignature(";@]eU");
      Utility.signatureToString("L;@]eU;", false);
      try { 
        Utility.decode("'", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("@E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(102);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("[L`;");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(11, 76);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 62425. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        constantPool1.getConstant(71, (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 71. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.getSignature(".\t");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.mark(169);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Integer integer0 = new Integer((byte)50);
      try { 
        Utility.typeOfMethodSignature("S)wlOcCb0'TieO@xsyU.\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S)wlOcCb0'TieO@xsyU.\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.IOCase");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.commons.io.IOCase");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1753, (-147));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-32), (int) (byte)34);
      assertEquals("0:    fload_0\n1:    iushr\n2:    astore_3\n3:    <illegal opcode>\n4:    lastore\n5:    pop\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte)89;
      byteArray1[5] = (byte)104;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)104, 583);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Utility.getSignature("`[*yPb=l]XG");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.compactClassName("[L`;", "[L`;", false);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = Utility.decode("`[*yPb=l]XG", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(11, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(25);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(25, (-1396));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(25, 25);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iadd", string2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('#');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      String string1 = Utility.fillup("org.apache.bcel.classfile.ConstantFloat", 98, true, 'Z');
      assertEquals("org.apache.bcel.classfile.ConstantFloatZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("M,A)w8f~V[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M,A)w8f~V['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteSequence0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) (byte) (-124);
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      Constant[] constantArray1 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = (-2600);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, (-2600), (-2600), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.getSignature(".\t");
      Utility.typeOfSignature("L/;");
      String string0 = "]VHL3Hl.OH51y+";
      Utility.replace("]VHL3Hl.OH51y+", "L/;", "L/;");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Qj>{Fg/-^8mgoJ3,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qj>{Fg/-^8mgoJ3,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O'KaEE");
      Utility.compactClassName(":,JA");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ":,JA";
      Constant[] constantArray0 = new Constant[2];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass(784);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 457, 457);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.compactClassName("l@o\"A", false);
      assertEquals("l@o\"A", string0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1971421807), 78, false);
      assertEquals("0:    if_icmple\t\t#29263\n3:    dstore_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "l@o\"A";
      Utility.replace("l@o\"A", "l@o\"A", "l@o\"A");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("l@o\"A", "Expected class `", true);
      Utility.format(45, 76, true, '~');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte)34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.typeOfSignature("LLA1|oy35n@t");
      Utility.searchOpcode("LLA1|oy35n@t");
      String string0 = "java.lang.7\\>&ugmxPHw?a%stSJ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "java.lang.7>&ugmxPHw?a%stSJ", "juge]rhK5", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "NxJ";
      String string1 = "monitorenter";
      Utility.replace("Tslrfj:", "NxJ", "monitorenter");
      try { 
        Utility.typeOfSignature("NxJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NxJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.String");
      assertEquals("String", string0);
      
      String string1 = Utility.getSignature("LA1|o5n@t(");
      assertEquals("LLA1|o5n@t(;", string1);
      
      Utility.compactClassName("LLA1|o5n@t(;");
      String string2 = Utility.signatureToString("LLA1|o5n@t(;", true);
      assertEquals("LA1|o5n@t(", string2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.compactClassName("java.lang.String");
      MockFileWriter mockFileWriter0 = new MockFileWriter("java.lang.String", true);
      mockFileWriter0.write("newarray");
      MockFile mockFile0 = new MockFile("ifneTslrfj:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "ifneTslrfj:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "invokevirtual", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("`'u}YJWJ`");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("Tslrfj:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tslrfj:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureToString("ifnonnull", "lconst_0", "ifnonnull", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      String string0 = "V=0lG{LWWw$wi3U6";
      Utility.decode("V=0lG{LWWw$wi3U6", false);
      Utility.accessToString((int) (byte) (-105), false);
      Utility.getSignature("V=0lG{LWWw$wi3U6");
      try { 
        Utility.typeOfMethodSignature("V=0lG{LWWw$wi3U6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V=0lG{LWWw$wi3U6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.replace("tg1N", "gJ[EEf*U", "Invalid frame type found while parsing stack map table: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-46);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-73);
      byte byte0 = (byte)34;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1628, (int) (byte)61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M,A)w8f~V[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (int) (byte)0, (int) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeInvisibleParameterAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Integer integer0 = new Integer((byte) (-105));
      try { 
        Utility.methodSignatureToString("G&(j50CZ_8I,3", "G&(j50CZ_8I,3", "r 'A2Kb+R", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G&(j50CZ_8I,3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte) (-32);
      byteArray1[2] = (byte) (-32);
      byteArray1[3] = (byte) (-32);
      Utility.equals(byteArray0, byteArray1);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)74, (int) (byte) (-32), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Locale.getISOLanguages();
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      Utility.signatureToString("V");
      String string0 = Utility.signatureToString("V", true);
      assertEquals("void", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-67), 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Object object0 = new Object();
      String string0 = Utility.convertString("jsr_w");
      assertEquals("jsr_w", string0);
      
      String string1 = Utility.signatureToString("T@;G1k#(~,i", true);
      assertEquals("@", string1);
      
      String string2 = Utility.compactClassName(";", "jsr_w", false);
      assertEquals(";", string2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 54, 165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.accessToString((-440));
      assertEquals("static volatile interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore\t\t%91", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.signatureToString("B'=i!QrvowSy", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -125
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.getSignature("A1|o5n@t('ica?11");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.methodSignatureReturnType("LA1|o5n@t('ica?11;", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)78;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nQQ|D|<n");
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-43);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)78;
      byteSequence0.read(byteArray1);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.getSignature(".\t");
      Utility.typeOfSignature("L/;");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = new Integer((byte) (-81));
      assertEquals((-81), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.convertString(".j<h1= I(");
      Utility.convertString("4gp#`E^{xBzU");
      Utility.compactClassName("4gp#`E^{xBzU", "%fv", false);
      Utility.searchOpcode("Object");
      try { 
        Utility.typeOfSignature("4gp#`E^{xBzU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4gp#`E^{xBzU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName(" fields:\n", " fields:\n", true);
      Utility.accessToString(78, true);
      String string0 = Utility.classOrInterface((-4123));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O:6> rBapdd{s74C", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O:6> rBapdd{s74C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName("arraylength", ", high,= ", false);
      Utility.fillup("if_icmpgt", 92, false, '7');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)86;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)85, (int) (byte)119, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "\t\t#";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        byteSequence0.read(byteArray0, (int) (byte)86, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(59, 1512);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("astore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.format((byte)7, 91, false, 'R');
      int int0 = Utility.setBit((-1839), 770);
      assertEquals((-1835), int0);
      
      String string1 = Utility.compactClassName("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR7");
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("getfield");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)95;
      String string0 = Utility.toHexString(byteArray0);
      Utility.convertString("4a 64 24 8e 01 46 2d 5f");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte)100);
      constantArray0[0] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass(17);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "NyNEf'u65CcoJs";
      // Undeclared exception!
      try { 
        Utility.signatureToString("NyNEf'u65CcoJs", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NyNEf'u65CcoJs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TqT$#8");
      byteArray0[1] = (byte) (-77);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("TqT$#8");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
      
      byte byte0 = Utility.typeOfSignature("Z#h|WD");
      assertEquals((byte)4, byte0);
      
      String string1 = Utility.compactClassName("00", "00", true);
      assertEquals("", string1);
      
      String string2 = Utility.classOrInterface((byte)4);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wx;U;!+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wx;U;!+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.compactClassName("", ".RD4z9)fJf[i|gfa", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.setBit(186, 186);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      stringArray0[2] = "]a*XF9*9!.8|uiaOc2";
      stringArray0[3] = "float";
      stringArray0[4] = ", stack items={";
      stringArray0[5] = "float";
      stringArray0[6] = "float";
      stringArray0[7] = "float";
      stringArray0[8] = "n(>id5/N)cbqoWvh`";
      Utility.methodTypeToSignature("float", stringArray0);
      Utility.methodSignatureArgumentTypes("(FFL]a*XF9*9!/8|uiaOc2;FL,;FFFLn(>id5/N)cbqoWvh`;)F");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile("float");
      File file0 = MockFile.createTempFile("$32$J", "SourceFile: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "@2q)GHK3QGH1\"Ef0u\"+");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @2q)GHK3QGH1\"Ef0u\"+
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(251, (-1093), false, 'A');
      Utility.compactClassName("251");
      Utility.accessToString(241, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-8);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-8));
      Utility.isJavaIdentifierPart('A');
      String string0 = "long";
      boolean boolean0 = false;
      int int0 = 243;
      int int1 = (-562);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -8
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Locale.getISOLanguages();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-27);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.fillup("ZA$m[F807eO~J", (-2756), true, '7');
      Utility.setBit(106, 106);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.compactClassName("astore_2", true);
      assertEquals("astore_2", string0);
      
      byte[] byteArray1 = Utility.decode("astore_2", false);
      assertArrayEquals(new byte[] {(byte)97, (byte)115, (byte)116, (byte)111, (byte)114, (byte)101, (byte)95, (byte)50}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.toHexString(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "00 00");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte) (-115);
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.typeOfSignature("Sv'm^");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Tsrfj:G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tsrfj:G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.setBit(39, 71);
      Utility.searchOpcode("\"");
      try { 
        Utility.typeOfSignature("2^5K6yv'K/j,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2^5K6yv'K/j,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.getSignature("A1|o5n@t('ica?11");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1K8qR}uhG?!^bqB3!U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1K8qR}uhG?!^bqB3!U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.typeOfSignature("J");
      Utility.getSignature("*F}zsF)f-o1p=/ybbF");
      try { 
        Utility.methodSignatureReturnType("9EAL!6ekX@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9EAL!6ekX@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.getSignature("`[*yPb=l]XG");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.signatureToString("[L`;", false);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Utility.getSignature("`Q`[*yPb=l]XG");
      assertEquals("[L`Q`;", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.methodSignatureReturnType("[L`Q`;");
      String string1 = Utility.methodSignatureReturnType("[L`Q`;", false);
      assertEquals("`Q`[]", string1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-13);
      byteArray0[3] = (byte)98;
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Utility.classOrInterface(76);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.readChar();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(999, 65535);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-6);
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte)126;
      String string1 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-6), 4806);
      assertEquals("0:    <illegal opcode>\n1:    breakpoint\n2:    <illegal opcode>\n3:    iand\n", string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-3);
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.methodSignatureReturnType("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DFZ%U/Py06pw", true);
      assertEquals("double", string0);
      
      short short0 = Utility.searchOpcode("SVa\"4Kqxc9h:]W<");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.methodSignatureReturnType("JSyMewy.2", true);
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Ns12@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ns12@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((-230L));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.signatureToString("Sm^", false);
      try { 
        Utility.methodSignatureReturnType("XyX}-Q]AK#:Tf;4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XyX}-Q]AK#:Tf;4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.replace("u.b=d8!", "u.b=d8!", "u.b=d8!");
      assertEquals("u.b=d8!", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('Y');
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) "u.b=d8!";
      objectArray0[1] = (Object) "u.b=d8!";
      objectArray0[2] = (Object) "u.b=d8!";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "u.b=d8!";
      Utility.printArray(objectArray0, true);
      boolean boolean1 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)63;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)64;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("10 40", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.methodSignatureReturnType("DFZ%U/Py06w", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L:8^O5u", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L:8^O5u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmple");
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.getSignature("");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "L;";
      objectArray0[1] = (Object) "=MIVY2l";
      objectArray0[2] = (Object) "L;";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (-614));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "2dBP";
      Utility.compactClassName("2dBP", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(82, 62, false, 'K');
      Utility.setBit(62, 62);
      String string1 = "Illegally nested brackets:";
      Utility.compactClassName("Illegally nested brackets:", "Illegally nested brackets:", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"}7TGS(0D8;C", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"}7TGS(0D8;C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("(type=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (type=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.getSignature("PcP6iVtNPU>iRFP");
      // Undeclared exception!
      try { 
        Utility.signatureToString("PcP6iVtNPU>iRFP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PcP6iVtNPU>iRFP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.convertString("\t<");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "?";
      Utility.convertString("?");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?");
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-68);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2810), 3784, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ixor
         // 1:    ior
         // 2:    astore_3
         // 3:    swap
         // 4:    nop
         // 5:    fstore\t\t%149
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.methodSignatureReturnType("DFZ%U/Py06w", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.typeOfSignature("SmD^/r");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SmD^/r");
      try { 
        Utility.typeOfSignature("0 w~)61 GbsLt(oc:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0 w~)61 GbsLt(oc:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Utility.getSignature("`Q`[*yPb=l]XG");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O._.};Z{q");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = Utility.replace("(?m0", "(?m0", "(?m0");
      assertEquals("(?m0", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x1", string1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)62;
      byteArray0[2] = (byte)71;
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)93;
      objectArray0[2] = (Object) (byte)71;
      objectArray0[3] = (Object) constantPool0;
      objectArray0[4] = (Object) "dup2_x1";
      objectArray0[5] = (Object) constantPool0;
      objectArray0[6] = (Object) "dup2_x1";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Utility.convertString("\t<");
      String string0 = Utility.convertString("\t<");
      assertEquals("\t<", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('u');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iflt\t\t#-21174", string1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.methodSignatureReturnType("M2o1AC.t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M2o1AC.t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = 43;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(43);
      Utility.getSignature("(type=");
      try { 
        Utility.methodSignatureArgumentTypes("(type=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `type='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorexit", "monitorexit", "java.lang.H1O", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(ImbJ~*Pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `mbJ~*Pa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantString constantString2 = new ConstantString(1679);
      constantArray0[1] = (Constant) constantString2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)99, 1679);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("? super ");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("OZhvT_.@Fk&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OZhvT_.@Fk&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = Utility.getSignature(";@]eU");
      assertEquals("L;@]eU;", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      try { 
        Utility.methodSignatureReturnType("E_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.methodSignatureReturnType("RTlv.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RTlv.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Bq?6BoI");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Bq?6BoI");
      Utility.isJavaIdentifierPart('.');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Utility.compactClassName(";@]eU", "Y*R^TZ%mnWWLf", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)28;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 242, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40220. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(ImbJ~*Pa", "Qk*U{(x]V=:q&/'k/DG", "(ImbJ~*Pa", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `mbJ~*Pa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      Object object0 = new Object();
      String string1 = Utility.methodSignatureReturnType("L;", false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("L,;V", false);
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Locale.getISOLanguages();
      byte byte0 = Utility.typeOfSignature("F5YXWb,ZNw~_ro9");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.signatureToString("F5YXWb,ZNw~_ro9");
      assertEquals("float", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Utility.getSignature("\t<");
      Utility.typeOfSignature("D//");
      Utility.convertString("R?V;UgU&wt-;h\"h");
      try { 
        Utility.methodSignatureReturnType("a7nGN@3y91U7^t:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `a7nGN@3y91U7^t:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      MockPrintStream mockPrintStream0 = new MockPrintStream("Bq?6BoI");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Bq?6BoI");
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      try { 
        Utility.typeOfSignature("=#`[r^U=OU:Az_>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =#`[r^U=OU:Az_>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature(":3yZ=;96ng");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :3yZ=;96ng
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.isJavaIdentifierPart('a');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)98;
      byte byte0 = (byte)102;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 102
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.replace("qo", "qo", "qo");
      Utility.convertString("HhY8dWu#");
      String string0 = " arg";
      try { 
        Utility.methodSignatureReturnType("HhY8dWu#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HhY8dWu#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Br?$^");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "lload_0";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lload_0", "N", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = Utility.convertString("Br?$^");
      assertEquals("Br?$^", string0);
      
      String string1 = Utility.methodSignatureReturnType("Br?$^");
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.getSignature("`Q`[*yPb=l]XG");
      String string0 = "KV,-zYxGR 4\\]";
      try { 
        Utility.methodSignatureArgumentTypes("KV,-zYxGR 4]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KV,-zYxGR 4]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Utility.getSignature("");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Utility.format((-3128), 75, true, '&');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-3128&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&";
      objectArray0[1] = (Object) "-3128&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      try { 
        Utility.methodSignatureReturnType("RT9.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RT9.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "\t<";
      Utility.getSignature("\t<");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_acmpne\t\t#-16218", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("T~`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T~`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "\n", "<g~{|]9W Cxr:iD(_*=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.compactClassName("KW /.3w$M");
      Utility.isSet((-997), (-997));
      Utility.format(5185, (-997), true, 's');
      try { 
        Utility.methodSignatureReturnType("a6@D8*tO", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `a6@D8*tO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = Utility.replace(", npairs = ", ", npairs = ", ", npairs = ");
      assertEquals(", npairs = ", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)113;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
      
      String string1 = Utility.format((-3), (byte)0, false, 'D');
      assertEquals("-3", string1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)4;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("GKL2(ZU~L3o#txc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GKL2(ZU~L3o#txc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!,;ES");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,;ES
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("KW /D3wLM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KW /D3wLM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = Utility.getSignature("d@");
      assertEquals("Ld@;", string0);
      
      String string1 = Utility.classOrInterface(87);
      assertEquals("class", string1);
      
      int int0 = Utility.setBit(0, (-498));
      assertEquals(16384, int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = Utility.replace(".j<h1= I(", ".j<h1= I(", ".j<h1= I(");
      assertEquals(".j<h1= I(", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".j<h1= I(";
      stringArray0[1] = "areturn";
      stringArray0[2] = ".j<h1= I(";
      String string1 = Utility.methodTypeToSignature("areturn", stringArray0);
      assertEquals("(L/j<h1=;Lareturn;L/j<h1=;)Lareturn;", string1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = Utility.getSignature("*S%");
      assertEquals("L*S%;", string0);
      
      byte byte0 = Utility.typeOfSignature("*S%");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)65;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("KW ?D3wLM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KW ?D3wLM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = Utility.getSignature("int");
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Utility.isSet(27, 27);
      String string0 = "";
      Utility.convertString("");
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = Utility.getSignature("Invlid signatur3: ");
      assertEquals("LInvlid;", string0);
      
      byte byte0 = Utility.typeOfSignature("LInvlid;");
      assertEquals((byte)14, byte0);
      
      try { 
        Utility.decode("LInvlid;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = Utility.classOrInterface(85);
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RoZe5AM^H(";
      stringArray0[1] = "RoZe5AM^H(";
      stringArray0[2] = "class";
      stringArray0[3] = "RoZe5AM^H(";
      stringArray0[4] = "class";
      stringArray0[5] = "class";
      String string1 = Utility.methodTypeToSignature("RoZe5AM^H(", stringArray0);
      assertEquals("(LRoZe5AM^H(;LRoZe5AM^H(;Lclass;LRoZe5AM^H(;Lclass;Lclass;)LRoZe5AM^H(;", string1);
      
      boolean boolean0 = Utility.isSet((-1697), (-1697));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.signatureToString("Invalid signatur3: ", false);
      Utility.classOrInterface(0);
      Utility.fillup("bky5xU.uM!.wcayXw6", 0, true, '?');
      Utility.fillup("Invalid signatur3: ", 6044, true, '?');
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<g~{|]9W Cxr:iD(_*=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <g~{|]9W Cxr:iD(_*=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      Utility.typeOfSignature("C_'C.oU!H?#~{Et");
      try { 
        Utility.typeOfSignature("Ejkps!F'>e>AD=M[)rw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ejkps!F'>e>AD=M[)rw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      try { 
        Utility.typeOfMethodSignature("w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("null, null, null, null, null, null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null, null, null, null, null, null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".j<h1= I(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .j<h1= I(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C_'C.oU!H?#~{Et");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(s$art_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (s$art_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+N`7SOd`Y ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N`7SOd`Y 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = Utility.format(4015, 93, false, '9');
      assertEquals("999999999999999999999999999999999999999999999999999999999999999999999999999999999999999994015", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YA%i5~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YA%i5~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.signatureToString("ZIZLJM$,n", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)24;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-75);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      int int0 = Utility.setBit((-343), 5);
      assertEquals((-343), int0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean1 == boolean0);
      
      int int1 = Utility.clearBit((-343), 475);
      assertEquals((-134218071), int1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SmD^/r");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("u.3^2Kf/\"&Fo H<jS", false);
      assertEquals(17, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("\")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \")
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RG:xK47n=i9,D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RG:xK47n=i9,D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'uc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'uc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = Utility.signatureToString("CMyMQxe=GAg", false);
      assertEquals("char", string0);
      
      String string1 = Utility.accessToString((-732));
      assertEquals("protected synchronized native abstract strictfp synthetic annotation enum", string1);
      
      int int0 = Utility.setBit((-732), (-732));
      assertEquals((-716), int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = Utility.convertString("&H]`K&_lKZ7Gc(");
      assertEquals("&H]`K&_lKZ7Gc(", string0);
      
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Utility.signatureToString("V");
      String string0 = Utility.getSignature("V");
      assertEquals("LV;", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("6J7H\"Ag");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6J7H\"Ag
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.replace("(?m0", "(?m0", "(?m0");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "P&*86nqPkjMz", "/B@$ L0hG6MN#", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = "[GP&\\!dMB \\(&N";
      Utility.typeOfSignature("[GP&!dMB (&N");
      try { 
        Utility.methodSignatureReturnType("[GP&!dMB (&N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GP&!dMB (&N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = Utility.getSignature("<Ly{,k/}nsy,=34=");
      assertEquals("L<Ly{,k/}nsy,=34=;", string0);
      
      Utility.printArray((Object[]) null, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.replace("<Ly{,k/}nsy,=34=", "areturn", (String) null);
      assertEquals("<Ly{,k/}nsy,=34=", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)8;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FM{7~vks";
      stringArray0[1] = "FM{7~vks";
      stringArray0[2] = "FM{7~vks";
      stringArray0[3] = "FM{7~vks";
      stringArray0[4] = "FM{7~vks";
      stringArray0[5] = "FM{7~vks";
      String string0 = Utility.methodTypeToSignature("FM{7~vks", stringArray0);
      assertEquals("(LFM{7~vks;LFM{7~vks;LFM{7~vks;LFM{7~vks;LFM{7~vks;LFM{7~vks;)LFM{7~vks;", string0);
      
      String string1 = Utility.compactClassName("oGlG+IQ<-Kk9Gf >");
      assertEquals("oGlG+IQ<-Kk9Gf >", string1);
      
      byte byte0 = Utility.typeOfSignature("FM{7~vks");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(" ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)81;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("Xyxc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xyxc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%rcX:$t7~J<vK~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %rcX:$t7~J<vK~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Utility.accessToString(1272);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1336, 1336, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[!ItL_ 8W>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [!ItL_ 8W>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H?N3f;1-b6i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H?N3f;1-b6i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = Utility.signatureToString("COSTANT_Fieldref", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[GP&!dMB (&N");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = "putstatic";
      String string1 = "";
      // Undeclared exception!
      Utility.replace("putstatic", "", "putstatic");
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)95;
      byteArray0[4] = (byte) (-113);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iV");
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte)92);
      assertEquals("0:    isub\n1:    swap\n2:    nop\n3:    nop\n4:    d2l\n5:    bipush\t\t84\n7:    dup2\n8:    pop2\n", string0);
      
      String string1 = Utility.signatureToString("D4\"AJ=vx(T6*", false);
      assertEquals("double", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)84;
      String string2 = Utility.printArray(objectArray0, false);
      assertEquals("84", string2);
      
      int int0 = Utility.setBit((byte)100, (byte)92);
      assertEquals(268435556, int0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-38);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("OD$fe$d2$da");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OD$fe$d2$da
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      MockFile mockFile0 = new MockFile("java.lang.");
      MockFile mockFile1 = new MockFile(mockFile0, "cS7?=@..$R`KoI");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('5');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printStream0, objectArray0);
      assertEquals(4L, mockFile1.length());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Utility.isSet(54, 54);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XW=@J@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XW=@J@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.typeOfSignature("Invlid signatur3: ");
      Utility.isSet(443, (byte)10);
      Utility.methodSignatureReturnType("Invlid signatur3: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&!}UMr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &!}UMr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid signatur3: ", false);
      assertEquals("int", string0);
      
      String string1 = Utility.classOrInterface(0);
      assertEquals("class", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("class", stringArray0);
      assertEquals("()Lclass;", string2);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M/xZhx4^cZ7]$3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M/xZhx4^cZ7]$3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte)57);
      assertEquals("0:    isub\n1:    swap\n2:    fadd\n3:    iload_3\n4:    d2l\n5:    bipush\t\t84\n7:    dstore\t\t%88\n", string0);
      
      Utility.signatureToString("D4\"AJ=vx(T6*", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)84;
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("84", string1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signatur3: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Fieldref", false);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("8s![8(!`ihJgX),%b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8s![8(!`ihJgX),%b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Utility.isSet(32, 32);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signatur3: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.methodSignatureReturnType("Invalid signatur3: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.convertString("\r");
      try { 
        Utility.methodSignatureReturnType("\\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid signatur3: ", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = Utility.convertString("A1|o5n@t('ica?11");
      assertEquals("A1|o5n@t(\\'ica?11", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("A1|o5n@t('ica?11", (String) null, "Illegally nested brackets:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A1|o5n@t('ica?11
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = Utility.compactClassName("ky5xU/uM!.wcayXw6", "b", false);
      assertEquals("ky5xU.uM!.wcayXw6", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_2", string1);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A?N3f;1-b6i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A?N3f;1-b6i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface((-1279));
      assertEquals("interface", string0);
      
      // Undeclared exception!
      try { 
        Utility.replace("athrow", (String) null, ";'G=bn;VBD)b3G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.accessToString((-1618518603), false);
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaWriter", (String[]) null);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Utility.compactClassName("aZX*t%;DR", "aZX*t%;DR", true);
      Utility.isSet(255, 1140);
      Utility.isSet(255, 85);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)1;
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("invokeinterface");
      Utility.compactClassName("putfield", "", false);
      try { 
        Utility.methodSignatureReturnType("invokeinterface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.clearBit((-1), (-1));
      Utility.setBit(112, (-1));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("WDmFi", "?>...", "WDmFi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WDmFi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = Utility.clearBit(20, 67);
      assertEquals(20, int0);
      
      String string0 = Utility.accessToString(533, false);
      assertEquals("public protected final interface", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = Utility.isSet(611, (-2577));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("G$ZD?WP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G$ZD?WP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = Utility.signatureToString("IZLJM$,!", false);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-75);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      int int0 = Utility.setBit((-343), 5);
      assertEquals((-343), int0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean1 == boolean0);
      
      int int1 = Utility.clearBit((-343), 475);
      assertEquals((-134218071), int1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("'I7ZJQW4>6IGUW+P[j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "kr}l");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "kr}l";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = Utility.compactClassName("monitorexit", "kr}l", true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = "Exception while looking for class ";
      Utility.getSignature("Exception while looking for class ");
      Utility.setBit(3553, (-1279));
      String string1 = "FS+=lThC^/%SWZ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.ConstantLong", "LException;", "FS+=lThC^/%SWZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ConstantLong
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      boolean boolean0 = true;
      String string0 = Utility.format((-4114), 1278, false, ')');
      Utility.classOrInterface((-4114));
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Utility.isJavaIdentifierPart('o');
      // Undeclared exception!
      try { 
        Utility.signatureToString(", low = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, low = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Utility.isSet(32, 32);
      String string0 = "\"";
      Utility.convertString("\"");
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface(32);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte) (-115);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(4456);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("fastore", string1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "<id4`V~";
      objectArray0[3] = (Object) "<id4`V~";
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2418), (-2418));
      try { 
        Utility.typeOfMethodSignature("null, null, <id4`V~, <id4`V~, null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null, null, <id4`V~, <id4`V~, null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Utility.isJavaIdentifierPart('o');
      boolean boolean0 = true;
      Utility.format((-800), 63, true, 't');
      Utility.classOrInterface((-800));
      try { 
        Utility.typeOfSignature("putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"$l$8b$I$A$A$A$A$A$A$A\", \"$l$8b$I$A$A$A$A$A$A$A\", \"$l$8b$I$A$A$A$A$A$A$A\"}", string1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)82;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("PY`.FJm{tF.L]> |^_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PY`.FJm{tF.L]> |^_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.searchOpcode("{java.lang.Object@61ebbdd3, java.lang.Object@1e539dc6, java.lang.Object@23723afa}");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 71
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.accessToString(86);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)74;
      Utility.encode(byteArray0, false);
      String string0 = "r2qhy3~@=W|On(f";
      Utility.compactClassName("r2qhy3~@=W|On(f", false);
      String string1 = "anewarray";
      Utility.compactClassName("anewarray", "lK$@oCKVMNF{Zv'(]k2", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lK$@oCKVMNF{Zv'(]k2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lK$@oCKVMNF{Zv'(]k2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = Utility.compactClassName("xky5xD/VuM!.wcaCXw6", "", true);
      assertEquals("xky5xD.VuM!.wcaCXw6", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte) (-10);
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte) (-77);
      byteArray1[5] = (byte)89;
      byteArray1[6] = (byte)89;
      byteArray1[7] = (byte)89;
      byteArray1[8] = (byte) (-115);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object0;
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.printArray((Object[]) stringArray0, false);
      assertNotNull(string0);
      assertEquals("null, null", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)76;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-53);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte)104);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = "b";
      Utility.isSet((-283), 26);
      // Undeclared exception!
      try { 
        Utility.signatureToString("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "\"E2{s!pgPO";
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"E2{s!pgPO", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"E2{s!pgPO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.compactClassName("xky5xD/VuM!.wcaCXw6", "", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "areturn", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Utility.signatureToString("Synthetic");
      try { 
        Utility.methodSignatureArgumentTypes("\t(wide/)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide/)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" skipped", " skipped", " skipped");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  skipped
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = Utility.compactClassName("xky5xD/VuM!.wcaCXw6", "", true);
      assertEquals("xky5xD.VuM!.wcaCXw6", string0);
      
      String string1 = Utility.replace("LL:;;V", "LL:;;V", "*G|#Bj+?XFxc");
      assertEquals("*G|#Bj+?XFxc", string1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 0, 3214);
      String string0 = Utility.accessToString(0);
      assertEquals("", string0);
      
      byte[] byteArray1 = Utility.decode("<$\"vc,=ql%A?", false);
      assertEquals(11, byteArray1.length);
      
      String string1 = Utility.compactClassName("");
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
      
      int int1 = Utility.clearBit((-1), 83);
      assertEquals((-524289), int1);
      
      String string2 = Utility.fillup("", 3214, false, 'V');
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-4);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)97;
      objectArray0[1] = (Object) (byte) (-4);
      objectArray0[2] = (Object) (byte)63;
      objectArray0[3] = (Object) (byte)63;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{97, -4, 63, 63}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{97, -4, 63, 63}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.compactClassName("n(q]06dz}1%^(", "5/OtV,0cb7>vD}", true);
      try { 
        Utility.typeOfMethodSignature("hFVL<n_F=JfP?aPnN6b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hFVL<n_F=JfP?aPnN6b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("olbrioWgrk?tm&", "olbrioWgrk?tm&", true);
      try { 
        Utility.methodSignatureReturnType("olbrioWgrk?tm&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `olbrioWgrk?tm&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte) (-50);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("xky5xD/VuM!.wcaCXw6", "g`6AA[iD?^v+/;#", "_c}{o/pv|^Oh6K+z.'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xky5xD/VuM!.wcaCXw6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.searchOpcode("s=Hf=k[5p)Wm3,Iw8S:");
      String string0 = "";
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureArgumentTypes("s=Hf=k[5p)Wm3,Iw8S:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s=Hf=k[5p)Wm3,Iw8S:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = "S+$Ex`o?+\"r/%qV[ll>";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "c~N`~wFwsj/r1{*i", "S+$Ex`o?+\"r/%qV[ll>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = "Synthetic";
      Utility.methodSignatureReturnType("Synthetic");
      try { 
        Utility.methodSignatureArgumentTypes("\t(wide/)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide/)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      int int0 = Utility.clearBit(31, 0);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.replace("java.lang.StringBuffer", "3'?FD<", "java.lang.StringBuffer");
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.accessToString((-2374), true);
      assertEquals("private static final transient abstract synthetic annotation enum", string0);
      
      int int0 = Utility.setBit((-2374), 254);
      assertEquals((-2374), int0);
      
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-2374), 1499, true);
      int int1 = Utility.clearBit(3, 667);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Utility.compactClassName("xky5xD/VuM!.wcaCXw6", "", true);
      try { 
        Utility.typeOfMethodSignature("LL:;;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LL:;;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.accessToString((-2374), true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[A94sp4-8bIkbeh4Eo", "private static final transient abstract synthetic annotation enum", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = Utility.compactClassName("_}uu_FCsUJ%Z7-j[^KQ", "7c,j^<:a5r>", false);
      assertEquals("_}uu_FCsUJ%Z7-j[^KQ", string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[A94sp4-8bIkbeh4Eo", "[A94sp4-8bIkbeh4Eo", "[A94sp4-8bIkbeh4Eo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [A94sp4-8bIkbeh4Eo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = Utility.accessToString((-2374), true);
      assertEquals("private static final transient abstract synthetic annotation enum", string0);
      
      int int0 = Utility.setBit((-2374), 254);
      assertEquals((-2374), int0);
      
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2374), 1499, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.replace("", ">", "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      stringArray0[2] = "Invalid constant pool reference: ";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.accessToString(0, true);
      Utility.printArray((Object[]) stringArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byte byte0 = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-94);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lF<US1vb\\", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lF<US1vb\\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = "A/>iT;1 <&IC<Mt/`";
      try { 
        Utility.typeOfMethodSignature("A/>iT;1 <&IC<Mt/`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A/>iT;1 <&IC<Mt/`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      boolean boolean0 = false;
      Utility.compactClassName("", false);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = "";
      Utility.replace("org.apache.bcel.classfile.Utility$1", ", high = ", "");
      int int0 = (-491);
      boolean boolean0 = false;
      Utility.fillup(" '(@g]2@B[o", (-491), false, '!');
      String string1 = "class";
      Utility.decode("class", false);
      Utility.clearBit((-491), (-591));
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = Utility.fillup("Bo)u | F'", 154, true, '{');
      assertEquals("Bo)u | F'{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      Utility.isJavaIdentifierPart('\\');
      Utility.format(0, 180, false, 't');
      Utility.classOrInterface(180);
      try { 
        Utility.typeOfSignature("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-12);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "d#HRd2S$";
      int int0 = (-299);
      int int1 = (-2151);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      int int2 = 118;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.clearBit(0, (-1689));
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = Utility.compactClassName("xky5xD/VuM!.wcaCXw6", "", false);
      assertEquals("xky5xD.VuM!.wcaCXw6", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3'?FD<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3'?FD<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(")c&cvn2gr_I\fYsU7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c&cvn2gr_I\fYsU7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = Utility.format(610, 610, false, '#');
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(59, 0);
      try { 
        Utility.decode("<", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = "{|";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("{|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('7');
      Utility.toHexString(byteArray0);
      File file0 = MockFile.createTempFile("00 eb ae 06 00 bb 00", "00 eb ae 06 00 bb 00");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "00 eb ae 06 00 bb 00";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)6;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) "short";
      objectArray0[6] = (Object) (byte) (-69);
      objectArray0[7] = (Object) (byte) (-69);
      PrintStream printStream0 = mockPrintStream0.format("short", objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) file0;
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) (byte)0;
      objectArray1[3] = (Object) (byte)0;
      objectArray1[4] = (Object) (byte) (-82);
      objectArray1[5] = (Object) (byte) (-69);
      objectArray1[6] = object0;
      objectArray1[7] = (Object) (byte)6;
      objectArray1[8] = (Object) (byte) (-82);
      Utility.printArray(printStream0, objectArray1);
      //  // Unstable assertion: assertEquals(163L, file0.length());
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RRuhW";
      stringArray0[1] = "RRuhW";
      stringArray0[2] = "RRuhW";
      stringArray0[3] = "RRuhW";
      stringArray0[4] = "RRuhW";
      stringArray0[5] = "RRuhW";
      stringArray0[6] = "RRuhW";
      Utility.methodTypeToSignature("RRuhW", stringArray0);
      byte[] byteArray0 = null;
      MockFile mockFile0 = new MockFile("RRuhW", "\r");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "RRuhW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"RRuhW\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 0, 3214);
      Utility.isSet(0, 13);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(40, 172, true, 'E');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 39
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "IZLJM$,!";
      stringArray0[1] = "Warning: Padding byte != 0 in ";
      stringArray0[2] = "IZLJM$,!";
      stringArray0[3] = "mt)8$7'qaMW#z";
      stringArray0[4] = "IZLJM$,!";
      Utility.methodTypeToSignature("IZLJM$,!", stringArray0);
      MockFile mockFile0 = new MockFile("akcZ14mT{#+sw", "mt)8$7'qaMW#z");
      File file0 = MockFile.createTempFile("(LIZLJM$,!;LWarning:;LIZLJM$,!;Lmt)8$7'qaMW#z;LIZLJM$,!;)LIZLJM$,!;", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      try { 
        Utility.methodSignatureArgumentTypes("caload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: caload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[A94sp4-8bIkbeh4Eo", "[A94sp4-8bIkbeh4Eo", "[A94sp4-8bIkbeh4Eo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [A94sp4-8bIkbeh4Eo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ba^7j0[;b";
      stringArray0[1] = "ba^7j0[;b";
      stringArray0[2] = "ba^7j0[;b";
      stringArray0[3] = "ba^7j0[;b";
      stringArray0[4] = "ba^7j0[;b";
      stringArray0[5] = "ba^7j0[;b";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("ba^7j0[;b", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[;b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.convertString("vm");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)5;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = "r5QF";
      try { 
        Utility.methodSignatureArgumentTypes("r5QF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r5QF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = "Synthetic";
      Utility.convertString("Synthetic");
      try { 
        Utility.methodSignatureArgumentTypes("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("o$A");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3522, (byte)0);
      constantArray0[1] = (Constant) constantNameAndType0;
      int int0 = (-2632);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2632), (-465));
      constantArray0[2] = (Constant) constantMethodHandle0;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 29, true, '\"');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
