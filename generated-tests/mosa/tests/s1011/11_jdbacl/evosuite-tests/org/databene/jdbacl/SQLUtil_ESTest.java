/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:43:00 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.io.VFMemoryStorageFactory;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.innerJoin((String) null, stringArray0, "tR:e^@!VsmZWqw", "||", stringArray0);
      assertEquals("tR:e^@!VsmZWqw as || on null.null = ||.null and null.null = ||.null and null.null = ||.null and null.null = ||.null", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("IfWWH6;Ik7X", stringArray0, "?~e%", "IfWWH6;Ik7X", stringArray0);
      assertEquals("left join ?~e% as IfWWH6;Ik7X on ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SchemaDescriptor.SQLJ_SCHEMA_UUID;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("c013800d-00fb-2648-07ec-000000134f30");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1597);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1597);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      VFMemoryStorageFactory vFMemoryStorageFactory0 = new VFMemoryStorageFactory();
      vFMemoryStorageFactory0.getCanonicalName();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d(Pp5=QFSV!FB+)Pv@)");
      String string0 = SQLUtil.normalize("d(Pp5=QFSV!FB+)Pv@)", false);
      assertEquals("d (Pp5 = QFSV ! FB +) Pv @)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("(, )");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderValue("null = null AND null = null");
      assertEquals("'null = null AND null = null'", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{n^6lDI_");
      DBDataType dBDataType0 = DBDataType.getInstance(748, "{n^6lDI_");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{n^6lDI_", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("{n^6lDI_ {N^6LDI_(0) NULL", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("{n^6lDI_.{n^6lDI_", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(33, "execute");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("execute EXECUTE NULL", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PFt][$", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      dBPrimaryKeyConstraint0.equals("PFt][$");
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
      
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, )", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema("null = null AND null = null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null = null AND null = null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      defaultDBTable0.getReferrers();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("oNCLOB", false, defaultDBTable0, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      Random.setNextRandom(90085);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CU1U!U%<;S";
      stringArray0[1] = "CU1U!U%<;S";
      stringArray0[2] = "CU1U!U%<;S";
      stringArray0[3] = "alter session";
      stringArray0[4] = null;
      stringArray0[5] = "CU1U!U%<;S";
      String string0 = SQLUtil.join((String) null, "CU1U!U%<;S", stringArray0, "alter session", "CU1U!U%<;S", stringArray0);
      assertEquals("alter session as CU1U!U%<;S on CU1U!U%<;S.CU1U!U%<;S = CU1U!U%<;S.CU1U!U%<;S and CU1U!U%<;S.CU1U!U%<;S = CU1U!U%<;S.CU1U!U%<;S and CU1U!U%<;S.CU1U!U%<;S = CU1U!U%<;S.CU1U!U%<;S and CU1U!U%<;S.alter session = CU1U!U%<;S.alter session and CU1U!U%<;S.null = CU1U!U%<;S.null and CU1U!U%<;S.CU1U!U%<;S = CU1U!U%<;S.CU1U!U%<;S", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0?6cEk'()-", defaultDBTable0, (-1036), "update*");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.0?6cEk'()-", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("PRIMARY KEY (, )", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.null", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.normalize("select itooutrc - & w", false);
      SQLUtil.substituteMarkers("select itooutrc - & w", "J]X*?hWx", "J]X*?hWx");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?($1Z1Xoy]D";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ?($1Z1Xoy]D = '?($1Z1Xoy]D'", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oNCLOB";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("oNCLOB", true, defaultDBTable0, stringArray0);
      defaultDBTable0.removeIndex(dBNonUniqueIndex0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "oNCLOB", true, stringArray0);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT oNCLOB UNIQUE (, oNCLOB, , )", string0);
      
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT oNCLOB ", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oNCLOB";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("oNCLOB", true, defaultDBTable0, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "oNCLOB", true, stringArray0);
      dBUniqueConstraint0.setName("alter indexonclob");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"alter indexonclob\" ", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      DBSchema dBSchema0 = new DBSchema("k&U{M");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "rename", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBUniqueConstraint0.setDoc("pB");
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT rename UNIQUE (, )", string1);
      
      String string2 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("rename.rename", string2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.isDML("8<*[$PQ#Vy8QS<8'");
      StringBuilder stringBuilder0 = new StringBuilder("8<*[$PQ#Vy8QS<8'");
      SQLUtil.addRequiredCondition("8<*[$PQ#Vy8QS<8'", stringBuilder0);
      assertEquals("8<*[$PQ#Vy8QS<8' and 8<*[$PQ#Vy8QS<8'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("execute", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.isDML("NCLOB");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "exec13f1x&n+jbn");
      SQLUtil.addOptionalCondition("exec13f1x&n+jbn", stringBuilder0);
      assertEquals("exec13f1x&n+jbn or exec13f1x&n+jbn", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = TypeId.INTEGER_NAME;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate;");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^p]^T>yHa0} 0pp+g");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^p]^T>yHa0} 0pp+g", defaultDBTable0, 2147483645, "^p]^T>yHa0} 0pp+g");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("^P]^T>YHA0} 0PP+G", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableupdate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.normalize("execute42x77", false);
      String string0 = SchemaDescriptor.SQLJ_SCHEMA_UUID;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute42x77");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.normalize("aL6vE+z746yV*&1#;p", false);
      DBCatalog dBCatalog0 = new DBCatalog("- ");
      DBSchema dBSchema0 = new DBSchema("- ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("aL6vE + z746yV * & 1 # ; p", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(122, "8.NxJcHDJ]");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aL6vE + z746yV * & 1 # ; p", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = Dependable.ROUTINE_PERMISSION;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{//:%fn_AV{b");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "{//:%fn_AV{b");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("37K|Frq|hM,Vs");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 427);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("select itooutrc - & w", true);
      assertEquals("select itooutrc - & w", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[4];
      DBSchema dBSchema0 = new DBSchema("kXv}");
      defaultDBTable0.setSchema(dBSchema0);
      stringArray0[0] = "fm{~kRK*'";
      stringArray0[2] = "kXv}";
      stringArray0[3] = "kXv}";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "kXv}", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String string1 = SQLUtil.removeComments("inner");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("aL6vE+z746yV*&1#;p", false);
      assertEquals("aL6vE + z746yV * & 1 # ; p", string0);
      
      String string1 = SQLUtil.removeComments("aL6vE + z746yV * & 1 # ; p");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      defaultDBTable0.getReferrers();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("GnT`t{", true, defaultDBTable0, "oNCLOB");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.removeComments("GnT`t{");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("GnT`t{");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("constraint");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema constraint", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.iapi.services.cache.CacheFactory", true);
      assertEquals("org.apache.derby.iapi.services.cache.CacheFactory", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("0?6cEk'()-", defaultDBTable0, (-64416996), "0?6cEk'()-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewprepare called with current xid");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("({Ti-,", defaultDBTable0, (-1911), "({Ti-,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ({Ti-,
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT gid FROM pg_prepared_xacts");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("wd'L'EVm{i-\"", false);
      assertEquals("wd 'L' EVm { i - \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("|VT@@0sf%rx/+H3%|/M", false);
      assertEquals("| VT @ @ 0sf % rx / + H3 % | / M", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VFMemoryStorageFactory vFMemoryStorageFactory0 = new VFMemoryStorageFactory();
      vFMemoryStorageFactory0.getCanonicalName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select itooutrc - & w");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~wF=C_NT6/;9yA*");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      boolean boolean0 = SQLUtil.isDML("~wF=C_NT6/;9yA*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, 2262, "table null");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = new Integer(2262);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter session", defaultDBTable0, (DBDataType) null, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer1 = new Integer(2262);
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("alter session", defaultDBTable0, (DBDataType) null, integer1, integer2);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("table null, alter session, alter session", string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "w5qek5=R.,";
      StringBuilder stringBuilder0 = new StringBuilder(601);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("select into-7dl4", stringBuilder0);
      int int0 = (-361720736);
      // Undeclared exception!
      try { 
        stringBuilder1.appendCodePoint((-361720736));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("F,xYHoCLF]6A}", false);
      assertEquals("F, xYHoCLF ] 6A }", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      TableContainer tableContainer0 = new TableContainer("null = null AND null = null");
      String string1 = SQLUtil.substituteMarkers("null = null AND null = null", "null = null AND null = null", tableContainer0);
      assertEquals("null = null AND null = null", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("i94)v7.^I].F ", false);
      assertEquals("i94) v7.^ I ].F", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("indexOfSessionTableNamesInSavedObjects");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 427);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1.0;
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[1];
      defaultDBTable0.getColumnNames();
      stringArray0[0] = "D/ fx/]SD";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "oNCLOB", true, stringArray0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.normalize("aL6vE+z746yV*&1#;p", false);
      String string0 = LanguageConnectionContext.xidStr;
      SQLUtil.mutatesDataOrStructure("alter session");
      StringReader stringReader0 = new StringReader("(XID = ");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "inner";
      stringArray0[1] = "inner";
      stringArray0[2] = "inner";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("inner", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string1 = SQLUtil.removeComments("|vt@@0");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(851, "CLOB");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer2);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CLOB CLOB NULL", string0);
      
      SQLUtil.removeComments("QXN");
      boolean boolean1 = SQLUtil.isDML("`");
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#2_\"^Z";
      stringArray0[1] = "QXN";
      stringArray0[2] = "`";
      stringArray0[3] = "`";
      stringArray0[4] = "QXN";
      stringArray0[5] = "#2_\"^Z";
      stringArray0[6] = "`";
      stringArray0[7] = "CLOB CLOB NULL";
      stringArray0[8] = "QXN";
      String string1 = SQLUtil.renderColumnListWithTableName("#2_\"^Z", stringArray0);
      assertEquals("#2_\"^Z.#2_\"^Z, #2_\"^Z.QXN, #2_\"^Z.`, #2_\"^Z.`, #2_\"^Z.QXN, #2_\"^Z.#2_\"^Z, #2_\"^Z.`, #2_\"^Z.CLOB CLOB NULL, #2_\"^Z.QXN", string1);
  }
}
