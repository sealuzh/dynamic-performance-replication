/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:29:20 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?(?(?P<", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P\u0000-x{10FFFF}]", 12);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Regexp regexp0 = Parser.parse("C", 116);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "?c(oZ^1pTOBr'201^2";
      try { 
        Parser.parse("?c(oZ^1pTOBr'201^2", (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":]", 60);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", (-1008));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 65576);
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp regexp2 = new Regexp(regexp0);
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      int int0 = 69816;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 65576, 120777);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65576
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "\\'";
      int int0 = 132;
      Regexp regexp0 = Parser.parse("^", 49);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 49, 4305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 97;
      String string0 = "?";
      try { 
        Parser.parse("?", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 1);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3372, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{p{", 65576);
      String string0 = "[:;]";
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      int int0 = 134;
      Regexp regexp3 = new Regexp(regexp0);
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      Regexp regexp4 = new Regexp(regexp0);
      regexp0.toString();
      String string1 = "@u+v 3+0/>!m@Cf";
      Parser parser0 = new Parser(string1, int0);
      Regexp regexp5 = new Regexp(regexp2);
      int int1 = 244;
      Parser.parse(string0, int0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp6 = new Regexp(regexp_Op1);
      Regexp regexp7 = new Regexp(regexp6);
      Regexp regexp8 = Parser.parse(string1, int1);
      assertNotSame(regexp8, regexp0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = (-783);
      String string0 = "{,\\p{";
      Regexp regexp0 = Parser.parse("{,p{", (-783));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = null;
      int int1 = (-1710);
      int int2 = 123;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$", 608);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 608, (-97));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Parser.parse("])", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = (-2327);
      try { 
        Parser.parse("+?6\r", (-2327));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|9", 472);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = (-4887);
      try { 
        Parser.parse("|2?2)l,~ F", (-4887));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Parser parser0 = new Parser("PPE", (-932));
      assertNotNull(parser0);
      
      try { 
        Parser.parse("<?) [Y.V", (-391));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-4887);
      String string0 = "|?2)l,~ F";
      try { 
        Parser.parse("|?2)l,~ F", (-4887));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 309;
      Regexp regexp0 = Parser.parse("l.", 309);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      String string0 = regexp0.name;
      assertNull(string0);
      
      String string1 = "6t";
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 309);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        Parser.parse("(", 272);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = ")$tRC*X/Vwv$-,7_Qc";
      int int0 = (-3108);
      try { 
        Parser.parse(")$tRC*X/Vwv$-,7_Qc", (-3108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      try { 
        Parser.parse("*.+8qHG=mteZUf^", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 728;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      try { 
        Parser.parse("w.1X)", 728);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "$\\wU\\Pz;P)q";
      int int0 = 3133;
      try { 
        Parser.parse("$wUPz;P)q", 3133);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-43);
      int int1 = (-1588);
      String string0 = "((?P<";
      try { 
        Parser.parse("((?P<", (-43));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Parser.parse("C(c", 33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `C(c`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "|2|S2)l,|~gF";
      int int0 = 97;
      try { 
        Parser.parse("|2|S2)l,|~gF", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("(?(?P<", 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "(?";
      try { 
        Parser.parse("(?", 588);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p!00-x{10FFF}", 96);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = (-75);
      try { 
        Parser.parse("z[", (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-4887);
      Regexp regexp0 = Parser.parse("p_", (-4887));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PPP", 10188);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "[:-#]<^o}xSg";
      try { 
        Parser.parse("[:-#]<^o}xSg", 2548);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 120);
      assertNotNull(regexp0);
      
      String string0 = "[:ass]";
      int int0 = 81;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = "|2|2)l,|~gF";
      int int1 = 97;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":^", (-2015));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp[] regexpArray1 = new Regexp[6];
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      regexpArray0[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexpArray1[3] = regexp0;
      regexpArray1[5] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 94, 120524);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 94
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("I!|JF{8", 16);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[1] = regexp0;
      regexpArray0[1] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1757), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1757
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p#k{3", 4037);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("p:e", 67);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Parser parser0 = new Parser("-#", (-1887));
      assertNotNull(parser0);
      
      Regexp regexp2 = Parser.parse("8}\u0001ACC{P+uX%98", 65371);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("8}\u0001ACC{P+uX%98", 65371);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      
      Regexp regexp5 = Parser.parse("*", 67);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      Parser parser1 = new Parser("C`", 67);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = (-1872);
      Regexp regexp0 = Parser.parse("\u0005", (-1872));
      assertNotNull(regexp0);
      
      String string0 = "\\D";
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = 199;
      String string1 = "[::4";
      Regexp regexp1 = Parser.parse(string1, int1);
      assertNotSame(regexp1, regexp0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\D`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 33;
      Regexp regexp0 = Parser.parse("x", 33);
      assertNotNull(regexp0);
      
      String string0 = "^[-b%ow";
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-b%ow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "\\3pb";
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 1649, 1649);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      
      Regexp[] regexpArray2 = new Regexp[1];
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      
      int int0 = (-2755);
      Regexp regexp0 = Parser.parse("\u0003pb", (-2755));
      assertNotNull(regexp0);
      
      int int1 = 40;
      int int2 = 1561;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-4899);
      try { 
        Parser.parse("[:", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP", 10188);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp regexp0 = Parser.parse("S", (-1559));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 97;
      try { 
        Parser.parse("|2|2)l1|~gF", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[:;]", (-392));
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-392), 2111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -392
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = new Parser("PE", 472);
      assertNotNull(parser0);
      
      Parser parser1 = new Parser((String) null, 193);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      Regexp regexp0 = Parser.parse("-P\r*pr", (-603));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:-P)(?i:\\r)*?(?i:PR)", string0);
      assertNotNull(string0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 66639, 65);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 2600);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("dMEk|.OcC`5SDtS", 2600);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 8308;
      try { 
        Parser.parse("|2|2)l1|~gF", 8308);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "K\\pP\\C\\";
      Regexp regexp0 = Parser.parse("KpPC", (-4895));
      assertNotNull(regexp0);
      
      int int0 = 116;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "@l1h{67&jUfw)u'k";
      try { 
        Parser.parse("@l1h{67&jUfw)u'k", (-559));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-32);
      String string0 = "\\f";
      int int1 = 272;
      Regexp regexp0 = Parser.parse("\f", 272);
      assertNotNull(regexp0);
      
      String string1 = "$-.e";
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-32));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[;]", 44);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser((String) null, 7525);
      assertNotNull(parser0);
      
      int int0 = 49;
      try { 
        Parser.parse("+.oR\fp", 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 6;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("@l1h{67&jUfw|uM'k", 751);
      assertNotNull(regexp0);
      
      int int1 = (-350);
      Regexp regexp1 = Parser.parse("@l1h{67&jUfw|uM'k", (-350));
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = "Q{u 4TowY {o4";
      Regexp regexp2 = Parser.parse("PD", 751);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      String string1 = regexp2.toString();
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertEquals("(?i:PD)", string1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Regexp regexp3 = Parser.parse(";P1z;+\u0007T>d", 8);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp2;
      int int2 = 12314;
      int int3 = 2321;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "0sh9?*U\\";
      int int0 = (-2456);
      try { 
        Parser.parse("0sh9?*U", (-2456));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `?*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "4-[]Kk-Dg";
      int int0 = 93;
      try { 
        Parser.parse("4-[]Kk-Dg", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `k-D`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Parser.parse("O|9D[c:`-", 2760);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[c:`-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("D", 116);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("4[T]FKk-Dg", (-491));
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8126, 214);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-428);
      String string0 = "tN[e{87MV*\\";
      try { 
        Parser.parse("tN[e{87MV*", (-428));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[e{87MV*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 2548;
      Regexp regexp0 = Parser.parse("[x0&PJ{10FF}]", 2548);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      String string0 = "\\x";
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "&L*g#cz%&k>";
      int int1 = 271;
      Regexp regexp2 = Parser.parse(string1, int1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertNotSame(regexpArray1, regexpArray0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      
      String string2 = null;
      String string3 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string3, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "\\p{";
      try { 
        Parser.parse("|2|2X)l,|~gF", 96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "| |2)l1|~gF";
      try { 
        Parser.parse("| |2)l1|~gF", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 6824;
      try { 
        Parser.parse("([-#]<^o}xSg", 6824);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `([-#]<^o}xSg`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "\\P2EZK^p";
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("A", (-1622));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("A", (-1622));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp2;
      int[] intArray0 = new int[3];
      intArray0[0] = 81;
      intArray0[1] = 81;
      intArray0[2] = (-1622);
      regexp1.runes = intArray0;
      Regexp regexp4 = Parser.parse("\b", 81);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp2);
      assertTrue(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp5);
      
      regexpArray0[5] = regexp5;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp6 = new Regexp(regexp_Op0);
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotNull(regexp6);
      
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse("A", (-673));
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp1);
      assertTrue(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp1));
      assertNotNull(regexp7);
      
      regexpArray0[7] = regexp7;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp8 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp0));
      assertNotNull(regexp8);
      
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 81, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 81
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "\\3";
      int int0 = 36;
      Regexp regexp0 = Parser.parse("\u0003", 36);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int1 = (-637);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFFQ]", (-255));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-235));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 10188;
      String string0 = "\\x{";
      int[] intArray0 = new int[3];
      intArray0[0] = 10188;
      intArray0[1] = 10188;
      Regexp regexp0 = Parser.parse("x{", 10188);
      assertNotNull(regexp0);
      
      String string1 = "~\"|C'U\"m8-^ip@XY$F0";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotSame(regexp1, regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = 8059;
      Regexp regexp2 = Parser.parse(string0, int1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "\\xU";
      int int0 = (-4895);
      Regexp regexp0 = Parser.parse("xU", (-4895));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      int int1 = 10222;
      int int2 = 8520;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4-[T]Kk-Dg", (-495));
      assertNotNull(regexp0);
      
      regexp0.name = "Bk><Bn9]od<>#|-\">{}";
      regexp0.name = "4-[T]Kk-Dg";
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-495), 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -495
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4/w*Ok1*>]>{B j&,XN", (-4734));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp0.name = "ltX[_]I";
      Parser parser0 = new Parser("Any", (-932));
      assertNotNull(parser0);
      
      Regexp regexp2 = Parser.parse("pP'hc#v", 90);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      Regexp regexp3 = Parser.parse("ltX[_]I", (-880));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-4734), 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4734
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "(?-:$)";
      try { 
        Parser.parse("(?-:$)", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "|2|2X)l,|~gF";
      String string1 = "(?i:";
      try { 
        Parser.parse("(?i:", (-4887));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Parser.parse("(?mP<(P<(;l-P<", (-4899));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?mP`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C<(?:)", (-1339));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 156;
      String string0 = "byJ\\2EZK^p";
      Regexp regexp0 = Parser.parse("byJ\u0002EZK^p", 156);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = null;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "T&\\x/@RR(s]`";
      try { 
        Parser.parse("T&x/@RR(s]`", (-2327));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `T&x/@RR(s]``
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", (-3267));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "\\B";
      int int0 = 3008;
      Regexp regexp0 = Parser.parse("B", 3008);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = 375;
      Regexp regexp1 = Parser.parse("B", 375);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      String string1 = "?e%W";
      String string2 = "\\6";
      Regexp regexp3 = new Regexp(regexp1);
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("\u0006", 3008);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp3);
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp3));
      assertFalse(regexp3.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertNotNull(regexp5);
      
      int int2 = 1759;
      Regexp regexp6 = Parser.parse(string1, int2);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertNotNull(regexp6);
      
      int int3 = (-429);
      Regexp regexp7 = Parser.parse(string1, int3);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp5);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp5));
      assertNotNull(regexp7);
      
      String string3 = null;
      int int4 = 11;
      // Undeclared exception!
      try { 
        Parser.parse(string3, int4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "~}'vPJ\\5'ru";
      int int0 = 97;
      Regexp regexp0 = Parser.parse("~}'vPJ\u0005'ru", 97);
      assertNotNull(regexp0);
      
      int int1 = 96;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp regexp0 = Parser.parse("7\u0001Kdug", 676);
      assertNotNull(regexp0);
      
      int int0 = 1204;
      String string0 = "3";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = (-282);
      Regexp regexp2 = Parser.parse(string0, int1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = new Parser("^x00-x{10FFFF}", (-763));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", (-763));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-763), 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -763
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "\\B";
      Regexp regexp0 = Parser.parse("B", 3008);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 65, 64109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-4887);
      String string0 = "\\v_";
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1802), (-1802));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      
      Parser parser0 = new Parser("v_", (-4887));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("v_", 1981);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp[] regexpArray2 = new Regexp[1];
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      
      regexpArray2[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray2, 1471, 11);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Parser.parse("(?-$F$9", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 65;
      try { 
        Parser.parse("(?-m:$9", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?-m:$9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-4895);
      intArray0[1] = (-4895);
      Parser parser0 = new Parser("KpPC", (-1194));
      assertNotNull(parser0);
      
      String string0 = "(?s:.)";
      Regexp regexp0 = Parser.parse("(?s:.)", (-4895));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("KpPC", 66);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[0] = regexp2;
      Regexp regexp3 = Parser.parse("KpPC", 66);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      regexpArray0[1] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      regexpArray0[2] = regexp4;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      
      regexpArray0[5] = regexp5;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-422), 55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -422
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-4895);
      Regexp regexp0 = Parser.parse("KoaP", (-4895));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("KoaP", 12895);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-4895));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "(saF6ksj`Ts)sku";
      Regexp regexp0 = Parser.parse("(saF6ksj`Ts)sku", (-2356));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = null;
      int int0 = (-858);
      int int1 = 122;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 122, (-858));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 40;
      Regexp regexp0 = Parser.parse("A", (-288));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("A", (-313));
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("eqt;/!", 8579);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[1] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1326), 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1326
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 33;
      String string0 = "^[-b%ow";
      try { 
        Parser.parse("^[-b%ow", 33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-b%ow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Parser.parse("([-#]<^o}xSg", (-800));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `([-#]<^o}xSg`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-684);
      String string0 = "\\4";
      Regexp regexp0 = Parser.parse("\u0004", (-684));
      assertNotNull(regexp0);
      
      int int1 = 120;
      int int2 = 65124;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      int int3 = 1297;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "|TOS9X.";
      Regexp regexp0 = Parser.parse("|TOS9X.", (-519));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      int int0 = (-38);
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 8462, 8462);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      
      Regexp regexp2 = Parser.parse("P(_z.5fj~Qn]L;Kl7", (-38));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      String string1 = null;
      try { 
        Parser.parse("P(_z.5fj~Qn]L;Kl7", (-519));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `P(_z.5fj~Qn]L;Kl7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "[:\\x00-\\x{10FFF}]";
      int int0 = 2548;
      Regexp regexp0 = Parser.parse("[:x00-x{10FFF}]", 2548);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = "F_my";
      Parser parser0 = new Parser("F_my", 2548);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 2548);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "O/NL\\42H,iVZ\"7jD^Z";
      int int0 = 708;
      Regexp regexp0 = Parser.parse("O/NL\"H,iVZ\"7jD^Z", 708);
      assertNotNull(regexp0);
      
      String string1 = "GLy";
      regexp0.reinit();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "[:;]";
      int int0 = 44;
      Regexp regexp0 = Parser.parse("[:;]", 44);
      assertNotNull(regexp0);
      
      String string1 = "xp|Z\\D";
      try { 
        Parser.parse("#Y3V-:\u0000[M.>?=lWwr", 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[M.>?=lWwr`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\u0000-x{10FFFF}]", 2548);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[:\u0000-x{10FFFF}]", 2548);
      assertNotSame(regexp1, regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("xp|ZD", 2548);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp3 = Parser.parse("[:\u0000-x{10FFFF}]", 2548);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp3);
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp6 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertNotNull(regexp6);
      
      regexp6.max = 2548;
      regexp6.name = "[:\u0000-x{10FFFF}]";
      Regexp regexp7 = Parser.parse("[:\u0000-x{10FFFF}]", (-1629));
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp6);
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertNotNull(regexp7);
      
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertSame(regexpArray1, regexpArray0);
      assertNotNull(regexpArray1);
      
      Regexp[] regexpArray2 = new Regexp[6];
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      
      regexpArray2[0] = regexp3;
      regexpArray2[1] = regexp0;
      regexpArray2[2] = regexp1;
      regexpArray2[4] = regexp4;
      regexpArray2[2] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray2, 2548, 43);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "(?-)m:$)";
      int int0 = 97;
      try { 
        Parser.parse("(?-)m:$)", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-)`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 127169);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("PLvqLI1D6]pA", 127169);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("D", 1255);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp_Op0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertNotNull(regexp6);
      
      Regexp regexp7 = new Regexp(regexp2);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp6));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp1));
      assertTrue(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp4));
      assertNotNull(regexp7);
      
      Regexp regexp8 = new Regexp(regexp5);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp5.equals((Object)regexp6));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp7));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp7));
      assertTrue(regexp8.equals((Object)regexp6));
      assertTrue(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp4));
      assertNotNull(regexp8);
      
      Regexp regexp9 = Parser.parse("invalid repeat count", (-1749));
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp4);
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp4));
      assertNotNull(regexp9);
      
      Regexp regexp10 = Parser.parse("F-", (-1749));
      assertNotSame(regexp10, regexp9);
      assertNotSame(regexp10, regexp2);
      assertNotSame(regexp10, regexp6);
      assertNotSame(regexp10, regexp3);
      assertNotSame(regexp10, regexp1);
      assertNotSame(regexp10, regexp8);
      assertNotSame(regexp10, regexp4);
      assertNotSame(regexp10, regexp7);
      assertNotSame(regexp10, regexp5);
      assertNotSame(regexp10, regexp0);
      assertFalse(regexp10.equals((Object)regexp9));
      assertFalse(regexp10.equals((Object)regexp2));
      assertFalse(regexp10.equals((Object)regexp6));
      assertFalse(regexp10.equals((Object)regexp3));
      assertFalse(regexp10.equals((Object)regexp1));
      assertFalse(regexp10.equals((Object)regexp8));
      assertFalse(regexp10.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp7));
      assertFalse(regexp10.equals((Object)regexp5));
      assertFalse(regexp10.equals((Object)regexp0));
      assertNotNull(regexp10);
  }
}
