/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 04:31:22 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.AtomicCodec;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.net.URI;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.ToIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      TypeUtils.isHibernateInitialized(jobAttributes0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(jobAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : copies=1,defaultSelection=all,destination=printer,dialog=native,fileName=null,fromPage=1,maxPage=2147483647,minPage=1,multiple-document-handling=separate-documents-uncollated-copies,page-ranges=[1:1],printer=null,sides=one-sided,toPage=1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      indexOutOfBoundsException0.printStackTrace();
      TypeUtils.isHibernateInitialized(indexOutOfBoundsException0);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      String string0 = "(C)F";
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "(C)F", fieldArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(indexOutOfBoundsException0);
      sQLTransientConnectionException0.addSuppressed(indexOutOfBoundsException0);
      sQLTransientConnectionException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLTransientConnectionException: java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.subMap("", true, "gJASWLI<$Iks|UCU`\"J", true);
      treeMap0.entrySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, true, propertyNamingStrategy0);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.isProxy(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Object> class1 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, hashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.castToDouble((Object) null);
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, linkedHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      TypeUtils.castToString((Object) null);
      TypeUtils.createCollection(type0);
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      boolean boolean0 = true;
      classLoader0.setClassAssertionStatus("]'x[*kf", false);
      TypeUtils.loadClass("]'x[*kf", classLoader1, true);
      ClassLoader.getSystemClassLoader();
      String string0 = "getEndInclusive";
      classLoader1.setClassAssertionStatus("j", false);
      classLoader1.setPackageAssertionStatus("getEndInclusive", false);
      TypeUtils.isGenericParamType((Type) null);
      classLoader1.clearAssertionStatus();
      TypeUtils.getGenericParamType((Type) null);
      classLoader0.setDefaultAssertionStatus(false);
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.unwrapOptional(class0);
      TypeUtils.toLocale("Ljava.util.cncurrent.ConcurrentSkipListMap");
      Class<?> class1 = TypeUtils.loadClass("3");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      String string0 = "`U>WW";
      TypeUtils.loadClass("`U>WW");
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isKotlin(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) identityHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TypeUtils.isProxy(class0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@1e5dbfa5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = '^';
      charArray0[2] = '0';
      charArray0[3] = 'm';
      charArray0[4] = '-';
      charArray0[5] = 'g';
      charArray0[6] = ':';
      charArray0[7] = 'S';
      charArray0[8] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 901, 901);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      TypeUtils.castToSqlTime((Object) null);
      Class<NumberFormat> class0 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.decapitalize("com.alibaba.fastjson.serializer.SerializerFeature");
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.SerializerFeature");
      Class<TimeUnit> class1 = TimeUnit.class;
      Class<NoClassDefFoundError> class2 = NoClassDefFoundError.class;
      Class<NullPointerException> class3 = NullPointerException.class;
      FieldInfo fieldInfo0 = new FieldInfo("<20.0w<F.", class2, class3, class2, (Field) null, 73, 73, 73);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = TypeUtils.castToJavaBean((Object) concurrentHashMap0, class0);
      assertNull(runtimeException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      SQLDataException sQLDataException0 = new SQLDataException("Ljava.awt.Color", (String) null, 0);
      SQLDataException sQLDataException1 = new SQLDataException("can not cast to : ", "Ljava.awt.Color", 0, sQLDataException0);
      linkedHashMap0.replace("can not cast to : ", (Object) class0, (Object) sQLDataException1);
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class1, parserConfig0);
      Class<NoSuchMethodException> class2 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLFeatureNotSupportedException0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class class0 = (Class)TypeUtils.unwrapOptional(type0);
      assertEquals("class java.lang.String", class0.toString());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class1.toString());
      
      Class<OptionalCodec> class2 = OptionalCodec.class;
      int int0 = TypeUtils.getParserFeatures(class2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>(comparator0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      Class<Point> class0 = Point.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      TypeUtils.isPath(class0);
      Byte byte0 = new Byte((byte)3);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("com.alibaba.(astjson.serializer.SerializerFeature");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.(astjson.serializer.SerializerFeature
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Byte byte0 = new Byte((byte)106);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.isProxy(class0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Type type0 = null;
      TypeUtils.unwrapOptional((Type) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      Class<Float> class1 = Float.class;
      TypeUtils.isProxy(class1);
      String string0 = "Lorg.springframework.util.LinkedMultiValueMap";
      TypeUtils.toLocale("Lorg.springframework.util.LinkedMultiValueMap");
      Class<DecimalFormat> class2 = DecimalFormat.class;
      Method method0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("&d^{=AD{;P3'(&v_:", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class1 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<SQLException> class1 = SQLException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, linkedHashMap0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(class1);
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToJavaBean(map0, class2, parserConfig0);
      TypeUtils.decapitalize("fastjson.parser.autoTypeAccept");
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConcurrentHashMap<Short, BigInteger> concurrentHashMap0 = new ConcurrentHashMap<Short, BigInteger>();
      TypeUtils.castToBigDecimal(concurrentHashMap0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToBigInteger((Object) null);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Exception> class0 = Exception.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<TimeZone> class0 = TimeZone.class;
      Class<Insets> class1 = Insets.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0, false);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Point> class0 = Point.class;
      TypeUtils.decapitalize("xQ\"f=/oSXm$/0E3f");
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.decapitalize("valueOf");
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.beans.Transient", "pvzfi!");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TypeUtils.getParserFeatures(class0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.getRawClass(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.toLocale("isSortField");
      TypeUtils.unwrapOptional(type0);
      Collection collection0 = TypeUtils.createCollection(type0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      TypeUtils.isPath(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Point");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "Ljava.awt.Point");
      threadGroup0.interrupt();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "Ljava.awt.Point", (-1L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      parserConfig0.checkAutoType("Ljava.awt.Point", class0, (-3158));
      TypeUtils.getGenericParamType((Type) null);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getGenericParamType(type0);
      Class<IllegalStateException> class1 = IllegalStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader1, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(0, 0);
      point1.setLocation(point0);
      point1.y = 0;
      point0.setLocation(point1);
      TypeUtils.isHibernateInitialized(point0);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(dimension1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("j", "hM{p}s");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues(0L, biFunction0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("^;-ontYw86KAnb*HB");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("^;-ontYw86KAnb*HB", "^;-ontYw86KAnb*HB");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) javaObjectDeserializer0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = File.pathSeparator;
      Class<InstantiationError> class0 = InstantiationError.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      TypeUtils.isPath(class0);
      long long0 = TypeUtils.fnv1a_64_lower(":");
      assertEquals((-5808597555084153427L), long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.isNumber("Bnks9T=u~zVN=N~J$<M");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Bnks9T=u~zVN=N~J$<M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Bnks9T=u~zVN=N~J$<M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "\"Jnp#=qpX^D4'a/";
      TypeUtils.decapitalize("\"Jnp#=qpX^D4'a/");
      TypeUtils.isNumber("Bnks9T=u~zVN=N~J$<M");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Bnks9T=u~zVN=N~J$<M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Bnks9T=u~zVN=N~J$<M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.unwrapOptional(class0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.awt.GridBagConstraints@164f8bd7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.isPath(class0);
      System.setCurrentTimeMillis(0L);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(type1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put((String) null, (String) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      linkedHashMap0.compute("Ljava/lang/Class;", biFunction0);
      linkedHashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", "java.lang.AutoCloseable");
      String string0 = "~+?GWc+Dq>bm";
      linkedHashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", "~+?GWc+Dq>bm");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isNumber("Ljava.awt.Point");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("java.lang.AutoCloseable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<ParameterizedTypeImpl, Short> hashMap0 = new HashMap<ParameterizedTypeImpl, Short>();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError(";Ljava/lang/String;Ljava/lang/Object;)V");
      stackOverflowError0.printStackTrace();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) stackOverflowError0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StackOverflowError: ;Ljava/lang/String;Ljava/lang/Object;)V
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "I";
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("I");
      noSuchMethodError0.printStackTrace();
      noSuchMethodError0.getStackTrace();
      TypeUtils.castToString(noSuchMethodError0);
      Point point0 = new Point();
      AffineTransform affineTransform0 = new AffineTransform();
      Point2D point2D0 = affineTransform0.transform((Point2D) point0, (Point2D) point0);
      point0.setLocation(point2D0);
      point0.clone();
      Point point1 = new Point(point0);
      URI uRI0 = MockURI.URI("4");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "Ljava.awt.Point";
      MockThread mockThread0 = new MockThread("Ljava.awt.Point");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("Ljava.awt.Point", classLoader0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, false);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Class<HttpCookie> class1 = HttpCookie.class;
      FieldInfo fieldInfo0 = new FieldInfo("syntax error, unexpect token ':'", class0, class1, class1, (Field) null, 37, (-1660), 1704);
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils.isNumber("+%n^Zps");
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TypeUtils.getParserFeatures(class0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.getRawClass(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(0, 0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<Short, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<Short, NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.unwrapOptional((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(identityHashMap0);
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "n4$O", fieldArray0);
      assertNull(field0);
      
      linkedHashMap0.put("field not found. ", (Field) null);
      ParserConfig.parserAllFieldToCache(class0, linkedHashMap0);
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass((String) null, classLoader0, false);
      TypeUtils.castToByte((Object) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Point point0 = new Point();
      Point point1 = new Point(0, 0);
      Long long0 = new Long(0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      Class<NoSuchFieldException> class2 = NoSuchFieldException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, ")/", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo(")/", class1, class1, (Type) null, (Field) null, 0, 1428, 43);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<Object> class3 = Object.class;
      Long long0 = (Long)TypeUtils.castToJavaBean((Object) null, class3);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      Class<Time> class0 = Time.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.deny");
      MockThread mockThread0 = new MockThread(threadGroup0, "fastjson.parser.autoTypeSupport");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      parserConfig0.setDefaultClassLoader(classLoader1);
      Time time0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<StackOverflowError> class0 = StackOverflowError.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "uspvn&m?";
      stringArray0[1] = "fx7zBkN /kzp";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeWriter) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      simplePropertyPreFilter0.apply(jSONSerializer0, mockJapaneseDate0, "fx7zBkN /kzp");
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      TypeUtils.unwrapOptional(class1);
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<String> class0 = String.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.remove((Object) class0, (Object) class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      hashMap0.put("getSymbolTable", "getSymbolTable");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      hashMap0.put((String) null, "getSymbolTable");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      hashMap0.keySet();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.awt.Font");
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[3]);
      parameterizedTypeImpl0.getTypeName();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      TypeUtils.isProxy(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@747f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      DataTruncation dataTruncation0 = new DataTruncation(695, true, true, (-887), 144);
      DataTruncation dataTruncation1 = new DataTruncation(3, false, true, (-4314), 59, dataTruncation0);
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class0;
      typeArray0[4] = (Type) class2;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      TimeZone timeZone0 = TimeZone.getTimeZone("j");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeZone0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.toLocale("30lWn");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("30lWn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 30lWn
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.castToDouble((Object) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "getgetMessage";
      TypeUtils.isNumber("getgetMessage");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("getgetMessage");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getgetMessage\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.getCollectionItemType((Type) null);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Type type0 = null;
      TypeUtils.getCollectionItemType((Type) null);
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      Class<TimeZone> class0 = TimeZone.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Integer> class1 = Integer.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Calendar calendar0 = MockCalendar.getInstance();
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) calendar0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockThread mockThread0 = new MockThread("CbE~pvSG}");
      MockThread mockThread1 = new MockThread(mockThread0, "CbE~pvSG}");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      SQLException sQLException0 = new SQLException((String) null, "fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.isNumber("C@+9Kfe");
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : [cause, detail-message, next, s-q-l-state, stack-trace, suppressed-exceptions, vendor-code]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Type type0 = null;
      Type type1 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.toLocale("isSortField");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-3);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.doubleValue();
      TypeUtils.castToDouble(bigInteger0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(type1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      TypeUtils.isPath(class0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class1 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals(17, class1.getModifiers());
      
      Locale locale0 = TypeUtils.toLocale("}P%N8UY)'f7SKm|*");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Map.Entry.comparingByValue();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.util.concurrent.ConcurrentSkipListSet\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.text.MockDateFormat@6a8eb3b0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+e`'U`<{Wu>JHk9?R");
      Class<JobAttributes> class0 = JobAttributes.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.decapitalize("+e`'U`<{Wu>JHk9?R");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.decapitalize((String) null);
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      String string0 = "com.alibaba.fastjson.util.TypeUtils";
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.util.TypeUtils", class0, (-522));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.util.TypeUtils -> java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<Long> class0 = Long.class;
      ThreadGroup threadGroup0 = new ThreadGroup("\"+E~?]$f4W4z0W'ks;4");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      long long0 = TypeUtils.fnv1a_64_lower("has");
      Type type1 = TypeUtils.getCollectionItemType(type0);
      assertNotNull(type1);
      
      boolean boolean0 = TypeUtils.isNumber(")%E,q\"9Ts");
      assertFalse(boolean0);
      
      TypeUtils.getClassFromMapping("CxBzjOdGK)");
      long long1 = TypeUtils.fnv1a_64("has");
      assertTrue(long1 == long0);
      assertEquals(3699728092784203075L, long1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-160), false, true, (-160), (-629));
      TypeUtils.isHibernateInitialized(dataTruncation0);
      JSONObject jSONObject0 = new JSONObject(91);
      Class<SQLDataException> class0 = SQLDataException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.addDeny("yyyy-MM-dd HH:mm:ss");
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.getClassFromMapping("xO}Ktb]lllh");
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.fnv1a_64_lower("has");
      TypeUtils.getClassFromMapping("q(&*h");
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getClass((Type) class0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      JavaBeanDeserializer javaBeanDeserializer0 = TypeUtils.cast((Object) javaObjectDeserializer0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertNull(javaBeanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.clearClassMapping();
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      DataTruncation dataTruncation0 = new DataTruncation((-154), true, false, 3, 695);
      DataTruncation dataTruncation1 = new DataTruncation(27, true, false, 3, 3, dataTruncation0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class2);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation1, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.DataTruncation -> org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Properties properties0 = new Properties();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^!hq?nBPPn(t");
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Type type1 = TypeUtils.unwrapOptional(type0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, type1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "^;-ontYw86KAnb*HB";
      Class<Point> class0 = Point.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "^;-ontYw86KAnb*HB", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      Byte byte0 = new Byte((byte)24);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(byte0);
      assertEquals("1970-01-01 00:00:00.024", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConcurrentHashMap<Short, BigInteger> concurrentHashMap0 = new ConcurrentHashMap<Short, BigInteger>();
      TypeUtils.castToBigDecimal(concurrentHashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("o", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Bnks9T=u~zVN=N~J$<M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      DataTruncation dataTruncation0 = new DataTruncation((-154), false, true, 41, 554);
      TypeUtils.castToSqlTime((Object) null);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.loadClass("rRbe*Y0+4>-");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<Insets> class2 = Insets.class;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      treeMap0.put("|#cD+e[:1~$Pz", mockJapaneseDate0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Insets insets0 = TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class2, parserConfig0);
      assertNull(insets0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(";w4'da6\"^fn?b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";w4'da6\"^fn?b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.isNumber("SQLState");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.isNumber("SQLState");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.isPath(class0);
      System.setCurrentTimeMillis((-861L));
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("SQLState");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SQLState\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Point point0 = new Point();
      Class<BreakIterator> class0 = BreakIterator.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("nS;J}H~D @\",XCS", "nS;J}H~D @\",XCS");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "nS;J}H~D @\",XCS", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TypeUtils.isNumber("SQLState");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.isNumber("SQLState");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedHashMap<DecimalFormat, JavaObjectDeserializer> linkedHashMap0 = new LinkedHashMap<DecimalFormat, JavaObjectDeserializer>();
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "SQLState", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      Float float0 = new Float(3148.307292203);
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TypeUtils.isNumber("SQLState");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.isNumber("SQLState");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("SQLState", "EgZ{n]D<5rt|kAdv");
      linkedHashMap0.remove((Object) null);
      hashMap0.putAll(linkedHashMap0);
      hashMap0.put("serialVersionUID", "EgZ{n]D<5rt|kAdv");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SQLState");
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.computeGetters(class1, (Map<String, String>) linkedHashMap0, false);
      Class<Object> class2 = Object.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.clearClassMapping();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class2;
      typeArray0[7] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class1);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils.isNumber("SQLState");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      MockUUID.randomUUID();
      Float float0 = new Float(2592.69602);
      TypeUtils.castToSqlDate(float0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("SQLState");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : SQLState
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Rectangle> class0 = Rectangle.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      LinkedHashMap<DecimalFormat, JavaObjectDeserializer> linkedHashMap0 = new LinkedHashMap<DecimalFormat, JavaObjectDeserializer>();
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) serializeBeanInfo0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TypeUtils.castToInt((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      ClassLoader.getSystemClassLoader();
      JavaBeanInfo.build((Class<?>) class1, (Type) null, propertyNamingStrategy1, false, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      classLoader0.clearAssertionStatus();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("Lorg.springfmework.util.LinkedMultiValueMap", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      classLoader0.clearAssertionStatus();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("Lorg.springfmework.util.LinkedMultiValueMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Lorg.springfmework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("SQLState");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockUUID.randomUUID();
      boolean boolean1 = TypeUtils.isNumber("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Type type1 = TypeUtils.unwrapOptional(type0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type1;
      typeArray0[1] = type1;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = type1;
      typeArray0[4] = type1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[2], (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      WeakHashMap<Float, MockThaiBuddhistDate> weakHashMap0 = new WeakHashMap<Float, MockThaiBuddhistDate>();
      Float float0 = new Float(4917.071F);
      Float.min((-1111.6F), 287.1F);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      weakHashMap0.put(float0, mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {4917.071=org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@673ec04f}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError(".000000000");
      weakHashMap0.getOrDefault(noSuchMethodError0, ".000000000");
      Boolean boolean0 = new Boolean(false);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ".000000000", (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      TypeUtils.castToBigDecimal((Object) null);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      TypeUtils.clearClassMapping();
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("vy6@.,");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: vy6@.,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float((-1.371789298976743));
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = ".yV//_-W>xy0,&TJ";
      Locale locale0 = TypeUtils.toLocale(".yV//_-W>xy0,&TJ");
      locale0.stripExtensions();
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : .yv//_-W>XY0,&TJ
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(4147696707147271446L);
      Time time0 = TypeUtils.castToSqlTime(atomicLong0);
      assertEquals("07:34:31", time0.toString());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getClass(type0);
      TypeUtils.getSerializeFeatures(class0);
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicInteger0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      TypeUtils.isProxy(class1);
      Class<NumberDeserializer> class2 = NumberDeserializer.class;
      MockThread mockThread0 = new MockThread("I");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class1, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
