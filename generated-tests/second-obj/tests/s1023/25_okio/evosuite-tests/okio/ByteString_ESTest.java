/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:46:24 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte byte0 = (byte)70;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      Pipe pipe0 = new Pipe((byte)70);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString1.toString();
      // Undeclared exception!
      try { 
        HashingSource.hmacSha256(buffer0, byteString2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = " > ";
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" > ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string:  > 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pipe pipe0 = new Pipe(24);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        byteString0.substring((-2954));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-30);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((byte) (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -30
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.rangeEquals((int) (byte)127, (ByteString) null, (-1605), (int) (byte)127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      
      byteString0.toAsciiLowercase();
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = byteString0.rangeEquals((int) (byte)104, byteArray0, 33, 59);
      assertFalse(boolean0);
      
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteString byteString1 = byteString0.sha1();
      byteString0.lastIndexOf(byteString1);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[size=0]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.hashCode();
      byteString1.rangeEquals((int) (byte)70, byteArray0, (int) (byte)70, (int) (byte)104);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
      
      String string0 = byteString0.utf8;
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertFalse(byteString2.equals((Object)byteString1));
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString.decodeBase64("Expected leading [0-9] or '-' character but was %#x");
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)98;
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-78);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.lastIndexOf(byteArray0);
      Buffer buffer0 = null;
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteString byteString1 = byteString0.sha1();
      byteString0.lastIndexOf(byteString1);
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.rangeEquals((-1L), byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.readByteString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int1 = byteString0.lastIndexOf(byteString1, 609);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      int int1 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      byteString0.substring((int) (byte)0, (int) (byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        byteString0.substring((-574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteString0.rangeEquals((-1609), byteArray0, 7, (-1609));
      byteString1.startsWith(byteArray0);
      byteString0.indexOf(byteString1, 0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte) (-11);
      byte byte0 = (byte)49;
      byteArray0[3] = (byte)49;
      ByteString byteString0 = new ByteString(byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.hex();
      // Undeclared exception!
      try { 
        byteString0.substring(0, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(4)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[1] = (byte)127;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("BlJWSUsQ_N1,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      Charset.defaultCharset();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 44, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=44 byteCount=9
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex(">", 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-22);
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte)70;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)127;
      byteArray0[4] = (byte) (-22);
      byteArray1[2] = (byte) (-22);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)127;
      ByteString byteString1 = new ByteString(byteArray1);
      int int1 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.utf8 = "3M-jk`b[7B/W1}";
      byteString0.string(charset0);
      byteString0.toString();
      int int0 = byteString0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.EMPTY.hashCode();
      byte[] byteArray0 = new byte[9];
      byteString0.rangeEquals((int) (byte)104, byteArray0, 33, 59);
      byteString0.lastIndexOf(byteString0);
      String string0 = byteString0.utf8;
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals(20, int0);
      
      Charset.defaultCharset();
      int int1 = byteString0.indexOf(byteString1, 11);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteString0.asByteBuffer();
      boolean boolean0 = byteString0.startsWith(byteArray0);
      String string0 = byteString0.hex();
      assertEquals("111111111111111111", string0);
      
      ByteString byteString1 = byteString0.sha256();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      boolean boolean1 = byteString0.startsWith(byteString1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = ByteString.decodeBase64("");
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      byteString0.base64Url();
      assertTrue(byteString0.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-77);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      ByteString byteString1 = ByteString.decodeBase64("[hex=b3c2b3]");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString1.indexOf(byteArray0);
      byteString0.size();
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      ByteString byteString2 = ByteString.decodeHex("000000");
      // Undeclared exception!
      try { 
        byteString2.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.EMPTY.hashCode();
      byte[] byteArray0 = new byte[9];
      byteString0.rangeEquals((int) (byte)104, byteArray0, (int) (byte)104, 59);
      byteString0.lastIndexOf(byteString0);
      String string0 = byteString0.utf8;
      ByteString byteString2 = byteString0.sha512();
      assertNotSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteString.decodeBase64("{");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.EMPTY.hmacSha1(byteString1);
      // Undeclared exception!
      try { 
        byteString1.EMPTY.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.write((Source) buffer0, 0L);
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)97;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString2 = buffer0.sha512();
      byteString2.base64();
      ByteString byteString3 = new ByteString(byteArray0);
      assertFalse(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.equals(byteString0);
      ByteString byteString3 = new ByteString(byteArray0);
      int int0 = byteString2.lastIndexOf(byteString2);
      assertEquals(0, int0);
      assertTrue(byteString2.equals((Object)byteString3));
      
      String string0 = byteString0.toString();
      assertFalse(byteString0.equals((Object)byteString2));
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      byteString0.indexOf(byteArray0);
      byteString0.size();
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      String string0 = "$m";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("$m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: $
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.asByteBuffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteString0.utf8();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      boolean boolean0 = byteString1.equals("\u0000");
      assertFalse(boolean0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.asByteBuffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteString0.utf8();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      boolean boolean0 = byteString1.equals("x\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      byteString1.indexOf(byteString0);
      byteString1.toString();
      int int0 = (-123);
      int int1 = 90;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 95, 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=95 byteCount=90
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byte byte0 = (byte) (-20);
      byte byte1 = (byte) (-4);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Uwmb<", charset0);
      byteString0.toAsciiLowercase();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-59);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteString0.write(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        HashingSink.sha1((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "]c3;]";
      ByteString.decodeBase64("]c3;]");
      // Undeclared exception!
      try { 
        ByteString.encodeString("]c3;]", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      byteString1.EMPTY.hashCode();
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString1.indexOf(byteArray0);
      byteString0.size();
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      // Undeclared exception!
      try { 
        byteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toAsciiLowercase();
      ByteString byteString2 = new ByteString(byteArray0);
      String string0 = byteString2.toString();
      assertEquals("[hex=11111111]", string0);
      
      ByteString byteString3 = byteString0.toAsciiUppercase();
      assertSame(byteString3, byteString0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-50);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      byteString1.hashCode();
      byteString0.toString();
      byteString1.toString();
      byteString0.toAsciiUppercase();
      byteString1.toAsciiUppercase();
      byteString1.toString();
      byteString1.size();
      // Undeclared exception!
      try { 
        Charset.forName("[hex=4f09310cef6dfa0268b846b2e15885f1ae2824d3d482bf9f7ba38bb1950e106ea770c539a75cc4556ef309f11fb32411f1ab2db8487f01351e847dec7611d4db]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [hex=4f09310cef6dfa0268b846b2e15885f1ae2824d3d482bf9f7ba38bb1950e106ea770c539a75cc4556ef309f11fb32411f1ab2db8487f01351e847dec7611d4db]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("data == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: t
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      byteString0.substring(2);
      byteString1.toString();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString1.substring(13);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[1] = byteString2;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString3;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(1575);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1575
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(deflaterSink0, byteString0);
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      HashingSink.hmacSha256(hashingSink0, byteString0);
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString1 = hashingSink1.hash();
      int int0 = byteString1.lastIndexOf(byteArray0, (int) (byte)63);
      assertEquals((-1), int0);
      
      ByteString byteString2 = byteString1.toAsciiLowercase();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%+[be7toSi~.");
      byteString2.rangeEquals(57, byteString1, 2138, 47);
      int int1 = byteString2.EMPTY.indexOf(byteString0, 122);
      int int2 = byteString0.compareTo(byteString1);
      assertTrue(int2 == int1);
      assertNotSame(byteString1, byteString2);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte byte0 = (byte)70;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2826);
      int int1 = 2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (-2826));
      try { 
        ByteString.read(byteArrayInputStream0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.indexOf(byteArray0);
      byteString0.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1439);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        ByteString.read(dataInputStream0, (-2826));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2826
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-50);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte)123;
      byteArray1[2] = (byte) (-50);
      ByteString byteString0 = new ByteString(byteArray1);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byteString2.toString();
      byteString2.size();
      // Undeclared exception!
      try { 
        Charset.forName("[hex=5f5fce7b00]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [hex=5f5fce7b00]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "";
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[1];
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)55;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha512();
      byteString0.toAsciiLowercase();
      ByteString.codePointIndexToCharIndex("\r", (byte)90);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString1.indexOf(byteArray0);
      byteString1.toString();
      byteString0.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-50);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte)123;
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray2 = new byte[0];
      byteString1.startsWith(byteArray2);
      byteString0.hex();
      byteString0.compareTo(byteString1);
      byteString0.lastIndexOf(byteArray1);
      byteString1.internalArray();
      // Undeclared exception!
      try { 
        byteString0.getByte((byte) (-50));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byte[] byteArray1 = new byte[0];
      byteString0.startsWith(byteArray1);
      byteString0.toString();
      ByteString byteString1 = byteString0.sha256();
      byteString1.compareTo(byteString0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[2] = byteString1;
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byteString0.startsWith(byteArray0);
      byteString0.hex();
      byteString0.compareTo(byteString0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-534), 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=-534 byteCount=51
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteString0.sha1();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteString0.indexOf(byteArray0, (int) (byte)49);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int1 = (-2826);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (byte)49);
      try { 
        ByteString.read(byteArrayInputStream0, 62);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(1L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      HashingSource hashingSource2 = HashingSource.hmacSha1(hashingSource1, byteString0);
      ByteString byteString1 = hashingSource2.hash();
      byteString1.asByteBuffer();
      byteString0.startsWith(byteArray0);
      byteString1.toString();
      ByteString byteString2 = byteString1.sha256();
      byteString0.compareTo(byteString2);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(1L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      HashingSource hashingSource2 = HashingSource.hmacSha1(hashingSource1, byteString0);
      ByteString byteString1 = hashingSource2.hash();
      Object object0 = new Object();
      byteString1.equals(object0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      ByteString byteString2 = realBufferedSource0.readByteString(0L);
      byteString1.indexOf(byteString2);
      ByteString byteString3 = byteString2.toAsciiLowercase();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteString1.startsWith(byteArray0);
      byteString2.hex();
      byteString2.compareTo(byteString0);
      byteString3.lastIndexOf(byteArray0);
      ByteString byteString4 = hashingSource0.hash();
      byte[] byteArray1 = byteString4.internalArray();
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.hex();
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString1.utf8();
      String string0 = byteString1.utf8;
      byteString1.equals(byteString0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.lastIndexOf(byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteString2.startsWith(byteArray0);
      byteString2.hex();
      byteString0.compareTo(byteString1);
      ByteString byteString3 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString1.substring(2572);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.hex();
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)17;
      byteString1.utf8();
      String string0 = byteString0.utf8;
      boolean boolean0 = byteString1.equals("");
      ByteString byteString2 = new ByteString(byteArray1);
      byteString2.lastIndexOf(byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean1 = byteString0.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = byteString1.hex();
      assertEquals("", string1);
      
      byteString2.compareTo(byteString1);
      ByteString byteString3 = new ByteString(byteArray0);
      ByteString byteString4 = byteString2.substring((int) (byte)0);
      int int0 = byteString1.lastIndexOf(byteString0);
      String string2 = byteString4.toString();
      assertEquals("[hex=1111]", string2);
      assertSame(byteString2, byteString4);
      
      int int1 = byteString1.indexOf(byteArray1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-8);
      byteArray1[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 38, (byte) (-8));
      ByteString byteString1 = ByteString.read(byteArrayInputStream0, (byte)0);
      byteString0.indexOf(byteArray0, (int) (byte)0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 439, 3142);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.toAsciiUppercase();
      int int0 = 61;
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.base64Url();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)3;
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.utf8();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      ByteString byteString3 = new ByteString(byteArray0);
      ByteString byteString4 = new ByteString(byteArray0);
      byteString1.startsWith(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString4.toString();
      String string0 = byteString3.toString();
      assertEquals("[text=\\n]", string0);
      
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString5 = realBufferedSource0.readByteString(0L);
      ByteString byteString6 = byteString5.toAsciiLowercase();
      assertFalse(byteString6.equals((Object)byteString1));
  }
}
