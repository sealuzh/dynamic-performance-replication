/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:35:05 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double((-4));
      // Undeclared exception!
      try { 
        CompressedVector.zero(726, (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -4.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 48;
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(48, 250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 250.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.set((-4612), (-593.75));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-4612' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom(8);
      mockRandom0.doubles();
      CompressedVector compressedVector0 = CompressedVector.random(8, 0.0, (Random) mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = 0.0;
      SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.foldNonZero((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.norm();
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.set(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) 12;
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 12;
      intArray0[5] = 12;
      intArray0[6] = (-619);
      CompressedVector compressedVector0 = new CompressedVector(12, 7, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(12, vectorFunction0);
      assertEquals(12, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      compressedVector0.nonZeroAt(8);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-2242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2242
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorVectorOperation<Object> vectorVectorOperation0 = (VectorVectorOperation<Object>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(vectorVectorOperation0).partiallyApply(any(org.la4j.vector.SparseVector.class));
      compressedVector0.slice(8, 8);
      int int0 = 0;
      CompressedVector compressedVector1 = CompressedVector.zero(0);
      compressedVector1.copyOfLength(0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector1.non(vectorPredicate0);
      // Undeclared exception!
      try { 
        compressedVector0.apply(vectorVectorOperation0, (Vector) compressedVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000, (-1073741824), (double[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1073741824.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.update(vectorFunction0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(17);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-223));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-236);
      MockRandom mockRandom0 = new MockRandom((-236));
      // Undeclared exception!
      try { 
        CompressedVector.random((-236), (-340.15961172415), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(2660);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(integer0, biFunction0);
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 0);
      compressedVector0.subtract((double) 0);
      compressedVector0.setAll((-1.0));
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.setAll(1644.2128188);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      int int0 = 32;
      Integer integer0 = new Integer(32);
      linkedList0.add(integer0);
      compressedVector0.copy();
      compressedVector0.nonZeroIterator();
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      compressedVector1.min();
      String string0 = "z6JQXw <LN4L>nY";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("z6JQXw <LN4L>nY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      Float float0 = new Float((-4475.735526831));
      compressedVector0.equals((Object) float0);
      compressedVector0.blank();
      Vector vector0 = compressedVector0.divide(0);
      compressedVector0.iterator();
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertTrue(compressedVector0.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-3933), (-2242));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 8);
      Integer integer0 = new Integer(32);
      Float float0 = new Float((-524.8928507483852));
      Integer.max(32, 0);
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, float0, biFunction0);
      compressedVector0.setAll(2055.36288);
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2077, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Double double0 = new Double((-490.0008702));
      Double.sum((-490.0008702), (-490.0008702));
      Double.max((-490.0008702), (-490.0008702));
      linkedList0.remove((Object) double0);
      Short short0 = new Short((short)37);
      Short.toUnsignedInt((short)1249);
      Short.compare((short)37, (short) (-3414));
      linkedList0.offer(short0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Vector.unit(3451);
      compressedVector0.swapElements(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      compressedVector0.nonZeroIterator();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction1);
      compressedVector0.iterator();
      compressedVector0.blankOfLength(1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(8, (double) 3451, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)10).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(10, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2;
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3137.64003580522).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.max();
      compressedVector0.updateAt(591, vectorFunction0);
      CompressedVector compressedVector1 = CompressedVector.zero(591, 0);
      compressedVector1.copy();
      compressedVector1.copyOfLength(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      int int1 = 2882;
      compressedVector1.copyOfLength(2882);
      int int2 = 1580;
      // Undeclared exception!
      try { 
        CompressedVector.random(1580, (double) 1580, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-2193));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2193);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)3000);
      linkedList0.add(short0);
      Double double0 = new Double((-490.0008702));
      Double.sum((-490.0008702), (-490.0008702));
      Double.max((-490.0008702), (-490.0008702));
      linkedList0.remove((Object) double0);
      Short short1 = new Short((short)37);
      Short.toUnsignedInt((short)1249);
      Short.compare((short)37, (short) (-3414));
      linkedList0.offer(short1);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Vector.unit(3451);
      compressedVector0.swapElements(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      compressedVector0.nonZeroIterator();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-814.59)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction1);
      compressedVector0.iterator();
      compressedVector0.blankOfLength(1);
      int int0 = 8;
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5800.48);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt((-2146300003));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(0, 0);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = Integer.valueOf(8);
      Double double0 = new Double(4451.594);
      Double.max(4451.594, (-814.59));
      hashMap0.put(integer0, double0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 537);
      Vector vector0 = compressedVector0.blankOfLength(537);
      assertEquals(0.00186219739292365, compressedVector0.density(), 0.01);
      assertFalse(vector0.equals((Object)compressedVector0));
      assertEquals(537, vector0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      int int0 = (-27);
      Integer integer0 = new Integer((-27));
      Float float0 = new Float((float) (-27));
      hashMap0.put(integer0, float0);
      Double double0 = new Double((-1.0));
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-3933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1157, 1157);
      double double0 = compressedVector0.getOrElse(13, 1157);
      assertEquals(1157.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)3000);
      Short.toUnsignedLong((short)3000);
      linkedList0.add(short0);
      Double double0 = new Double((-490.0008702));
      Double.sum((-490.0008702), (-490.0008702));
      Double.max((-490.0008702), (-490.0008702));
      linkedList0.remove((Object) double0);
      Short short1 = new Short((short)37);
      Short.toUnsignedInt((short)1249);
      Short.compare((short)37, (short) (-3414));
      linkedList0.offer(short1);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Vector.unit(3451);
      compressedVector0.swapElements(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      compressedVector0.nonZeroIterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(4);
      Double double1 = new Double(4);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 3150);
      double double2 = compressedVector1.getOrElse((short)3000, 749.3);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(749.3, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-3933);
      doubleArray0[3] = (double) (-3933);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      compressedVector0.toCSV(numberFormat0);
      compressedVector0.toBinary();
      compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.zero(1);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1161, 8);
      compressedVector0.swapElements(2110, 8);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 277.2133;
      doubleArray0[1] = 142.89947;
      CompressedVector compressedVector0 = CompressedVector.zero(417, 44);
      compressedVector0.swapElements(417, 44);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(417, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(16, 16);
      compressedVector0.setAll(16);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(16, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)3000);
      Short.toUnsignedLong((short)3000);
      linkedList0.add(short0);
      Double double0 = new Double((-490.0008702));
      double double1 = new Double((-490.0008702));
      Double.max((-490.0008702), (-490.0008702));
      linkedList0.remove((Object) double0);
      Short short1 = new Short((short)37);
      Short.toUnsignedInt((short)1249);
      Short.compare((short)37, (short) (-3414));
      linkedList0.offer(short1);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Vector.unit(3451);
      compressedVector0.swapElements(1, 1);
      compressedVector0.swapElements(5, (short) (-3414));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Double double0 = new Double((-490.0008702));
      Double.sum((-490.0008702), (-490.0008702));
      Double.max((-490.0008702), (-490.0008702));
      linkedList0.remove((Object) double0);
      Short short0 = new Short((short)37);
      Short.compare((short)37, (short) (-3414));
      linkedList0.offer(short0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Vector.unit(3451);
      compressedVector0.swapElements(1, 1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      compressedVector0.nonZeroIterator();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 902);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Double double0 = new Double((-490.0008702));
      Double.sum((-490.0008702), (-490.0008702));
      Double.max((-490.0008702), (-490.0008702));
      linkedList0.remove((Object) double0);
      Short short0 = new Short((short)37);
      Short.compare((short)37, (short) (-3414));
      linkedList0.offer(short0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Vector.unit(3451);
      compressedVector0.swapElements(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3258.121059034151).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      compressedVector0.nonZeroIterator();
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2224), 1213);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1125);
      compressedVector0.setAll(46.409422);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, 1378);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double double0 = compressedVector0.getOrElse(0, 2933.0);
      assertEquals(1, compressedVector0.length());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(9);
      Double double0 = new Double(9);
      Double.max(1.0, 393);
      hashMap0.put(integer0, double0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 393);
      compressedVector0.sliceRight(8);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("N `E:z!eVP@V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)37);
      Short.compare((short)37, (short) (-3414));
      linkedList0.offer(short0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.swapElements((-1909), (short) (-3414));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((short) (-3414), vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.nonZeroIterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)50);
      short short1 = (short) (-3414);
      Short.compare((short)50, (short) (-3414));
      linkedList0.offer(short0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      int int0 = 1;
      Vector.unit(3464);
      byte[] byteArray0 = new byte[1];
      compressedVector0.isZeroAt((short) (-3414));
      byteArray0[0] = (byte)10;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)16;
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      
      compressedVector0.swapElements((byte)16, (byte)16);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = new byte[21];
      compressedVector0.spliterator();
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, 374);
      compressedVector1.blank();
      compressedVector0.add((double) (byte)6);
      compressedVector0.toColumnMatrix();
      compressedVector1.min();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1041.9728059852418;
      doubleArray0[1] = (double) (byte)6;
      doubleArray0[2] = (double) (byte)16;
      doubleArray0[4] = (double) (byte)16;
      doubleArray0[5] = (-1813.296225306911);
      doubleArray0[6] = (-1.0);
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      compressedVector2.add(0.0);
      int int0 = 22;
      compressedVector1.set(22, 104.125);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2146300002), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-2146300002), 0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 544.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(544.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.toBinary();
      compressedVector1.update(vectorFunction0);
      compressedVector0.swapElements(2110, 2110);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 544.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.toBinary();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(0);
      Integer integer0 = new Integer(1160);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer0, integer1);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Long long0 = new Long(1160);
      hashMap1.remove((Object) long0);
      compressedVector0.swapElements(0, (-634));
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-2146300002));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1161, 8);
      compressedVector0.setAll(2.0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Vector vector0 = compressedVector0.divide((-1226.0));
      compressedVector0.eachNonZero(vectorProcedure0);
      // Undeclared exception!
      try { 
        vector0.swapElements((-754), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector0.copy();
      compressedVector0.innerProduct(vector0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(17, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 543.2816341835185;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      byte[] byteArray0 = compressedVector1.toBinary();
      int int0 = 0;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(0);
      compressedVector1.add((Vector) compressedVector0);
      compressedVector1.norm();
      Integer integer0 = new Integer(0);
      hashMap0.remove((Object) byteArray0);
      compressedVector0.setAll(543.2816341835185);
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2146300002), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(0, 3527);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 524.1997785591057;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      compressedVector0.swapElements(0, 6);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        CompressedVector.random(37, (double) 6, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector.constant(942, 1584.9948156);
      compressedVector0.swapElements(942, 0);
      compressedVector0.set(0, (-1405.49391529105));
      assertEquals(2, compressedVector0.cardinality());
  }
}
