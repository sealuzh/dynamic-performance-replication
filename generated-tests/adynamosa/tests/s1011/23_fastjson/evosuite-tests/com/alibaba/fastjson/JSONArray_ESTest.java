/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 15:30:53 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[1] = feature1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature0;
      Feature feature2 = Feature.OrderedField;
      featureArray0[3] = feature2;
      JSON.parseObject("", featureArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, (Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      byte byte0 = (byte)106;
      Class<Feature> class0 = Feature.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.equals(fileSystemHandling0);
      int int0 = 1529;
      jSONArray0.getFloatValue(969);
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Class<SerializerFeature> class1 = SerializerFeature.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class1, stringArray0);
      simplePropertyPreFilter1.setMaxLevel((byte)106);
      simplePropertyPreFilter1.getClazz();
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(1529, class2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1529, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.containsAll(linkedHashSet0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, linkedHashSet0);
      jSONArray1.getFloat(1);
      jSONArray1.getLongValue(1);
      BigDecimal bigDecimal0 = new BigDecimal((long) 3089);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(989);
      JSONArray jSONArray3 = jSONArray1.fluentRemove(1);
      jSONArray3.isEmpty();
      JSONArray jSONArray4 = new JSONArray();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      jSONArray0.toArray();
      jSONArray0.getJSONArray(404);
      // Undeclared exception!
      try { 
        jSONArray2.getIntValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, linkedList0);
      Feature feature0 = Feature.DisableASM;
      jSONArray0.fluentAdd((Object) feature0);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 991
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.containsAll(linkedHashSet0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3089);
      pipedInputStream0.markSupported();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, linkedHashSet0);
      jSONArray1.getFloat(1);
      jSONArray0.setRelatedArray(pipedInputStream0);
      jSONArray1.getLongValue(1);
      jSONArray0.getBigDecimal(1);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) linkedHashSet0);
      JSONArray jSONArray3 = jSONArray1.fluentRemove(1);
      jSONArray3.isEmpty();
      JSONArray jSONArray4 = new JSONArray();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray0.toArray();
      jSONArray0.getJSONArray(420);
      LinkedList<PipedInputStream> linkedList0 = new LinkedList<PipedInputStream>();
      // Undeclared exception!
      try { 
        jSONArray2.getIntValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[1] = feature1;
      featureArray0[2] = feature0;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[3] = feature2;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      jSONArray0.getSqlDate(989);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.getBigDecimal(2210);
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      int int0 = 184;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(3089, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2256
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[1] = feature1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature0;
      Feature feature2 = Feature.OrderedField;
      featureArray0[3] = feature2;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      jSONArray0.getSqlDate(989);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.getBigDecimal(2210);
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      jSONArray2.sort(comparator0);
      stringArray0[1] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      int int0 = 184;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(3089, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2256
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature0;
      Feature feature2 = Feature.OrderedField;
      featureArray0[3] = feature2;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-91);
      Class<Feature> class0 = Feature.class;
      jSONArray1.toJavaList(class0);
      int int0 = (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2233, (-1));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSON.toJSON((Object) sequenceInputStream0, serializeConfig0);
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2256
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2255;
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature0;
      Feature feature2 = Feature.OrderedField;
      featureArray0[3] = feature2;
      JSONObject jSONObject0 = new JSONObject(989, true);
      jSONArray0.fluentSet(2255, jSONObject0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-91);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2233, 6);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSON.toJSON((Object) sequenceInputStream0, serializeConfig0);
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2256
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2220);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) "VD");
      JSONArray jSONArray3 = jSONArray2.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray0.fluentClear();
      jSONArray3.fluentSet((-1), jSONArray4);
      // Undeclared exception!
      try { 
        jSONArray3.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature0;
      Feature feature2 = Feature.OrderedField;
      featureArray0[3] = feature2;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      Class<String> class0 = String.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      ConcurrentHashMap<SerializerFeature, SerializeConfig> concurrentHashMap0 = new ConcurrentHashMap<SerializerFeature, SerializeConfig>();
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      jSONArray1.getDoubleValue(989);
      Class<Integer> class1 = Integer.class;
      jSONArray1.toJavaList(class1);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(1174536705);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1174536705, Size: 2256
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(442, jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      Class<JSONArray> class0 = JSONArray.class;
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class0, class0, class0, (Field) null, (-1009), (-1009), 989);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      linkedList0.add((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializeConfig0.setAsmEnable(true);
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
      jSONArray1.addAll((Collection<?>) linkedList0);
      jSONArray2.getJSONObject(26);
      jSONArray1.getString(442);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 890
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature0;
      Feature feature2 = Feature.OrderedField;
      featureArray0[3] = feature2;
      JSON.parseObject("", featureArray0);
      jSONArray0.fluentSet(2255, (Object) null);
      Class<String> class0 = String.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.toArray();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      jSONArray0.contains(feature0);
      jSONArray0.getDate(199);
      int int0 = jSONArray0.size();
      assertEquals(2256, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.containsAll(linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = " {ToX#JU?Z-jk# mq9G";
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray1.clone();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(989, sequenceInputStream0);
      // Undeclared exception!
      try { 
        jSONArray3.getBigInteger(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature0;
      Feature feature2 = Feature.OrderedField;
      featureArray0[3] = feature2;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      jSONArray0.getSqlDate(989);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.getBigDecimal(2210);
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray2.getObject(184, (Type) null);
      jSONArray2.getIntValue(989);
      jSONArray1.getShortValue(0);
      jSONArray1.getDouble(1);
      assertEquals(2256, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature0;
      Feature feature2 = Feature.OrderedField;
      featureArray0[3] = feature2;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      jSONArray0.getSqlDate(989);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray1.add(1, (Object) "1.2.46");
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.toJSON((Object) simplePropertyPreFilter0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-5), (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5, Size: 2257
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, feature0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray("@type");
      JSON.toJSON((Object) feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jSONObject0.forEach(biConsumer0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) null);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "@type";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 433);
      SerializeWriter serializeWriter1 = serializeWriter0.append('\\');
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter1, serializeConfig0);
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      simplePropertyPreFilter0.apply(jSONSerializer0, linkedList0, "@type");
      simplePropertyPreFilter0.getClazz();
      jSONArray1.getObject(989, (Type) class0);
      jSONArray2.toArray();
      jSONArray0.getJSONArray(2218);
      jSONArray0.getLong(2243);
      // Undeclared exception!
      try { 
        jSONArray1.getShort(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : DisableSpecialKeyDetect
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, feature0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray("@type");
      jSONObject0.put("com.google.common.collect.TreeMultimap", (Object) feature0);
      JSON.toJSON((Object) feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jSONObject0.forEach(biConsumer0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) null);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "@type";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 433);
      serializeWriter0.append('\\');
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 3089);
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) integer0);
      jSONArray3.getBigDecimal(1);
      Integer integer1 = new Integer(989);
      jSONArray0.remove(59);
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.fluentSet(442, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(442);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, feature0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray("@type");
      JSON.toJSON((Object) feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jSONObject0.forEach(biConsumer0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) null);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "@type";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 433);
      SerializeWriter serializeWriter1 = serializeWriter0.append('\\');
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter1, serializeConfig0);
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      simplePropertyPreFilter0.apply(jSONSerializer0, linkedList0, "@type");
      simplePropertyPreFilter0.getClazz();
      jSONArray1.getObject(989, (Type) class0);
      jSONArray2.toArray();
      jSONArray0.getJSONArray(2218);
      jSONArray0.getLong(2243);
      jSONArray1.getShort(1197);
      assertEquals(3091, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2255, linkedList0);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray(".ObW^3JA*m");
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) null);
      linkedList0.offerFirst(jSONArray3);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) linkedHashSet0);
      jSONArray4.getByteValue(2253);
      jSONArray1.getIntValue(2044);
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : [{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[{\"$ref\":\"..\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"},null],null]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.containsAll(linkedHashSet0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3089);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSet1.removeAll(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedHashSet1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      jSONArray0.clone();
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      jSONArray0.fluentAdd((Object) null);
      jSONArray1.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(962);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 962, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.clone();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      jSONArray0.contains(bufferedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      serializeConfig0.setAsmEnable(false);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(442, jSONArray0);
      jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      serializeConfig0.setAsmEnable(false);
      jSONArray0.getByte(0);
      assertEquals(444, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2255, linkedList0);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray(".ObW^3JA*m");
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) linkedHashSet0);
      jSONArray4.getByteValue(2253);
      int int0 = jSONArray1.getIntValue(2044);
      assertEquals(2257, jSONArray1.size());
      assertEquals(0, int0);
      
      short short0 = jSONArray2.getShortValue(0);
      assertEquals(2257, jSONArray2.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, feature0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray("@type");
      JSON.toJSON((Object) feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentSet(8233, (Object) null);
      jSONArray3.getLongValue(8233);
      int int0 = 192;
      jSONArray2.getBigDecimal(989);
      int int1 = 2305;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 3073);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.containsAll(linkedHashSet0);
      int int0 = 1;
      PipedInputStream pipedInputStream0 = new PipedInputStream(3089);
      pipedInputStream0.markSupported();
      JSONArray jSONArray1 = jSONArray0.fluentSet(160, linkedHashSet0);
      jSONArray1.getFloat(1);
      jSONArray0.setRelatedArray(pipedInputStream0);
      jSONArray1.getLongValue(1);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(160);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "";
      // Undeclared exception!
      try { 
        jSONArray0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.OrderedField;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Feature feature3 = Feature.OrderedField;
      featureArray0[3] = feature3;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.getSqlDate(989);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray3.getBigDecimal(2210);
      jSONArray1.getBoolean(989);
      int int0 = jSONArray3.size();
      assertEquals(2256, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.OrderedField;
      FileSystemHandling.shouldAllThrowIOExceptions();
      featureArray0[2] = feature2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Feature feature3 = Feature.OrderedField;
      featureArray0[3] = feature3;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.getSqlDate(989);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray3.getBigDecimal(2210);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray3.getObject(184, (Type) null);
      boolean boolean0 = jSONArray0.removeAll(jSONArray1);
      boolean boolean1 = jSONArray3.retainAll(jSONArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, feature0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray("@type");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jSONObject0.forEach(biConsumer0);
      jSONArray0.fluentAdd((Object) null);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray1.getObject(989, (Type) class0);
      assertEquals(2257, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(442, jSONArray0);
      jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(45, linkedList0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(3089, linkedList0);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray((String) null);
      jSONArray3.fluentAdd((Object) jSONArray2);
      // Undeclared exception!
      jSONArray0.getJSONArray(3089);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      pipedInputStream0.markSupported();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1053, bufferedInputStream0);
      jSONArray0.remove((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(1053);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.io.BufferedInputStream@48709b6d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, integer0);
      jSONArray1.getRelatedArray();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.NonStringKeyAsString;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseObjectArray;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject("syntax error, expect :, actual ", (TypeReference<Field>) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = new JSONArray(jSONArray1);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JSONArray jSONArray4 = jSONArray2.fluentRemove((Object) bufferedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray4.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      jSONArray0.setRelatedArray(bufferedInputStream0);
      jSONArray0.add((Object) integer0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) pipedInputStream0, serializerFeatureArray0);
      byte byte0 = jSONArray0.getByteValue(0);
      assertEquals((byte)17, byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2255, linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray(".ObW^3JA*m");
      jSONArray2.fluentAdd((Object) null);
      jSONArray2.getJSONArray(370);
      Object[] objectArray0 = new Object[0];
      jSONArray0.toArray(objectArray0);
      assertEquals(2257, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1053, bufferedInputStream0);
      jSONArray1.setRelatedArray(bufferedInputStream0);
      jSONArray1.add((Object) integer0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) jSONArray2, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(1053);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.io.BufferedInputStream@141700aa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, linkedList0);
      jSONArray1.fluentSet(2255, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(2255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, (this Collection)]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-54), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<SerializerFeature, JSONObject> concurrentSkipListMap0 = new ConcurrentSkipListMap<SerializerFeature, JSONObject>();
      Collection<JSONObject> collection0 = concurrentSkipListMap0.values();
      jSONArray0.removeAll(collection0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte)92;
      byteArray0[1] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 1045;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse("|tg3jy1y%3[u", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : |tg3jy1y%3[u
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(442, jSONArray0);
      jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getLong(442);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"},{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.fluentSet(2255, linkedList0);
      jSONArray0.getLong(989);
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRetainAll(list0);
      jSONArray0.getSqlDate(15);
      assertEquals(2255, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) jSONArray0, serializerFeatureArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      jSONArray2.fluentRemoveAll(set0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 102);
      boolean boolean0 = jSONArray2.contains(bufferedInputStream0);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONArray0.addAll((Collection<?>) set0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(442, jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature1;
      JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
      jSONArray1.addAll((Collection<?>) linkedList0);
      jSONArray2.getJSONObject(26);
      Set<String> set0 = jSONArray1.defaultLocale.getUnicodeLocaleKeys();
      jSONArray2.fluentRemoveAll(set0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SupportNonPublicField;
      Class<Object> class0 = Object.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InitStringFieldAsEmpty;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject("'", (Type) null, parserConfig0, 989, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, linkedList0);
      jSONArray0.getLong(989);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.getSqlDate(989);
      assertEquals(2256, jSONArray0.size());
      assertEquals(2256, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      jSONArray0.remove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(986);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 986, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      jSONArray0.fluentSet(1053, bufferedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1054
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      int int0 = 1053;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      jSONArray0.fluentSet(1053, bufferedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1054
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(442, jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      Class<Object> class0 = Object.class;
      jSONArray2.toJavaList(class0);
      jSONArray1.get(179);
      assertEquals(444, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(442, jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
      jSONArray1.addAll((Collection<?>) linkedList0);
      jSONArray2.getJSONObject(26);
      jSONArray2.getString(26);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 888
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      jSONArray0.fluentSet(967, linkedHashSet0);
      jSONArray0.toArray();
      assertEquals(968, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(967, linkedHashSet0);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      jSONArray1.fluentRemove(0);
      jSONArray0.getBooleanValue(433);
      assertEquals(967, jSONArray0.size());
      
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      boolean boolean0 = jSONArray2.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      Integer integer0 = new Integer(3089);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.isEmpty();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray1.toJavaList(class0);
      assertFalse(jSONArray0.isEmpty());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray1.get(936);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 936, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(442, jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", hashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONStringZ((Object) null, serializeConfig0, serializerFeatureArray0);
      jSONArray1.addAll((Collection<?>) linkedList0);
      jSONArray2.getJSONObject(26);
      assertEquals(888, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.fluentSet(442, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(442);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1817);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      JSONArray jSONArray1 = new JSONArray(3089);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte) (-75);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      JSON.parse(byteArray0, featureArray0);
      jSONArray0.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.addAll(1042, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1042, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(975);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(jSONArray0);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      int int0 = 944;
      // Undeclared exception!
      try { 
        jSONArray1.addAll(645, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      float float0 = new Integer(3089);
      jSONArray1.fluentRemove((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.add((-1623), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1623, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) pipedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.io.PipedInputStream@610da76e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      float float0 = jSONArray1.getFloatValue(0);
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONArray0.add((-1625), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1625, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1817);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, linkedHashSet0);
      assertEquals(990, jSONArray2.size());
      
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray1);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray2.toJavaList(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[3] = serializerFeature3;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[5] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[6] = serializerFeature5;
      JSON.toJSONBytes((Object) list0, serializerFeatureArray0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) list0);
      Set<String> set0 = jSONArray2.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray5 = jSONArray4.fluentRemoveAll(set0);
      boolean boolean0 = jSONArray5.contains("}'0|%$Ea]9~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2337;
      Type type0 = jSONArray0.componentType;
      jSONArray0.setComponentType((Type) null);
      Class<Object> class0 = Object.class;
      String string0 = "";
      Class<Object> class1 = Object.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("y5T5>lYDLH:S,Z");
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1702), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1702
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1363), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Set<String> set0 = charset0.aliases();
      jSONArray0.addAll((Collection<?>) set0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"unicode-1-1-utf-8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringWithDateFormat(jSONArray0, "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer", serializerFeatureArray0);
      int int0 = (-214748364);
      // Undeclared exception!
      try { 
        jSONArray0.set((-214748364), "com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jSONArray1.getBigDecimal(0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.indexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "=)i-";
      stringArray0[2] = "EsRz\"m$@M";
      stringArray0[3] = ".cm`P8,BSdu$C=~x";
      stringArray0[4] = "k*lk mr3<`T._]h)";
      stringArray0[5] = "com.alibaba.fastjson.JSONArray";
      stringArray0[6] = "rf.Q`Tdh8|:-.|yH#";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>();
      List<Object> list0 = javaBeanSerializer0.getFieldValues(linkedHashSet0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      Object object0 = new Object();
      jSONArray2.set(989, object0);
      assertEquals(990, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 1069;
      JSONArray jSONArray0 = new JSONArray(1069);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "@type";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[5] = "=/El%6l";
      stringArray0[6] = "@type";
      stringArray0[7] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      Class<Object> class0 = Object.class;
      String[] stringArray1 = new String[7];
      stringArray1[0] = "AP!})cO?AxC";
      stringArray1[1] = "1.2.46";
      stringArray1[2] = "@type";
      stringArray1[3] = "@type";
      stringArray1[4] = "1.2.46";
      stringArray1[5] = "@type";
      stringArray1[6] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray1);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) sequenceInputStream0, serializeConfig0, serializeFilterArray0, "@type", 989, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-5080));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      boolean boolean0 = jSONArray0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      int int0 = jSONArray0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1817);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, linkedHashSet0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray1);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray2.toJavaList(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[6] = serializerFeature6;
      JSON.toJSONBytes((Object) list0, serializerFeatureArray0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) list0);
      Set<String> set0 = jSONArray2.defaultLocale.getUnicodeLocaleKeys();
      jSONArray4.fluentRemoveAll(set0);
      // Undeclared exception!
      try { 
        jSONArray2.add(989, (Object) "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      System.setCurrentTimeMillis(2021L);
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getIncludes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) simplePropertyPreFilter0);
      // Undeclared exception!
      try { 
        jSONArray2.addAll((-2206), (Collection<?>) set0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2206, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(442, jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 444
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator(0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      Integer integer0 = new Integer(989);
      jSONArray0.fluentAdd((Object) "yyyy-MM-dd HH:mm:ss");
      jSONArray0.isEmpty();
      jSONArray0.setRelatedArray(integer0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowComment;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SupportArrayToBean;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.InternFieldNames;
      featureArray0[7] = feature7;
      JSON.parseObject("", featureArray0);
      jSONArray0.lastIndexOf((Object) null);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(410);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-1842));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      int int0 = jSONArray0.indexOf(object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1053, bufferedInputStream0);
      jSONArray1.getLong(989);
      assertEquals(1054, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(949);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 949
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-32), jSONArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Type[] typeArray0 = new Type[1];
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      typeArray0[0] = (Type) null;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[0]);
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3089, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1362);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1362, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(989, (Object) pushbackInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1074;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1074, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1074, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) bufferedInputStream0);
      int int0 = 751;
      // Undeclared exception!
      try { 
        jSONArray1.getLong(751);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 751, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-948));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(1069);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1069, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-212));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getString(1081);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1081, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = null;
      jSONArray0.add((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.get((-1006));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-4041));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2380);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        jSONArray0.remove((-2380));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.lastIndexOf(jSONArray1);
      JSONArray jSONArray2 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray2.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1093);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1093, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1093, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-3299));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-2071));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      Feature[] featureArray0 = new Feature[0];
      JSON.parse((byte[]) null, 1851, 989, (CharsetDecoder) null, featureArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(1092);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1092, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-927), (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -927, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.lastIndexOf(jSONArray1);
      JSONArray jSONArray2 = new JSONArray(3089);
      jSONArray0.containsAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1427);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1427, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      boolean boolean0 = jSONArray0.containsAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(410);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 410, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2477);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-2477));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1532);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1532, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-977));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1219, (Object) null);
      jSONArray0.retainAll(jSONArray1);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(0, (Collection<?>) jSONArray1);
      jSONArray2.iterator();
      jSONArray1.setRelatedArray((Object) null);
      assertEquals(2440, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      // Undeclared exception!
      try { 
        JSON.parseArray("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      int int0 = jSONArray0.indexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.relatedArray = (Object) "@type";
      int int0 = 1078;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-2770));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1071;
      int int1 = 1103;
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1103, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = new JSONArray(989);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m?l-5q`]J'd";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3089, (Type) class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.parse((String) null);
      JSONArray jSONArray1 = new JSONArray(1);
      jSONArray0.containsAll(jSONArray1);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(989);
      JSONObject jSONObject2 = jSONObject0.fluentPutAll(jSONObject1);
      jSONObject2.getInteger("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(899, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 899, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.subList(55296, 1005);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1005
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(2147483643);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483643, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      JSONArray jSONArray1 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(2626);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-953));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      jSONObjectArray0[0] = jSONObject0;
      jSONObjectArray0[1] = jSONObject0;
      jSONObject0.getJSONObject("?sC|0Y");
      jSONObjectArray0[2] = null;
      jSONArray0.toArray(jSONObjectArray0);
      jSONArray0.hashCode();
      charArray0[1] = '5';
      charArray0[2] = ',';
      charArray0[3] = '4';
      charArray0[4] = 'Q';
      charArray0[5] = 'e';
      charArray0[6] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 989);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONObject0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 9969;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-2147483645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1094, "");
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertEquals(1095, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[7];
      jSONArray0.set(1104, (Object) null);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 9977, 1768);
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      FieldInfo.getFieldType(class0, (Type) null, (Type) null);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      JSON.parseObject((InputStream) byteArrayInputStream0, (Type) null, featureArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      jSONArray0.removeIf(predicate0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-965));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONObject jSONObject0 = new JSONObject(163, false);
      jSONObject0.getJSONArray("yyyy-MM-dd HH:mm:ss");
      jSONArray1.equals((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2147483645);
      // Undeclared exception!
      jSONArray0.fluentSet(2147483645, integer0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.fluentRemoveAll(jSONArray1);
      jSONArray1.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Class<String> class1 = String.class;
      JSON.toJavaObject((JSON) jSONArray1, class1);
      jSONArray0.toJavaList(class0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2650);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1), 2650);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1200;
      jSONArray0.isEmpty();
      File file0 = MockFile.createTempFile("@type", "P");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1159;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(292);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "");
      jSONArray0.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1200;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class1, class1, class1, (Field) null, 47, 47, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseBigDecimal;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.OrderedField;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowUnQuotedFieldNames;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.IgnoreAutoType;
      featureArray0[5] = feature5;
      JSON.parseObject(charArray0, 0, type0, featureArray0);
      Class<JSONObject> class2 = JSONObject.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo1 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class2, class2, class2, (Field) null, 3089, 0, (-2963));
      BeanContext beanContext1 = new BeanContext(class2, fieldInfo1);
      Class<?> class3 = beanContext1.getBeanClass();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) class3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      UnaryOperator.identity();
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 1;
      JSONArray jSONArray0 = new JSONArray(1);
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaObject(class0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      UnaryOperator.identity();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Object> class1 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, map0);
      JSONArray jSONArray0 = new JSONArray(1410);
      int int0 = (-1914);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd((-1914), (Object) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1914, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2634);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(2634);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2634, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONArray0.toJavaList(class0);
      Charset.defaultCharset();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSON.defaultLocale = jSONArray1.defaultLocale;
      jSONArray0.retainAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.getString(2087);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2087, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Class<String> class1 = String.class;
      JSON.toJavaObject((JSON) jSONArray1, class1);
      jSONArray0.toJavaList(class0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      int int0 = 486;
      // Undeclared exception!
      try { 
        jSONArray0.add(486, (Object) charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 486, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      JSON.parse(byteArray0, (Feature[]) null);
      // Undeclared exception!
      try { 
        jSONArray0.subList(1, (-288));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-288)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = (JSONArray)jSONArray0.toJavaObject(class0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      UnaryOperator.identity();
      float float0 = new Integer(0);
      jSONArray1.removeAll(jSONArray0);
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2634);
      jSONArray0.getComponentType();
      jSONArray0.componentType = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1200);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1200, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getString(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.add(3089, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.remove(16384);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16384, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray2 = (JSONArray)jSONArray1.toJavaObject(class0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JSONArray jSONArray3 = jSONArray1.fluentRemoveAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-3661));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Feature feature3 = Feature.OrderedField;
      featureArray0[3] = feature3;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2255, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.getSqlDate(989);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray3.getBigDecimal(162);
      jSONArray1.getBoolean(989);
      assertEquals(2256, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSON.toJSON((Object) hashMap0, serializeConfig0);
      // Undeclared exception!
      try { 
        jSONArray1.remove(2655);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2655, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      List<Locale.LanguageRange> list0 = jSONArray0.toJavaList(class0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list1);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(list1);
      // Undeclared exception!
      try { 
        jSONArray3.getFloat(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 277;
      int int1 = 3984;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3984);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3984, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = 0;
      JSONObject jSONObject0 = new JSONObject(0);
      linkedList0.add((Object) jSONObject0);
      jSONObject0.getShort("");
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      linkedList0.offer(jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-1880));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1880, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      int int0 = 192;
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1630);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1630, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONObject0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getFloatValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      int int0 = (-95);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-95));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(0);
      linkedList0.add((Object) jSONObject0);
      jSONObject0.getShort("");
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getByte((-2913));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2913, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(list0);
      int int0 = 790;
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONObject0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      assertTrue(jSONArray0.isEmpty());
      
      jSONArray0.add((Object) "@type");
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = (-4949);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) bufferedInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd((-1857), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1857, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaObject(class0);
      jSONArray0.addAll((Collection<?>) jSONArray1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      jSONArray0.remove((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      jSONArray0.remove((Object) unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(2068);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      linkedHashSet0.add("");
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONObject jSONObject0 = new JSONObject(true);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@type";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "@type";
      stringArray0[3] = "@type";
      stringArray0[4] = "@type";
      stringArray0[5] = "@type";
      stringArray0[6] = "com.alibaba.fastjson.util.UTF8Decoder";
      stringArray0[7] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) jSONObject0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(74);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 74, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.subList(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
